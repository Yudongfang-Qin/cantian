

SQL> conn / as  sysdba

connected.

SQL> drop table if exists tbl_008 ;

Succeed.

SQL> CREATE TABLESPACE tp_08 DATAFILE 'tp_08_1' SIZE 32M autoextend on next 32M;

Succeed.

SQL> create table tbl_008
  2 (
  3 c_id int,
  4 CAOC clob,
  5 CAOB blob
  6 )
  7 partition by range(c_id)
  8 (partition part_1 values less than(10000) tablespace tp_08,
  9 partition part_2 values less than(100000) tablespace tp_08,
 10 partition part_3 values less than(maxvalue) tablespace tp_08);

Succeed.

SQL> insert into tbl_008 values (5,'ghjghjkghjk','0x1245653');

1 rows affected.

SQL> insert into tbl_008 values (500000,'ghjghjkghjk','0x1245653');

1 rows affected.

SQL> select owner,partition_name,tablespace_name from adm_segments where partition_name like '%CAO%' order by partition_name;

OWNER                                                            PARTITION_NAME                                                   TABLESPACE_NAME
 ---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
SYS                                                              LOB_TBL_008_CAOB_10                                              TP_08
SYS                                                              LOB_TBL_008_CAOB_20                                              TP_08
SYS                                                              LOB_TBL_008_CAOB_30                                              TP_08
SYS                                                              LOB_TBL_008_CAOC_10                                              TP_08
SYS                                                              LOB_TBL_008_CAOC_20                                              TP_08
SYS                                                              LOB_TBL_008_CAOC_30                                              TP_08

6 rows fetched.

SQL> drop table tbl_008 ;

Succeed.

SQL> drop tablespace tp_08 INCLUDING CONTENTS AND DATAFILES;

Succeed.

SQL> conn / as sysdba

connected.

SQL> drop table if exists t_par_tab_idx_0001;

Succeed.

SQL> CREATE TABLE t_par_tab_idx_0001
  2 (id int,
  3 c_int int,c_int2 int,c_int3 int,
  4 c_vchar varchar(100),c_vchar2 varchar(100),c_vchar3 varchar(100),
  5 c_char char(100),c_char2 char(100),c_char3 char(850),
  6 c_clob clob,c_blob blob,c_date date)
  7 PARTITION BY HASH (c_int)
  8 (
  9 partition t_par_tab_idx_0001_P_50 storage( initial 64K next 1M ),
 10 partition t_par_tab_idx_0001_P_100,
 11 partition t_par_tab_idx_0001_P_150
 12 );

Succeed.

SQL> alter table t_par_tab_idx_0001 add partition p_max storage( initial 64K next 1M );

Succeed.

SQL> alter table t_par_tab_idx_0001 add partition p_max *;

CT-00601, [1:52]Sql syntax error: expected end but * found
SQL> alter table t_par_tab_idx_0001 add partition p_max +;

CT-00601, [1:52]Sql syntax error: expected end but + found
SQL> drop table if exists t_par_tab_idx_0001;

Succeed.

SQL> drop table if exists t_order_base_000;

Succeed.

SQL> drop table if exists t_ct_sub_022;

Succeed.

SQL> CREATE TABLE t_order_base_000("ID" INT NOT NULL, "CHR_FIELD" VARCHAR(30), VALUECOL NUMBER);

Succeed.

SQL> insert into t_order_base_000 select rownum, decode(mod(rownum, 2), 0, NULL, rpad('CHR_', 10, chr(rownum + 64))), decode(mod(rownum, 3), 0, NULL, rownum * 10000) from dual connect by rownum < 6;

5 rows affected.

SQL> commit;

Succeed.

SQL> create table t_ct_sub_022 PARTITION BY HASH (VALUECOL) (partition p1,partition p2,partition p3) as select CHR_FIELD,VALUECOL from (select * from t_order_base_000 where CHR_FIELD like '%' or VALUECOL is null or VALUECOL is not null) order by 2 nulls first,1 nulls first;

Succeed.

SQL> SELECT TABLE_NAME,PARTITIONING_TYPE ,PARTITION_COUNT from USER_PART_TABLES where table_name='T_CT_SUB_022';

TABLE_NAME                                                       PARTITIONING_TYPE PARTITION_COUNT
---------------------------------------------------------------- ----------------- ---------------
T_CT_SUB_022                                                     HASH              3

1 rows fetched.

SQL> SELECT TABLE_NAME,PARTITION_NAME,TABLESPACE_NAME FROM all_TAB_PARTITIONS where table_name='T_CT_SUB_022' order by PARTITION_NAME;

TABLE_NAME                                                       PARTITION_NAME                                                   TABLESPACE_NAME
---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
T_CT_SUB_022                                                     P1                                                               SYSTEM
T_CT_SUB_022                                                     P2                                                               SYSTEM
T_CT_SUB_022                                                     P3                                                               SYSTEM

3 rows fetched.

SQL> select * from t_order_base_000;

ID           CHR_FIELD                      VALUECOL
------------ ------------------------------ ----------------------------------------
1            CHR_AAAAAA                     10000
2                                           20000
3            CHR_CCCCCC
4                                           40000
5            CHR_EEEEEE                     50000

5 rows fetched.

SQL> select * from t_ct_sub_022;

CHR_FIELD                      VALUECOL
------------------------------ ----------------------------------------
CHR_CCCCCC
CHR_AAAAAA                     10000
                               20000
                               40000
CHR_EEEEEE                     50000

5 rows fetched.

SQL> drop table  if exists t_ct_sub_027;

Succeed.

SQL> create table t_ct_sub_027 PARTITION BY list (id)
  2 (
  3 partition p1 values (1),
  4 partition p2 values (2),
  5 partition p3 values (3),
  6 partition p4 values (default)
  7 ) as select * from t_order_base_000;

Succeed.

SQL> select * from t_order_base_000;

ID           CHR_FIELD                      VALUECOL
------------ ------------------------------ ----------------------------------------
1            CHR_AAAAAA                     10000
2                                           20000
3            CHR_CCCCCC
4                                           40000
5            CHR_EEEEEE                     50000

5 rows fetched.

SQL> select * from t_ct_sub_027;

ID           CHR_FIELD                      VALUECOL
------------ ------------------------------ ----------------------------------------
1            CHR_AAAAAA                     10000
2                                           20000
3            CHR_CCCCCC
4                                           40000
5            CHR_EEEEEE                     50000

5 rows fetched.

SQL> SELECT TABLE_NAME,PARTITIONING_TYPE ,PARTITION_COUNT from USER_PART_TABLES where table_name='T_CT_SUB_027';

TABLE_NAME                                                       PARTITIONING_TYPE PARTITION_COUNT
---------------------------------------------------------------- ----------------- ---------------
T_CT_SUB_027                                                     LIST              4

1 rows fetched.

SQL> SELECT TABLE_NAME,PARTITION_NAME,TABLESPACE_NAME FROM all_TAB_PARTITIONS where table_name='T_CT_SUB_027' order by PARTITION_NAME;

TABLE_NAME                                                       PARTITION_NAME                                                   TABLESPACE_NAME
---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
T_CT_SUB_027                                                     P1                                                               SYSTEM
T_CT_SUB_027                                                     P2                                                               SYSTEM
T_CT_SUB_027                                                     P3                                                               SYSTEM
T_CT_SUB_027                                                     P4                                                               SYSTEM

4 rows fetched.

SQL> drop table  if exists t_ct_sub_028;

Succeed.

SQL> create table t_ct_sub_028 PARTITION BY range (id)
  2 (
  3 partition p1  VALUES LESS THAN  (10),
  4 partition p2  VALUES LESS THAN  (20),
  5 partition p3  VALUES LESS THAN  (30),
  6 partition p4  VALUES LESS THAN  (MAXVALUE)
  7 ) as select * from t_order_base_000;

Succeed.

SQL> select * from t_order_base_000;

ID           CHR_FIELD                      VALUECOL
------------ ------------------------------ ----------------------------------------
1            CHR_AAAAAA                     10000
2                                           20000
3            CHR_CCCCCC
4                                           40000
5            CHR_EEEEEE                     50000

5 rows fetched.

SQL> select * from t_ct_sub_028;

ID           CHR_FIELD                      VALUECOL
------------ ------------------------------ ----------------------------------------
1            CHR_AAAAAA                     10000
2                                           20000
3            CHR_CCCCCC
4                                           40000
5            CHR_EEEEEE                     50000

5 rows fetched.

SQL> SELECT TABLE_NAME,PARTITIONING_TYPE ,PARTITION_COUNT from USER_PART_TABLES where table_name='T_CT_SUB_028';

TABLE_NAME                                                       PARTITIONING_TYPE PARTITION_COUNT
---------------------------------------------------------------- ----------------- ---------------
T_CT_SUB_028                                                     RANGE             4

1 rows fetched.

SQL> SELECT TABLE_NAME,PARTITION_NAME,TABLESPACE_NAME FROM all_TAB_PARTITIONS where table_name='T_CT_SUB_028' order by PARTITION_NAME;

TABLE_NAME                                                       PARTITION_NAME                                                   TABLESPACE_NAME
---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
T_CT_SUB_028                                                     P1                                                               SYSTEM
T_CT_SUB_028                                                     P2                                                               SYSTEM
T_CT_SUB_028                                                     P3                                                               SYSTEM
T_CT_SUB_028                                                     P4                                                               SYSTEM

4 rows fetched.

SQL> drop table  if exists t_ct_sub_029;

Succeed.

SQL> create table t_ct_sub_029 PARTITION BY range (id) interval (10)
  2 (
  3 partition p1  VALUES LESS THAN  (10),
  4 partition p2  VALUES LESS THAN  (20),
  5 partition p3  VALUES LESS THAN  (30)
  6 ) as select * from t_order_base_000;

Succeed.

SQL> select * from t_order_base_000;

ID           CHR_FIELD                      VALUECOL
------------ ------------------------------ ----------------------------------------
1            CHR_AAAAAA                     10000
2                                           20000
3            CHR_CCCCCC
4                                           40000
5            CHR_EEEEEE                     50000

5 rows fetched.

SQL> select * from t_ct_sub_029;

ID           CHR_FIELD                      VALUECOL
------------ ------------------------------ ----------------------------------------
1            CHR_AAAAAA                     10000
2                                           20000
3            CHR_CCCCCC
4                                           40000
5            CHR_EEEEEE                     50000

5 rows fetched.

SQL> SELECT TABLE_NAME,PARTITIONING_TYPE ,PARTITION_COUNT from USER_PART_TABLES where table_name='T_CT_SUB_029';

TABLE_NAME                                                       PARTITIONING_TYPE PARTITION_COUNT
---------------------------------------------------------------- ----------------- ---------------
T_CT_SUB_029                                                     RANGE             3

1 rows fetched.

SQL> SELECT TABLE_NAME,PARTITION_NAME,TABLESPACE_NAME FROM all_TAB_PARTITIONS where table_name='T_CT_SUB_029' order by PARTITION_NAME;

TABLE_NAME                                                       PARTITION_NAME                                                   TABLESPACE_NAME
---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
T_CT_SUB_029                                                     P1                                                               SYSTEM
T_CT_SUB_029                                                     P2                                                               SYSTEM
T_CT_SUB_029                                                     P3                                                               SYSTEM

3 rows fetched.

SQL> drop table  if exists t_ct_sub_029;

Succeed.

SQL> drop table  if exists t_ct_sub_028;

Succeed.

SQL> drop table  if exists t_ct_sub_027;

Succeed.

SQL> drop table  if exists t_ct_sub_022;

Succeed.

SQL> drop table  if exists t_order_base_000;

Succeed.

SQL> create table test_part_t4_08(f1 int, f2 real, f3 number, f4 char(5), f5 varchar(5), f6 date, f7 timestamp)
  2  PARTITION BY RANGE(f1,f2,f2, f3, f4, f5, f6, f7)
  3  (
  4   PARTITION p1 values less than(10, 15.6,15.6, 28.5, 'abcd', 'abcd', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')),
  5   PARTITION p2 values less than(20, 16.6,16.6, 29.5, 'efgh', 'efgh', to_date('2018/01/25', 'YYYY/MM/DD'), to_timestamp('2018-01-24 17:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')),
  6   PARTITION p3 values less than(30, 17.6,17.6, 30.5, 'jkla', 'jkla', to_date('2018/01/26', 'YYYY/MM/DD'), to_timestamp('2018-01-24 18:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')),
  7   PARTITION p4 values less than(40, 18.6,18.6, 31.5, 'zxv', 'zxv',   to_date('2018/01/27', 'YYYY/MM/DD'), to_timestamp('2018-01-24 19:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')),
  8   PARTITION p5 values less than(MAXVALUE,MAXVALUE,MAXVALUE,MAXVALUE,MAXVALUE,MAXVALUE,MAXVALUE,MAXVALUE)
  9  );

CT-00601, [2:26]Sql syntax error: duplicate column name f2
SQL> drop table if exists test_part_t1;

Succeed.

SQL> create table test_part_t1(f1 int, f2 real, f3 number, f4 char(30), f5 varchar(30), f6 date, f7 timestamp)
  2 PARTITION BY RANGE(f1)
  3 (
  4  PARTITION p1 values less than(10),
  5  PARTITION p2 values less than(20),
  6  PARTITION p3 values less than(30),
  7  PARTITION p4 values less than(MAXVALUE)
  8 );

Succeed.

SQL> 
SQL> drop table if exists test_part_t2;

Succeed.

SQL> create table test_part_t2(f1 int, f2 real, f3 number, f4 char(30), f5 varchar(30), f6 date, f7 timestamp)
  2 PARTITION BY RANGE(f1)
  3 (
  4  PARTITION p1 values less than(10),
  5  PARTITION p2 values less than(20),
  6  PARTITION p1 values less than(30),
  7  PARTITION p4 values less than(MAXVALUE)
  8 );

CT-01107, There were duplicate partition or subpartition names.
SQL> 
SQL> drop table if exists test_part_t3;

Succeed.

SQL> create table test_part_t3(f1 int, f2 real, f3 number, f4 char(30), f5 varchar(30), f6 date, f7 timestamp)
  2 PARTITION BY RANGE(f1)
  3 (
  4  PARTITION p1 values less than(30),
  5  PARTITION p2 values less than(40),
  6  PARTITION p3 values less than(20),
  7  PARTITION p4 values less than(MAXVALUE)
  8 );

CT-00601, Sql syntax error: partition P3 boundary invalid
SQL> 
SQL> drop table if exists test_part_t4;

Succeed.

SQL> create table test_part_t4(f1 int, f2 real, f3 number, f4 char(30), f5 varchar(30), f6 date, f7 timestamp)
  2 PARTITION BY RANGE(f1,f2, f3, f4, f5, f6, f7)
  3 (
  4  PARTITION p1 values less than(10, 15.6, 28.5, 'abcd', 'abcd', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')),
  5  PARTITION p2 values less than(20, 16.6, 29.5, 'efgh', 'efgh', to_date('2018/01/25', 'YYYY/MM/DD'), to_timestamp('2018-01-24 17:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')),
  6  PARTITION p3 values less than(30, 17.6, 30.5, 'jkla', 'jkla', to_date('2018/01/26', 'YYYY/MM/DD'), to_timestamp('2018-01-24 18:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')),
  7  PARTITION p4 values less than(40, 18.6, 31.5, 'zxv', 'zxv',   to_date('2018/01/27', 'YYYY/MM/DD'), to_timestamp('2018-01-24 19:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')),
  8  PARTITION p5 values less than(MAXVALUE,MAXVALUE,MAXVALUE,MAXVALUE,MAXVALUE,MAXVALUE,MAXVALUE)
  9 );

Succeed.

SQL> 
SQL> drop table if exists test_part_t5;

Succeed.

SQL> create table test_part_t5(f1 int, f2 real, f3 number, f4 char(30), f5 varchar(30), f6 date, f7 timestamp)
  2 PARTITION BY RANGE(f1,f2, f3, f4, f5, f6, f7)
  3 (
  4  PARTITION p1 values less than(30, 17.6, 30.5, 'jkla', 'jkla', to_date('2018/01/26', 'YYYY/MM/DD'), to_timestamp('2018-01-24 18:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')),
  5  PARTITION p2 values less than(10, 15.6, 28.5, 'abcd', 'abcd', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')),
  6  PARTITION p3 values less than(20, 16.6, 29.5, 'efgh', 'efgh', to_date('2018/01/25', 'YYYY/MM/DD'), to_timestamp('2018-01-24 17:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')),
  7  PARTITION p4 values less than(40, 18.6, 31.5, 'zxv', 'zxv',   to_date('2018/01/27', 'YYYY/MM/DD'), to_timestamp('2018-01-24 19:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')),
  8  PARTITION p5 values less than(MAXVALUE,MAXVALUE,MAXVALUE,MAXVALUE,MAXVALUE,MAXVALUE,MAXVALUE)
  9 );

CT-00601, Sql syntax error: partition P2 boundary invalid
SQL> 
SQL> drop table if exists test_part_t6;

Succeed.

SQL> create table test_part_t6(f1 int, f2 real, f3 number, f4 char(30), f5 varchar(30), f6 date, f7 timestamp)
  2 partition by list(f1)
  3 (
  4 partition p1 values (1,2,3,4,5),
  5 partition p2 values (6,7,8,9,10),
  6 partition p3 values (11,12,13),
  7 partition p4 values (default)
  8 );

Succeed.

SQL> 
SQL> drop table if exists test_part_t7;

Succeed.

SQL> create table test_part_t7(f1 int, f2 real, f3 number, f4 char(30), f5 varchar(30), f6 date, f7 timestamp)
  2 partition by list(f1)
  3 (
  4 partition p1 values (1,2,3,4,5),
  5 partition p2 values (6,7,8,9,10),
  6 partition p3 values (11,12,13),
  7 partition p2 values (default)
  8 );

CT-01107, There were duplicate partition or subpartition names.
SQL> 
SQL> drop table if exists test_part_t8;

Succeed.

SQL> create table test_part_t8(f1 int, f2 real, f3 number, f4 char(30), f5 varchar(30), f6 date, f7 timestamp)
  2 partition by list(f1)
  3 (
  4 partition p1 values (1,2,3,4,5),
  5 partition p2 values (6,7,8,9,10),
  6 partition p3 values (11,12,8),
  7 partition p4 values (default)
  8 );

CT-00601, Sql syntax error: duplicate value in partition P3
SQL> 
SQL> drop table if exists test_part_t9;

Succeed.

SQL> create table test_part_t9(f1 int, f2 real, f3 number, f4 char(30), f5 varchar(30), f6 date, f7 timestamp)
  2 partition by list(f1,f2,f3,f4,f5,f6,f7)
  3 (
  4 partition p1 values ((10, 15.6, 28.5, 'abcd', 'abcd', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')),(40, 18.6, 31.5, 'zxv', 'zxv',   to_date('2018/01/27', 'YYYY/MM/DD'), to_timestamp('2018-01-24 19:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3'))),
  5 partition p2 values (default)
  6 );

Succeed.

SQL> 
SQL> drop table if exists test_part_t10;

Succeed.

SQL> create table test_part_t10(f1 int, f2 real, f3 number, f4 char(30), f5 varchar(30), f6 date, f7 timestamp)
  2 partition by list(f1,f2,f3,f4,f5,f6,f7)
  3 (
  4 partition p1 values ((10, 15.6, 28.5, 'abcd', 'abcd', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')),(40, 18.6, 31.5, 'zxv', 'zxv',   to_date('2018/01/27', 'YYYY/MM/DD'), to_timestamp('2018-01-24 19:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3'))),
  5 partition p2 values ((20, 16.6, 29.5, 'efgh', 'efgh', to_date('2018/01/25', 'YYYY/MM/DD'), to_timestamp('2018-01-24 17:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')),(40, 18.6, 31.5, 'zxv', 'zxv',   to_date('2018/01/27', 'YYYY/MM/DD'), to_timestamp('2018-01-24 19:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3'))),
  6 partition p3 values (default)
  7 );

CT-00601, Sql syntax error: duplicate value in partition P2
SQL> 
SQL> drop table if exists test_part_t11;

Succeed.

SQL> create table test_part_t11(f1 clob)
  2 partition by list(f1)
  3 (
  4 partition p1 values ('abc','123'),
  5 partition p2 values (default)
  6 );

CT-01104, The LOB column can not be used as the (sub)partition key.
SQL> 
SQL> drop table if exists test_part_t12;

Succeed.

SQL> create table test_part_t12(f1 varchar2(2))
  2 partition by list(f1)
  3 (
  4 partition p1 values ('abc','123'),
  5 partition p2 values (default)
  6 );

CT-00698, The size(3) of value can't larger than defined size(2) of varchar
SQL> 
SQL> drop table if exists test_part_t13;

Succeed.

SQL> create table test_part_t13(f1 varchar2(2),f2 varchar2(2))
  2 partition by list(f1,f2)
  3 (
  4 partition p1 values (('ab','123')),
  5 partition p2 values (default)
  6 );

CT-00698, The size(3) of value can't larger than defined size(2) of varchar
SQL> 
SQL> drop table if exists test_part_t14;

Succeed.

SQL> create table test_part_t14(f1 varchar2(2),f2 varchar2(2))
  2 partition by range(f1)
  3 (
  4 partition as1 values less than('abc'),
  5 );

CT-00698, The size(3) of value can't larger than defined size(2) of varchar
SQL> 
SQL> drop table if exists test_part_t15;

Succeed.

SQL> create table test_part_t15(f1 varchar2(2),f2 varchar2(2))
  2 partition by range(f1,f2)
  3 (
  4 partition as1 values less than('ab','123'),
  5 );

CT-00698, The size(3) of value can't larger than defined size(2) of varchar
SQL> 
SQL> create index idx_t9_1 on test_part_t9(f1,f2) parallel 4;

Succeed.

SQL> create index idx_t9_2 on test_part_t9(f2,f3) local parallel 4;

Succeed.

SQL> create index idx_t9_3 on test_part_t9(f3,f4) local
  2 (
  3 partition p1 tablespace sp1,
  4 partition p2 tablespace sp1
  5 );

CT-00780, The tablespace SP1 does not exist.
SQL> 
SQL> create index idx_t9_4 on test_part_t9(f3,f4)
  2 (
  3 partition p1 tablespace sp1,
  4 partition p2 tablespace sp1
  5 );

CT-00601, [3:1]Sql syntax error: unexpected text partition p1 tablespace sp1,
partition p2 tablespace sp1

SQL> 
SQL> create index idx_t9_5 on test_part_t9(f3,f4) local
  2 (
  3 partition p1,
  4 partition p1
  5 );

CT-01107, There were duplicate partition or subpartition names.
SQL> 
SQL> select * from dba_tab_partitions where table_name like 'TEST_PART_%' order by TABLE_OWNER, TABLE_NAME, PARTITION_NAME;

TABLE_OWNER                                                      TABLE_NAME                                                       COMPOSITE PARTITION_NAME                                                   SUBPARTITION_COUNT                       HIGH_VALUE                                                       HIGH_VALUE_LENGTH                        PARTITION_POSITION TABLESPACE_NAME                                                  INTERVAL PCT_FREE     PCT_USED                                 INI_TRANS    MAX_TRANS                                INITIAL_EXTENT                           NEXT_EXTENT                              MIN_EXTENT                               MAX_EXTENT                               MAX_SIZE                                 PCT_INCREASE                             FREELISTS                                FREELIST_GROUPS                          LOGGING COMPRESSION COMPRESS_FOR       NUM_ROWS     BLOCKS       EMPTY_BLOCKS AVG_SPACE                                CHAIN_CNT                                AVG_ROW_LEN  SAMPLE_SIZE  LAST_ANALYZED          BUFFER_POOL GLOBAL_STATS USER_STATS ROW_FORMAT NOLOGGING_INSERT

SYS                                                              TEST_PART_T1                                                     NO        P1                                                               0                                        10                                                                                                        1                  SYSTEM                                                           N        8                                                     2                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ASF        NO              
SYS                                                              TEST_PART_T1                                                     NO        P2                                                               0                                        20                                                                                                        2                  SYSTEM                                                           N        8                                                     2                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ASF        NO              
SYS                                                              TEST_PART_T1                                                     NO        P3                                                               0                                        30                                                                                                        3                  SYSTEM                                                           N        8                                                     2                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ASF        NO              
SYS                                                              TEST_PART_T1                                                     NO        P4                                                               0                                        MAXVALUE                                                                                                  4                  SYSTEM                                                           N        8                                                     2                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ASF        NO              
SYS                                                              TEST_PART_T4                                                     NO        P1                                                               0                                        10, 15.6, 28.5, 'abcd', 'abcd', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')                                          1                  SYSTEM                                                           N        8                                                     2                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ASF        NO              
SYS                                                              TEST_PART_T4                                                     NO        P2                                                               0                                        20, 16.6, 29.5, 'efgh', 'efgh', to_date('2018/01/25', 'YYYY/MM/DD'), to_timestamp('2018-01-24 17:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')                                          2                  SYSTEM                                                           N        8                                                     2                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ASF        NO              
SYS                                                              TEST_PART_T4                                                     NO        P3                                                               0                                        30, 17.6, 30.5, 'jkla', 'jkla', to_date('2018/01/26', 'YYYY/MM/DD'), to_timestamp('2018-01-24 18:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')                                          3                  SYSTEM                                                           N        8                                                     2                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ASF        NO              
SYS                                                              TEST_PART_T4                                                     NO        P4                                                               0                                        40, 18.6, 31.5, 'zxv', 'zxv',   to_date('2018/01/27', 'YYYY/MM/DD'), to_timestamp('2018-01-24 19:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')                                          4                  SYSTEM                                                           N        8                                                     2                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ASF        NO              
SYS                                                              TEST_PART_T4                                                     NO        P5                                                               0                                        MAXVALUE,MAXVALUE,MAXVALUE,MAXVALUE,MAXVALUE,MAXVALUE,MAXVALUE                                            5                  SYSTEM                                                           N        8                                                     2                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ASF        NO              
SYS                                                              TEST_PART_T6                                                     NO        P1                                                               0                                        1,2,3,4,5                                                                                                 1                  SYSTEM                                                           N        8                                                     2                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ASF        NO              
SYS                                                              TEST_PART_T6                                                     NO        P2                                                               0                                        6,7,8,9,10                                                                                                2                  SYSTEM                                                           N        8                                                     2                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ASF        NO              
SYS                                                              TEST_PART_T6                                                     NO        P3                                                               0                                        11,12,13                                                                                                  3                  SYSTEM                                                           N        8                                                     2                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ASF        NO              
SYS                                                              TEST_PART_T6                                                     NO        P4                                                               0                                        default
SYS                                                              TEST_PART_T9                                                     NO        P1                                                               0                                        (10, 15.6, 28.5, 'abcd', 'abcd', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')),(40, 18.6, 31.5, 'zxv', 'zxv',   to_date('2018/01/27', 'YYYY/MM/DD'), to_timestamp('2018-01-24 19:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3'))                                          1                  SYSTEM                                                           N        8                                                     2                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ASF        NO              
SYS                                                              TEST_PART_T9                                                     NO        P2                                                               0                                        default

15 rows fetched.

SQL> 
SQL> create user test_partition_user_001 identified by Root1234;

Succeed.

SQL> grant create session to test_partition_user_001;

Succeed.

SQL> drop table if exists test_partition_user_001.test_part_t1;

Succeed.

SQL> create table test_partition_user_001.test_part_t1(f1 int, f2 real, f3 number, f4 char(30), f5 varchar(30), f6 date, f7 timestamp)
  2 PARTITION BY RANGE(f1)
  3 (
  4  PARTITION p1 values less than(10),
  5  PARTITION p2 values less than(20),
  6  PARTITION p3 values less than(30),
  7  PARTITION p4 values less than(MAXVALUE)
  8 );

Succeed.

SQL> 
SQL> conn test_partition_user_001/Root1234@127.0.0.1:1611

connected.

SQL> select * from user_tab_partitions order by TABLE_NAME, PARTITION_NAME;

TABLE_NAME                                                       COMPOSITE PARTITION_NAME                                                   SUBPARTITION_COUNT                       HIGH_VALUE                                                       HIGH_VALUE_LENGTH                        PARTITION_POSITION TABLESPACE_NAME                                                  INTERVAL PCT_FREE     PCT_USED                                 INI_TRANS    MAX_TRANS                                INITIAL_EXTENT                           NEXT_EXTENT                              MIN_EXTENT                               MAX_EXTENT                               MAX_SIZE                                 PCT_INCREASE                             FREELISTS                                FREELIST_GROUPS                          LOGGING COMPRESSION COMPRESS_FOR       NUM_ROWS     BLOCKS       EMPTY_BLOCKS AVG_SPACE                                CHAIN_CNT                                AVG_ROW_LEN  SAMPLE_SIZE  LAST_ANALYZED          BUFFER_POOL GLOBAL_STATS USER_STATS ROW_FORMAT NOLOGGING_INSERT

TEST_PART_T1                                                     NO        P1                                                               0                                        10                                                               2                                        1                  USERS                                                            N        8                                                     2                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ASF        NO              
TEST_PART_T1                                                     NO        P2                                                               0                                        20                                                               2                                        2                  USERS                                                            N        8                                                     2                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ASF        NO              
TEST_PART_T1                                                     NO        P3                                                               0                                        30                                                               2                                        3                  USERS                                                            N        8                                                     2                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ASF        NO              
TEST_PART_T1                                                     NO        P4                                                               0                                        MAXVALUE                                                         8                                        4                  USERS                                                            N        8                                                     2                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ASF        NO              

4 rows fetched.

SQL> 
SQL> conn sys/Huawei@123@127.0.0.1:1611

connected.

SQL> drop table if exists test_partition_user_001.test_part_t1;

Succeed.

SQL> drop user test_partition_user_001 cascade;

Succeed.

SQL> 
SQL> create index idx_t1_1 on test_part_t1(f2,f3);

Succeed.

SQL> create index idx_t1_2 on test_part_t1(f4,f5) local;

Succeed.

SQL> insert into test_part_t1 values(5, 15, 28, 'abcd', 'abcd', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3'));

1 rows affected.

SQL> insert into test_part_t1 values(6, 16, 29, '16', '29', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3'));

1 rows affected.

SQL> insert into test_part_t1 values(16, 26, 39, '26', '39', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3'));

1 rows affected.

SQL> insert into test_part_t1 values(26, 36, 49, '36', '49', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3'));

1 rows affected.

SQL> insert into test_part_t1 values(36, 46, 59, '46', '59', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3'));

1 rows affected.

SQL> insert into test_part_t1 values(46, 56, 69, '56', '69', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3'));

1 rows affected.

SQL> update test_part_t1 set f1 = 15 where f1=46;

1 rows affected.

SQL> update test_part_t1 set f1 = 56 where f1=46;

0 rows affected.

SQL> delete from test_part_t1 where f1=56;

0 rows affected.

SQL> select * from test_part_t1 order by f1,f2,f3,f4,f5,f6,f7;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------
5            15                   28                                       abcd                           abcd                           2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
6            16                   29                                       16                             29                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
15           56                   69                                       56                             69                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
16           26                   39                                       26                             39                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
26           36                   49                                       36                             49                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
36           46                   59                                       46                             59                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      

6 rows fetched.

SQL> select * from test_part_t1 where f1 = 16 order by f1,f2,f3,f4,f5,f6,f7;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------
16           26                   39                                       26                             39                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      

1 rows fetched.

SQL> select * from test_part_t1 where f1 > 16 order by f1,f2,f3,f4,f5,f6,f7;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------
26           36                   49                                       36                             49                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
36           46                   59                                       46                             59                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      

2 rows fetched.

SQL> select * from test_part_t1 where f1 >= 16 order by f1,f2,f3,f4,f5,f6,f7;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------
16           26                   39                                       26                             39                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
26           36                   49                                       36                             49                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
36           46                   59                                       46                             59                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      

3 rows fetched.

SQL> select * from test_part_t1 where f1 is null order by f1,f2,f3,f4,f5,f6,f7;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------

0 rows fetched.

SQL> select * from test_part_t1 where f4='abcd' and f5='abcd' order by f1,f2,f3,f4,f5,f6,f7;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------
5            15                   28                                       abcd                           abcd                           2018-01-24 00:00:00    2018-01-24 16:00:00.000000      

1 rows fetched.

SQL> select * from test_part_t1 where f4='16' and f5='29' and f2=16 and f3=29 order by f1,f2,f3,f4,f5,f6,f7;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------
6            16                   29                                       16                             29                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      

1 rows fetched.

SQL> select * from test_part_t1 where f4='16' and f5='29' and f2=16 and f3=29 and f1 <10 order by f1,f2,f3,f4,f5,f6,f7;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------
6            16                   29                                       16                             29                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      

1 rows fetched.

SQL> select * from test_part_t1 where f4='16' and f5='29' and f2=16 and f3=29 and f1 =6 order by f1,f2,f3,f4,f5,f6,f7;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------
6            16                   29                                       16                             29                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      

1 rows fetched.

SQL> select * from test_part_t1 where f4='16' and f5='29' and f2=16 and f3=29 and (f1 =6 or f1=26) order by f1,f2,f3,f4,f5,f6,f7;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------
6            16                   29                                       16                             29                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      

1 rows fetched.

SQL> select * from test_part_t1 where f4 >='16' and f5 >='29' and (f2=16 or f2=36) and (f3=29 or f3 = 49) and (f1 =6 or f1=26) order by f1,f2,f3,f4,f5,f6,f7;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------
6            16                   29                                       16                             29                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
26           36                   49                                       36                             49                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      

2 rows fetched.

SQL> 
SQL> create index idx_t6_1 on test_part_t6(f2,f3);

Succeed.

SQL> create index idx_t6_2 on test_part_t6(f4,f5) local;

Succeed.

SQL> insert into test_part_t6 values(1, 15, 28, 'abcd', 'abcd', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3'));

1 rows affected.

SQL> insert into test_part_t6 values(2, 16, 29, '16', '29', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3'));

1 rows affected.

SQL> insert into test_part_t6 values(7, 26, 39, '26', '39', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3'));

1 rows affected.

SQL> insert into test_part_t6 values(8, 36, 49, '36', '49', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3'));

1 rows affected.

SQL> insert into test_part_t6 values(12, 46, 59, '46', '59', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3'));

1 rows affected.

SQL> insert into test_part_t6 values(13, 56, 69, '56', '69', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3'));

1 rows affected.

SQL> update test_part_t6 set f1 = 15 where f1=8;

1 rows affected.

SQL> update test_part_t6 set f1 = 9 where f1=8;

0 rows affected.

SQL> delete from test_part_t6 where f1=9;

0 rows affected.

SQL> select * from test_part_t6 order by f1,f2,f3,f4,f5,f6,f7;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------
1            15                   28                                       abcd                           abcd                           2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
2            16                   29                                       16                             29                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
7            26                   39                                       26                             39                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
12           46                   59                                       46                             59                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
13           56                   69                                       56                             69                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
15           36                   49                                       36                             49                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      

6 rows fetched.

SQL> select * from test_part_t6 where f1 = 11 order by f1,f2,f3,f4,f5,f6,f7;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------

0 rows fetched.

SQL> select * from test_part_t6 where f1 > 6 order by f1,f2,f3,f4,f5,f6,f7;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------
7            26                   39                                       26                             39                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
12           46                   59                                       46                             59                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
13           56                   69                                       56                             69                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
15           36                   49                                       36                             49                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      

4 rows fetched.

SQL> select * from test_part_t6 where f1 >= 6 order by f1,f2,f3,f4,f5,f6,f7;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------
7            26                   39                                       26                             39                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
12           46                   59                                       46                             59                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
13           56                   69                                       56                             69                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
15           36                   49                                       36                             49                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      

4 rows fetched.

SQL> select * from test_part_t6 where f4='abcd' and f5='abcd' order by f1,f2,f3,f4,f5,f6,f7;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------
1            15                   28                                       abcd                           abcd                           2018-01-24 00:00:00    2018-01-24 16:00:00.000000      

1 rows fetched.

SQL> select * from test_part_t6 where f4='16' and f5='29' and f2=16 and f3=29 order by f1,f2,f3,f4,f5,f6,f7;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------
2            16                   29                                       16                             29                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      

1 rows fetched.

SQL> select * from test_part_t6 where f4='16' and f5='29' and f2=16 and f3=29 and f1 <10 order by f1,f2,f3,f4,f5,f6,f7;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------
2            16                   29                                       16                             29                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      

1 rows fetched.

SQL> explain plan for select * from test_part_t6 where f4='16' and f5='29' and f2=16 and f3=29 and f1 <10;

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------
| Id  | Description                                      | Owner | Name         | Rows | Cost | Bytes | Remark |
----------------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                                 |       |              |      |      |       |        |
| 1   |   TABLE ACCESS BY INDEX ROWID Filter:[0,2),[3,4) | SYS   | TEST_PART_T6 |      |      |       |        |
| 2   |     INDEX RANGE SCAN                             | SYS   | IDX_T6_2     |      |      |       |        |
----------------------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: F3 = 29 AND F1 < 10 AND F2 = 16                  
   2 - access: F5 = '29' AND F4 = '16'                          

11 rows fetched.

SQL> select * from test_part_t6 where f4='16' and f5='29' and f2=16 and f3=29 and f1 =6 order by f1,f2,f3,f4,f5,f6,f7;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------

0 rows fetched.

SQL> explain plan for select * from test_part_t6 where f4='16' and f5='29' and f2=16 and f3=29 and f1 =6;

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
----------------------------------------------------------------------------------------------------------
| Id  | Description                                | Owner | Name         | Rows | Cost | Bytes | Remark |
----------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                           |       |              |      |      |       |        |
| 1   |   TABLE ACCESS BY INDEX ROWID Filter:[1,2) | SYS   | TEST_PART_T6 |      |      |       |        |
| 2   |     INDEX RANGE SCAN                       | SYS   | IDX_T6_2     |      |      |       |        |
----------------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: F1 = 6 AND F3 = 29 AND F2 = 16                   
   2 - access: F5 = '29' AND F4 = '16'                          

11 rows fetched.

SQL> select * from test_part_t6 where f4='16' and f5='29' and f2=16 and f3=29 and (f1 =6 or f1=5) order by f1,f2,f3,f4,f5,f6,f7;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------

0 rows fetched.

SQL> select * from test_part_t6 where f4 >='16' and f5 >='29' and (f2=16 or f2=36) and (f3=29 or f3 = 49) and (f1 =6 or f1=3) order by f1,f2,f3,f4,f5,f6,f7;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------

0 rows fetched.

SQL> 
SQL> drop table if exists test_part_t12;

Succeed.

SQL> create table test_part_t12(f1 int, f2 int, f3 int, f4 int, f5 int)
  2 PARTITION BY RANGE(f1,f2,f3)
  3 (
  4  PARTITION p1 values less than(10,20,30),
  5  PARTITION p3 values less than(30,40,50),
  6  PARTITION p4 values less than(MAXVALUE,MAXVALUE,MAXVALUE)
  7 );

Succeed.

SQL> create index idx_t12_1 on test_part_t12(f2,f3);

Succeed.

SQL> create index idx_t12_2 on test_part_t12(f4,f5) local;

Succeed.

SQL> insert into test_part_t12 values(6,15,25,10,20);

1 rows affected.

SQL> insert into test_part_t12 values(16,21,25,20,30);

1 rows affected.

SQL> insert into test_part_t12 values(35,48,40,40,60);

1 rows affected.

SQL> insert into test_part_t12 values(20,15,25,80,40);

1 rows affected.

SQL> select * from test_part_t12 where f1=16 and f2=21 and f3=25 order by f1,f2,f3,f4,f5;

F1           F2           F3           F4           F5          
------------ ------------ ------------ ------------ ------------
16           21           25           20           30          

1 rows fetched.

SQL> select * from test_part_t12 where f1>20 and f2>30 and f3>40 order by f1,f2,f3,f4,f5;

F1           F2           F3           F4           F5          
------------ ------------ ------------ ------------ ------------

0 rows fetched.

SQL> select * from test_part_t12 where f1=33 and f2=45 and f3=25 and f4=40 and f5=60 order by f1,f2,f3,f4,f5;

F1           F2           F3           F4           F5          
------------ ------------ ------------ ------------ ------------

0 rows fetched.

SQL> explain plan for select * from test_part_t12 where f1=33 and f2=45 and f3=25 and f4=40 and f5=60;

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------
| Id  | Description                                | Owner | Name          | Rows | Cost | Bytes | Remark |
-----------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                           |       |               |      |      |       |        |
| 1   |   TABLE ACCESS BY INDEX ROWID Filter:[2,3) | SYS   | TEST_PART_T12 |      |      |       |        |
| 2   |     INDEX RANGE SCAN                       | SYS   | IDX_T12_2     |      |      |       |        |
-----------------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: F3 = 25 AND F1 = 33 AND F2 = 45                  
   2 - access: F5 = 60 AND F4 = 40                              

11 rows fetched.

SQL> drop table if exists test_part_t13;

Succeed.

SQL> create table test_part_t13(f1 int,f2 int, f3 int, f4 int)
  2 partition by list(f1,f2)
  3 (
  4 partition p1 values ((1,2),(2,3),(3,4),(4,5)),
  5 partition p2 values ((6,7),(7,8),(9,10)),
  6 partition p3 values (default)
  7 );

Succeed.

SQL> insert into test_part_t13 values(1,2,25,10);

1 rows affected.

SQL> insert into test_part_t13 values(7,8,21,25);

1 rows affected.

SQL> insert into test_part_t13 values(9,10,48,40);

1 rows affected.

SQL> insert into test_part_t13 values(20,15,25,80);

1 rows affected.

SQL> select * from test_part_t13 where f1=1 and f2=2 order by f1,f2,f3,f4;

F1           F2           F3           F4          
------------ ------------ ------------ ------------
1            2            25           10          

1 rows fetched.

SQL> select * from test_part_t13 where f1>7 and f2>10 order by f1,f2,f3,f4;

F1           F2           F3           F4          
------------ ------------ ------------ ------------
20           15           25           80          

1 rows fetched.

SQL> select * from test_part_t13 where f1=7 and f2=10 order by f1,f2,f3,f4;

F1           F2           F3           F4          
------------ ------------ ------------ ------------

0 rows fetched.

SQL> alter table test_part_t13 drop partition p1;

Succeed.

SQL> alter table test_part_t13 drop partition p2;

Succeed.

SQL> alter table test_part_t13 drop partition p3;

CT-01109, Cannot drop the only partition of a partitioned table, or the only subpartition of a parent partition
SQL> 
SQL> create table test_part_t14(f1 int,f2 int)
  2 partition by list(f1)
  3 (
  4 partition p1 values (1,2,3,4,5),
  5 partition p2 values (6,7,8,9,10),
  6 partition p3 values (11,12,13),
  7 partition p4 values (default)
  8 );

Succeed.

SQL> insert into test_part_t14 values(1,1);

1 rows affected.

SQL> insert into test_part_t14 values(2,2);

1 rows affected.

SQL> select * from test_part_t14 where f1 = 1 or f1 = 2 order by f1,f2;

F1           F2          
------------ ------------
1            1           
2            2           

2 rows fetched.

SQL> explain plan for select * from test_part_t14 where f1 >= 1;

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
-------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name          | Rows | Cost | Bytes | Remark |
-------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |               |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[0,4) | SYS   | TEST_PART_T14 |      |      |       |        |
-------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: F1 >= 1                                          

9 rows fetched.

SQL> explain plan for select * from test_part_t14 where f1 >= 1 and f1 <1;

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
-----------------------------------------------------------------------------------------------
| Id  | Description                    | Owner | Name          | Rows | Cost | Bytes | Remark |
-----------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT               |       |               |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:N/A | SYS   | TEST_PART_T14 |      |      |       |        |
-----------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: F1 >= 1 AND F1 < 1                               

9 rows fetched.

SQL> 
SQL> alter table test_part_t14 drop partition p4;

Succeed.

SQL> alter table test_part_t14 add partition p5 values (default);

Succeed.

SQL> 
SQL> create table test_part_t15(f1 int, f2 int, f3 int)
  2 PARTITION BY RANGE(f1,f2)
  3 (
  4  PARTITION p1 values less than(10,20),
  5  PARTITION p3 values less than(30,40),
  6  PARTITION p4 values less than(MAXVALUE,MAXVALUE)
  7 );

Succeed.

SQL> insert into test_part_t15 values(5,5,5);

1 rows affected.

SQL> insert into test_part_t15 values(15,15,15);

1 rows affected.

SQL> insert into test_part_t15 values(25,25,25);

1 rows affected.

SQL> select * from test_part_t15 where f1 =15 or f1 = 35 order by f1,f2,f3;

F1           F2           F3          
------------ ------------ ------------
15           15           15          

1 rows fetched.

SQL> 
SQL> drop table if exists test_part_t16;

Succeed.

SQL> create table test_part_t16(id1 int, id2 int, id3 clob)
  2 partition by range(id1, id2)
  3 (
  4 partition p1 values less than(5, 50),
  5 partition p2 values less than(10, 100),
  6 partition p3 values less than(20, 200)
  7 );

Succeed.

SQL> 
SQL> create index ix_add_part_01 on test_part_t16(id1) local;

Succeed.

SQL> create index ix_add_part_02 on test_part_t16(id2) local;

Succeed.

SQL> 
SQL> insert into test_part_t16 values(6, 200, 'asdfasfadsfasdfadsfadsf');

1 rows affected.

SQL> 
SQL> select * from test_part_t16 order by id1;

ID1          ID2          ID3                                                             
------------ ------------ ----------------------------------------------------------------
6            200          asdfasfadsfasdfadsfadsf                                         

1 rows fetched.

SQL> 
SQL> alter table test_part_t16 drop partition p2;

Succeed.

SQL> alter table test_part_t16 add partition p4 values less than(30, 200);

Succeed.

SQL> alter table test_part_t16 add partition p5 values less than(30, 300);

Succeed.

SQL> 
SQL> insert into test_part_t16 values (29, 199, 'asdfasfadsfasdfadsfadsf');

1 rows affected.

SQL> insert into test_part_t16 values (30, 299, 'asdfasfadsfasdfadsfadsf');

1 rows affected.

SQL> 
SQL> select * from test_part_t16 order by id1;

ID1          ID2          ID3                                                             
------------ ------------ ----------------------------------------------------------------
29           199          asdfasfadsfasdfadsfadsf                                         
30           299          asdfasfadsfasdfadsfadsf                                         

2 rows fetched.

SQL> 
SQL> alter table test_part_t16 truncate partition p4 drop storage;

Succeed.

SQL> 
SQL> select * from test_part_t16 order by id1;

ID1          ID2          ID3                                                             
------------ ------------ ----------------------------------------------------------------
30           299          asdfasfadsfasdfadsfadsf                                         

1 rows fetched.

SQL> 
SQL> alter table test_part_t16 drop partition p4;

Succeed.

SQL> 
SQL> insert into test_part_t16 values (29, 199, 'asdfasfadsfasdfadsfadsf');

1 rows affected.

SQL> 
SQL> select * from test_part_t16 order by id1;

ID1          ID2          ID3                                                             
------------ ------------ ----------------------------------------------------------------
29           199          asdfasfadsfasdfadsfadsf                                         
30           299          asdfasfadsfasdfadsfadsf                                         

2 rows fetched.

SQL> 
SQL> drop table if exists test_part_t17;

Succeed.

SQL> create table test_part_t17(id int)
  2 partition by range(id)
  3 (
  4 partition p1 values less than(5),
  5 partition p2 values less than(10),
  6 partition p3 values less than(20)
  7 );

Succeed.

SQL> 
SQL> create index idx_test_part_t17 on test_part_t17 (id) local
  2 (
  3 partition p1,
  4 partition p2,
  5 partition p4
  6 );

Succeed.

SQL> 
SQL> alter table test_part_t17 add partition p4 values less than (30);

Succeed.

SQL> 
SQL> drop table if exists STORAGE_PARTRANGE_TBL_001;

Succeed.

SQL> CREATE TABLE STORAGE_PARTRANGE_TBL_001(C_ID INT,C_D_ID INT NOT NULL,C_W_ID INT NOT NULL,C_FIRST VARCHAR(64) NOT NULL,C_MIDDLE CHAR(2),C_LAST VARCHAR(64) NOT NULL,C_STREET_1 VARCHAR(20) NOT NULL,C_STREET_2 VARCHAR(20),C_CITY VARCHAR(20) NOT NULL,C_STATE CHAR(2) NOT NULL,C_ZIP CHAR(9) NOT NULL,C_PHONE CHAR(16) NOT NULL,C_SINCE TIMESTAMP,C_CREDIT CHAR(2) NOT NULL,C_CREDIT_LIM NUMERIC(12,2),C_DISCOUNT NUMERIC(4,4),C_BALANCE NUMERIC(12,2),C_YTD_PAYMENT REAL NOT NULL,C_PAYMENT_CNT NUMBER NOT NULL,C_DELIVERY_CNT BOOL NOT NULL,C_END DATE NOT NULL,C_VCHAR VARCHAR(1000),C_DATA varchar(2000),C_TEXT varchar(2000)) PARTITION BY RANGE(C_ID,C_FIRST,C_LAST) (PARTITION PART_1 VALUES LESS THAN (201,'B','B'),PARTITION PART_2 VALUES LESS THAN (401,'C','C'),PARTITION PART_3 VALUES LESS THAN (601,'D','D'),PARTITION PART_4 VALUES LESS THAN (801,'E','E'),PARTITION PART_5 VALUES LESS THAN (1001,'F','F'),PARTITION PART_6 VALUES LESS THAN (5001,'G','G'),PARTITION PART_7 VALUES LESS THAN (6001,'H','H'),PARTITION PART_8 VALUES LESS THAN (7001,'I',$),PARTITION PART_9 VALUES LESS THAN (8001,'J','J'),PARTITION PART_10 VALUES LESS THAN (MAXVALUE,MAXVALUE,MAXVALUE));

CT-00601, [1:1035]Sql syntax error: param only allowed in dml or anonymous block or call
SQL> 
SQL> 
SQL> drop table if exists test_part_t1;

Succeed.

SQL> drop table if exists test_part_t2;

Succeed.

SQL> drop table if exists test_part_t3;

Succeed.

SQL> drop table if exists test_part_t4;

Succeed.

SQL> drop table if exists test_part_t5;

Succeed.

SQL> drop table if exists test_part_t6;

Succeed.

SQL> drop table if exists test_part_t7;

Succeed.

SQL> drop table if exists test_part_t8;

Succeed.

SQL> drop table if exists test_part_t9;

Succeed.

SQL> drop table if exists test_part_t10;

Succeed.

SQL> drop table if exists test_part_t11;

Succeed.

SQL> drop table if exists test_part_t12;

Succeed.

SQL> drop table if exists test_part_t13;

Succeed.

SQL> drop table if exists test_part_t14;

Succeed.

SQL> drop table if exists test_part_t15;

Succeed.

SQL> drop table if exists test_part_t16;

Succeed.

SQL> drop table if exists test_part_t17;

Succeed.

SQL> 
SQL> --DTS2018020706510
SQL> create global temporary table nebula_ddl_range_001(c_id int,c_d_id int NOT NULL,c_w_id int NOT NULL,c_first varchar(50) NOT NULL,c_middle char(2),c_last varchar(16) NOT NULL,c_street_1 varchar(20) NOT NULL,c_street_2 varchar(20),c_city varchar(20) NOT NULL,c_state char(2) NOT NULL,c_zip char(9) NOT NULL,c_phone char(16) NOT NULL,c_since timestamp,c_credit char(2) NOT NULL,c_credit_lim numeric(12,2),c_discount numeric(4,4),c_balance numeric(12,2),c_ytd_payment real NOT NULL,c_payment_cnt number NOT NULL,c_delivery_cnt bool NOT NULL,c_end date NOT NULL,c_data varchar(1000),c_clob varchar(1000),c_text varchar(1000)) partition by range(c_id,c_first) (partition PART_1 values less than (101,'is101'),partition PART_2 values less than (201,'is201'),partition PART_3 values less than (301,'is301'),partition PART_4 values less than (401,'is401'),partition PART_5 values less than (501,'is501'),partition PART_6 values less than (601,'is601'),partition PART_7 values less than (701,'is701'),partition PART_8 values less than (801,'is801'),partition PART_9 values less than (901,'is901'),partition PART_10 values less than (maxvalue,maxvalue));

CT-00130, Operation create partition is not supported on global temporary table
SQL> 
SQL> --DTS2018021102005
SQL> drop table if exists STORAGE_PARTRANGE_TBL_001;

Succeed.

SQL> CREATE TABLE STORAGE_PARTRANGE_TBL_001(C_ID INT,C_D_ID INT NOT NULL,C_W_ID INT NOT NULL,C_FIRST VARCHAR(64) NOT NULL,C_MIDDLE CHAR(2),C_LAST VARCHAR(64) NOT NULL,C_STREET_1 VARCHAR(20) NOT NULL,C_STREET_2 VARCHAR(20),C_CITY VARCHAR(20) NOT NULL,C_STATE CHAR(2) NOT NULL,C_ZIP CHAR(9) NOT NULL,C_PHONE CHAR(16) NOT NULL,C_SINCE TIMESTAMP,C_CREDIT CHAR(2) NOT NULL,C_CREDIT_LIM NUMERIC(12,2),C_DISCOUNT NUMERIC(4,4),C_BALANCE NUMERIC(12,2),C_YTD_PAYMENT REAL NOT NULL,C_PAYMENT_CNT NUMBER NOT NULL,C_DELIVERY_CNT BOOL NOT NULL,C_END DATE NOT NULL,C_VCHAR VARCHAR(1000),C_DATA varchar(2000),C_TEXT varchar(2000)) PARTITION BY RANGE(C_ID,C_FIRST,C_LAST) (PARTITION PART_1 VALUES LESS THAN (201,'B','B'),PARTITION PART_2 VALUES LESS THAN (401,'C','C'),PARTITION PART_3 VALUES LESS THAN (601,'D','D'),PARTITION PART_4 VALUES LESS THAN (801,'E','E'),PARTITION PART_5 VALUES LESS THAN (1001,'F','F'),PARTITION PART_6 VALUES LESS THAN (5001,'G','G'),PARTITION PART_7 VALUES LESS THAN (6001,'H','H'),PARTITION PART_8 VALUES LESS THAN (7001,'I','I'),PARTITION PART_9 VALUES LESS THAN (8001,'J','J'),PARTITION PART_10 VALUES LESS THAN (MAXVALUE,MAXVALUE,MAXVALUE));

Succeed.

SQL> ALTER TABLE STORAGE_PARTRANGE_TBL_001 ADD PARTITION PART_11 VALUES LESS THAN (9001,'K','K','K');

CT-00601, [1:91]Sql syntax error: value count must equal to partition keys
SQL> 
SQL> create table test_part_t17(f1 int,f2 int)
  2 partition by list(f1,f2)
  3 (
  4 partition p1 values ((1),(2)),
  5 partition p2 values (default)
  6 );

CT-00601, [4:24]Sql syntax error: value count must equal to partition keys
SQL> 
SQL> create table test_part_t18(f1 int,f2 int)
  2 partition by list(f1)
  3 (
  4 partition p1 values ((1,2),(2,3)),
  5 partition p2 values (default)
  6 );

CT-00601, [4:24]Sql syntax error: the word "," is not correct
SQL> 
SQL> create table test_part_t19(f1 int, f2 int, f3 int)
  2 PARTITION BY RANGE(f1,f2)
  3 (
  4  PARTITION p1 values less than(10),
  5  PARTITION p2 values less than(20),
  6  PARTITION p3 values less than(30),
  7  PARTITION p4 values less than(MAXVALUE)
  8 );

CT-00601, [4:33]Sql syntax error: value count must equal to partition keys
SQL> 
SQL> create table test_part_t20(f1 int, f2 int, f3 int)
  2 PARTITION BY RANGE(f1)
  3 (
  4  PARTITION p1 values less than(10),
  5  PARTITION p2 values less than(20),
  6  PARTITION p3 values less than(30),
  7  PARTITION p4 values less than(20,MAXVALUE)
  8 );

CT-00601, [7:33]Sql syntax error: value count must equal to partition keys
SQL> 
SQL> --DTS2018030104383
SQL> drop table if exists aa;

Succeed.

SQL> create table aa(c_id int,c_d_id int NOT NULL) 
  2 partition by range(c_id) 
  3 (
  4 partition PART_1 values less than (5002),
  5 partition PART_2 values less than (10002),
  6 partition PART_3 values less than (20002),
  7 partition PART_4 values less than (30002),
  8 partition 1233456 values less than (40002),
  9 partition PART_8 values less than (50002),
 10 partition PART_13  values less than (maxvalue)
 11 );

CT-01100, [8:11]The (sub)partition name violated the naming conventions.
SQL> 
SQL> create table aa(c_id int,c_d_id int NOT NULL) 
  2 partition by range(c_id) 
  3 (
  4 partition PART_1 values less than (5002),
  5 partition PART_2 values less than (10002),
  6 partition PART_3 values less than (20002),
  7 partition PART_4 values less than (30002),
  8 partition PART_5 values less than (40002),
  9 partition PART_8 values less than (50002),
 10 partition PART_13  values less than (60002)
 11 );

Succeed.

SQL> alter table aa add partition 1233456 values less than (maxvalue);

CT-01100, [1:30]The (sub)partition name violated the naming conventions.
SQL> alter table aa truncate partition 1233456;

CT-00601, [1:35]Sql syntax error: invalid variant/object name was found
SQL> alter table aa drop partition 1233456;

CT-00601, [1:31]Sql syntax error: invalid variant/object name was found
SQL> drop table if exists aa;

Succeed.

SQL> drop table if exists STORAGE_PARTRANGE_TBL_001;

Succeed.

SQL> drop table if exists test_part_t17;

Succeed.

SQL> drop table if exists test_part_t18;

Succeed.

SQL> drop table if exists test_part_t19;

Succeed.

SQL> drop table if exists test_part_t20;

Succeed.

SQL> 
SQL> --test appendonly on partition table
SQL> drop table if exists apd_part_table_00422311;

Succeed.

SQL> create table apd_part_table_00422311(a int, b char(2000), c char(2000), d char(2000), e varchar(1800)) appendonly on
  2 partition by range (a)
  3 (
  4 PARTITION PT1 VALUES LESS THAN ( 1000 ),
  5 PARTITION PT2 VALUES LESS THAN ( 2000 ),
  6 PARTITION PT3 VALUES LESS THAN ( 3000 ),
  7 PARTITION PT4 VALUES LESS THAN ( MAXVALUE )
  8 );

Succeed.

SQL> insert into apd_part_table_00422311 values(100, 'abcdefghijklmnopqrstuvwxyz1234567890,.[]','abcdefghijklmnopqrstuvwxyz1234567890,.[]','abcdefghijklmnopqrstuvwxyz1234567890,.[]','abcdefghijklmnopqrstuvwxyz1234567890,.[]');

1 rows affected.

SQL> insert into apd_part_table_00422311 values(2100, 'abcdefghijklmnopqrstuvwxyz1234567890,.[]','abcdefghijklmnopqrstuvwxyz1234567890,.[]','abcdefghijklmnopqrstuvwxyz1234567890,.[]','abcdefghijklmnopqrstuvwxyz1234567890,.[]');

1 rows affected.

SQL> insert into apd_part_table_00422311 values(3100, 'abcdefghijklmnopqrstuvwxyz1234567890,.[]','abcdefghijklmnopqrstuvwxyz1234567890,.[]','abcdefghijklmnopqrstuvwxyz1234567890,.[]','abcdefghijklmnopqrstuvwxyz1234567890,.[]');

1 rows affected.

SQL> insert into apd_part_table_00422311 values(4100, 'abcdefghijklmnopqrstuvwxyz1234567890,.[]','abcdefghijklmnopqrstuvwxyz1234567890,.[]','abcdefghijklmnopqrstuvwxyz1234567890,.[]','abcdefghijklmnopqrstuvwxyz1234567890,.[]');

1 rows affected.

SQL> truncate table apd_part_table_00422311 drop storage;

Succeed.

SQL> drop table apd_part_table_00422311;

Succeed.

SQL> --DTS2018040208851
SQL> drop table if exists strg_part_list_tbl_000;

Succeed.

SQL> create table strg_part_list_tbl_000(c_id int,c_d_id int NOT NULL,c_w_id int NOT NULL,c_first varchar(32) NOT NULL,c_middle char(2),c_last varchar(32) NOT NULL,c_street_1 varchar(40) NOT NULL,c_street_2 varchar(40),c_city varchar(40) NOT NULL,c_state char(2) NOT NULL,c_zip char(9) NOT NULL,c_phone char(32) NOT NULL,c_since timestamp,c_credit char(2) NOT NULL,c_credit_lim numeric(12,2),c_discount numeric(4,4),c_balance numeric(12,2),c_ytd_payment real NOT NULL,c_payment_cnt number NOT NULL,c_delivery_cnt bool NOT NULL,c_end date NOT NULL,c_vchar varchar(1000),c_data clob,c_text blob,primary key (c_id,c_d_id,c_w_id));

Succeed.

SQL> insert into strg_part_list_tbl_000  values(1,1,1,'is'||1||'cmvls'||1,'OE','BAR'||1||'BAR'||1,'bkili'||1||'fcxcle'||1,'pmbwo'||1||'vhvpaj'||1,'dyf'||1||'rya'||1,'uq',4801||1,940||1||215||1,to_char(sysdate,'yyyy-mm-dd hh24:mi:ss'),'GC',50000.0,0.4361328,-10.0,10.0,1,true,to_char(sysdate,'yyyy-mm-dd hh24:mi:ss'),'QVLDETANRBRBURBMZQUJSHOQNGGSMNTECC348493214893542NPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECC348493214893542NPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECC348493214893542NPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECC348493214893542NPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECC348493214893542NPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECC348493214893542NPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECC348493214893542NPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECC348493214893542NPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECC348493214893542NPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECC348493214893542NPFZCSYKXXYSCDSF','QVLDETANRBRBURBMZQUJSHOQNGGSMNTECCIPRIIRDHIRWIYNPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECCIPRIIRDHIRWIYNPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECCIPRIIRDHIRWIYNPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECCIPRIIRDHIRWIYNPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECCIPRIIRDHIRWIYNPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECCIPRIIRDHIRWIYNPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECCIPRIIRDHIRWIYNPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECCIPRIIRDHIRWIYNPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECCIPRIIRDHIRWIYNPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECCIPRIIRDHIRWIYNPFZCSYKXXYSCDSF','1234354587643123455213445656723123424554566776763221132454566768767433242323445453565654542323');

1 rows affected.

SQL> insert into strg_part_list_tbl_000 select  c_id+1,2,2,'AA'||'is2cmvls',c_middle,'AA'||'BARBARBAR2','bkili2fcxcle2','pmbwo2vhvpaj2',c_city,c_state,c_zip,c_phone,c_since,c_credit,c_credit_lim,c_discount,c_balance,c_ytd_payment,c_payment_cnt,c_delivery_cnt,c_end,c_vchar,c_data,c_text from strg_part_list_tbl_000 where c_id=1;

1 rows affected.

SQL> insert into strg_part_list_tbl_000 select  c_id+2,3,3,'AA'||'is3cmvls',c_middle,'AA'||'BARBARBAR3','bkili3fcxcle3','pmbwo3vhvpaj3',c_city,c_state,c_zip,c_phone,c_since,c_credit,c_credit_lim,c_discount,c_balance,c_ytd_payment,c_payment_cnt,c_delivery_cnt,c_end,c_vchar,c_data,c_text from strg_part_list_tbl_000 where c_id=1;

1 rows affected.

SQL> insert into strg_part_list_tbl_000 select  c_id+3,4,4,'AA'||'is4cmvls',c_middle,'AA'||'BARBARBAR4','bkili4fcxcle4','pmbwo4vhvpaj4',c_city,c_state,c_zip,c_phone,c_since,c_credit,c_credit_lim,c_discount,c_balance,c_ytd_payment,c_payment_cnt,c_delivery_cnt,c_end,c_vchar,c_data,c_text from strg_part_list_tbl_000 where c_id=1;

1 rows affected.

SQL> insert into strg_part_list_tbl_000 select  c_id+4,5,5,'AA'||'is5cmvls',c_middle,'AA'||'BARBARBAR5','bkili5fcxcle5','pmbwo5vhvpaj5',c_city,c_state,c_zip,c_phone,c_since,c_credit,c_credit_lim,c_discount,c_balance,c_ytd_payment,c_payment_cnt,c_delivery_cnt,c_end,c_vchar,c_data,c_text from strg_part_list_tbl_000 where c_id=1;

1 rows affected.

SQL> insert into strg_part_list_tbl_000 select  c_id+5,6,6,'AA'||'is6cmvls',c_middle,'AA'||'BARBARBAR6','bkili6fcxcle6','pmbwo6vhvpaj6',c_city,c_state,c_zip,c_phone,c_since,c_credit,c_credit_lim,c_discount,c_balance,c_ytd_payment,c_payment_cnt,c_delivery_cnt,c_end,c_vchar,c_data,c_text from strg_part_list_tbl_000 where c_id=1;

1 rows affected.

SQL> insert into strg_part_list_tbl_000 select  c_id+6,7,7,'AA'||'is7cmvls',c_middle,'AA'||'BARBARBAR7','bkili7fcxcle7','pmbwo7vhvpaj7',c_city,c_state,c_zip,c_phone,c_since,c_credit,c_credit_lim,c_discount,c_balance,c_ytd_payment,c_payment_cnt,c_delivery_cnt,c_end,c_vchar,c_data,c_text from strg_part_list_tbl_000 where c_id=1;

1 rows affected.

SQL> insert into strg_part_list_tbl_000 select  c_id+7,8,8,'AA'||'is8cmvls',c_middle,'AA'||'BARBARBAR8','bkili8fcxcle8','pmbwo8vhvpaj8',c_city,c_state,c_zip,c_phone,c_since,c_credit,c_credit_lim,c_discount,c_balance,c_ytd_payment,c_payment_cnt,c_delivery_cnt,c_end,c_vchar,c_data,c_text from strg_part_list_tbl_000 where c_id=1;

1 rows affected.

SQL> insert into strg_part_list_tbl_000 select  c_id+8,9,9,'AA'||'is9cmvls',c_middle,'AA'||'BARBARBAR9','bkili9fcxcle9','pmbwo9vhvpaj9',c_city,c_state,c_zip,c_phone,c_since,c_credit,c_credit_lim,c_discount,c_balance,c_ytd_payment,c_payment_cnt,c_delivery_cnt,c_end,c_vchar,c_data,c_text from strg_part_list_tbl_000 where c_id=1;

1 rows affected.

SQL> insert into strg_part_list_tbl_000 select  c_id+9,10,10,'AA'||'is10cmvls',c_middle,'AA'||'BARBARBAR10','bkili10fcxcle10','pmbwo10vhvpaj10',c_city,c_state,c_zip,c_phone,c_since,c_credit,c_credit_lim,c_discount,c_balance,c_ytd_payment,c_payment_cnt,c_delivery_cnt,c_end,c_vchar,c_data,c_text from strg_part_list_tbl_000 where c_id=1;

1 rows affected.

SQL> drop table if exists stag_par_lis_sig_xa_tbl_001;

Succeed.

SQL> create table stag_par_lis_sig_xa_tbl_001(c_id int,c_d_id int not null,c_w_id int not null,c_first varchar(32) not null,c_middle char(2),c_last varchar(32) not null,c_street_1 varchar(40) not null,c_street_2 varchar(40),c_city varchar(40) not null,c_state char(2) not null,c_zip char(9) not null,c_phone char(32) not null,c_since timestamp,c_credit char(2) not null,c_credit_lim numeric(12,2),c_discount numeric(4,4),c_balance numeric(12,2),c_ytd_payment real not null,c_payment_cnt number not null,c_delivery_cnt bool not null,c_end date not null,c_vchar varchar(1000),c_data clob,c_text blob) partition by list(c_d_id) (partition part_1 values(1,2,3,4),partition part_2 values(5,6,7),partition part_3 values(8,9),partition part_4 values(default));

Succeed.

SQL> insert into stag_par_lis_sig_xa_tbl_001 select * from strg_part_list_tbl_000;

10 rows affected.

SQL> create index stag_par_lis_sig_xa_ind_1_001 on stag_par_lis_sig_xa_tbl_001(c_d_id)  parallel 4 local;

Succeed.

SQL> create index stag_par_lis_sig_xa_ind_2_001 on stag_par_lis_sig_xa_tbl_001(c_last) local;

Succeed.

SQL> create unique index stag_par_lis_sig_xa_ind_3_001 on stag_par_lis_sig_xa_tbl_001(c_first) parallel 4;

Succeed.

SQL> create index stag_par_lis_sig_xa_ind_4_001 on stag_par_lis_sig_xa_tbl_001(c_street_1) parallel 5;

Succeed.

SQL> select c_last from stag_par_lis_sig_xa_tbl_001 where c_last like 'A%' and length(c_last)=12 order by c_last desc;

C_LAST                          
--------------------------------
AABARBARBAR9                    
AABARBARBAR8                    
AABARBARBAR7                    
AABARBARBAR6                    
AABARBARBAR5                    
AABARBARBAR4                    
AABARBARBAR3                    
AABARBARBAR2                    

8 rows fetched.

SQL> delete from stag_par_lis_sig_xa_tbl_001;

10 rows affected.

SQL> drop table if exists strg_part_list_tbl_000;

Succeed.

SQL> drop table if exists stag_par_lis_sig_xa_tbl_001;

Succeed.

SQL> 
SQL> DROP TABLE IF EXISTS TEST_PART_T100;

Succeed.

SQL> CREATE TABLE TEST_PART_T100(F1 INT, F2 INT)
  2 PARTITION BY RANGE(F1)
  3 (
  4  PARTITION P1 VALUES LESS THAN(10),
  5  PARTITION P2 VALUES LESS THAN(20),
  6  PARTITION P3 VALUES LESS THAN(30),
  7  PARTITION P4 VALUES LESS THAN(MAXVALUE)
  8 );

Succeed.

SQL> CREATE INDEX IDX_TEST_PART_T100_1 ON TEST_PART_T100(F1) LOCAL;

Succeed.

SQL> EXPLAIN SELECT * FROM TEST_PART_T100 WHERE (F1 >5 AND F1 <15) OR (F1 >16 AND F1 < 25);

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
| Id  | Description                                | Owner | Name                 | Rows | Cost | Bytes | Remark |
------------------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                           |       |                      |      |      |       |        |
| 1   |   TABLE ACCESS BY INDEX ROWID Filter:[0,3) | SYS   | TEST_PART_T100       |      |      |       |        |
| 2   |     INDEX RANGE SCAN                       | SYS   | IDX_TEST_PART_T100_1 |      |      |       |        |
------------------------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   2 - access: F1 > 5 AND F1 < 15 OR F1 > 16 AND F1 < 25        

10 rows fetched.

SQL> INSERT INTO TEST_PART_T100 VALUES(1,1);

1 rows affected.

SQL> INSERT INTO TEST_PART_T100 VALUES(2,2);

1 rows affected.

SQL> INSERT INTO TEST_PART_T100 VALUES(11,11);

1 rows affected.

SQL> INSERT INTO TEST_PART_T100 VALUES(12,12);

1 rows affected.

SQL> INSERT INTO TEST_PART_T100 VALUES(21,21);

1 rows affected.

SQL> INSERT INTO TEST_PART_T100 VALUES(22,22);

1 rows affected.

SQL> INSERT INTO TEST_PART_T100 VALUES(31,31);

1 rows affected.

SQL> INSERT INTO TEST_PART_T100 VALUES(32,32);

1 rows affected.

SQL> SELECT * FROM TEST_PART_T100 WHERE (F1 >=1 AND F1 <=12) OR (F1 >= 21 AND F1 <=35) ORDER BY F1;

F1           F2          
------------ ------------
1            1           
2            2           
11           11          
12           12          
21           21          
22           22          
31           31          
32           32          

8 rows fetched.

SQL> SELECT * FROM TEST_PART_T100 WHERE (F1 >=1 AND F1 <=12) OR (F1 >= 21 AND F1 <=35) ORDER BY F1 DESC;

F1           F2          
------------ ------------
32           32          
31           31          
22           22          
21           21          
12           12          
11           11          
2            2           
1            1           

8 rows fetched.

SQL> EXPLAIN PLAN FOR SELECT * FROM TEST_PART_T100 WHERE (F1 >=1 AND F1 <=12) OR (F1 >= 21 AND F1 <=35) ORDER BY F1 DESC;

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
| Id  | Description                                | Owner | Name                 | Rows | Cost | Bytes | Remark |
------------------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                           |       |                      |      |      |       |        |
| 1   |   TABLE ACCESS BY INDEX ROWID Filter:[0,4) | SYS   | TEST_PART_T100       |      |      |       |        |
| 2   |     INDEX RANGE SCAN DESCENDING            | SYS   | IDX_TEST_PART_T100_1 |      |      |       |        |
------------------------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   2 - access: F1 >= 1 AND F1 <= 12 OR F1 >= 21 AND F1 <= 35    

10 rows fetched.

SQL> DROP TABLE IF EXISTS TEST_PART_T100;

Succeed.

SQL> 
SQL> DROP TABLE IF EXISTS TEST_PART_T101;

Succeed.

SQL> CREATE TABLE TEST_PART_T101(F1 INT,F2 INT, F3 INT)
  2 PARTITION BY LIST(F1)
  3 (
  4 PARTITION P1 VALUES (6,7,8),
  5 PARTITION P2 VALUES (1,2,3),
  6 PARTITION P3 VALUES (9,10,11),
  7 PARTITION P4 VALUES (DEFAULT)
  8 );

Succeed.

SQL> EXPLAIN SELECT * FROM TEST_PART_T101 WHERE F1=1 OR F1=7;

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
--------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name           | Rows | Cost | Bytes | Remark |
--------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |                |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[0,2) | SYS   | TEST_PART_T101 |      |      |       |        |
--------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: F1 = 1 OR F1 = 7                                 

9 rows fetched.

SQL> DROP TABLE TEST_PART_T101;

Succeed.

SQL> 
SQL> DROP TABLE IF EXISTS TEST_PART_T102;

Succeed.

SQL> CREATE TABLE TEST_PART_T102 (ID1 INT, ID2 INT, ID3 INT)
  2 PARTITION BY RANGE (ID1, ID2)
  3 (
  4 PARTITION P1 VALUES LESS THAN (5, 10),
  5 PARTITION P2 VALUES LESS THAN (MAXVALUE, MAXVALUE)
  6 );

Succeed.

SQL> CREATE UNIQUE INDEX IDX_TEST_PART_T102_1 ON TEST_PART_T102 (ID1, ID3) LOCAL;

CT-00816, Table partition key should be subsets of local primary or unique index
SQL> CREATE UNIQUE INDEX IDX_TEST_PART_T102_1 ON TEST_PART_T102 (ID3, ID2, ID1) LOCAL;

Succeed.

SQL> DROP TABLE TEST_PART_T102;

Succeed.

SQL> 
SQL> --PARTITION PRUNE TEST
SQL> DROP TABLE IF EXISTS TEST_PART_PRUNE_T1;

Succeed.

SQL> CREATE TABLE TEST_PART_PRUNE_T1 (ID1 INT, ID2 INT)
  2 PARTITION BY RANGE (ID1, ID2)
  3 (
  4 PARTITION P1 VALUES LESS THAN (10, 5),                  --PART_NO 0
  5 PARTITION P2 VALUES LESS THAN (10, 10),                 --PART_NO 1
  6 PARTITION P3 VALUES LESS THAN (20, 10),                 --PART_NO 2
  7 PARTITION P4 VALUES LESS THAN (20, 20),                 --PART_NO 3
  8 PARTITION P5 VALUES LESS THAN (20, MAXVALUE)            --PART_NO 4
  9 );

Succeed.

SQL> --LEFT BORDER TEST
SQL> EXPLAIN PLAN FOR SELECT * FROM TEST_PART_PRUNE_T1 WHERE ID1 >= 20 AND ID2 >= 10;    --FILTER 3, 4

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
------------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name               | Rows | Cost | Bytes | Remark |
------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |                    |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[3,5) | SYS   | TEST_PART_PRUNE_T1 |      |      |       |        |
------------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: ID1 >= 20 AND ID2 >= 10                          

9 rows fetched.

SQL> EXPLAIN PLAN FOR SELECT * FROM TEST_PART_PRUNE_T1 WHERE ID1 > 20 AND ID2 >= 10;     --FILTER INVALID

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
----------------------------------------------------------------------------------------------------
| Id  | Description                    | Owner | Name               | Rows | Cost | Bytes | Remark |
----------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT               |       |                    |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:N/A | SYS   | TEST_PART_PRUNE_T1 |      |      |       |        |
----------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: ID1 > 20 AND ID2 >= 10                           

9 rows fetched.

SQL> EXPLAIN PLAN FOR SELECT * FROM TEST_PART_PRUNE_T1 WHERE ID1 >= 20 AND ID2 > 10;     --FILTER 3, 4

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
------------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name               | Rows | Cost | Bytes | Remark |
------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |                    |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[3,5) | SYS   | TEST_PART_PRUNE_T1 |      |      |       |        |
------------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: ID1 >= 20 AND ID2 > 10                           

9 rows fetched.

SQL> EXPLAIN PLAN FOR SELECT * FROM TEST_PART_PRUNE_T1 WHERE ID1 > 20 AND ID2 > 10;      --FILTER INVALID

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
----------------------------------------------------------------------------------------------------
| Id  | Description                    | Owner | Name               | Rows | Cost | Bytes | Remark |
----------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT               |       |                    |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:N/A | SYS   | TEST_PART_PRUNE_T1 |      |      |       |        |
----------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: ID1 > 20 AND ID2 > 10                            

9 rows fetched.

SQL> --RIGHT BORDER TEST
SQL> EXPLAIN PLAN FOR SELECT * FROM TEST_PART_PRUNE_T1 WHERE ID1 <= 20 AND ID2 <= 10;    --FILTER 0, 1, 2, 3

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
------------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name               | Rows | Cost | Bytes | Remark |
------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |                    |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[0,4) | SYS   | TEST_PART_PRUNE_T1 |      |      |       |        |
------------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: ID1 <= 20 AND ID2 <= 10                          

9 rows fetched.

SQL> EXPLAIN PLAN FOR SELECT * FROM TEST_PART_PRUNE_T1 WHERE ID1 < 20 AND ID2 <= 10;     --FILTER 0, 1, 2

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
------------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name               | Rows | Cost | Bytes | Remark |
------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |                    |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[0,3) | SYS   | TEST_PART_PRUNE_T1 |      |      |       |        |
------------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: ID1 < 20 AND ID2 <= 10                           

9 rows fetched.

SQL> EXPLAIN PLAN FOR SELECT * FROM TEST_PART_PRUNE_T1 WHERE ID1 <= 20 AND ID2 < 10;     --FILTER 0, 1, 2

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
------------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name               | Rows | Cost | Bytes | Remark |
------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |                    |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[0,3) | SYS   | TEST_PART_PRUNE_T1 |      |      |       |        |
------------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: ID1 <= 20 AND ID2 < 10                           

9 rows fetched.

SQL> EXPLAIN PLAN FOR SELECT * FROM TEST_PART_PRUNE_T1 WHERE ID1 < 20 AND ID2 < 10;      --FILTER 0, 1, 2

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
------------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name               | Rows | Cost | Bytes | Remark |
------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |                    |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[0,3) | SYS   | TEST_PART_PRUNE_T1 |      |      |       |        |
------------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: ID1 < 20 AND ID2 < 10                            

9 rows fetched.

SQL> --SPECIAL CASE FOR SCAN ONE MORE PARTITION
SQL> EXPLAIN PLAN FOR SELECT * FROM TEST_PART_PRUNE_T1 WHERE ID1 > 19 AND ID2 > 10;      --FILTER 2, 3, 4

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
------------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name               | Rows | Cost | Bytes | Remark |
------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |                    |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[2,5) | SYS   | TEST_PART_PRUNE_T1 |      |      |       |        |
------------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: ID1 > 19 AND ID2 > 10                            

9 rows fetched.

SQL> DROP TABLE TEST_PART_PRUNE_T1;

Succeed.

SQL> 
SQL> 
SQL> drop table if exists test_part_table;

Succeed.

SQL> create table test_part_table
  2 (
  3    REF_NO               bigint not null,
  4    RANGE_NO             bigint not null,
  5    RANGE_LOB            clob   not null,
  6    primary key (REF_NO)
  7 )partition by range (RANGE_NO)
  8 (
  9         partition P_01 values less than (100),
 10         partition P_02 values less than (200),
 11         partition P_03 values less than (300),
 12         partition P_04 values less than (400),
 13         partition P_05 values less than (500),
 14         partition P_06 values less than (600),
 15         partition P_07 values less than (700),
 16         partition P_08 values less than (800),
 17         partition P_09 values less than (900),
 18         partition P_10 values less than (1000),
 19         partition P_11 values less than (1100),
 20         partition P_12 values less than (1200),
 21         partition P_13 values less than (1300),
 22         partition P_14 values less than (1400),
 23         partition P_15 values less than (1500),
 24         partition P_16 values less than (1600),
 25         partition P_17 values less than (1700),
 26         partition P_18 values less than (1800),
 27         partition P_19 values less than (1900),
 28         partition P_20 values less than (2000),
 29         partition P_21 values less than (2100),
 30         partition P_22 values less than (2200),
 31         partition P_23 values less than (2300),
 32         partition P_24 values less than (2400),
 33         partition P_25 values less than (2500),
 34         partition P_26 values less than (2600),
 35         partition P_27 values less than (2700),
 36         partition P_28 values less than (2800),
 37         partition P_29 values less than (2900),
 38         partition P_30 values less than (3000)
 39 );

Succeed.

SQL> 
SQL> insert into test_part_table (ref_no, range_no, range_lob) values(1,99 , 'abcdefghijklmnopqrstuvwxyz1');

1 rows affected.

SQL> insert into test_part_table (ref_no, range_no, range_lob) values(2,199, 'abcdefghijklmnopqrstuvwxyz2');

1 rows affected.

SQL> insert into test_part_table (ref_no, range_no, range_lob) values(3,299, 'abcdefghijklmnopqrstuvwxyz3');

1 rows affected.

SQL> insert into test_part_table (ref_no, range_no, range_lob) values(4,399, 'abcdefghijklmnopqrstuvwxyz4');

1 rows affected.

SQL> insert into test_part_table (ref_no, range_no, range_lob) values(5,499, 'abcdefghijklmnopqrstuvwxyz5');

1 rows affected.

SQL> 
SQL> select DBE_DIAGNOSE.DBA_PARTITIONED_TABSIZE(0,'SYS','TEST_PART_TABLE');

DBE_DIAGNOSE.DBA_PARTITIONED_TABSIZE(0,'SYS','TEST_PART_TABLE')
---------------------------------------------------------------
327680                                                         

1 rows fetched.

SQL> select DBE_DIAGNOSE.DBA_PARTITIONED_TABSIZE(0,'SYS','SYS_TABLES');

CT-01102, [1:8]Invalid (sub)partition table type ,can not calc table-size.
SQL> select DBE_DIAGNOSE.DBA_PARTITIONED_TABSIZE(0,'SYS',1234);

CT-00614, [1:53]Parameter error: table_name should be string
SQL> select DBE_DIAGNOSE.DBA_PARTITIONED_TABSIZE(0,'SYS','TEST_PART_TABLE',1234);

CT-00615, [1:8]Invalid argument number for DBA_PARTITIONED_TABSIZE, min=3, max=3
SQL> select DBE_DIAGNOSE.DBA_PARTITIONED_TABSIZE(0,null,'TEST_PART_TABLE');

CT-00240, [1:8]Null is not allowed for the function argument
SQL> select DBE_DIAGNOSE.DBA_PARTITIONED_TABSIZE(0,1234,'TEST_PART_TABLE');

CT-00614, [1:47]Parameter error: user_name should be string
SQL> select DBE_DIAGNOSE.DBA_PARTITIONED_TABSIZE(0,'SYS',null);

CT-00240, [1:8]Null is not allowed for the function argument
SQL> select DBE_DIAGNOSE.DBA_PARTITIONED_TABSIZE(0,'SYS','TEST_PART_TABLE',null);

CT-00615, [1:8]Invalid argument number for DBA_PARTITIONED_TABSIZE, min=3, max=3
SQL> 
SQL> select DBE_DIAGNOSE.DBA_PARTITIONED_LOBSIZE(0,'SYS','TEST_PART_TABLE');

DBE_DIAGNOSE.DBA_PARTITIONED_LOBSIZE(0,'SYS','TEST_PART_TABLE')
---------------------------------------------------------------
0                                                              

1 rows fetched.

SQL> select DBE_DIAGNOSE.DBA_PARTITIONED_LOBSIZE(0,'SYS','SYS_TABLES');

CT-01102, [1:8]Invalid (sub)partition table type ,can not calc table-size.
SQL> select DBE_DIAGNOSE.DBA_PARTITIONED_LOBSIZE(0,'SYS',1234);

CT-00614, [1:53]Parameter error: table_name should be string
SQL> select DBE_DIAGNOSE.DBA_PARTITIONED_LOBSIZE(0,'SYS','TEST_PART_TABLE', 'fdsfs');

CT-00241, [1:8]The argument 4 should be type integer
SQL> select DBE_DIAGNOSE.DBA_PARTITIONED_LOBSIZE(0,'SYS','TEST_PART_TABLE', null);

DBE_DIAGNOSE.DBA_PARTITIONED_LOBSIZE(0,'SYS','TEST_PART_TABLE', 
----------------------------------------------------------------
0                                                               

1 rows fetched.

SQL> select DBE_DIAGNOSE.DBA_PARTITIONED_LOBSIZE(0,'SYS','TEST_PART_TABLE', 2);

DBE_DIAGNOSE.DBA_PARTITIONED_LOBSIZE(0,'SYS','TEST_PART_TABLE', 
----------------------------------------------------------------
0                                                               

1 rows fetched.

SQL> select DBE_DIAGNOSE.DBA_PARTITIONED_LOBSIZE(0,'SYS','TEST_PART_TABLE', 0);

DBE_DIAGNOSE.DBA_PARTITIONED_LOBSIZE(0,'SYS','TEST_PART_TABLE', 
----------------------------------------------------------------
0                                                               

1 rows fetched.

SQL> select DBE_DIAGNOSE.DBA_PARTITIONED_LOBSIZE(0,'SYS','TEST_PART_TABLE', 3);

CT-00202, [1:8]The parameter value "column id" was invalid
SQL> select DBE_DIAGNOSE.DBA_PARTITIONED_LOBSIZE(0,'SYS','TEST_PART_TABLE', 123124);

CT-00202, [1:8]The parameter value "column id" was invalid
SQL> 
SQL> select DBE_DIAGNOSE.DBA_PARTITIONED_INDSIZE(0,'SYS','TEST_PART_TABLE');

DBE_DIAGNOSE.DBA_PARTITIONED_INDSIZE(0,'SYS','TEST_PART_TABLE')
---------------------------------------------------------------
0                                                              

1 rows fetched.

SQL> select DBE_DIAGNOSE.DBA_PARTITIONED_INDSIZE(0,'SYS','TEST_PART_TABLE', 12342);

CT-00614, [1:72]Parameter error: index_name should be string
SQL> select DBE_DIAGNOSE.DBA_PARTITIONED_INDSIZE(0,'SYS','TEST_PART_TABLE', null);

DBE_DIAGNOSE.DBA_PARTITIONED_INDSIZE(0,'SYS','TEST_PART_TABLE', 
----------------------------------------------------------------
0                                                               

1 rows fetched.

SQL> select DBE_DIAGNOSE.DBA_PARTITIONED_INDSIZE(0,'SYS','TEST_PART_TABLE', 'indexxx');

CT-00830, [1:8]Index SYS.INDEXXX does not exist
SQL> select DBE_DIAGNOSE.DBA_PARTITIONED_INDSIZE(0,'SYS','SYS_TABLES');

CT-01102, [1:8]Invalid (sub)partition table type ,can not calc index-size.
SQL> 
SQL> create index tr_index_test on test_part_table
  2 (
  3    RANGE_NO ASC
  4 ) local;

Succeed.

SQL> 
SQL> select DBE_DIAGNOSE.DBA_PARTITIONED_INDSIZE(0,'SYS','TEST_PART_TABLE');

DBE_DIAGNOSE.DBA_PARTITIONED_INDSIZE(0,'SYS','TEST_PART_TABLE')
---------------------------------------------------------------
327680                                                         

1 rows fetched.

SQL> select DBE_DIAGNOSE.DBA_PARTITIONED_INDSIZE(0,'SYS','TEST_PART_TABLE', 'TR_INDEX_TEST');

DBE_DIAGNOSE.DBA_PARTITIONED_INDSIZE(0,'SYS','TEST_PART_TABLE', 
----------------------------------------------------------------
327680                                                          

1 rows fetched.

SQL> select DBE_DIAGNOSE.DBA_PARTITIONED_INDSIZE(0,'SYS','TEST_PART_TABLE', 'xxx');

CT-00830, [1:8]Index SYS.XXX does not exist
SQL> select DBE_DIAGNOSE.DBA_PARTITIONED_INDSIZE(0,'SYS','TEST_PART_TABLE', 12342);

CT-00614, [1:72]Parameter error: index_name should be string
SQL> select DBE_DIAGNOSE.DBA_PARTITIONED_INDSIZE(0,'SYS','TEST_PART_TABLE', null);

DBE_DIAGNOSE.DBA_PARTITIONED_INDSIZE(0,'SYS','TEST_PART_TABLE', 
----------------------------------------------------------------
327680                                                          

1 rows fetched.

SQL> select DBE_DIAGNOSE.DBA_PARTITIONED_INDSIZE(0,'SYS','SYS_TABLES');

CT-01102, [1:8]Invalid (sub)partition table type ,can not calc index-size.
SQL> 
SQL> select table_name,bytes,pages,extents from all_tables where table_name = 'TEST_PART_TABLE';

TABLE_NAME                                                       BYTES                PAGES                EXTENTS             
---------------------------------------------------------------- -------------------- -------------------- --------------------
TEST_PART_TABLE                                                  327680               40                   5                   

1 rows fetched.

SQL> select * from ALL_TAB_COLS where table_name = 'TEST_PART_TABLE' ORDER BY COLUMN_ID;

OWNER                                                            TABLE_NAME                                                       COLUMN_NAME                                                      DATA_TYPE                                                        DATA_LENGTH  DATA_PRECISION DATA_SCALE   NULLABLE COLUMN_ID    DATA_DEFAULT                                                     NUM_DISTINCT LOW_VALUE                                                        HIGH_VALUE                                                       CHAR_LENGTH  CHAR_USED HISTOGRAM                                                       

SYS                                                              TEST_PART_TABLE                                                  REF_NO                                                           BINARY_BIGINT                                                    8                                        N        0                                                                                                                                                                                                                            0                                                                                      
SYS                                                              TEST_PART_TABLE                                                  RANGE_NO                                                         BINARY_BIGINT                                                    8                                        N        1                                                                                                                                                                                                                            0                                                                                      
SYS                                                              TEST_PART_TABLE                                                  RANGE_LOB                                                        CLOB                                                             8000                                     N        2                                                                                                                                                                                                                            0                                                                                      

3 rows fetched.

SQL> --select * from v$locked_object;
SQL> drop index tr_index_test on test_part_table;

Succeed.

SQL> drop table test_part_table;

Succeed.

SQL> create user hh identified by 'Cantian_222';

Succeed.

SQL> create table hh.test_part_table(a int, b bigint, c clob);

Succeed.

SQL> select * from ALL_TAB_COLS where table_name = 'TEST_PART_TABLE' ORDER BY COLUMN_ID;

OWNER                                                            TABLE_NAME                                                       COLUMN_NAME                                                      DATA_TYPE                                                        DATA_LENGTH  DATA_PRECISION DATA_SCALE   NULLABLE COLUMN_ID    DATA_DEFAULT                                                     NUM_DISTINCT LOW_VALUE                                                        HIGH_VALUE                                                       CHAR_LENGTH  CHAR_USED HISTOGRAM                                                       

HH                                                               TEST_PART_TABLE                                                  A                                                                BINARY_INTEGER                                                   4                                        Y        0                                                                                                                                                                                                                            0                                                                                      
HH                                                               TEST_PART_TABLE                                                  B                                                                BINARY_BIGINT                                                    8                                        Y        1                                                                                                                                                                                                                            0                                                                                      
HH                                                               TEST_PART_TABLE                                                  C                                                                CLOB                                                             8000                                     Y        2                                                                                                                                                                                                                            0                                                                                      

3 rows fetched.

SQL> drop table hh.test_part_table;

Succeed.

SQL> purge recyclebin;

Succeed.

SQL> drop user hh;

Succeed.

SQL> 
SQL> --this usecase will check whether fetching tablepart by org_scn is working
SQL> drop table if exists test_part_00422311;

Succeed.

SQL> create table test_part_00422311(f1 int, f2 real, f3 number, f4 char(30), f5 varchar(30), f6 date, f7 timestamp)
  2 PARTITION BY RANGE(f1)
  3 (
  4  PARTITION p1 values less than(10),
  5  PARTITION p2 values less than(20),
  6  PARTITION p3 values less than(30),
  7  PARTITION p4 values less than(MAXVALUE)
  8 );

Succeed.

SQL> insert into test_part_00422311 values(5, 15, 28, 'abcd', 'abcd', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3'));

1 rows affected.

SQL> insert into test_part_00422311 values(6, 16, 29, '16', '29', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3'));

1 rows affected.

SQL> insert into test_part_00422311 values(16, 26, 39, '26', '39', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3'));

1 rows affected.

SQL> insert into test_part_00422311 values(26, 36, 49, '36', '49', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3'));

1 rows affected.

SQL> insert into test_part_00422311 values(36, 46, 59, '46', '59', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3'));

1 rows affected.

SQL> insert into test_part_00422311 values(46, 56, 69, '56', '69', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3'));

1 rows affected.

SQL> create index idx_00422311 on test_part_00422311(f2,f3);

Succeed.

SQL> select * from test_part_00422311 where f2>'15' and f3>'39';

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------
26           36                   49                                       36                             49                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
36           46                   59                                       46                             59                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
46           56                   69                                       56                             69                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      

3 rows fetched.

SQL> drop table test_part_00422311;

Succeed.

SQL> 
SQL> 
SQL> -- test partition index online
SQL>  drop table if exists part_t1;

Succeed.

SQL>  create table part_t1(a1 int,a2 int,a3 int)
  2  partition by range(a1)
  3 (partition table_p01 values less than (5),
  4  partition table_p02 values less than (10),
  5  partition table_p03 values less than (20),
  6  partition table_p04 values less than (40),
  7  partition table_p05 values less than(MAXVALUE)
  8  );

Succeed.

SQL> 
SQL>  create index idx_part_t1 on part_t1(a1) online;

Succeed.

SQL>  create index idx_part_t2 on part_t1(a1,a2) local online;

Succeed.

SQL>  create index idx_part_t3 on part_t1(a1,a4) parallel 4 local online;

CT-00130, Operation parallel creating is not supported on create index online
SQL>  alter index idx_part_t1 on part_t1 rebuild;

Succeed.

SQL>  alter index idx_part_t1 on part_t1 rebuild online;

Succeed.

SQL>  alter index idx_part_t2 on part_t1 rebuild;

Succeed.

SQL>  alter index idx_part_t2 on part_t1 rebuild online;

Succeed.

SQL>  alter index idx_part_t3 on part_t1 rebuild online;

CT-00830, Index SYS.IDX_PART_T3 does not exist
SQL>  select * from part_t1;

A1           A2           A3          
------------ ------------ ------------

0 rows fetched.

SQL>  drop  index idx_part_t1;

Succeed.

SQL>  drop  index idx_part_t2;

Succeed.

SQL> 
SQL>  drop table if exists part_t1;

Succeed.

SQL>  create table part_t1(a1 int,a2 int,a3 int)
  2  partition by range(a1)
  3 (partition table_p01 values less than (5),
  4  partition table_p02 values less than (10),
  5  partition table_p03 values less than (20),
  6  partition table_p04 values less than (40),
  7  partition table_p05 values less than(MAXVALUE)
  8  );

Succeed.

SQL> 
SQL>  insert into part_t1 values(1,2,3);

1 rows affected.

SQL>  insert into part_t1 values(2,2,3);

1 rows affected.

SQL>  insert into part_t1 values(4,2,3);

1 rows affected.

SQL>  insert into part_t1 values(6,2,3);

1 rows affected.

SQL>  insert into part_t1 values(7,2,3);

1 rows affected.

SQL>  insert into part_t1 values(8,2,3);

1 rows affected.

SQL>  insert into part_t1 values(17,2,3);

1 rows affected.

SQL>  insert into part_t1 values(12,2,3);

1 rows affected.

SQL>  insert into part_t1 values(21,2,3);

1 rows affected.

SQL>  insert into part_t1 values(22,2,3);

1 rows affected.

SQL>  insert into part_t1 values(30,2,3);

1 rows affected.

SQL>  insert into part_t1 values(16,2,3);

1 rows affected.

SQL>  insert into part_t1 values(7,2,3);

1 rows affected.

SQL>  insert into part_t1 values(8,2,3);

1 rows affected.

SQL>  insert into part_t1 values(27,2,3);

1 rows affected.

SQL>  insert into part_t1 values(50,2,3); 

1 rows affected.

SQL>  create index idx_part_t1 on part_t1(a1) online;

Succeed.

SQL>  select * from SYS_SHADOW_INDEXES;

USER#        TABLE#       ID           NAME                                                             SPACE#       SEQUENCE#            ENTRY                IS_PRIMARY   IS_UNIQUE    TYPE         COLS         COL_LIST                                                         INITRANS     CR_MODE      FLAGS        PARTED       PCTFREE     
------------ ------------ ------------ ---------------------------------------------------------------- ------------ -------------------- -------------------- ------------ ------------ ------------ ------------ ---------------------------------------------------------------- ------------ ------------ ------------ ------------ ------------

0 rows fetched.

SQL>  select * from SYS_SHADOW_INDEX_PARTS;

USER#        TABLE#       INDEX#       PART#        NAME                                                             HIBOUNDLEN   HIBOUNDVAL                                                       SPACE#       ORG_SCN              ENTRY                INITRANS     PCTFREE      FLAGS        BHIBOUNDVAL                                                      PARENT_PART#
------------ ------------ ------------ ------------ ---------------------------------------------------------------- ------------ ---------------------------------------------------------------- ------------ -------------------- -------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ------------

0 rows fetched.

SQL>  create index idx_part_t2 on part_t1(a1,a2) local online;

Succeed.

SQL>  select * from SYS_SHADOW_INDEXES;

USER#        TABLE#       ID           NAME                                                             SPACE#       SEQUENCE#            ENTRY                IS_PRIMARY   IS_UNIQUE    TYPE         COLS         COL_LIST                                                         INITRANS     CR_MODE      FLAGS        PARTED       PCTFREE     
------------ ------------ ------------ ---------------------------------------------------------------- ------------ -------------------- -------------------- ------------ ------------ ------------ ------------ ---------------------------------------------------------------- ------------ ------------ ------------ ------------ ------------

0 rows fetched.

SQL>  select * from SYS_SHADOW_INDEX_PARTS;

USER#        TABLE#       INDEX#       PART#        NAME                                                             HIBOUNDLEN   HIBOUNDVAL                                                       SPACE#       ORG_SCN              ENTRY                INITRANS     PCTFREE      FLAGS        BHIBOUNDVAL                                                      PARENT_PART#
------------ ------------ ------------ ------------ ---------------------------------------------------------------- ------------ ---------------------------------------------------------------- ------------ -------------------- -------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ------------

0 rows fetched.

SQL>  alter index idx_part_t1 on part_t1 rebuild;

Succeed.

SQL>  alter index idx_part_t1 on part_t1 rebuild online;

Succeed.

SQL>  select * from SYS_SHADOW_INDEXES;

USER#        TABLE#       ID           NAME                                                             SPACE#       SEQUENCE#            ENTRY                IS_PRIMARY   IS_UNIQUE    TYPE         COLS         COL_LIST                                                         INITRANS     CR_MODE      FLAGS        PARTED       PCTFREE     
------------ ------------ ------------ ---------------------------------------------------------------- ------------ -------------------- -------------------- ------------ ------------ ------------ ------------ ---------------------------------------------------------------- ------------ ------------ ------------ ------------ ------------

0 rows fetched.

SQL>  select * from SYS_SHADOW_INDEX_PARTS;

USER#        TABLE#       INDEX#       PART#        NAME                                                             HIBOUNDLEN   HIBOUNDVAL                                                       SPACE#       ORG_SCN              ENTRY                INITRANS     PCTFREE      FLAGS        BHIBOUNDVAL                                                      PARENT_PART#
------------ ------------ ------------ ------------ ---------------------------------------------------------------- ------------ ---------------------------------------------------------------- ------------ -------------------- -------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ------------

0 rows fetched.

SQL>  alter index idx_part_t2 on part_t1 rebuild;

Succeed.

SQL>  alter index idx_part_t2 on part_t1 rebuild online;

Succeed.

SQL>  select * from SYS_SHADOW_INDEXES;

USER#        TABLE#       ID           NAME                                                             SPACE#       SEQUENCE#            ENTRY                IS_PRIMARY   IS_UNIQUE    TYPE         COLS         COL_LIST                                                         INITRANS     CR_MODE      FLAGS        PARTED       PCTFREE     
------------ ------------ ------------ ---------------------------------------------------------------- ------------ -------------------- -------------------- ------------ ------------ ------------ ------------ ---------------------------------------------------------------- ------------ ------------ ------------ ------------ ------------

0 rows fetched.

SQL>  select * from SYS_SHADOW_INDEX_PARTS;

USER#        TABLE#       INDEX#       PART#        NAME                                                             HIBOUNDLEN   HIBOUNDVAL                                                       SPACE#       ORG_SCN              ENTRY                INITRANS     PCTFREE      FLAGS        BHIBOUNDVAL                                                      PARENT_PART#
------------ ------------ ------------ ------------ ---------------------------------------------------------------- ------------ ---------------------------------------------------------------- ------------ -------------------- -------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ------------

0 rows fetched.

SQL>  create index idx_part_1111 on part_t1(a1,a2,a3) local (partition table_p01, partition table_p02,partition p3, partition p4, partition p5) online;

Succeed.

SQL> 
SQL>  select * from part_t1 order by a1; 

A1           A2           A3          
------------ ------------ ------------
1            2            3           
2            2            3           
4            2            3           
6            2            3           
7            2            3           
7            2            3           
8            2            3           
8            2            3           
12           2            3           
16           2            3           
17           2            3           
21           2            3           
22           2            3           
27           2            3           
30           2            3           
50           2            3           

16 rows fetched.

SQL>  drop  index idx_part_t1;

Succeed.

SQL>  drop  index idx_part_t2;

Succeed.

SQL>  drop  index idx_part_1111;

Succeed.

SQL> 
SQL>  drop table if exists part_t1;

Succeed.

SQL>  create table part_t1(a1 int,a2 int,a3 int)
  2  partition by range(a1)
  3 (partition table_p01 values less than (5),
  4  partition table_p02 values less than (10),
  5  partition table_p03 values less than (20),
  6  partition table_p04 values less than (40),
  7  partition table_p05 values less than(MAXVALUE)
  8  );

Succeed.

SQL> 
SQL>  insert into part_t1 values(1,2,3);

1 rows affected.

SQL>  insert into part_t1 values(2,2,3);

1 rows affected.

SQL>  insert into part_t1 values(4,2,3);

1 rows affected.

SQL>  insert into part_t1 values(6,2,3);

1 rows affected.

SQL>  insert into part_t1 values(7,2,3);

1 rows affected.

SQL>  insert into part_t1 values(8,2,3);

1 rows affected.

SQL>  insert into part_t1 values(17,2,3);

1 rows affected.

SQL>  insert into part_t1 values(12,2,3);

1 rows affected.

SQL>  create index idx_part_t1 on part_t1(a1) online;

Succeed.

SQL>  alter index idx_part_t1 on part_t1 rebuild;

Succeed.

SQL>  alter index idx_part_t1 on part_t1 rebuild online;

Succeed.

SQL>  select * from part_t1 order by a1; 

A1           A2           A3          
------------ ------------ ------------
1            2            3           
2            2            3           
4            2            3           
6            2            3           
7            2            3           
8            2            3           
12           2            3           
17           2            3           

8 rows fetched.

SQL> 
SQL>  insert into part_t1 values(21,2,3);

1 rows affected.

SQL>  insert into part_t1 values(22,2,3);

1 rows affected.

SQL>  insert into part_t1 values(30,2,3);

1 rows affected.

SQL>  insert into part_t1 values(16,2,3);

1 rows affected.

SQL>  insert into part_t1 values(7,2,3);

1 rows affected.

SQL>  insert into part_t1 values(8,2,3);

1 rows affected.

SQL>  insert into part_t1 values(27,2,3);

1 rows affected.

SQL>  insert into part_t1 values(50,2,3); 

1 rows affected.

SQL>  create index idx_part_t2 on part_t1(a1,a2) local online;

Succeed.

SQL>  select * from SYS_SHADOW_INDEXES;

USER#        TABLE#       ID           NAME                                                             SPACE#       SEQUENCE#            ENTRY                IS_PRIMARY   IS_UNIQUE    TYPE         COLS         COL_LIST                                                         INITRANS     CR_MODE      FLAGS        PARTED       PCTFREE     
------------ ------------ ------------ ---------------------------------------------------------------- ------------ -------------------- -------------------- ------------ ------------ ------------ ------------ ---------------------------------------------------------------- ------------ ------------ ------------ ------------ ------------

0 rows fetched.

SQL>  select * from SYS_SHADOW_INDEX_PARTS;

USER#        TABLE#       INDEX#       PART#        NAME                                                             HIBOUNDLEN   HIBOUNDVAL                                                       SPACE#       ORG_SCN              ENTRY                INITRANS     PCTFREE      FLAGS        BHIBOUNDVAL                                                      PARENT_PART#
------------ ------------ ------------ ------------ ---------------------------------------------------------------- ------------ ---------------------------------------------------------------- ------------ -------------------- -------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ------------

0 rows fetched.

SQL>  alter index idx_part_t2 on part_t1 rebuild;

Succeed.

SQL>  alter index idx_part_t2 on part_t1 rebuild online;

Succeed.

SQL>  select * from SYS_SHADOW_INDEXES;

USER#        TABLE#       ID           NAME                                                             SPACE#       SEQUENCE#            ENTRY                IS_PRIMARY   IS_UNIQUE    TYPE         COLS         COL_LIST                                                         INITRANS     CR_MODE      FLAGS        PARTED       PCTFREE     
------------ ------------ ------------ ---------------------------------------------------------------- ------------ -------------------- -------------------- ------------ ------------ ------------ ------------ ---------------------------------------------------------------- ------------ ------------ ------------ ------------ ------------

0 rows fetched.

SQL>  select * from SYS_SHADOW_INDEX_PARTS;

USER#        TABLE#       INDEX#       PART#        NAME                                                             HIBOUNDLEN   HIBOUNDVAL                                                       SPACE#       ORG_SCN              ENTRY                INITRANS     PCTFREE      FLAGS        BHIBOUNDVAL                                                      PARENT_PART#
------------ ------------ ------------ ------------ ---------------------------------------------------------------- ------------ ---------------------------------------------------------------- ------------ -------------------- -------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ------------

0 rows fetched.

SQL>  select * from part_t1 order by a1; 

A1           A2           A3          
------------ ------------ ------------
1            2            3           
2            2            3           
4            2            3           
6            2            3           
7            2            3           
7            2            3           
8            2            3           
8            2            3           
12           2            3           
16           2            3           
17           2            3           
21           2            3           
22           2            3           
27           2            3           
30           2            3           
50           2            3           

16 rows fetched.

SQL> 
SQL> ---test case for hash partition-----------------------------------------
SQL> drop table if exists part_t1;

Succeed.

SQL> drop table if exists test_hash;

Succeed.

SQL> 
SQL> create table test_hash (
  2 c1 char(20) not null,
  3 c2 number(8) not null
  4 )
  5 partition by hash(c1)
  6 (
  7 partition part_01 tablespace users,
  8 partition part_02 tablespace users,
  9 partition part_03 tablespace users
 10 );

Succeed.

SQL> 
SQL> insert into test_hash values('aaaa',111);

1 rows affected.

SQL> insert into test_hash values('bbbb',111);

1 rows affected.

SQL> insert into test_hash values('cccc',111);

1 rows affected.

SQL> insert into test_hash values('dddd',111);

1 rows affected.

SQL> insert into test_hash values('eeee',111);

1 rows affected.

SQL> insert into test_hash values('ffff',111);

1 rows affected.

SQL> insert into test_hash values('hhhh',111);

1 rows affected.

SQL> insert into test_hash values('iiii',111);

1 rows affected.

SQL> 
SQL> select * from test_hash partition (part_01) order by c1,c2;

C1                   C2                                      
-------------------- ----------------------------------------
bbbb                 111                                     
iiii                 111                                     

2 rows fetched.

SQL> select * from test_hash partition (part_02) order by c1,c2;

C1                   C2                                      
-------------------- ----------------------------------------
aaaa                 111                                     
cccc                 111                                     
dddd                 111                                     

3 rows fetched.

SQL> select * from test_hash partition (part_03) order by c1,c2;

C1                   C2                                      
-------------------- ----------------------------------------
eeee                 111                                     
ffff                 111                                     
hhhh                 111                                     

3 rows fetched.

SQL> 
SQL> update test_hash set c1 = 'xxxx' where c1 = 'aaaa';

1 rows affected.

SQL> update test_hash set c1 = 'yyyy' where c1 = 'bbbb';

1 rows affected.

SQL> 
SQL> ------------------add partition --------------------------------
SQL> create index idx_hash_part_t1 on test_hash(upper(c1));

Succeed.

SQL> 
SQL> select * from test_hash partition(part_02) order by c1,c2;

C1                   C2                                      
-------------------- ----------------------------------------
cccc                 111                                     
dddd                 111                                     
yyyy                 111                                     

3 rows fetched.

SQL> 
SQL> alter table test_hash add partition part_04 tablespace users;

Succeed.

SQL> 
SQL> select * from test_hash partition(part_02) order by c1,c2;

C1                   C2                                      
-------------------- ----------------------------------------
yyyy                 111                                     

1 rows fetched.

SQL> select * from test_hash partition(part_04) order by c1,c2;

C1                   C2                                      
-------------------- ----------------------------------------
cccc                 111                                     
dddd                 111                                     

2 rows fetched.

SQL> 
SQL> alter table test_hash add partition part_05 tablespace users;

Succeed.

SQL> 
SQL> select * from test_hash partition(part_01) order by c1,c2;

C1                   C2                                      
-------------------- ----------------------------------------
iiii                 111                                     
xxxx                 111                                     

2 rows fetched.

SQL> select * from test_hash partition(part_05) order by c1,c2;

C1                   C2                                      
-------------------- ----------------------------------------

0 rows fetched.

SQL> 
SQL> -------------------coalesce partition----------------------------
SQL> ALTER TABLE test_hash COALESCE PARTITION ;

Succeed.

SQL> select * from test_hash partition(part_02) order by c1,c2;

C1                   C2                                      
-------------------- ----------------------------------------
yyyy                 111                                     

1 rows fetched.

SQL> select * from test_hash partition(part_04) order by c1,c2;

C1                   C2                                      
-------------------- ----------------------------------------
cccc                 111                                     
dddd                 111                                     

2 rows fetched.

SQL> drop table test_hash;

Succeed.

SQL> 
SQL> drop table if exists test_hash1;

Succeed.

SQL> 
SQL> create table test_hash1 (
  2 c3 char(20) primary key,
  3 c4 number(8) not null
  4 )
  5 partition by hash(c3)
  6 (
  7 partition part_01 tablespace users,
  8 partition part_02 tablespace users,
  9 partition part_03 tablespace users
 10 );

Succeed.

SQL> 
SQL> insert into test_hash1 values('aaaa',111);

1 rows affected.

SQL> insert into test_hash1 values('bbbb',111);

1 rows affected.

SQL> insert into test_hash1 values('cccc',111);

1 rows affected.

SQL> insert into test_hash1 values('dddd',111);

1 rows affected.

SQL> insert into test_hash1 values('eeee',111);

1 rows affected.

SQL> insert into test_hash1 values('ffff',111);

1 rows affected.

SQL> insert into test_hash1 values('hhhh',111);

1 rows affected.

SQL> insert into test_hash1 values('iiii',111);

1 rows affected.

SQL> 
SQL> create index idx_hash_part_t2 on test_hash1(c3,c4) local;

Succeed.

SQL> select * from test_hash1 partition(part_02) order by c3,c4;

C3                   C4                                      
-------------------- ----------------------------------------
aaaa                 111                                     
cccc                 111                                     
dddd                 111                                     

3 rows fetched.

SQL> 
SQL> alter table test_hash1 add partition part_04 tablespace users;

Succeed.

SQL> 
SQL> select * from test_hash1 partition(part_02) order by c3,c4;

C3                   C4                                      
-------------------- ----------------------------------------

0 rows fetched.

SQL> select * from test_hash1 partition(part_04) order by c3,c4;

C3                   C4                                      
-------------------- ----------------------------------------
aaaa                 111                                     
cccc                 111                                     
dddd                 111                                     

3 rows fetched.

SQL> 
SQL> alter table test_hash1 add partition part_05 tablespace users;

Succeed.

SQL> 
SQL> select * from test_hash1 partition(part_01) order by c3,c4;

C3                   C4                                      
-------------------- ----------------------------------------
iiii                 111                                     

1 rows fetched.

SQL> select * from test_hash1 partition(part_05) order by c3,c4;

C3                   C4                                      
-------------------- ----------------------------------------
bbbb                 111                                     

1 rows fetched.

SQL> 
SQL> ALTER TABLE test_hash1 COALESCE PARTITION ;

Succeed.

SQL> select * from test_hash1 partition(part_02) order by c3,c4;

C3                   C4                                      
-------------------- ----------------------------------------

0 rows fetched.

SQL> select * from test_hash1 partition(part_04) order by c3,c4;

C3                   C4                                      
-------------------- ----------------------------------------
aaaa                 111                                     
cccc                 111                                     
dddd                 111                                     

3 rows fetched.

SQL> ALTER TABLE test_hash1 COALESCE PARTITION ;

Succeed.

SQL> select * from test_hash1 partition(part_02) order by c3,c4;

C3                   C4                                      
-------------------- ----------------------------------------
aaaa                 111                                     
cccc                 111                                     
dddd                 111                                     

3 rows fetched.

SQL> select * from test_hash1 partition(part_04) order by c3,c4;

CT-00800, A table (sub)partition PART_04 does not exist.
SQL> drop index idx_hash_part_t2 on test_hash1;

Succeed.

SQL> drop table test_hash1;

Succeed.

SQL> -------------------------hash column is int----------------------
SQL> drop table if exists test_hash_int;

Succeed.

SQL> 
SQL> create table test_hash_int (
  2 c1 int not null,
  3 c2 number(8) not null
  4 )
  5 partition by hash(c1)
  6 (
  7 partition part_01 tablespace users,
  8 partition part_02 tablespace users,
  9 partition part_03 tablespace users
 10 );

Succeed.

SQL> 
SQL> insert into test_hash_int values(231,111);

1 rows affected.

SQL> insert into test_hash_int values(123,111);

1 rows affected.

SQL> insert into test_hash_int values(345,111);

1 rows affected.

SQL> insert into test_hash_int values(567,111);

1 rows affected.

SQL> insert into test_hash_int values(678,111);

1 rows affected.

SQL> insert into test_hash_int values(789,111);

1 rows affected.

SQL> insert into test_hash_int values(256,111);

1 rows affected.

SQL> insert into test_hash_int values(478,111);

1 rows affected.

SQL> drop table test_hash_int;

Succeed.

SQL> ---------------------------two hash columns------------------------------
SQL> drop table if exists  test_hash_two_col;

Succeed.

SQL> 
SQL> create table test_hash_two_col (
  2 c1 int not null,
  3 c2 number(8) not null,
  4 c3 char(15)
  5 )
  6 partition by hash(c1,c2)
  7 (
  8 partition part_01 tablespace users,
  9 partition part_02 tablespace users,
 10 partition part_03 tablespace users
 11 );

Succeed.

SQL> 
SQL> insert into test_hash_two_col values(23,111,'aaa');

1 rows affected.

SQL> insert into test_hash_two_col values(24,111,'bbb');

1 rows affected.

SQL> insert into test_hash_two_col values(25,111,'ccc');

1 rows affected.

SQL> insert into test_hash_two_col values(26,111,'ddd');

1 rows affected.

SQL> insert into test_hash_two_col values(27,111,'eee');

1 rows affected.

SQL> insert into test_hash_two_col values(28,111,'fff');

1 rows affected.

SQL> 
SQL> select * from test_hash_two_col partition(part_01) order by c1,c2,c3;

C1           C2                                       C3             
------------ ---------------------------------------- ---------------
23           111                                      aaa            
28           111                                      fff            

2 rows fetched.

SQL> select * from test_hash_two_col partition(part_02) order by c1,c2,c3;

C1           C2                                       C3             
------------ ---------------------------------------- ---------------
24           111                                      bbb            
25           111                                      ccc            
26           111                                      ddd            

3 rows fetched.

SQL> select * from test_hash_two_col partition(part_03) order by c1,c2,c3;

C1           C2                                       C3             
------------ ---------------------------------------- ---------------
27           111                                      eee            

1 rows fetched.

SQL> drop table test_hash_two_col;

Succeed.

SQL> ------------------------create hash partition with store in grammar------
SQL> drop table if exists test_hash_store_in;

Succeed.

SQL> 
SQL> CREATE TABLE test_hash_store_in 
  2 (c1 char(15), 
  3 c2  int
  4 )
  5 PARTITION BY HASH (c1)
  6 PARTITIONS 3
  7 STORE IN(users,users, users);

Succeed.

SQL> 
SQL> insert into test_hash_store_in values('aaaa',111);

1 rows affected.

SQL> insert into test_hash_store_in values('bbbb',111);

1 rows affected.

SQL> insert into test_hash_store_in values('cccc',111);

1 rows affected.

SQL> insert into test_hash_store_in values('dddd',111);

1 rows affected.

SQL> insert into test_hash_store_in values('eeee',111);

1 rows affected.

SQL> insert into test_hash_store_in values('ffff',111);

1 rows affected.

SQL> insert into test_hash_store_in values('hhhh',111);

1 rows affected.

SQL> insert into test_hash_store_in values('iiii',111);

1 rows affected.

SQL> drop table test_hash_store_in;

Succeed.

SQL> ------------------------create hash partition with store in grammer---------
SQL> ------------------------tablespace cnt is less than partcnt-----------------
SQL> drop table if exists test_hash_store_in2;

Succeed.

SQL> 
SQL> CREATE TABLE test_hash_store_in2 
  2 (c1 char(15), 
  3 c2  int
  4 )
  5 PARTITION BY HASH (c1)
  6 PARTITIONS 3
  7 STORE IN(users,users);

Succeed.

SQL> 
SQL> insert into test_hash_store_in2 values('aaaa',111);

1 rows affected.

SQL> insert into test_hash_store_in2 values('bbbb',111);

1 rows affected.

SQL> insert into test_hash_store_in2 values('cccc',111);

1 rows affected.

SQL> insert into test_hash_store_in2 values('dddd',111);

1 rows affected.

SQL> insert into test_hash_store_in2 values('eeee',111);

1 rows affected.

SQL> insert into test_hash_store_in2 values('ffff',111);

1 rows affected.

SQL> insert into test_hash_store_in2 values('hhhh',111);

1 rows affected.

SQL> insert into test_hash_store_in2 values('iiii',111);

1 rows affected.

SQL> drop table test_hash_store_in2;

Succeed.

SQL> -----------------------------------------------------------------------------
SQL> drop table if exists test_one_part;

Succeed.

SQL> 
SQL> create table test_one_part (
  2 c1 char(20) primary key,
  3 c2 number(8) not null,
  4 c3 clob   not null
  5 )
  6 partition by hash(c1)
  7 (
  8 partition part_01 tablespace users
  9 );

Succeed.

SQL> 
SQL> insert into test_one_part values('aaaaaaa',1111,'xxxxxxxxxxxxxxxxxxxxxxxxx');

1 rows affected.

SQL> insert into test_one_part values('bbbbbbb',1111,'xxxxxxxxxxxxxxxxxxxxxxxxx');

1 rows affected.

SQL> insert into test_one_part values('ccccccc',1111,'xxxxxxxxxxxxxxxxxxxxxxxxx');

1 rows affected.

SQL> insert into test_one_part values('ddddddd',1111,'xxxxxxxxxxxxxxxxxxxxxxxxx');

1 rows affected.

SQL> 
SQL> select * from test_one_part partition (part_01) order by c1,c2;

C1                   C2                                       C3                                                              
-------------------- ---------------------------------------- ----------------------------------------------------------------
aaaaaaa              1111                                     xxxxxxxxxxxxxxxxxxxxxxxxx                                       
bbbbbbb              1111                                     xxxxxxxxxxxxxxxxxxxxxxxxx                                       
ccccccc              1111                                     xxxxxxxxxxxxxxxxxxxxxxxxx                                       
ddddddd              1111                                     xxxxxxxxxxxxxxxxxxxxxxxxx                                       

4 rows fetched.

SQL> alter table test_one_part add partition part_02 tablespace users;

Succeed.

SQL> select * from test_one_part partition (part_01) order by c1,c2;

C1                   C2                                       C3                                                              
-------------------- ---------------------------------------- ----------------------------------------------------------------
aaaaaaa              1111                                     xxxxxxxxxxxxxxxxxxxxxxxxx                                       
bbbbbbb              1111                                     xxxxxxxxxxxxxxxxxxxxxxxxx                                       
ccccccc              1111                                     xxxxxxxxxxxxxxxxxxxxxxxxx                                       
ddddddd              1111                                     xxxxxxxxxxxxxxxxxxxxxxxxx                                       

4 rows fetched.

SQL> select * from test_one_part partition (part_02) order by c1,c2;

C1                   C2                                       C3                                                              
-------------------- ---------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> alter table test_one_part add partition part_03 tablespace users;

Succeed.

SQL> select * from test_one_part partition (part_03) order by c1,c2;

C1                   C2                                       C3                                                              
-------------------- ---------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> select * from test_one_part partition (part_02) order by c1,c2;

C1                   C2                                       C3                                                              
-------------------- ---------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> 
SQL> alter table test_one_part coalesce partition;

Succeed.

SQL> select * from test_one_part partition (part_03) order by c1,c2;

CT-00800, A table (sub)partition PART_03 does not exist.
SQL> select * from test_one_part partition (part_02) order by c1,c2;

C1                   C2                                       C3                                                              
-------------------- ---------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> alter table test_one_part coalesce partition;

Succeed.

SQL> select * from test_one_part partition (part_02) order by c1,c2;

CT-00800, A table (sub)partition PART_02 does not exist.
SQL> select * from test_one_part partition (part_01) order by c1,c2;

C1                   C2                                       C3                                                              
-------------------- ---------------------------------------- ----------------------------------------------------------------
aaaaaaa              1111                                     xxxxxxxxxxxxxxxxxxxxxxxxx                                       
bbbbbbb              1111                                     xxxxxxxxxxxxxxxxxxxxxxxxx                                       
ccccccc              1111                                     xxxxxxxxxxxxxxxxxxxxxxxxx                                       
ddddddd              1111                                     xxxxxxxxxxxxxxxxxxxxxxxxx                                       

4 rows fetched.

SQL> drop table test_one_part;

Succeed.

SQL> ------------------------comprehensive && exceptional case--------------------------------------
SQL> drop table if exists test_part_hash_multi;

Succeed.

SQL> create table test_part_hash_multi(f1 int, f2 real, f3 number, f4 char(30), f5 varchar(30), f6 date, f7 timestamp)
  2 partition by hash(f1,f2,f3,f4,f5,f6,f7)
  3 (
  4 partition p1 tablespace users,
  5 partition p2 tablespace users
  6 );

Succeed.

SQL> 
SQL> create index idx_hash_t1_1 on test_part_hash_multi(f2,f3) parallel 4;

Succeed.

SQL> create index idx_hash_t1_2 on test_part_hash_multi(f4,f5) local;

Succeed.

SQL> insert into test_part_hash_multi values(5, 15, 28, 'abcd', 'abcd', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3'));

1 rows affected.

SQL> insert into test_part_hash_multi values(6, 16, 29, '16', '29', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3'));

1 rows affected.

SQL> insert into test_part_hash_multi values(16, 26, 39, '26', '39', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3'));

1 rows affected.

SQL> insert into test_part_hash_multi values(26, 36, 49, '36', '49', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3'));

1 rows affected.

SQL> insert into test_part_hash_multi values(36, 46, 59, '46', '59', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3'));

1 rows affected.

SQL> insert into test_part_hash_multi values(46, 56, 69, '56', '69', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3'));

1 rows affected.

SQL> update test_part_hash_multi set f1 = 15 where f1=46;

1 rows affected.

SQL> update test_part_hash_multi set f1 = 56 where f1=46;

0 rows affected.

SQL> delete from test_part_hash_multi where f1=56;

0 rows affected.

SQL> select * from test_part_hash_multi order by f1;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------
5            15                   28                                       abcd                           abcd                           2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
6            16                   29                                       16                             29                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
15           56                   69                                       56                             69                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
16           26                   39                                       26                             39                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
26           36                   49                                       36                             49                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
36           46                   59                                       46                             59                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      

6 rows fetched.

SQL> select * from test_part_hash_multi where f1 = 16 order by f1;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------
16           26                   39                                       26                             39                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      

1 rows fetched.

SQL> select * from test_part_hash_multi where f1 > 16 order by f1;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------
26           36                   49                                       36                             49                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
36           46                   59                                       46                             59                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      

2 rows fetched.

SQL> select * from test_part_hash_multi where f1 >= 16 order by f1;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------
16           26                   39                                       26                             39                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
26           36                   49                                       36                             49                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
36           46                   59                                       46                             59                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      

3 rows fetched.

SQL> select * from test_part_hash_multi where f1 is null order by f1;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------

0 rows fetched.

SQL> select * from test_part_hash_multi where f4='abcd' and f5='abcd' order by f1;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------
5            15                   28                                       abcd                           abcd                           2018-01-24 00:00:00    2018-01-24 16:00:00.000000      

1 rows fetched.

SQL> select * from test_part_hash_multi where f4='16' and f5='29' and f2=16 and f3=29 order by f1;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------
6            16                   29                                       16                             29                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      

1 rows fetched.

SQL> select * from test_part_hash_multi where f4='16' and f5='29' and f2=16 and f3=29 and f1 <10 order by f1;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------
6            16                   29                                       16                             29                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      

1 rows fetched.

SQL> explain plan for select * from test_part_hash_multi where f4='16' and f5='29' and f2=16 and f3=29 and f1 <10 order by f1;

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
| Id  | Description                                  | Owner | Name                 | Rows | Cost | Bytes | Remark |
--------------------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                             |       |                      |      |      |       |        |
| 1   |   QUERY SORT ORDER BY                        |       |                      |      |      |       |        |
| 2   |     TABLE ACCESS BY INDEX ROWID Filter:[0,2) | SYS   | TEST_PART_HASH_MULTI |      |      |       |        |
| 3   |       INDEX RANGE SCAN                       | SYS   | IDX_HASH_T1_2        |      |      |       |        |
--------------------------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   2 - filter: F3 = 29 AND F1 < 10 AND F2 = 16                  
   3 - access: F5 = '29' AND F4 = '16'                          

12 rows fetched.

SQL> select * from test_part_hash_multi where f4='16' and f5='29' and f2=16 and f3=29 and f1 =6 order by f1;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------
6            16                   29                                       16                             29                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      

1 rows fetched.

SQL> explain plan for select * from test_part_hash_multi where f4='16' and f5='29' and f2=16 and f3=29 and f1 =6 order by f1;

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
| Id  | Description                                  | Owner | Name                 | Rows | Cost | Bytes | Remark |
--------------------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                             |       |                      |      |      |       |        |
| 1   |   QUERY SORT ORDER BY                        |       |                      |      |      |       |        |
| 2   |     TABLE ACCESS BY INDEX ROWID Filter:[0,2) | SYS   | TEST_PART_HASH_MULTI |      |      |       |        |
| 3   |       INDEX RANGE SCAN                       | SYS   | IDX_HASH_T1_2        |      |      |       |        |
--------------------------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   2 - filter: F1 = 6 AND F3 = 29 AND F2 = 16                   
   3 - access: F5 = '29' AND F4 = '16'                          

12 rows fetched.

SQL> select * from test_part_hash_multi where f4='16' and f5='29' and f2=16 and f3=29 and (f1 =6 or f1=26) order by f1;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------
6            16                   29                                       16                             29                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      

1 rows fetched.

SQL> select * from test_part_hash_multi where f4 >='16' and f5 >='29' and (f2=16 or f2=36) and (f3=29 or f3 = 49) and (f1 =6 or f1=26) order by f1;

F1           F2                   F3                                       F4                             F5                             F6                     F7                              
------------ -------------------- ---------------------------------------- ------------------------------ ------------------------------ ---------------------- --------------------------------
6            16                   29                                       16                             29                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      
26           36                   49                                       36                             49                             2018-01-24 00:00:00    2018-01-24 16:00:00.000000      

2 rows fetched.

SQL> drop table test_part_hash_multi;

Succeed.

SQL> drop table if exists test_hash1;

Succeed.

SQL> create table test_hash1 (
  2 c1 char(20) primary key,
  3 c2 number(8) not null
  4 )
  5 partition by hash(c1)
  6 (
  7 partition part_01 tablespace users,
  8 partition part_02 tablespace users,
  9 partition part_01 tablespace users
 10 );

CT-01107, There were duplicate partition or subpartition names.
SQL> 
SQL> drop table if exists test_hash2;

Succeed.

SQL> create table test_hash2 (
  2 c1 char(20) primary key,
  3 c2 number(8) not null
  4 )
  5 partition by hash(c1)
  6 (
  7 partition part_01 tablespace users,
  8 partition part_02 tablespace users,
  9 partition 123456 tablespace users
 10 );

CT-01100, [9:11]The (sub)partition name violated the naming conventions.
SQL> 
SQL> drop table if exists test_hash3;

Succeed.

SQL> create table test_hash3 (
  2 c1 char(20) primary key,
  3 c2 number(8) not null
  4 )
  5 partition by hash(c1)
  6 (
  7 partition part_01 tablespace users,
  8 partition part_02 tablespace users,
  9 partition part_03 tablespace users,
 10 partition part_04 tablespace users
 11 );

Succeed.

SQL> 
SQL> insert into test_hash3 values('aaaa',1111);

1 rows affected.

SQL> insert into test_hash3 values('bbbb',1111);

1 rows affected.

SQL> insert into test_hash3 values('cccc',1111);

1 rows affected.

SQL> insert into test_hash3 values('dddd',1111);

1 rows affected.

SQL> insert into test_hash3 values('eeee',1111);

1 rows affected.

SQL> insert into test_hash3 values('ffff',1111);

1 rows affected.

SQL> insert into test_hash3 values('gggg',1111);

1 rows affected.

SQL> insert into test_hash3 values('hhhh',1111);

1 rows affected.

SQL> 
SQL> select * from test_hash3 partition(part_01) order by c1,c2;

C1                   C2                                      
-------------------- ----------------------------------------
bbbb                 1111                                    

1 rows fetched.

SQL> alter table test_hash3 coalesce partition;

Succeed.

SQL> alter table test_hash3 coalesce partition;

Succeed.

SQL> alter table test_hash3 coalesce partition;

Succeed.

SQL> alter table test_hash3 coalesce partition;

CT-01110, The operation coalesce a table with only one partition was not allowed
SQL> select * from test_hash3 partition(part_01) order by c1,c2;

C1                   C2                                      
-------------------- ----------------------------------------
aaaa                 1111                                    
bbbb                 1111                                    
cccc                 1111                                    
dddd                 1111                                    
eeee                 1111                                    
ffff                 1111                                    
gggg                 1111                                    
hhhh                 1111                                    

8 rows fetched.

SQL> -------do not support drop for hash partition---------------
SQL> alter table test_hash3 drop partition part_04;

CT-00130, Operation alter table drop partition is not supported on hash partition
SQL> drop table test_hash3;

Succeed.

SQL> create table test_part_lob(f1 clob)
  2 partition by hash(f1)
  3 (
  4 partition p1 tablespace users,
  5 partition p2 tablespace users
  6 );

CT-01104, The LOB column can not be used as the (sub)partition key.
SQL> 
SQL> -----test hash partition index online-----------------------
SQL>  drop table if exists part_t1;

Succeed.

SQL>  create table part_t1(a1 int,a2 int,a3 int)
  2  partition by hash(a1)
  3 (partition table_p01 tablespace users,
  4  partition table_p02 tablespace users,
  5  partition table_p03 tablespace users,
  6  partition table_p04 tablespace users,
  7  partition table_p05 tablespace users
  8  );

Succeed.

SQL> 
SQL>  create index idx_hash_part_t1 on part_t1(a1) online;

Succeed.

SQL>  create index idx_hash_part_t2 on part_t1(a1,a2) local online;

Succeed.

SQL>  create index idx_hash_part_t3 on part_t1(a1,a3) local online;

Succeed.

SQL>  alter index idx_hash_part_t1 on part_t1 rebuild;

Succeed.

SQL>  alter index idx_hash_part_t1 on part_t1 rebuild online;

Succeed.

SQL>  alter index idx_hash_part_t2 on part_t1 rebuild;

Succeed.

SQL>  alter index idx_hash_part_t2 on part_t1 rebuild online;

Succeed.

SQL>  alter index idx_hash_part_t3 on part_t1 rebuild online;

Succeed.

SQL>  select * from part_t1;

A1           A2           A3          
------------ ------------ ------------

0 rows fetched.

SQL>  drop  index idx_hash_part_t1;

Succeed.

SQL>  drop  index idx_hash_part_t2;

Succeed.

SQL> 
SQL>  drop table if exists part_t1;

Succeed.

SQL>  create table part_t1(a1 int,a2 int,a3 int)
  2  partition by hash(a1)
  3 (partition table_p01 tablespace users,
  4  partition table_p02 tablespace users,
  5  partition table_p03 tablespace users,
  6  partition table_p04 tablespace users,
  7  partition table_p05 tablespace users
  8  );

Succeed.

SQL> 
SQL>  insert into part_t1 values(1,2,3);

1 rows affected.

SQL>  insert into part_t1 values(2,2,3);

1 rows affected.

SQL>  insert into part_t1 values(4,2,3);

1 rows affected.

SQL>  insert into part_t1 values(6,2,3);

1 rows affected.

SQL>  insert into part_t1 values(7,2,3);

1 rows affected.

SQL>  insert into part_t1 values(8,2,3);

1 rows affected.

SQL>  insert into part_t1 values(17,2,3);

1 rows affected.

SQL>  insert into part_t1 values(12,2,3);

1 rows affected.

SQL>  insert into part_t1 values(21,2,3);

1 rows affected.

SQL>  insert into part_t1 values(22,2,3);

1 rows affected.

SQL>  insert into part_t1 values(30,2,3);

1 rows affected.

SQL>  insert into part_t1 values(16,2,3);

1 rows affected.

SQL>  insert into part_t1 values(7,2,3);

1 rows affected.

SQL>  insert into part_t1 values(8,2,3);

1 rows affected.

SQL>  insert into part_t1 values(27,2,3);

1 rows affected.

SQL>  insert into part_t1 values(50,2,3); 

1 rows affected.

SQL>  create index idx_hash_part_t1 on part_t1(a1) online;

Succeed.

SQL>  select * from SYS_SHADOW_INDEXES;

USER#        TABLE#       ID           NAME                                                             SPACE#       SEQUENCE#            ENTRY                IS_PRIMARY   IS_UNIQUE    TYPE         COLS         COL_LIST                                                         INITRANS     CR_MODE      FLAGS        PARTED       PCTFREE     
------------ ------------ ------------ ---------------------------------------------------------------- ------------ -------------------- -------------------- ------------ ------------ ------------ ------------ ---------------------------------------------------------------- ------------ ------------ ------------ ------------ ------------

0 rows fetched.

SQL>  select * from SYS_SHADOW_INDEX_PARTS;

USER#        TABLE#       INDEX#       PART#        NAME                                                             HIBOUNDLEN   HIBOUNDVAL                                                       SPACE#       ORG_SCN              ENTRY                INITRANS     PCTFREE      FLAGS        BHIBOUNDVAL                                                      PARENT_PART#
------------ ------------ ------------ ------------ ---------------------------------------------------------------- ------------ ---------------------------------------------------------------- ------------ -------------------- -------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ------------

0 rows fetched.

SQL>  create index idx_hash_part_t2 on part_t1(a1,a2) local online;

Succeed.

SQL>  select * from SYS_SHADOW_INDEXES;

USER#        TABLE#       ID           NAME                                                             SPACE#       SEQUENCE#            ENTRY                IS_PRIMARY   IS_UNIQUE    TYPE         COLS         COL_LIST                                                         INITRANS     CR_MODE      FLAGS        PARTED       PCTFREE     
------------ ------------ ------------ ---------------------------------------------------------------- ------------ -------------------- -------------------- ------------ ------------ ------------ ------------ ---------------------------------------------------------------- ------------ ------------ ------------ ------------ ------------

0 rows fetched.

SQL>  select * from SYS_SHADOW_INDEX_PARTS;

USER#        TABLE#       INDEX#       PART#        NAME                                                             HIBOUNDLEN   HIBOUNDVAL                                                       SPACE#       ORG_SCN              ENTRY                INITRANS     PCTFREE      FLAGS        BHIBOUNDVAL                                                      PARENT_PART#
------------ ------------ ------------ ------------ ---------------------------------------------------------------- ------------ ---------------------------------------------------------------- ------------ -------------------- -------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ------------

0 rows fetched.

SQL>  alter index idx_hash_part_t1 on part_t1 rebuild;

Succeed.

SQL>  alter index idx_hash_part_t1 on part_t1 rebuild online;

Succeed.

SQL>  select * from SYS_SHADOW_INDEXES;

USER#        TABLE#       ID           NAME                                                             SPACE#       SEQUENCE#            ENTRY                IS_PRIMARY   IS_UNIQUE    TYPE         COLS         COL_LIST                                                         INITRANS     CR_MODE      FLAGS        PARTED       PCTFREE     
------------ ------------ ------------ ---------------------------------------------------------------- ------------ -------------------- -------------------- ------------ ------------ ------------ ------------ ---------------------------------------------------------------- ------------ ------------ ------------ ------------ ------------

0 rows fetched.

SQL>  select * from SYS_SHADOW_INDEX_PARTS;

USER#        TABLE#       INDEX#       PART#        NAME                                                             HIBOUNDLEN   HIBOUNDVAL                                                       SPACE#       ORG_SCN              ENTRY                INITRANS     PCTFREE      FLAGS        BHIBOUNDVAL                                                      PARENT_PART#
------------ ------------ ------------ ------------ ---------------------------------------------------------------- ------------ ---------------------------------------------------------------- ------------ -------------------- -------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ------------

0 rows fetched.

SQL>  alter index idx_hash_part_t2 on part_t1 rebuild;

Succeed.

SQL>  alter index idx_hash_part_t2 on part_t1 rebuild online;

Succeed.

SQL>  select * from SYS_SHADOW_INDEXES;

USER#        TABLE#       ID           NAME                                                             SPACE#       SEQUENCE#            ENTRY                IS_PRIMARY   IS_UNIQUE    TYPE         COLS         COL_LIST                                                         INITRANS     CR_MODE      FLAGS        PARTED       PCTFREE     
------------ ------------ ------------ ---------------------------------------------------------------- ------------ -------------------- -------------------- ------------ ------------ ------------ ------------ ---------------------------------------------------------------- ------------ ------------ ------------ ------------ ------------

0 rows fetched.

SQL>  select * from SYS_SHADOW_INDEX_PARTS;

USER#        TABLE#       INDEX#       PART#        NAME                                                             HIBOUNDLEN   HIBOUNDVAL                                                       SPACE#       ORG_SCN              ENTRY                INITRANS     PCTFREE      FLAGS        BHIBOUNDVAL                                                      PARENT_PART#
------------ ------------ ------------ ------------ ---------------------------------------------------------------- ------------ ---------------------------------------------------------------- ------------ -------------------- -------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ------------

0 rows fetched.

SQL> 
SQL>  select * from part_t1 order by a1; 

A1           A2           A3          
------------ ------------ ------------
1            2            3           
2            2            3           
4            2            3           
6            2            3           
7            2            3           
7            2            3           
8            2            3           
8            2            3           
12           2            3           
16           2            3           
17           2            3           
21           2            3           
22           2            3           
27           2            3           
30           2            3           
50           2            3           

16 rows fetched.

SQL>  drop  index idx_hash_part_t1;

Succeed.

SQL>  drop  index idx_hash_part_t2;

Succeed.

SQL> ---------------------------------------------------------------
SQL>  drop table if exists part_t1;

Succeed.

SQL>  create table part_t1(a1 int,a2 int,a3 int)
  2  partition by hash(a1)
  3 (partition table_p01 tablespace users,
  4  partition table_p02 tablespace users,
  5  partition table_p03 tablespace users,
  6  partition table_p04 tablespace users,
  7  partition table_p05 tablespace users
  8  ) crmode row;

Succeed.

SQL> 
SQL>  insert into part_t1 values(1,2,3);

1 rows affected.

SQL>  insert into part_t1 values(2,2,3);

1 rows affected.

SQL>  insert into part_t1 values(4,2,3);

1 rows affected.

SQL>  insert into part_t1 values(6,2,3);

1 rows affected.

SQL>  insert into part_t1 values(7,2,3);

1 rows affected.

SQL>  insert into part_t1 values(8,2,3);

1 rows affected.

SQL>  insert into part_t1 values(17,2,3);

1 rows affected.

SQL>  insert into part_t1 values(12,2,3);

1 rows affected.

SQL>  create index idx_hash_part_t1 on part_t1(a1) online;

Succeed.

SQL>  alter index idx_hash_part_t1 on part_t1 rebuild;

Succeed.

SQL>  alter index idx_hash_part_t1 on part_t1 rebuild online;

Succeed.

SQL>  select * from part_t1 order by a1; 

A1           A2           A3          
------------ ------------ ------------
1            2            3           
2            2            3           
4            2            3           
6            2            3           
7            2            3           
8            2            3           
12           2            3           
17           2            3           

8 rows fetched.

SQL> 
SQL>  insert into part_t1 values(21,2,3);

1 rows affected.

SQL>  insert into part_t1 values(22,2,3);

1 rows affected.

SQL>  insert into part_t1 values(30,2,3);

1 rows affected.

SQL>  insert into part_t1 values(16,2,3);

1 rows affected.

SQL>  insert into part_t1 values(7,2,3);

1 rows affected.

SQL>  insert into part_t1 values(8,2,3);

1 rows affected.

SQL>  insert into part_t1 values(27,2,3);

1 rows affected.

SQL>  insert into part_t1 values(50,2,3); 

1 rows affected.

SQL>  create index idx_hash_part_t2 on part_t1(a1,a2) local online;

Succeed.

SQL>  select * from SYS_SHADOW_INDEXES;

USER#        TABLE#       ID           NAME                                                             SPACE#       SEQUENCE#            ENTRY                IS_PRIMARY   IS_UNIQUE    TYPE         COLS         COL_LIST                                                         INITRANS     CR_MODE      FLAGS        PARTED       PCTFREE     
------------ ------------ ------------ ---------------------------------------------------------------- ------------ -------------------- -------------------- ------------ ------------ ------------ ------------ ---------------------------------------------------------------- ------------ ------------ ------------ ------------ ------------

0 rows fetched.

SQL>  select * from SYS_SHADOW_INDEX_PARTS;

USER#        TABLE#       INDEX#       PART#        NAME                                                             HIBOUNDLEN   HIBOUNDVAL                                                       SPACE#       ORG_SCN              ENTRY                INITRANS     PCTFREE      FLAGS        BHIBOUNDVAL                                                      PARENT_PART#
------------ ------------ ------------ ------------ ---------------------------------------------------------------- ------------ ---------------------------------------------------------------- ------------ -------------------- -------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ------------

0 rows fetched.

SQL>  alter index idx_hash_part_t2 on part_t1 rebuild;

Succeed.

SQL>  alter index idx_hash_part_t2 on part_t1 rebuild online;

Succeed.

SQL>  select * from SYS_SHADOW_INDEXES;

USER#        TABLE#       ID           NAME                                                             SPACE#       SEQUENCE#            ENTRY                IS_PRIMARY   IS_UNIQUE    TYPE         COLS         COL_LIST                                                         INITRANS     CR_MODE      FLAGS        PARTED       PCTFREE     
------------ ------------ ------------ ---------------------------------------------------------------- ------------ -------------------- -------------------- ------------ ------------ ------------ ------------ ---------------------------------------------------------------- ------------ ------------ ------------ ------------ ------------

0 rows fetched.

SQL>  select * from SYS_SHADOW_INDEX_PARTS;

USER#        TABLE#       INDEX#       PART#        NAME                                                             HIBOUNDLEN   HIBOUNDVAL                                                       SPACE#       ORG_SCN              ENTRY                INITRANS     PCTFREE      FLAGS        BHIBOUNDVAL                                                      PARENT_PART#
------------ ------------ ------------ ------------ ---------------------------------------------------------------- ------------ ---------------------------------------------------------------- ------------ -------------------- -------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ------------

0 rows fetched.

SQL>  select * from part_t1 order by a1; 

A1           A2           A3          
------------ ------------ ------------
1            2            3           
2            2            3           
4            2            3           
6            2            3           
7            2            3           
7            2            3           
8            2            3           
8            2            3           
12           2            3           
16           2            3           
17           2            3           
21           2            3           
22           2            3           
27           2            3           
30           2            3           
50           2            3           

16 rows fetched.

SQL>  ------------------flashback-------------------------------------
SQL>  SELECT SLEEP(2);

SLEEP(2)
--------
        

1 rows fetched.

SQL>  delete from part_t1 where a1=21;

1 rows affected.

SQL>  select * from part_t1 order by a1;

A1           A2           A3          
------------ ------------ ------------
1            2            3           
2            2            3           
4            2            3           
6            2            3           
7            2            3           
7            2            3           
8            2            3           
8            2            3           
12           2            3           
16           2            3           
17           2            3           
22           2            3           
27           2            3           
30           2            3           
50           2            3           

15 rows fetched.

SQL>  select ORG_NAME FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'PART_T1';

ORG_NAME                                                        
----------------------------------------------------------------

0 rows fetched.

SQL>  flashback table part_t1 to timestamp SYSTIMESTAMP - 1/(24*60*60);

Succeed.

SQL>  select * from part_t1 order by a1;

A1           A2           A3          
------------ ------------ ------------
1            2            3           
2            2            3           
4            2            3           
6            2            3           
7            2            3           
7            2            3           
8            2            3           
8            2            3           
12           2            3           
16           2            3           
17           2            3           
21           2            3           
22           2            3           
27           2            3           
30           2            3           
50           2            3           

16 rows fetched.

SQL>  truncate table part_t1;

Succeed.

SQL>  select * from part_t1 order by a1;

A1           A2           A3          
------------ ------------ ------------

0 rows fetched.

SQL>  -----------------------------------------------------------------
SQL>  drop table if exists part_t1;

Succeed.

SQL>  create table part_t1(f1 int,f2 int,f3 int)
  2  partition by hash(f1)
  3  (
  4  partition p1,
  5  partition p2,
  6  partition p3,
  7  partition p4,
  8  partition p5
  9  );

Succeed.

SQL> 
SQL>  drop table if exists part_t1;

Succeed.

SQL>  CREATE TABLE part_t1 (f1 int, f2 int) PARTITION BY HASH (f1) PARTITIONS 0;

CT-00601, [1:73]Sql syntax error: invalid partition number
SQL> 
SQL>  drop table if exists part_t1;

Succeed.

SQL>  CREATE TABLE part_t1 (f1 int, f2 int) PARTITION BY HASH (f1) PARTITIONS 5;

Succeed.

SQL> 
SQL>  insert into part_t1 values(1,1);

1 rows affected.

SQL>  insert into part_t1 values(2,1);

1 rows affected.

SQL>  insert into part_t1 values(3,1);

1 rows affected.

SQL>  insert into part_t1 values(4,1);

1 rows affected.

SQL>  insert into part_t1 values(5,1);

1 rows affected.

SQL>  insert into part_t1 values(6,1);

1 rows affected.

SQL>  insert into part_t1 values(7,1);

1 rows affected.

SQL>  insert into part_t1 values(8,1);

1 rows affected.

SQL>  insert into part_t1 values(9,1);

1 rows affected.

SQL>  insert into part_t1 values(10,1);

1 rows affected.

SQL>  select * from part_t1 where f1 = 2;

F1           F2          
------------ ------------
2            1           

1 rows fetched.

SQL>  explain select * from part_t1 where f1 = 2;

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
-------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name    | Rows | Cost | Bytes | Remark |
-------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |         |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[2,3) | SYS   | PART_T1 |      |      |       |        |
-------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: F1 = 2                                           

9 rows fetched.

SQL>  select * from part_t1 where f1 = 8;

F1           F2          
------------ ------------
8            1           

1 rows fetched.

SQL>  explain select * from part_t1 where f1 = 8;

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
-------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name    | Rows | Cost | Bytes | Remark |
-------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |         |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[4,5) | SYS   | PART_T1 |      |      |       |        |
-------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: F1 = 8                                           

9 rows fetched.

SQL>  select * from part_t1 where f1 > 3 order by f1;

F1           F2          
------------ ------------
4            1           
5            1           
6            1           
7            1           
8            1           
9            1           
10           1           

7 rows fetched.

SQL>  explain select * from part_t1 where f1 > 3 order by f1;

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
---------------------------------------------------------------------------------------------
| Id  | Description                        | Owner | Name    | Rows | Cost | Bytes | Remark |
---------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                   |       |         |      |      |       |        |
| 1   |   QUERY SORT ORDER BY              |       |         |      |      |       |        |
| 2   |     TABLE ACCESS FULL Filter:[0,5) | SYS   | PART_T1 |      |      |       |        |
---------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   2 - filter: F1 > 3                                           

10 rows fetched.

SQL> 
SQL> drop table if exists test_part_t1;

Succeed.

SQL> create table test_part_t1(f1 int, f2 int, f3 int, f4 int, f5 int)
  2 PARTITION BY RANGE(f1,f2,f3)
  3 (
  4  PARTITION p1 values less than(10,20,30),
  5  PARTITION p2 values less than(30,40,50),
  6  PARTITION p3 values less than(MAXVALUE,MAXVALUE,MAXVALUE)
  7 );

Succeed.

SQL> explain select * from test_part_t1 partition(p1);

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name         | Rows | Cost | Bytes | Remark |
------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |              |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[0,1) | SYS   | TEST_PART_T1 |      |      |       |        |
------------------------------------------------------------------------------------------------

6 rows fetched.

SQL> explain select * from test_part_t1 partition for (5,5,5);

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name         | Rows | Cost | Bytes | Remark |
------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |              |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[0,1) | SYS   | TEST_PART_T1 |      |      |       |        |
------------------------------------------------------------------------------------------------

6 rows fetched.

SQL> explain select * from test_part_t1 partition(p1) where f1=15 and f2=25 and f3=20;

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name         | Rows | Cost | Bytes | Remark |
------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |              |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[0,1) | SYS   | TEST_PART_T1 |      |      |       |        |
------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: F3 = 20 AND F1 = 15 AND F2 = 25                  

9 rows fetched.

SQL> explain select * from test_part_t1 partition for (5,5,5) where f1=15 and f2=25 and f3=20;

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name         | Rows | Cost | Bytes | Remark |
------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |              |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[0,1) | SYS   | TEST_PART_T1 |      |      |       |        |
------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: F3 = 20 AND F1 = 15 AND F2 = 25                  

9 rows fetched.

SQL> explain select * from test_part_t1 partition(p2) where f1=15 and f2=25 and f3=20;

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name         | Rows | Cost | Bytes | Remark |
------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |              |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[1,2) | SYS   | TEST_PART_T1 |      |      |       |        |
------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: F3 = 20 AND F1 = 15 AND F2 = 25                  

9 rows fetched.

SQL> explain select * from test_part_t1 partition for (15,25,20) where f1=15 and f2=25 and f3=20;

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name         | Rows | Cost | Bytes | Remark |
------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |              |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[1,2) | SYS   | TEST_PART_T1 |      |      |       |        |
------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: F3 = 20 AND F1 = 15 AND F2 = 25                  

9 rows fetched.

SQL> explain select * from test_part_t1 partition for (15,25,35) where f1=15 and f2=25 and f3=20;

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name         | Rows | Cost | Bytes | Remark |
------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |              |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[1,2) | SYS   | TEST_PART_T1 |      |      |       |        |
------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: F3 = 20 AND F1 = 15 AND F2 = 25                  

9 rows fetched.

SQL> explain select * from test_part_t1 partition(p3) where f1=15 and f2=25 and f3=20;

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name         | Rows | Cost | Bytes | Remark |
------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |              |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[2,3) | SYS   | TEST_PART_T1 |      |      |       |        |
------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: F3 = 20 AND F1 = 15 AND F2 = 25                  

9 rows fetched.

SQL> explain select * from test_part_t1 partition for (35,45,55) where f1=15 and f2=25 and f3=20;

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name         | Rows | Cost | Bytes | Remark |
------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |              |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[2,3) | SYS   | TEST_PART_T1 |      |      |       |        |
------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: F3 = 20 AND F1 = 15 AND F2 = 25                  

9 rows fetched.

SQL> drop table test_part_t1;

Succeed.

SQL> -----------------------------test huge partition count-------------------------------
SQL> drop table if exists table_hash;

Succeed.

SQL> CREATE TABLE table_hash(C_ID INT,
  2 C_D_ID INT NOT NULL,
  3 C_W_ID INT NOT NULL,
  4 C_FIRST VARCHAR(64) NOT NULL,
  5 C_MIDDLE CHAR(2),
  6 C_LAST VARCHAR(64) NOT NULL,
  7 C_STREET_1 VARCHAR(20) NOT NULL,
  8 C_STREET_2 VARCHAR(20),
  9 C_CITY VARCHAR(20) NOT NULL,
 10 C_STATE CHAR(2) NOT NULL,
 11 C_ZIP CHAR(9) NOT NULL,
 12 C_PHONE CHAR(16) NOT NULL,
 13 C_SINCE TIMESTAMP,
 14 C_CREDIT CHAR(2) NOT NULL,
 15 C_CREDIT_LIM NUMERIC(12,2),
 16 C_DISCOUNT NUMERIC(4,4),
 17 C_BALANCE NUMERIC(12,2),
 18 C_YTD_PAYMENT REAL NOT NULL,
 19 C_PAYMENT_CNT NUMBER NOT NULL,
 20 C_END DATE NOT NULL,
 21 C_VCHAR VARCHAR(1000),
 22 C_DATA CLOB,
 23 C_TEXT BLOB
 24 )
 25 PARTITION BY HASH(c_id,c_first,c_end)
 26 partitions 8192
 27 store in
 28 (users
 29 );

Succeed.

SQL> alter table table_hash add partition part_01;

Succeed.

SQL> alter table table_hash add partition part_02;

Succeed.

SQL> alter table table_hash coalesce partition;

Succeed.

SQL> drop table table_hash;

Succeed.

SQL> ------------------------------truncate partition then dml operation----------------------
SQL> drop table if exists strg_wait_lk_range_tbl_30;

Succeed.

SQL> create table strg_wait_lk_range_tbl_30(
  2 c_id int,
  3 c_first varchar(30) NOT NULL,
  4 c_end int NOT NULL,
  5 c_vchar varchar(1000),
  6 c_data clob,
  7 c_text blob) 
  8 partition by range(c_id,c_first) 
  9 (partition PART_1 values less than (201,'is201'),
 10  partition PART_2 values less than (401,'is401'),
 11  partition PART_3 values less than (601,'is601'),
 12  partition PART_4 values less than (801,'is801'),
 13  partition PART_5 values less than (maxvalue,maxvalue)
 14  );

Succeed.

SQL> 
SQL>  insert into strg_wait_lk_range_tbl_30 values(12,'is12',12,'','','');

1 rows affected.

SQL>  insert into strg_wait_lk_range_tbl_30 values(300,'is300',300,'','','');

1 rows affected.

SQL>  insert into strg_wait_lk_range_tbl_30 values(500,'is500',500,'','','');

1 rows affected.

SQL>  insert into strg_wait_lk_range_tbl_30 values(700,'is700',700,'','','');

1 rows affected.

SQL>  insert into strg_wait_lk_range_tbl_30 values(900,'is900',900,'','','');

1 rows affected.

SQL> 
SQL>  select count(*) from strg_wait_lk_range_tbl_30;

COUNT(*)            
--------------------
5                   

1 rows fetched.

SQL>  alter table strg_wait_lk_range_tbl_30 add constraint strg_wait_lk_range_constr_30 UNIQUE(c_id,c_first,c_end);

Succeed.

SQL>  insert into strg_wait_lk_range_tbl_30 values(12,'is12',12,'','','');

CT-00729, Unique constraint violated, index STRG_WAIT_LK_RANGE_CONSTR_30, duplicate key 12-is12-12
SQL>  alter table strg_wait_lk_range_tbl_30 truncate partition PART_1;

Succeed.

SQL>  insert into strg_wait_lk_range_tbl_30 values(12,'is12',12,'','','');

CT-00823, Index STRG_WAIT_LK_RANGE_CONSTR_30 is unusable, need to rebuild index first.
SQL>  delete from strg_wait_lk_range_tbl_30 where c_id = 300;

CT-00823, Index STRG_WAIT_LK_RANGE_CONSTR_30 is unusable, need to rebuild index first.
SQL>  update strg_wait_lk_range_tbl_30 set c_end = 200 where c_id = 300;

CT-00823, Index STRG_WAIT_LK_RANGE_CONSTR_30 is unusable, need to rebuild index first.
SQL>  drop table strg_wait_lk_range_tbl_30;

Succeed.

SQL> 
SQL> drop table if exists table_interval;

Succeed.

SQL> create table table_interval(
  2 C_ID INT,
  3 C_D_ID INT NOT NULL,
  4 C_W_ID INT NOT NULL,
  5 C_FIRST VARCHAR(64) NOT NULL,
  6 C_MIDDLE CHAR(2),
  7 C_LAST VARCHAR(64) NOT NULL,
  8 C_STREET_1 VARCHAR(20) NOT NULL,
  9 C_STREET_2 VARCHAR(20),
 10 C_CITY VARCHAR(20) NOT NULL,
 11 C_STATE CHAR(2) NOT NULL,
 12 C_ZIP CHAR(9) NOT NULL,
 13 C_PHONE CHAR(16) NOT NULL,
 14 C_SINCE TIMESTAMP,
 15 C_CREDIT CHAR(2) NOT NULL,
 16 C_CREDIT_LIM NUMERIC(12,2),
 17 C_DISCOUNT NUMERIC(4,4),
 18 C_BALANCE NUMERIC(12,2),
 19 C_YTD_PAYMENT REAL NOT NULL,
 20 C_PAYMENT_CNT NUMBER NOT NULL,
 21 C_END DATE NOT NULL,
 22 C_VCHAR VARCHAR(1000),
 23 C_DATA CLOB,
 24 C_TEXT BLOB
 25 )
 26 partition by range(c_d_id,c_payment_cnt,c_end)
 27 (
 28 partition part_1 values less than (10,100.0,(to_date('2016-01-01','yyyy-mm-dd'))),
 29 partition part_2 values less than (60,200.0,(to_date('2016-06-01','yyyy-mm-dd'))),
 30 partition part_3 values less than (90,300.0,(to_date('2016-09-01','yyyy-mm-dd')))
 31 );

Succeed.

SQL> alter table table_interval set interval(66);

CT-00601, Sql syntax error: only support one interval partition column
SQL> drop table if exists table_interval;

Succeed.

SQL> 
SQL> drop table if exists ACID_INTERVAL_DML_TBL_001;

Succeed.

SQL> CREATE TABLE ACID_INTERVAL_DML_TBL_001(C_ID INT,C_END DATE NOT NULL)PARTITION BY RANGE(C_END)INTERVAL(NUMTODSINTERVAL(1,'day'))(PARTITION PART_1 VALUES LESS THAN (TO_DATE('2018-02-01','YYYY-MM-DD')),PARTITION PART_2 VALUES LESS THAN (TO_DATE('2018-03-01','YYYY-MM-DD')),PARTITION PART_3 VALUES LESS THAN (TO_DATE('2018-04-01','YYYY-MM-DD')),PARTITION PART_4 VALUES LESS THAN (TO_DATE('2018-05-01','YYYY-MM-DD')),PARTITION PART_5 VALUES LESS THAN (TO_DATE('2018-06-01','YYYY-MM-DD')),PARTITION PART_6 VALUES LESS THAN (TO_DATE('2018-07-01','YYYY-MM-DD')),PARTITION PART_7 VALUES LESS THAN (TO_DATE('2018-09-01','YYYY-MM-DD')),PARTITION PART_8 VALUES LESS THAN (TO_DATE('2018-10-01','YYYY-MM-DD')),PARTITION PART_9 VALUES LESS THAN (TO_DATE('2018-11-01','YYYY-MM-DD')));

Succeed.

SQL> insert into ACID_INTERVAL_DML_TBL_001 values (1,'2018-06-01');

1 rows affected.

SQL> alter table ACID_INTERVAL_DML_TBL_001 set interval();

Succeed.

SQL> alter table ACID_INTERVAL_DML_TBL_001 set interval(NUMTODSINTERVAL(1,'day'));

Succeed.

SQL> alter table ACID_INTERVAL_DML_TBL_001 set interval(100);

CT-01102, [1:52]Invalid (sub)partition interval key data type 
SQL> select  count(*) from ACID_INTERVAL_DML_TBL_001;

COUNT(*)            
--------------------
1                   

1 rows fetched.

SQL> drop table if exists ACID_INTERVAL_DML_TBL_001;

Succeed.

SQL> 
SQL> DROP TABLE IF EXISTS ALL_DATATYPE_TABLE;

Succeed.

SQL> CREATE TABLE ALL_DATATYPE_TABLE(ID INT NOT NULL,C_INTGER INTEGER,C_CHAR CHAR(10))
  2 PARTITION BY RANGE (C_INTGER)
  3 (
  4 PARTITION P_20180121 VALUES LESS THAN (2018),
  5 PARTITION P_20190122 VALUES LESS THAN (2019),
  6 PARTITION P_20200123 VALUES LESS THAN (2020),
  7 PARTITION P_MAX VALUES LESS THAN (2050)
  8 );

Succeed.

SQL> INSERT INTO ALL_DATATYPE_TABLE VALUES(1,1000,1000);

1 rows affected.

SQL> INSERT INTO ALL_DATATYPE_TABLE VALUES(2,2000,1000);

1 rows affected.

SQL> INSERT INTO ALL_DATATYPE_TABLE VALUES(3,2001,NULL);

1 rows affected.

SQL> INSERT INTO ALL_DATATYPE_TABLE VALUES(4,2002,'A');

1 rows affected.

SQL> 
SQL> SELECT * FROM ALL_DATATYPE_TABLE T1 JOIN ALL_DATATYPE_TABLE T2 ON T1.C_INTGER=T2.C_INTGER;

ID           C_INTGER     C_CHAR     ID           C_INTGER     C_CHAR    
------------ ------------ ---------- ------------ ------------ ----------
1            1000         1000       1            1000         1000      
2            2000         1000       2            2000         1000      
3            2001                    3            2001                   
4            2002         A          4            2002         A         

4 rows fetched.

SQL> SELECT * FROM ALL_DATATYPE_TABLE T1 LEFT JOIN ALL_DATATYPE_TABLE T2 ON T1.C_INTGER=T2.C_INTGER;

ID           C_INTGER     C_CHAR     ID           C_INTGER     C_CHAR    
------------ ------------ ---------- ------------ ------------ ----------
1            1000         1000       1            1000         1000      
2            2000         1000       2            2000         1000      
3            2001                    3            2001                   
4            2002         A          4            2002         A         

4 rows fetched.

SQL> SELECT * FROM ALL_DATATYPE_TABLE T1 RIGHT JOIN ALL_DATATYPE_TABLE T2 ON T1.C_INTGER=T2.C_INTGER;

ID           C_INTGER     C_CHAR     ID           C_INTGER     C_CHAR    
------------ ------------ ---------- ------------ ------------ ----------
1            1000         1000       1            1000         1000      
2            2000         1000       2            2000         1000      
3            2001                    3            2001                   
4            2002         A          4            2002         A         

4 rows fetched.

SQL> 
SQL> --DTS2018121801645
SQL> drop table if exists DTS2018121801645;

Succeed.

SQL> create table DTS2018121801645 (i int);

Succeed.

SQL> alter table DTS2018121801645 coalesce partition;

CT-00130, Operation alter table coalesce partition is not supported on DTS2018121801645
SQL> drop table DTS2018121801645;

Succeed.

SQL> 
SQL> -- coalesce partition table with one partition
SQL> drop table if exists table_one_part_coalesce;

Succeed.

SQL> create table table_one_part_coalesce (c1 char(20) not null,c2 number(8) not null)
  2 partition by hash(c1) (partition part_01 tablespace users);

Succeed.

SQL> alter table table_one_part_coalesce coalesce partition;

CT-01110, The operation coalesce a table with only one partition was not allowed
SQL> drop table table_one_part_coalesce;

Succeed.

SQL> 
SQL> --check statement read consistency in global index for partition table
SQL> drop table if exists test_btree_hash purge;

Succeed.

SQL> drop table if exists test_btree_hash2 purge;

Succeed.

SQL> create table test_btree_hash(id int) partition by hash(id) (partition p1, partition p2);

Succeed.

SQL> create table test_btree_hash2(id int);

Succeed.

SQL> create index idx_test_btree_hash on test_btree_hash(id);

Succeed.

SQL> 
SQL> insert into test_btree_hash values (1), (2), (3), (4);

4 rows affected.

SQL> insert into test_btree_hash2 select * from test_btree_hash partition(p1);

2 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> declare
  2 v_sql varchar2(500);
  3 hash_cursor sys_refcursor;
  4 begin
  5    execute immediate 'insert into test_btree_hash select * from test_btree_hash2';  
  6    v_sql :='select * from test_btree_hash partition(p2) where id < 100';
  7    open hash_cursor for v_sql; 
  8    dbe_sql.return_cursor(hash_cursor);  
  9    commit;
 10 end;
 11 /

PL/SQL procedure successfully completed.

ResultSet #1

ID          
------------
3           
4           

2 rows fetched.


SQL> --expected same result with result from procedure
SQL> select * from test_btree_hash partition(p2) where id < 100;

ID          
------------
3           
4           

2 rows fetched.

SQL> 
SQL> drop table test_btree_hash purge;

Succeed.

SQL> drop table test_btree_hash2 purge;

Succeed.

SQL> 
SQL> --DTS2019011807963: add partition after truncate partition with unique index
SQL> drop table if exists test_hash_part;

Succeed.

SQL> create table test_hash_part(c1 int, c2 char(10)) partition by hash(c2) (partition p1, partition p2, partition p3,partition p4);

Succeed.

SQL> create index idx_local on test_hash_part(c1) local;

Succeed.

SQL> create unique index idx_hash on test_hash_part(c2);

Succeed.

SQL> insert into test_hash_part values(1,'aaaa1');

1 rows affected.

SQL> insert into test_hash_part values(2,'bbbb2');

1 rows affected.

SQL> insert into test_hash_part values(3,'ccc3c');

1 rows affected.

SQL> insert into test_hash_part values(4,'ddd4d');

1 rows affected.

SQL> insert into test_hash_part values(5,'eee5e');

1 rows affected.

SQL> insert into test_hash_part values(6,'ff5rff');

1 rows affected.

SQL> insert into test_hash_part values(6,'gg444gg');

1 rows affected.

SQL> insert into test_hash_part values(6,'hh333hh');

1 rows affected.

SQL> insert into test_hash_part values(6,'iiii');

1 rows affected.

SQL> insert into test_hash_part values(6,'jj33321jj');

1 rows affected.

SQL> insert into test_hash_part values(6,'kkkkkkkkkk');

1 rows affected.

SQL> insert into test_hash_part values(6,'q3kkkk23k');

1 rows affected.

SQL> insert into test_hash_part values(6,'qkkkkk23k');

1 rows affected.

SQL> select count(*) from test_hash_part;

COUNT(*)            
--------------------
13                  

1 rows fetched.

SQL> alter table test_hash_part truncate partition p4 reuse storage;

Succeed.

SQL> alter table test_hash_part add partition add_part;

CT-00823, Index IDX_HASH is unusable, need to rebuild index first.
SQL> select count(*) from test_hash_part;

COUNT(*)            
--------------------
11                  

1 rows fetched.

SQL> drop index idx_hash on test_hash_part;

Succeed.

SQL> drop table test_hash_part;

Succeed.

SQL> 
SQL> drop table if exists tbl_hash1;

Succeed.

SQL> create table tbl_hash1(
  2 col_int int,
  3 col_integer integer,
  4 col_BINARY_INTEGER BINARY_INTEGER,
  5 col_smallint smallint not null default '7',
  6 col_bigint bigint not null default '3',
  7 col_BINARY_BIGINT BINARY_BIGINT,
  8 col_real real,
  9 col_double double,
 10 col_float float,
 11 col_BINARY_DOUBLE BINARY_DOUBLE,
 12 col_decimal decimal,
 13 col_number1 number,
 14 col_number2 number(38),
 15 col_number3 number(38,-84),
 16 col_number4 number(38,127),
 17 col_number5 number(38,7),
 18 col_numeric numeric,
 19 col_char1 char(100),
 20 col_char2 char(8000),
 21 col_nchar1 nchar(100),
 22 col_nchar2 nchar(8000),
 23 col_varchar_200 varchar(100),
 24 col_varchar_8000 varchar(8000) default 'aaaabbbb',
 25 col_varchar2_1000 varchar2(100) not null default 'aaaabbbb' comment 'varchar2(1000)',
 26 col_varchar2_8000 varchar2(8000),
 27 col_nvarchar1 nvarchar(100),
 28 col_nvarchar2 nvarchar(8000),
 29 col_nvarchar2_1000 nvarchar2(100),
 30 col_nvarchar2_8000 nvarchar2(8000),
 31 col_clob clob,
 32 col_text text,
 33 col_longtext longtext,
 34 col_image image,
 35 col_binary1 binary(100),
 36 col_binary2 binary(8000),
 37 col_varbinary1 varbinary(100),
 38 col_varbinary2 varbinary(8000),
 39 col_raw1 raw(100),
 40 col_raw2 raw(8000),
 41 col_blob blob,
 42 col_date date not null default '2018-01-07 08:08:08',
 43 col_datetime datetime default '2018-01-07 08:08:08',
 44 col_timestamp1 timestamp ,
 45 col_timestamp2 timestamp(6),
 46 col_timestamp3 TIMESTAMP WITH TIME ZONE,
 47 col_timestamp4 TIMESTAMP WITH LOCAL TIME ZONE,
 48 col_bool bool,
 49 col_boolean boolean,
 50 col_interval1 INTERVAL YEAR TO MONTH,
 51 col_interval2 INTERVAL DAY TO SECOND
 52 )
 53 partition by hash(col_BINARY_INTEGER,col_float,col_numeric,col_raw1,col_varchar2_1000,col_interval1,col_date)
 54 (
 55   partition p_hash_01 tablespace users,
 56   partition p_hash_02 tablespace users,
 57   partition p_hash_03 tablespace users,
 58   partition p_hash_04 tablespace users,
 59   partition p_hash_05 tablespace users,
 60   partition p_hash_06 tablespace users,
 61   partition p_hash_07 tablespace users
 62 ) tablespace users;

Succeed.

SQL> 
SQL> alter table tbl_hash1 add constraint cos_hash_pk11 primary key(col_int);

Succeed.

SQL> alter table tbl_hash1 add constraint cos_hash_uk11 unique(col_varbinary1);

Succeed.

SQL> create index if not exists idx_tbl_hash1_local_011 on tbl_hash1(col_BINARY_INTEGER,col_raw1 asc,col_bool,col_interval1 asc) local (partition p_hash_01 tablespace users,partition p_hash_02 tablespace users,partition p_hash_03 tablespace users,partition p_hash_04 tablespace users,partition p_hash_05 tablespace users,partition p_hash_06 tablespace users,partition p_hash_07 tablespace users) tablespace users parallel 12; 

Succeed.

SQL> create index if not exists idx_tbl_hash1_local_021 on tbl_hash1(col_BINARY_INTEGER,col_float,col_numeric,col_raw1,col_varchar2_1000,col_interval1,col_date) local (partition p_hash_01 tablespace users,partition p_hash_02 tablespace users,partition p_hash_03 tablespace users,partition p_hash_04 tablespace users,partition p_hash_05 tablespace users,partition p_hash_06 tablespace users,partition p_hash_07 tablespace users) tablespace users;

Succeed.

SQL> create index idx_tbl_hash1_fun_011 on tbl_hash1(to_char(col_timestamp2) asc,upper(col_number1) desc) tablespace users;

Succeed.

SQL> create index idx_tbl_hash1_fun_021 on tbl_hash1(to_char(col_BINARY_INTEGER) asc,col_timestamp3 desc) tablespace users;

Succeed.

SQL> 
SQL> insert into tbl_hash1(COL_INT,COL_INTEGER,COL_BINARY_INTEGER,COL_SMALLINT,COL_BIGINT,COL_BINARY_BIGINT,COL_REAL,COL_DOUBLE,COL_FLOAT,COL_BINARY_DOUBLE,COL_DECIMAL,
  2 COL_NUMBER1,COL_NUMBER2,COL_NUMBER3,COL_NUMBER4,COL_NUMBER5,COL_NUMERIC,COL_CHAR1,COL_CHAR2,COL_NCHAR1,COL_NCHAR2,COL_VARCHAR_200,COL_VARCHAR_8000,
  3 COL_VARCHAR2_1000,COL_VARCHAR2_8000,COL_NVARCHAR1,COL_NVARCHAR2,COL_NVARCHAR2_1000,COL_NVARCHAR2_8000,COL_CLOB,COL_TEXT,COL_LONGTEXT,COL_IMAGE,COL_BINARY1,COL_BINARY2,COL_VARBINARY1,COL_VARBINARY2,
  4 COL_RAW1,COL_RAW2,COL_BLOB,COL_DATE,COL_DATETIME,COL_TIMESTAMP1,COL_TIMESTAMP2,COL_TIMESTAMP3,COL_TIMESTAMP4,COL_BOOL,COL_BOOLEAN,COL_INTERVAL1,COL_INTERVAL2) values
  5 (0,0,null,1,'2',null,'-92.9','84.526','-63.478',null,null,'34.2','10.0','-72.904',
  6 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042,'3.501','-39.97','030031e14bc14eb2b4e4c003070f4439',
  7 '28c0edeee23b4229aaa1847e903c258a','d589dfefd62c4841859d137363fe1ab7','26141db0dcb248538741e9b0d54d3a56','bbf3ac65c9ef43e1837af59398b74e14','ede135be66d249d8899a335cf37b3454','0d0b97a88d1e4d9cadc706a7892028e2',null,'1783c72ccab1498cb5ee06232a87f8f1',null,null,'ed1a6a10c0354c35b301d4cfa9192c4e',null,'CLOB','CLOB',null,null,'17ddd254ec4c4c519925105021bd5f07','ac0aa4f80e714fb0bb164c52217831d5','0a2917c285c3459e909ccc75f5dcd2fb',null,'c9fc834af295477a9af5f63f243281d2','22A6B4D821E1FDE32142B9EF7D7390045A','2018-10-28 11:35:20','2018-11-27 03:27:17','2019-06-08 09:20:52','2019-03-07 04:15:24','1729-10-10 07:20:43',null,'T',null,'60-6','13 12:4:18.13263');

1 rows affected.

SQL> insert into tbl_hash1(COL_INT,COL_INTEGER,COL_BINARY_INTEGER,COL_SMALLINT,COL_BIGINT,COL_BINARY_BIGINT,COL_REAL,COL_DOUBLE,COL_FLOAT,COL_BINARY_DOUBLE,COL_DECIMAL,COL_NUMBER1,COL_NUMBER2,COL_NUMBER3,COL_NUMBER4,COL_NUMBER5,COL_NUMERIC,COL_CHAR1,COL_CHAR2,COL_NCHAR1,COL_NCHAR2,COL_VARCHAR_200,COL_VARCHAR_8000,COL_VARCHAR2_1000,COL_VARCHAR2_8000,COL_NVARCHAR1,COL_NVARCHAR2,COL_NVARCHAR2_1000,COL_NVARCHAR2_8000,COL_CLOB,COL_TEXT,COL_LONGTEXT,COL_IMAGE,COL_BINARY1,COL_BINARY2,COL_VARBINARY1,COL_VARBINARY2,COL_RAW1,COL_RAW2,COL_BLOB,COL_DATE,COL_DATETIME,COL_TIMESTAMP1,COL_TIMESTAMP2,COL_TIMESTAMP3,COL_TIMESTAMP4,COL_BOOL,COL_BOOLEAN,COL_INTERVAL1,COL_INTERVAL2) values(1,5,'2',3,'7','8','59.221','94.91','-3.2','-96.0','-94.0','87.21','12.8','90.0',0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000033,null,'55.59','f2600ee4fb86435fb16accdef99640ca','29a4f8d05b8b4a4f88f6c44a646e961f','1b5e34c1488b45bfb55b4575611e23aa','8e96531c76fd4fdc83b6ef2842c56291','789278ad7e1f48bcb958aba6285c3a06','4ee23c4c7cbe44eea017f744cc6c53e2','1d1ebe4fdef04b0bb34921c82133348f','18a496181cc5441686fc9c6b5da4794f','f226d8ff984148cf8f1d7c70d590c115',null,'d439690c5b564360b1afb7c139146f4d','4c8e3486dad54796874497c832ca1dc6',null,'CLOB','CLOB',null,'79f6728f8e3f4cef8a378c82190ec3ef','d99a3c08102f4b97a16693728016e272','af597e88b0da487d8d148e9a87020b7e','2995914fe1184b38a2a90959fb99f050','920cf3e1854b40c8bcefcae51005c4ec','7fc17a383fa94312a22c944aba24a751','22A6B4D821E1FDE32142B9EF7D7390045A','2018-10-31 11:06:46','2019-01-13 08:52:06','2018-09-05 10:50:05','2018-08-01 08:41:12','5714-03-05 01:10:24',null,'f',null,'32-11','14 0:8:10.259945');

1 rows affected.

SQL> 
SQL> update tbl_hash1 t1 set t1.col_varchar2_1000 = col_varchar2_1000 where col_int < 1;

1 rows affected.

SQL> update tbl_hash1 t1 set t1.col_numeric = col_numeric where col_int < 1;

1 rows affected.

SQL> update tbl_hash1 t1 set t1.col_raw1 = col_raw1 where col_int < 1;

1 rows affected.

SQL> drop table tbl_hash1;

Succeed.

SQL> 
SQL> --DTS2019021500313:When the number of partitions exceeds 65535, it falls into a dead cycle at truncate
SQL> drop table if exists test_part_truncate1;

Succeed.

SQL> CREATE TABLE test_part_truncate1(THE_ID INT, C_TEXT BLOB,C_CLOB CLOB)PARTITION BY RANGE(THE_ID)INTERVAL(1)
  2 (
  3 PARTITION trai1 VALUES LESS than(1),
  4 PARTITION trai2 VALUES LESS than(2),
  5 PARTITION trai3 VALUES LESS than(3)
  6 );

Succeed.

SQL> insert into test_part_truncate1 values (1, '0000', '11111');

1 rows affected.

SQL> insert into test_part_truncate1 values (65534, '0000', '11111');

1 rows affected.

SQL> commit;

Succeed.

SQL> truncate table test_part_truncate1;

Succeed.

SQL> 
SQL> insert into test_part_truncate1 values (1, '0000', '11111');

1 rows affected.

SQL> insert into test_part_truncate1 values (65535, '0000', '11111');

1 rows affected.

SQL> commit;

Succeed.

SQL> truncate table test_part_truncate1;

Succeed.

SQL> 
SQL> insert into test_part_truncate1 values (1, '0000', '11111');

1 rows affected.

SQL> insert into test_part_truncate1 values (65536, '0000', '11111');

1 rows affected.

SQL> commit;

Succeed.

SQL> truncate table test_part_truncate1;

Succeed.

SQL> drop table test_part_truncate1;

Succeed.

SQL> 
SQL> drop table if exists test_range;

Succeed.

SQL> create table test_range(f1 int, f2 int, f3 int)
  2 PARTITION BY RANGE(f1,f2)
  3 (
  4  PARTITION p1 values less than(10,20),
  5  PARTITION p3 values less than(30,40),
  6  PARTITION p4 values less than(MAXVALUE,MAXVALUE)
  7 );

Succeed.

SQL> 
SQL> insert into test_range values(5,6,1);

1 rows affected.

SQL> insert into test_range values(15,26,2);

1 rows affected.

SQL> insert into test_range values(35,46,3);

1 rows affected.

SQL> 
SQL> select PART#,NAME,FLAGS from SYS_TABLE_PARTS where TABLE# = (select ID from SYS_TABLES where NAME='TEST_RANGE') order by PART# desc;

PART#        NAME                                                             FLAGS       
------------ ---------------------------------------------------------------- ------------
30           P4                                                               0           
20           P3                                                               0           
10           P1                                                               0           

3 rows fetched.

SQL> alter table test_range drop partition p4;

Succeed.

SQL> select PART#,NAME,FLAGS from SYS_TABLE_PARTS where TABLE# = (select ID from SYS_TABLES where NAME='TEST_RANGE') order by PART# desc;

PART#        NAME                                                             FLAGS       
------------ ---------------------------------------------------------------- ------------
20           P3                                                               0           
10           P1                                                               0           

2 rows fetched.

SQL> alter table test_range add partition p4 values less than (MAXVALUE,MAXVALUE);

Succeed.

SQL> select PART#,NAME,FLAGS from SYS_TABLE_PARTS where TABLE# = (select ID from SYS_TABLES where NAME='TEST_RANGE') order by PART# desc;

PART#        NAME                                                             FLAGS       
------------ ---------------------------------------------------------------- ------------
30           P4                                                               0           
20           P3                                                               0           
10           P1                                                               0           

3 rows fetched.

SQL> drop table test_range;

Succeed.

SQL> 
SQL> --DTS2019021408096:Invalidate dc when the state(is_invalid) of global index is changed
SQL> ALTER SYSTEM SET RECYCLEBIN = FALSE;

Succeed.

SQL> DROP TABLE IF EXISTS TEST;

Succeed.

SQL> CREATE TABLE TEST (i int, id int) PARTITION BY RANGE(i) (PARTITION p1 VALUES LESS THAN(10), PARTITION p2 VALUES LESS THAN (maxvalue));

Succeed.

SQL> CREATE INDEX idx_test ON TEST(i);

Succeed.

SQL> 
SQL> INSERT INTO TEST VALUES(1,1);

1 rows affected.

SQL> INSERT INTO TEST VALUES(16,16);

1 rows affected.

SQL> COMMIT;

Succeed.

SQL> 
SQL> ALTER TABLE TEST TRUNCATE PARTITION p1;

Succeed.

SQL> TRUNCATE TABLE TEST;

Succeed.

SQL> INSERT INTO TEST VALUES (1, 6);

1 rows affected.

SQL> CREATE INDEX idx_3333 ON TEST(id);

Succeed.

SQL> DELETE FROM TEST;

1 rows affected.

SQL> DROP TABLE IF EXISTS TEST;

Succeed.

SQL> 
SQL> CREATE TABLE TEST (i int, id int) PARTITION BY RANGE(i) (PARTITION p1 VALUES LESS THAN(10), PARTITION p2 VALUES LESS THAN (maxvalue));

Succeed.

SQL> CREATE INDEX idx_test1 ON TEST(i) parallel 5;

Succeed.

SQL> CREATE INDEX idx_test2 ON TEST(id);

Succeed.

SQL> 
SQL> INSERT INTO TEST VALUES(1,1);

1 rows affected.

SQL> INSERT INTO TEST VALUES(16,16);

1 rows affected.

SQL> ALTER TABLE TEST DROP PARTITION p1;

Succeed.

SQL> TRUNCATE TABLE TEST;

Succeed.

SQL> 
SQL> ALTER INDEX idx_test1 ON TEST REBUILD ONLINE;

Succeed.

SQL> DROP TABLE IF EXISTS TEST;

Succeed.

SQL> ALTER SYSTEM SET RECYCLEBIN = TRUE;

Succeed.

SQL> 
SQL> ---PCR PAGE CACHE TEST
SQL> DROP TABLE IF EXISTS PCR_00 PURGE;

Succeed.

SQL> CREATE TABLE PCR_00 (ID INT, TT INT);

Succeed.

SQL> INSERT INTO PCR_00 VALUES (0, 0);

1 rows affected.

SQL> COMMIT;

Succeed.

SQL> 
SQL> CREATE OR REPLACE PROCEDURE PCR_00_FUC (STARTALL INT,ENDALL INT)  AS
  2 I INT;
  3 BEGIN
  4   FOR I IN STARTALL..ENDALL LOOP
  5         INSERT INTO PCR_00 SELECT ID+I, TT+I FROM PCR_00 WHERE ID = 0;COMMIT;
  6   END LOOP;
  7 END;
  8 /

Succeed.

SQL> CALL PCR_00_FUC(1,8);

PL/SQL procedure successfully completed.

SQL> DELETE FROM PCR_00 WHERE ID = 0;

1 rows affected.

SQL> COMMIT;

Succeed.

SQL> 
SQL> DROP TABLE IF EXISTS PCR_01 PURGE;

Succeed.

SQL> CREATE TABLE PCR_01 (ID INT, TT INT) PARTITION BY HASH(ID)
  2 (PARTITION P1, PARTITION P2) CRMODE PAGE;

Succeed.

SQL> 
SQL> CREATE UNIQUE INDEX IDX_PCR_01_1 ON PCR_01 (ID);

Succeed.

SQL> CREATE INDEX IDX_PCR_01_2 ON PCR_01 (TT) LOCAL;

Succeed.

SQL> 
SQL> INSERT INTO PCR_01 SELECT * FROM PCR_00;

8 rows affected.

SQL> COMMIT;

Succeed.

SQL> 
SQL> UPDATE PCR_01 SET TT = TT + 1 WHERE ID < 2 OR ID > 7;

2 rows affected.

SQL> ROLLBACK;

Succeed.

SQL> 
SQL> DROP TABLE IF EXISTS PCR_00 PURGE;

Succeed.

SQL> DROP TABLE IF EXISTS PCR_01 PURGE;

Succeed.

SQL> 
SQL> DROP TABLE IF EXISTS TEST_VIEW_EMP2;

Succeed.

SQL> DROP TABLE IF EXISTS TEST_INTREVAL_ALL_PART_STORE;

Succeed.

SQL> CREATE TABLE TEST_VIEW_EMP2
  2 (EMPNO VARCHAR(20) NOT NULL ,
  3 EMPNAME VARCHAR(20),
  4 JOB VARCHAR(20),
  5 MGR INT,
  6 HIREDATE DATE,
  7 SALARY INT,
  8 DEPTNO INT);

Succeed.

SQL> INSERT INTO TEST_VIEW_EMP2 VALUES('7369','SMITH','CLERK','7902',to_date('1981-02-01','yyyy-mm-dd'),'800','20');

1 rows affected.

SQL> INSERT INTO TEST_VIEW_EMP2 VALUES('7499','ALLEN','SALESMAN','7698',to_date('1981-02-02','yyyy-mm-dd'),'1600','30');

1 rows affected.

SQL> INSERT INTO TEST_VIEW_EMP2 VALUES('7521','WARD','SALESMAN','7698',to_date('1981-02-03','yyyy-mm-dd'),'1250','30');

1 rows affected.

SQL> INSERT INTO TEST_VIEW_EMP2 VALUES('7566','JONES','MANAGER','7839',to_date('1981-02-04','yyyy-mm-dd'),'2975','20');

1 rows affected.

SQL> INSERT INTO TEST_VIEW_EMP2 VALUES('7654','MARTIN','SALESMAN','7698',to_date('1981-02-05','yyyy-mm-dd'),'1250','30');

1 rows affected.

SQL> commit;

Succeed.

SQL> create table TEST_INTREVAL_ALL_PART_STORE
  2 ( EMPNO VARCHAR2(20) NOT NULL,
  3 EMPNAME VARCHAR2(20),
  4 JOB VARCHAR2(20),
  5 MGR NUMBER(38),
  6 HIREDATE DATE,
  7 SALARY NUMBER(38),
  8 DEPTNO NUMBER(38))
  9 PARTITION BY RANGE (HIREDATE)
 10 INTERVAL (NUMTODSINTERVAL(1,'DAY'))
 11 STORE IN(tablespace users, tablespace system)
 12 (PARTITION ALL_PART_STORE_PART01
 13 VALUES LESS THAN (TO_DATE ('02/02/1981', 'MM/DD/YYYY')),
 14 PARTITION ALL_PART_STORE_PART02
 15 VALUES LESS THAN (TO_DATE ('03/02/1981', 'MM/DD/YYYY'))
 16 );

Succeed.

SQL> insert into TEST_INTREVAL_ALL_PART_STORE select * from TEST_VIEW_EMP2;

5 rows affected.

SQL> commit;

Succeed.

SQL> SELECT NAME FROM ALL_PART_STORE WHERE NAME =(SELECT NAME FROM ALL_PART_STORE WHERE NAME ='TEST_INTREVAL_ALL_PART_STORE' and POSITION =1) ORDER BY NAME;

NAME                                                            
----------------------------------------------------------------
TEST_INTREVAL_ALL_PART_STORE                                    
TEST_INTREVAL_ALL_PART_STORE                                    

2 rows fetched.

SQL> DROP TABLE TEST_VIEW_EMP2;

Succeed.

SQL> DROP TABLE TEST_INTREVAL_ALL_PART_STORE;

Succeed.

SQL> 
SQL> drop table if exists test_add_null_part;

Succeed.

SQL> create table test_add_null_part(c1 int,c2 bigint,c3 varchar(20)) PARTITION BY list(c3) (PARTITION p1 VALUES ('sss','ss'), PARTITION p2 VALUES (''),PARTITION p3 VALUES ('null'),PARTITION p4 VALUES ('bb'));

Succeed.

SQL> alter table test_add_null_part ADD PARTITION p5 values('') DEFAULT;

CT-01113, The 1st partition key already exists in (sub)partition P2
SQL> drop table test_add_null_part;

Succeed.

SQL> 
SQL> drop table if exists strg_update_part_merge_mul_list_001;

Succeed.

SQL> create table strg_update_part_merge_mul_list_001(c_id int,c_d_id int NOT NULL,c_w_id int NOT NULL,c_first varchar(32) NOT NULL,c_middle char(2),c_last varchar(50) NOT NULL,c_street_1 varchar2(8000) NOT NULL,c_street_2 varchar2(8000),c_city varchar(20) NOT NULL,c_state char(2) NOT NULL,c_zip char(9) NOT NULL,c_phone char(16) NOT NULL,c_since timestamp,c_credit char(2) NOT NULL,c_credit_lim numeric(12,2),c_discount numeric(4,4),c_balance numeric(12,2),c_ytd_payment real NOT NULL,c_payment_cnt number NOT NULL,c_delivery_cnt bool NOT NULL,c_end date NOT NULL,c_unsig tinyint unsigned,c_big bigint,c_vchar varchar2(8000),c_data long,c_text blob,c_clob clob,c_image image,c_binary binary(5000),c_varbinary varbinary(5000),c_raw raw(5000)) partition by list(c_w_id,c_last,c_end) (partition part_1 values ((1,'AABAR1ddBARBAR',to_date('2017-01-01','yyyy-mm-dd')),(2,'AABAR2ddBARBAR',to_date('2017-01-02','yyyy-mm-dd')),(3,'AABAR3ddBARBAR',to_date('2017-01-03','yyyy-mm-dd')),(4,'AABAR4ddBARBAR',to_date('2017-01-04','yyyy-mm-dd')),(5,'AABAR5ddBARBAR',to_date('2017-01-05','yyyy-mm-dd')),(6,'AABAR6ddBARBAR',to_date('2017-01-06','yyyy-mm-dd')),(7,'AABAR7ddBARBAR',to_date('2017-01-07','yyyy-mm-dd')),(8,'AABAR8ddBARBAR',to_date('2017-01-08','yyyy-mm-dd')),(9,'AABAR9ddBARBAR',to_date('2017-01-09','yyyy-mm-dd')),(10,'AABAR10ddBARBAR',to_date('2017-01-10','yyyy-mm-dd')),(11,'AABAR11ddBARBAR',to_date('2017-01-11','yyyy-mm-dd')),(12,'AABAR12ddBARBAR',to_date('2017-01-12','yyyy-mm-dd')),(13,'AABAR13ddBARBAR',to_date('2017-01-13','yyyy-mm-dd')),(14,'AABAR14ddBARBAR',to_date('2017-01-14','yyyy-mm-dd')),(15,'AABAR15ddBARBAR',to_date('2017-01-15','yyyy-mm-dd')),(16,'AABAR16ddBARBAR',to_date('2017-01-16','yyyy-mm-dd')),(17,'AABAR17ddBARBAR',to_date('2017-01-17','yyyy-mm-dd')),(18,'AABAR18ddBARBAR',to_date('2017-01-18','yyyy-mm-dd')),(19,'AABAR19ddBARBAR',to_date('2017-01-19','yyyy-mm-dd')),(20,'AABAR20ddBARBAR',to_date('2017-01-20','yyyy-mm-dd')),(21,'AABAR21ddBARBAR',to_date('2017-01-21','yyyy-mm-dd')),(22,'AABAR22ddBARBAR',to_date('2017-01-22','yyyy-mm-dd')),(23,'AABAR23ddBARBAR',to_date('2017-01-23','yyyy-mm-dd')),(24,'AABAR24ddBARBAR',to_date('2017-01-24','yyyy-mm-dd')),(25,'AABAR25ddBARBAR',to_date('2017-01-25','yyyy-mm-dd')),(26,'AABAR26ddBARBAR',to_date('2017-01-26','yyyy-mm-dd')),(27,'AABAR27ddBARBAR',to_date('2017-01-27','yyyy-mm-dd')),(28,'AABAR28ddBARBAR',to_date('2017-01-28','yyyy-mm-dd')),(29,'AABAR29ddBARBAR',to_date('2017-01-29','yyyy-mm-dd')),(30,'AABAR30ddBARBAR',to_date('2017-01-30','yyyy-mm-dd')),(31,'AABAR31ddBARBAR',to_date('2017-01-31','yyyy-mm-dd')),(32,'AABAR32ddBARBAR',to_date('2017-02-01','yyyy-mm-dd')),(33,'AABAR33ddBARBAR',to_date('2017-02-02','yyyy-mm-dd')),(34,'AABAR34ddBARBAR',to_date('2017-02-03','yyyy-mm-dd')),(35,'AABAR35ddBARBAR',to_date('2017-02-04','yyyy-mm-dd')),(36,'AABAR36ddBARBAR',to_date('2017-02-05','yyyy-mm-dd')),(37,'AABAR37ddBARBAR',to_date('2017-02-06','yyyy-mm-dd')),(38,'AABAR38ddBARBAR',to_date('2017-02-07','yyyy-mm-dd')),(39,'AABAR39ddBARBAR',to_date('2017-02-08','yyyy-mm-dd')),(40,'AABAR40ddBARBAR',to_date('2017-02-09','yyyy-mm-dd')),(41,'AABAR41ddBARBAR',to_date('2017-02-10','yyyy-mm-dd')),(42,'AABAR42ddBARBAR',to_date('2017-02-11','yyyy-mm-dd')),(43,'AABAR43ddBARBAR',to_date('2017-02-12','yyyy-mm-dd')),(44,'AABAR44ddBARBAR',to_date('2017-02-13','yyyy-mm-dd')),(45,'AABAR45ddBARBAR',to_date('2017-02-14','yyyy-mm-dd')),(46,'AABAR46ddBARBAR',to_date('2017-02-15','yyyy-mm-dd')),(47,'AABAR47ddBARBAR',to_date('2017-02-16','yyyy-mm-dd')),(48,'AABAR48ddBARBAR',to_date('2017-02-17','yyyy-mm-dd')),(49,'AABAR49ddBARBAR',to_date('2017-02-18','yyyy-mm-dd')),(50,'AABAR50ddBARBAR',to_date('2017-02-19','yyyy-mm-dd')),(51,'AABAR51ddBARBAR',to_date('2017-02-20','yyyy-mm-dd')),(52,'AABAR52ddBARBAR',to_date('2017-02-21','yyyy-mm-dd')),(53,'AABAR53ddBARBAR',to_date('2017-02-22','yyyy-mm-dd')),(54,'AABAR54ddBARBAR',to_date('2017-02-23','yyyy-mm-dd')),(55,'AABAR55ddBARBAR',to_date('2017-02-24','yyyy-mm-dd')),(56,'AABAR56ddBARBAR',to_date('2017-02-25','yyyy-mm-dd')),(57,'AABAR57ddBARBAR',to_date('2017-02-26','yyyy-mm-dd')),(58,'AABAR58ddBARBAR',to_date('2017-02-27','yyyy-mm-dd')),(59,'AABAR59ddBARBAR',to_date('2017-02-28','yyyy-mm-dd')),(60,'AABAR60ddBARBAR',to_date('2017-03-01','yyyy-mm-dd')),(61,'AABAR61ddBARBAR',to_date('2017-03-02','yyyy-mm-dd')),(62,'AABAR62ddBARBAR',to_date('2017-03-03','yyyy-mm-dd')),(63,'AABAR63ddBARBAR',to_date('2017-03-04','yyyy-mm-dd')),(64,'AABAR64ddBARBAR',to_date('2017-03-05','yyyy-mm-dd')),(65,'AABAR65ddBARBAR',to_date('2017-03-06','yyyy-mm-dd')),(66,'AABAR66ddBARBAR',to_date('2017-03-07','yyyy-mm-dd')),(67,'AABAR67ddBARBAR',to_date('2017-03-08','yyyy-mm-dd')),(68,'AABAR68ddBARBAR',to_date('2017-03-09','yyyy-mm-dd')),(69,'AABAR69ddBARBAR',to_date('2017-03-10','yyyy-mm-dd')),(70,'AABAR70ddBARBAR',to_date('2017-03-11','yyyy-mm-dd')),(71,'AABAR71ddBARBAR',to_date('2017-03-12','yyyy-mm-dd')),(72,'AABAR72ddBARBAR',to_date('2017-03-13','yyyy-mm-dd')),(73,'AABAR73ddBARBAR',to_date('2017-03-14','yyyy-mm-dd')),(74,'AABAR74ddBARBAR',to_date('2017-03-15','yyyy-mm-dd')),(75,'AABAR75ddBARBAR',to_date('2017-03-16','yyyy-mm-dd')),(76,'AABAR76ddBARBAR',to_date('2017-03-17','yyyy-mm-dd')),(77,'AABAR77ddBARBAR',to_date('2017-03-18','yyyy-mm-dd')),(78,'AABAR78ddBARBAR',to_date('2017-03-19','yyyy-mm-dd')),(79,'AABAR79ddBARBAR',to_date('2017-03-20','yyyy-mm-dd')),(80,'AABAR80ddBARBAR',to_date('2017-03-21','yyyy-mm-dd')),(81,'AABAR81ddBARBAR',to_date('2017-03-22','yyyy-mm-dd')),(82,'AABAR82ddBARBAR',to_date('2017-03-23','yyyy-mm-dd')),(83,'AABAR83ddBARBAR',to_date('2017-03-24','yyyy-mm-dd')),(84,'AABAR84ddBARBAR',to_date('2017-03-25','yyyy-mm-dd')),(85,'AABAR85ddBARBAR',to_date('2017-03-26','yyyy-mm-dd')),(86,'AABAR86ddBARBAR',to_date('2017-03-27','yyyy-mm-dd')),(87,'AABAR87ddBARBAR',to_date('2017-03-28','yyyy-mm-dd')),(88,'AABAR88ddBARBAR',to_date('2017-03-29','yyyy-mm-dd')),(89,'AABAR89ddBARBAR',to_date('2017-03-30','yyyy-mm-dd')),(90,'AABAR90ddBARBAR',to_date('2017-03-31','yyyy-mm-dd')),(91,'AABAR91ddBARBAR',to_date('2017-04-01','yyyy-mm-dd')),(92,'AABAR92ddBARBAR',to_date('2017-04-02','yyyy-mm-dd')),(93,'AABAR93ddBARBAR',to_date('2017-04-03','yyyy-mm-dd')),(94,'AABAR94ddBARBAR',to_date('2017-04-04','yyyy-mm-dd')),(95,'AABAR95ddBARBAR',to_date('2017-04-05','yyyy-mm-dd')),(96,'AABAR96ddBARBAR',to_date('2017-04-06','yyyy-mm-dd')),(97,'AABAR97ddBARBAR',to_date('2017-04-07','yyyy-mm-dd')),(98,'AABAR98ddBARBAR',to_date('2017-04-08','yyyy-mm-dd')),(99,'AABAR99ddBARBAR',to_date('2017-04-09','yyyy-mm-dd')),(100,'AABAR100ddBARBAR',to_date('2017-04-10','yyyy-mm-dd')),(101,'AABAR101ddBARBAR',to_date('2017-04-11','yyyy-mm-dd')),(102,'AABAR102ddBARBAR',to_date('2017-04-12','yyyy-mm-dd')),(103,'AABAR103ddBARBAR',to_date('2017-04-13','yyyy-mm-dd')),(104,'AABAR104ddBARBAR',to_date('2017-04-14','yyyy-mm-dd')),(105,'AABAR105ddBARBAR',to_date('2017-04-15','yyyy-mm-dd')),(106,'AABAR106ddBARBAR',to_date('2017-04-16','yyyy-mm-dd')),(107,'AABAR107ddBARBAR',to_date('2017-04-17','yyyy-mm-dd')),(108,'AABAR108ddBARBAR',to_date('2017-04-18','yyyy-mm-dd')),(109,'AABAR109ddBARBAR',to_date('2017-04-19','yyyy-mm-dd')),(110,'AABAR110ddBARBAR',to_date('2017-04-20','yyyy-mm-dd')),(111,'AABAR111ddBARBAR',to_date('2017-04-21','yyyy-mm-dd')),(112,'AABAR112ddBARBAR',to_date('2017-04-22','yyyy-mm-dd')),(113,'AABAR113ddBARBAR',to_date('2017-04-23','yyyy-mm-dd')),(114,'AABAR114ddBARBAR',to_date('2017-04-24','yyyy-mm-dd')),(115,'AABAR115ddBARBAR',to_date('2017-04-25','yyyy-mm-dd')),(116,'AABAR116ddBARBAR',to_date('2017-04-26','yyyy-mm-dd')),(117,'AABAR117ddBARBAR',to_date('2017-04-27','yyyy-mm-dd')),(118,'AABAR118ddBARBAR',to_date('2017-04-28','yyyy-mm-dd')),(119,'AABAR119ddBARBAR',to_date('2017-04-29','yyyy-mm-dd')),(120,'AABAR120ddBARBAR',to_date('2017-04-30','yyyy-mm-dd')),(121,'AABAR121ddBARBAR',to_date('2017-05-01','yyyy-mm-dd')),(122,'AABAR122ddBARBAR',to_date('2017-05-02','yyyy-mm-dd')),(123,'AABAR123ddBARBAR',to_date('2017-05-03','yyyy-mm-dd')),(124,'AABAR124ddBARBAR',to_date('2017-05-04','yyyy-mm-dd')),(125,'AABAR125ddBARBAR',to_date('2017-05-05','yyyy-mm-dd')),(126,'AABAR126ddBARBAR',to_date('2017-05-06','yyyy-mm-dd')),(127,'AABAR127ddBARBAR',to_date('2017-05-07','yyyy-mm-dd')),(128,'AABAR128ddBARBAR',to_date('2017-05-08','yyyy-mm-dd')),(129,'AABAR129ddBARBAR',to_date('2017-05-09','yyyy-mm-dd')),(130,'AABAR130ddBARBAR',to_date('2017-05-10','yyyy-mm-dd')),(131,'AABAR131ddBARBAR',to_date('2017-05-11','yyyy-mm-dd')),(132,'AABAR132ddBARBAR',to_date('2017-05-12','yyyy-mm-dd')),(133,'AABAR133ddBARBAR',to_date('2017-05-13','yyyy-mm-dd')),(134,'AABAR134ddBARBAR',to_date('2017-05-14','yyyy-mm-dd')),(135,'AABAR135ddBARBAR',to_date('2017-05-15','yyyy-mm-dd')),(136,'AABAR136ddBARBAR',to_date('2017-05-16','yyyy-mm-dd')),(137,'AABAR137ddBARBAR',to_date('2017-05-17','yyyy-mm-dd')),(138,'AABAR138ddBARBAR',to_date('2017-05-18','yyyy-mm-dd')),(139,'AABAR139ddBARBAR',to_date('2017-05-19','yyyy-mm-dd')),(140,'AABAR140ddBARBAR',to_date('2017-05-20','yyyy-mm-dd')),(141,'AABAR141ddBARBAR',to_date('2017-05-21','yyyy-mm-dd')),(142,'AABAR142ddBARBAR',to_date('2017-05-22','yyyy-mm-dd')),(143,'AABAR143ddBARBAR',to_date('2017-05-23','yyyy-mm-dd')),(144,'AABAR144ddBARBAR',to_date('2017-05-24','yyyy-mm-dd')),(145,'AABAR145ddBARBAR',to_date('2017-05-25','yyyy-mm-dd')),(146,'AABAR146ddBARBAR',to_date('2017-05-26','yyyy-mm-dd')),(147,'AABAR147ddBARBAR',to_date('2017-05-27','yyyy-mm-dd')),(148,'AABAR148ddBARBAR',to_date('2017-05-28','yyyy-mm-dd')),(149,'AABAR149ddBARBAR',to_date('2017-05-29','yyyy-mm-dd')),(150,'AABAR150ddBARBAR',to_date('2017-05-30','yyyy-mm-dd')),(151,'AABAR151ddBARBAR',to_date('2017-05-31','yyyy-mm-dd')),(152,'AABAR152ddBARBAR',to_date('2017-06-01','yyyy-mm-dd')),(153,'AABAR153ddBARBAR',to_date('2017-06-02','yyyy-mm-dd')),(154,'AABAR154ddBARBAR',to_date('2017-06-03','yyyy-mm-dd')),(155,'AABA
  2 R155ddBARBAR',to_date('2017-06-04','yyyy-mm-dd')),(156,'AABAR156ddBARBAR',to_date('2017-06-05','yyyy-mm-dd')),(157,'AABAR157ddBARBAR',to_date('2017-06-06','yyyy-mm-dd')),(158,'AABAR158ddBARBAR',to_date('2017-06-07','yyyy-mm-dd')),(159,'AABAR159ddBARBAR',to_date('2017-06-08','yyyy-mm-dd')),(160,'AABAR160ddBARBAR',to_date('2017-06-09','yyyy-mm-dd')),(161,'AABAR161ddBARBAR',to_date('2017-06-10','yyyy-mm-dd')),(162,'AABAR162ddBARBAR',to_date('2017-06-11','yyyy-mm-dd')),(163,'AABAR163ddBARBAR',to_date('2017-06-12','yyyy-mm-dd')),(164,'AABAR164ddBARBAR',to_date('2017-06-13','yyyy-mm-dd')),(165,'AABAR165ddBARBAR',to_date('2017-06-14','yyyy-mm-dd')),(166,'AABAR166ddBARBAR',to_date('2017-06-15','yyyy-mm-dd')),(167,'AABAR167ddBARBAR',to_date('2017-06-16','yyyy-mm-dd')),(168,'AABAR168ddBARBAR',to_date('2017-06-17','yyyy-mm-dd')),(169,'AABAR169ddBARBAR',to_date('2017-06-18','yyyy-mm-dd')),(170,'AABAR170ddBARBAR',to_date('2017-06-19','yyyy-mm-dd')),(171,'AABAR171ddBARBAR',to_date('2017-06-20','yyyy-mm-dd')),(172,'AABAR172ddBARBAR',to_date('2017-06-21','yyyy-mm-dd')),(173,'AABAR173ddBARBAR',to_date('2017-06-22','yyyy-mm-dd')),(174,'AABAR174ddBARBAR',to_date('2017-06-23','yyyy-mm-dd')),(175,'AABAR175ddBARBAR',to_date('2017-06-24','yyyy-mm-dd')),(176,'AABAR176ddBARBAR',to_date('2017-06-25','yyyy-mm-dd')),(177,'AABAR177ddBARBAR',to_date('2017-06-26','yyyy-mm-dd')),(178,'AABAR178ddBARBAR',to_date('2017-06-27','yyyy-mm-dd')),(179,'AABAR179ddBARBAR',to_date('2017-06-28','yyyy-mm-dd')),(180,'AABAR180ddBARBAR',to_date('2017-06-29','yyyy-mm-dd')),(181,'AABAR181ddBARBAR',to_date('2017-06-30','yyyy-mm-dd')),(182,'AABAR182ddBARBAR',to_date('2017-07-01','yyyy-mm-dd')),(183,'AABAR183ddBARBAR',to_date('2017-07-02','yyyy-mm-dd')),(184,'AABAR184ddBARBAR',to_date('2017-07-03','yyyy-mm-dd')),(185,'AABAR185ddBARBAR',to_date('2017-07-04','yyyy-mm-dd')),(186,'AABAR186ddBARBAR',to_date('2017-07-05','yyyy-mm-dd')),(187,'AABAR187ddBARBAR',to_date('2017-07-06','yyyy-mm-dd')),(188,'AABAR188ddBARBAR',to_date('2017-07-07','yyyy-mm-dd')),(189,'AABAR189ddBARBAR',to_date('2017-07-08','yyyy-mm-dd')),(190,'AABAR190ddBARBAR',to_date('2017-07-09','yyyy-mm-dd')),(191,'AABAR191ddBARBAR',to_date('2017-07-10','yyyy-mm-dd')),(192,'AABAR192ddBARBAR',to_date('2017-07-11','yyyy-mm-dd')),(193,'AABAR193ddBARBAR',to_date('2017-07-12','yyyy-mm-dd')),(194,'AABAR194ddBARBAR',to_date('2017-07-13','yyyy-mm-dd')),(195,'AABAR195ddBARBAR',to_date('2017-07-14','yyyy-mm-dd')),(196,'AABAR196ddBARBAR',to_date('2017-07-15','yyyy-mm-dd')),(197,'AABAR197ddBARBAR',to_date('2017-07-16','yyyy-mm-dd')),(198,'AABAR198ddBARBAR',to_date('2017-07-17','yyyy-mm-dd')),(199,'AABAR199ddBARBAR',to_date('2017-07-18','yyyy-mm-dd')),(200,'AABAR200ddBARBAR',to_date('2017-07-19','yyyy-mm-dd'))),partition part_2 values ((201,'AABAR201ddBARBAR',to_date('2017-07-20','yyyy-mm-dd'))),PARTITION PART_10 VALUES (DEFAULT));

CT-00106, The size of row is too large, max_row_size=8056
SQL> 
SQL> select t.table_name,t.partition_name from adm_tab_partitions t where t.table_name = 'STRG_UPDATE_PART_MERGE_MUL_LIST_001' order by t.partition_name;

TABLE_NAME                                                       PARTITION_NAME                                                  
---------------------------------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> 
SQL> --ADD PARTITION PRUNE TEST CASE
SQL> drop table if exists multi_col_prune1 purge;

Succeed.

SQL> create table multi_col_prune1(STARTTIME DATE NOT NULL, "HOUR" BINARY_INTEGER NOT NULL) PARTITION BY RANGE ("STARTTIME", "HOUR") 
  2 (
  3     PARTITION DEFAULT_19000101 VALUES LESS THAN (to_date('19000101', 'YYYYMMDD'),0),             -- 0
  4     PARTITION PRS_PART_20190610 VALUES LESS THAN (to_date('20190610', 'YYYYMMDD'),0),            -- 1
  5     PARTITION PRS_PART_2019061012 VALUES LESS THAN (to_date('20190610', 'YYYYMMDD'),12),         -- 2
  6     PARTITION PRS_PART_2019061023 VALUES LESS THAN (to_date('20190610', 'YYYYMMDD'),23),         -- 3
  7     PARTITION PRS_PART_20190611 VALUES LESS THAN (to_date('20190611', 'YYYYMMDD'),0),            -- 4
  8     PARTITION PRS_PART_2019061112 VALUES LESS THAN (to_date('20190611', 'YYYYMMDD'),12),         -- 5
  9     PARTITION PRS_PART_2019061123 VALUES LESS THAN (to_date('20190611', 'YYYYMMDD'),23),         -- 6
 10     PARTITION PRS_PART_20190612 VALUES LESS THAN (to_date('20190612', 'YYYYMMDD'),0),            -- 7
 11     PARTITION PRS_PART_2019061212 VALUES LESS THAN (to_date('20190612', 'YYYYMMDD'),12),         -- 8
 12     PARTITION PRS_PART_2019061223 VALUES LESS THAN (to_date('20190612', 'YYYYMMDD'),23),         -- 9
 13     PARTITION PRS_PART_20190613 VALUES LESS THAN (to_date('20190613', 'YYYYMMDD'),0)             -- 10
 14 );

Succeed.

SQL> 
SQL> explain select * from multi_col_prune1 where StartTime < to_date('2019-06-11 00:00', 'YYYY-MM-DD HH24:MI');              -- FILTER 0, 1, 2, 3, 4

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
----------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name             | Rows | Cost | Bytes | Remark |
----------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |                  |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[0,5) | SYS   | MULTI_COL_PRUNE1 |      |      |       |        |
----------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: STARTTIME < to_date('2019-06-11 00:00:00', 'YYYY-MM-DD HH24:MI:SS')

9 rows fetched.

SQL> explain select * from multi_col_prune1 where StartTime <= to_date('2019-06-11 00:00', 'YYYY-MM-DD HH24:MI');             -- FILTER 0, 1, 2, 3, 4, 5, 6, 7

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
----------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name             | Rows | Cost | Bytes | Remark |
----------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |                  |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[0,8) | SYS   | MULTI_COL_PRUNE1 |      |      |       |        |
----------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: STARTTIME <= to_date('2019-06-11 00:00:00', 'YYYY-MM-DD HH24:MI:SS')

9 rows fetched.

SQL> explain select * from multi_col_prune1 where StartTime > to_date('2019-06-11 00:00', 'YYYY-MM-DD HH24:MI');              -- FILTER 7, 8, 9, 10

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
| Id  | Description                       | Owner | Name             | Rows | Cost | Bytes | Remark |
-----------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                  |       |                  |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[7,11) | SYS   | MULTI_COL_PRUNE1 |      |      |       |        |
-----------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: STARTTIME > to_date('2019-06-11 00:00:00', 'YYYY-MM-DD HH24:MI:SS')

9 rows fetched.

SQL> explain select * from multi_col_prune1 where StartTime >= to_date('2019-06-10 00:00', 'YYYY-MM-DD HH24:MI') and StartTime < to_date('2019-06-11 00:00', 'YYYY-MM-DD HH24:MI');  -- FILTER 1, 2, 3, 4

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
----------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name             | Rows | Cost | Bytes | Remark |
----------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |                  |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[1,5) | SYS   | MULTI_COL_PRUNE1 |      |      |       |        |
----------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: STARTTIME >= to_date('2019-06-10 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND STARTTIME < to_date('2019-06-11 00:00:00', 'YYYY-MM-DD HH24:MI:SS')

9 rows fetched.

SQL> explain select * from multi_col_prune1 where StartTime > to_date('2019-06-11 00:00', 'YYYY-MM-DD HH24:MI') and StartTime < to_date('2019-06-12 00:00', 'YYYY-MM-DD HH24:MI');  -- FILTER 7

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
----------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name             | Rows | Cost | Bytes | Remark |
----------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |                  |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[7,8) | SYS   | MULTI_COL_PRUNE1 |      |      |       |        |
----------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: STARTTIME > to_date('2019-06-11 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND STARTTIME < to_date('2019-06-12 00:00:00', 'YYYY-MM-DD HH24:MI:SS')

9 rows fetched.

SQL> drop table multi_col_prune1 purge;

Succeed.

SQL> 
SQL> drop table if exists multi_col_prune2 purge;

Succeed.

SQL> create table multi_col_prune2 (id1 int, id2 int)
  2 partition by range (id1, id2)
  3 (
  4 partition p1 values less than (10, 10),                  -- 0
  5 partition p2 values less than (20, 20),                  -- 1
  6 partition p3 values less than (20, 30),                  -- 2
  7 partition p4 values less than (maxvalue, maxvalue)       -- 3
  8 );

Succeed.

SQL> 
SQL> insert into multi_col_prune2 values (10, 9);

1 rows affected.

SQL> insert into multi_col_prune2 values (10, 10);

1 rows affected.

SQL> insert into multi_col_prune2 values (10, 11);

1 rows affected.

SQL> insert into multi_col_prune2 values (20, 19);

1 rows affected.

SQL> insert into multi_col_prune2 values (20, 20);

1 rows affected.

SQL> insert into multi_col_prune2 values (20, 21);

1 rows affected.

SQL> insert into multi_col_prune2 values (20, 30);

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> select * from multi_col_prune2 partition (p1);

ID1          ID2         
------------ ------------
10           9           

1 rows fetched.

SQL> select * from multi_col_prune2 partition (p2);

ID1          ID2         
------------ ------------
10           10          
10           11          
20           19          

3 rows fetched.

SQL> select * from multi_col_prune2 partition (p3);

ID1          ID2         
------------ ------------
20           20          
20           21          

2 rows fetched.

SQL> 
SQL> explain select * from multi_col_prune2 where id1 < 9;   -- FILTER 0

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
----------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name             | Rows | Cost | Bytes | Remark |
----------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |                  |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[0,1) | SYS   | MULTI_COL_PRUNE2 |      |      |       |        |
----------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: ID1 < 9                                          

9 rows fetched.

SQL> explain select * from multi_col_prune2 where id1 < 10;  -- FILTER 0

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
----------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name             | Rows | Cost | Bytes | Remark |
----------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |                  |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[0,1) | SYS   | MULTI_COL_PRUNE2 |      |      |       |        |
----------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: ID1 < 10                                         

9 rows fetched.

SQL> explain select * from multi_col_prune2 where id1 <= 10; -- FILTER 0, 1

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
----------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name             | Rows | Cost | Bytes | Remark |
----------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |                  |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[0,2) | SYS   | MULTI_COL_PRUNE2 |      |      |       |        |
----------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: ID1 <= 10                                        

9 rows fetched.

SQL> explain select * from multi_col_prune2 where id1 < 11;  -- FILTER 0, 1

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
----------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name             | Rows | Cost | Bytes | Remark |
----------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |                  |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[0,2) | SYS   | MULTI_COL_PRUNE2 |      |      |       |        |
----------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: ID1 < 11                                         

9 rows fetched.

SQL> explain select * from multi_col_prune2 where id1 < 19;  -- FILTER 0, 1

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
----------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name             | Rows | Cost | Bytes | Remark |
----------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |                  |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[0,2) | SYS   | MULTI_COL_PRUNE2 |      |      |       |        |
----------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: ID1 < 19                                         

9 rows fetched.

SQL> explain select * from multi_col_prune2 where id1 < 20;  -- FILTER 0, 1

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
----------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name             | Rows | Cost | Bytes | Remark |
----------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |                  |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[0,2) | SYS   | MULTI_COL_PRUNE2 |      |      |       |        |
----------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: ID1 < 20                                         

9 rows fetched.

SQL> explain select * from multi_col_prune2 where id1 <= 20; -- FILTER 0, 1, 2, 3

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
----------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name             | Rows | Cost | Bytes | Remark |
----------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |                  |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[0,4) | SYS   | MULTI_COL_PRUNE2 |      |      |       |        |
----------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: ID1 <= 20                                        

9 rows fetched.

SQL> explain select * from multi_col_prune2 where id1 < 21;  -- FILTER 0, 1, 2, 3

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
----------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name             | Rows | Cost | Bytes | Remark |
----------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |                  |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[0,4) | SYS   | MULTI_COL_PRUNE2 |      |      |       |        |
----------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: ID1 < 21                                         

9 rows fetched.

SQL> 
SQL> explain select * from multi_col_prune2 where id1 > 9;   -- FILTER 0, 1, 2, 3

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
----------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name             | Rows | Cost | Bytes | Remark |
----------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |                  |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[0,4) | SYS   | MULTI_COL_PRUNE2 |      |      |       |        |
----------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: ID1 > 9                                          

9 rows fetched.

SQL> explain select * from multi_col_prune2 where id1 >= 10; -- FILTER 0, 1, 2, 3

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
----------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name             | Rows | Cost | Bytes | Remark |
----------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |                  |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[0,4) | SYS   | MULTI_COL_PRUNE2 |      |      |       |        |
----------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: ID1 >= 10                                        

9 rows fetched.

SQL> explain select * from multi_col_prune2 where id1 > 10;  -- FILTER 1, 2, 3

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
----------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name             | Rows | Cost | Bytes | Remark |
----------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |                  |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[1,4) | SYS   | MULTI_COL_PRUNE2 |      |      |       |        |
----------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: ID1 > 10                                         

9 rows fetched.

SQL> explain select * from multi_col_prune2 where id1 > 11;  -- FILTER 1, 2, 3

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
----------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name             | Rows | Cost | Bytes | Remark |
----------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |                  |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[1,4) | SYS   | MULTI_COL_PRUNE2 |      |      |       |        |
----------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: ID1 > 11                                         

9 rows fetched.

SQL> explain select * from multi_col_prune2 where id1 > 19;  -- FILTER 1, 2, 3

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
----------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name             | Rows | Cost | Bytes | Remark |
----------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |                  |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[1,4) | SYS   | MULTI_COL_PRUNE2 |      |      |       |        |
----------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: ID1 > 19                                         

9 rows fetched.

SQL> explain select * from multi_col_prune2 where id1 >= 20; -- FILTER 1, 2, 3

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
----------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name             | Rows | Cost | Bytes | Remark |
----------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |                  |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[1,4) | SYS   | MULTI_COL_PRUNE2 |      |      |       |        |
----------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: ID1 >= 20                                        

9 rows fetched.

SQL> explain select * from multi_col_prune2 where id1 > 20;  -- FILTER 3

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
----------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name             | Rows | Cost | Bytes | Remark |
----------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |                  |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[3,4) | SYS   | MULTI_COL_PRUNE2 |      |      |       |        |
----------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: ID1 > 20                                         

9 rows fetched.

SQL> explain select * from multi_col_prune2 where id1 > 21;  -- FILTER 3

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
----------------------------------------------------------------------------------------------------
| Id  | Description                      | Owner | Name             | Rows | Cost | Bytes | Remark |
----------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                 |       |                  |      |      |       |        |
| 1   |   TABLE ACCESS FULL Filter:[3,4) | SYS   | MULTI_COL_PRUNE2 |      |      |       |        |
----------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   1 - filter: ID1 > 21                                         

9 rows fetched.

SQL> drop table multi_col_prune2 purge;

Succeed.

SQL> 
SQL> --split partition  expect sql parse error
SQL> drop table if exists test_split_range_table;

Succeed.

SQL> drop table if exists test_not_part_table;

Succeed.

SQL> drop table if exists test_not_range_table;

Succeed.

SQL> create table test_split_range_table(f1 int, f2 real, f3 number, f4 char(30), f5 varchar(30), f6 date, f7 timestamp)
  2 PARTITION BY RANGE(f1,f2, f3, f4, f5, f6, f7)
  3 (
  4  PARTITION p1 values less than(10, 15.6, 28.5, 'abcd', 'abcd', to_date('2018/01/24', 'YYYY/MM/DD'), to_timestamp('2018-01-24 16:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')),
  5  PARTITION p2 values less than(20, 16.6, 29.5, 'efgh', 'efgh', to_date('2018/01/25', 'YYYY/MM/DD'), to_timestamp('2018-01-24 17:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')),
  6  PARTITION p3 values less than(40, 18.6, 31.5, 'zxv', 'zxv',   to_date('2018/01/27', 'YYYY/MM/DD'), to_timestamp('2018-01-24 19:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')),
  7  PARTITION p4 values less than(MAXVALUE,MAXVALUE,MAXVALUE,MAXVALUE,MAXVALUE,MAXVALUE,MAXVALUE)
  8  
  9 );

Succeed.

SQL> create table test_not_part_table(f1 int, f2 real, f3 number, f4 char(30), f5 varchar(30), f6 date, f7 timestamp); 

Succeed.

SQL> create table test_not_range_table(f1 int, f2 real, f3 number, f4 char(30), f5 varchar(30), f6 date, f7 timestamp)
  2 partition by list(f1)
  3 (
  4 partition p1 values (1,2,3,4,5),
  5 partition p2 values (6,7,8,9,10),
  6 partition p3 values (11,12,13),
  7 partition p4 values (default)
  8 );

Succeed.

SQL> 
SQL> alter table test_split_range_table split  PARTITION p4 at (30, 17.6, 30.5, 'jkla', 'jkla', to_date('2018/01/26', 'YYYY/MM/DD'), to_timestamp('2018-01-24 18:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')) into (partition p5 , partition p5); 

CT-00601, Sql syntax error: partition name duplicate
SQL> alter table test_split_range_table split  PARTITION p4 at (30, 17.6, 30.5, 'jkla', 'jkla', to_date('2018/01/26', 'YYYY/MM/DD'), to_timestamp('2018-01-24 18:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')) into (partition p5 , partition p6,partition p7); 

CT-00601, [1:231]Sql syntax error: partition define error
SQL> alter table test_split_range_table split  PARTITION p3 at (30, 17.6, 30.5, 'jkla', 'jkla', to_date('2018/01/26', 'YYYY/MM/DD'), to_timestamp('2018-01-24 18:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')) into (); 

CT-00601, [1:204]Sql syntax error: partition define expected
SQL> alter table test_split_range_table split  PARTITION p3 at () into (partition p5 , partition p6); 

CT-00601, [1:60]Sql syntax error: split value of partition expected
SQL> alter table test_split_range_table split  PARTITION p3 at (40, 18.6, 31.5, 'zxv', 'zxv',   to_date('2018/01/27', 'YYYY/MM/DD'), to_timestamp('2018-01-24 19:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')) into (partition p5 , partition p6); 

CT-00601, Sql syntax error: split partition value invalid
SQL> alter table test_not_part_table split  PARTITION p3 at (30, 17.6, 30.5, 'jkla', 'jkla', to_date('2018/01/26', 'YYYY/MM/DD'), to_timestamp('2018-01-24 18:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')) into (partition p5 , partition p6); 

CT-00601, Sql syntax error:  TEST_NOT_PART_TABLE not partition table
SQL> alter table test_not_range_table split  PARTITION p3 at (30, 17.6, 30.5, 'jkla', 'jkla', to_date('2018/01/26', 'YYYY/MM/DD'), to_timestamp('2018-01-24 18:00:00.00', 'YYYY-MM-DD HH24:MI:SS.FF3')) into (partition p5 , partition p6); 

CT-00130, Operation split partition is not supported on non-range partitioned table
SQL> 
SQL> drop table  test_split_range_table;

Succeed.

SQL> drop table  test_not_part_table;

Succeed.

SQL> drop table  test_not_range_table;

Succeed.

SQL> 
SQL> 
SQL> drop table if exists test_interval_part;

Succeed.

SQL> CREATE TABLE test_interval_part(THE_ID INT, C_TEXT BLOB,C_CLOB CLOB)PARTITION BY RANGE(THE_ID)INTERVAL(1)
  2 (
  3 PARTITION p1 VALUES LESS than(1),
  4 PARTITION p2 VALUES LESS than(3)
  5 );

Succeed.

SQL> alter table test_interval_part split partition   p2  at (2) into (partition p3,partition p4) ;

CT-00130, Operation split partition is not supported on non-range partitioned table
SQL> drop table test_interval_part;

Succeed.

SQL>
SQL> drop table if exists test_range_null_key;

Succeed.

SQL> create table test_range_null_key(id int, name varchar(20)) partition by range(id)
  2 interval(50)
  3 (
  4 partition p1 values less than(50),
  5 partition p2 values less than(100)
  6 );

Succeed.

SQL> insert into test_range_null_key values(NULL, 'AAAAA');

CT-01103, Invalid (sub)partition key, inserted partition key does not map to any partition
SQL> drop table test_range_null_key;

Succeed.

SQL> 
SQL> drop table if exists test_hiboundval;

Succeed.

SQL> CREATE TABLE test_hiboundval
  2 (
  3   SN NUMBER NOT NULL,
  4   OBJID VARBINARY(16) NOT NULL,
  5   OBJTYPE VARCHAR(128) NOT NULL DEFAULT '',
  6   OPERATION VARCHAR(64) NOT NULL,
  7   SENDSTATUS NUMBER(8) NOT NULL DEFAULT 0,
  8   DATETIME BIGINT NOT NULL,
  9   USERID VARCHAR(64),
 10   DETAIL BLOB NOT NULL,
 11   TENANTID VARCHAR(64)
 12 )partition by range (DATETIME)
 13 INTERVAL(3600000)
 14 (
 15 PARTITION history1 VALUES LESS than(1546272000000)
 16 );

Succeed.

SQL> insert into test_hiboundval (sn,objid,OBJTYPE,OPERATION,SENDSTATUS,DATETIME,detail) values(1234,unhex('1124123'),'TEMP','TEMP','2',1552362242048,hex('TEMP'));

1 rows affected.

SQL> insert into test_hiboundval (sn,objid,OBJTYPE,OPERATION,SENDSTATUS,DATETIME,detail) values(1234,unhex('1124123'),'TEMP','TEMP','2',1258764,hex('TEMP'));

1 rows affected.

SQL> select datetime from test_hiboundval;

DATETIME
--------------------
1258764
1552362242048

2 rows fetched.

SQL> select datetime from test_hiboundval where datetime > 100000;

DATETIME
--------------------
1258764
1552362242048

2 rows fetched.

SQL> select datetime from test_hiboundval where datetime > 1548335710208;

DATETIME
--------------------
1552362242048

1 rows fetched.

SQL> drop table test_hiboundval;

Succeed.

SQL>
SQL> drop table if exists hash_data_distribute;

Succeed.

SQL> create table hash_data_distribute(id number) partition by hash(id)
  2 (
  3 partition p1,
  4 partition p2,
  5 partition p3,
  6 partition p4,
  7 partition p5,
  8 partition p6,
  9 partition p7,
 10 partition p8,
 11 partition p9,
 12 partition p10,
 13 partition p11,
 14 partition p12,
 15 partition p13,
 16 partition p14,
 17 partition p15,
 18 partition p16,
 19 partition p17,
 20 partition p18,
 21 partition p19,
 22 partition p20,
 23 partition p21,
 24 partition p22,
 25 partition p23,
 26 partition p24,
 27 partition p25,
 28 partition p26,
 29 partition p27,
 30 partition p28,
 31 partition p29,
 32 partition p30,
 33 partition p31,
 34 partition p32,
 35 partition p33,
 36 partition p34,
 37 partition p35,
 38 partition p36,
 39 partition p37,
 40 partition p38,
 41 partition p39,
 42 partition p40,
 43 partition p41,
 44 partition p42,
 45 partition p43,
 46 partition p44,
 47 partition p45,
 48 partition p46,
 49 partition p47,
 50 partition p48,
 51 partition p49,
 52 partition p50,
 53 partition p51,
 54 partition p52,
 55 partition p53,
 56 partition p54,
 57 partition p55,
 58 partition p56,
 59 partition p57,
 60 partition p58,
 61 partition p59,
 62 partition p60,
 63 partition p61,
 64 partition p62,
 65 partition p63,
 66 partition p64
 67 );

Succeed.

SQL>
SQL> CREATE or replace procedure insert_rand_data(startall int,endall int)  as
  2 i INT;
  3 BEGIN
  4   FOR i IN startall..endall LOOP
  5         insert into hash_data_distribute select 16602400 + i * 4;
  6   END LOOP;
  7 END;
  8 /

Succeed.

SQL>
SQL> call insert_rand_data(0, 13999);

PL/SQL procedure successfully completed.

SQL>
SQL> select count(*) from hash_data_distribute partition(p1);

COUNT(*)
--------------------
230

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p2);

COUNT(*)
--------------------
219

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p3);

COUNT(*)
--------------------
205

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p4);

COUNT(*)
--------------------
196

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p5);

COUNT(*)
--------------------
231

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p6);

COUNT(*)
--------------------
247

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p7);

COUNT(*)
--------------------
223

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p8);

COUNT(*)
--------------------
225

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p9);

COUNT(*)
--------------------
238

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p10);

COUNT(*)
--------------------
204

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p11);

COUNT(*)
--------------------
204

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p12);

COUNT(*)
--------------------
230

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p13);

COUNT(*)
--------------------
228

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p14);

COUNT(*)
--------------------
233

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p15);

COUNT(*)
--------------------
224

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p16);

COUNT(*)
--------------------
214

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p17);

COUNT(*)
--------------------
220

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p18);

COUNT(*)
--------------------
212

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p19);

COUNT(*)
--------------------
222

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p20);

COUNT(*)
--------------------
229

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p21);

COUNT(*)
--------------------
199

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p22);

COUNT(*)
--------------------
219

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p23);

COUNT(*)
--------------------
217

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p24);

COUNT(*)
--------------------
217

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p25);

COUNT(*)
--------------------
221

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p26);

COUNT(*)
--------------------
219

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p27);

COUNT(*)
--------------------
239

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p28);

COUNT(*)
--------------------
199

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p29);

COUNT(*)
--------------------
194

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p30);

COUNT(*)
--------------------
192

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p31);

COUNT(*)
--------------------
217

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p32);

COUNT(*)
--------------------
212

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p33);

COUNT(*)
--------------------
229

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p34);

COUNT(*)
--------------------
204

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p35);

COUNT(*)
--------------------
235

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p36);

COUNT(*)
--------------------
219

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p37);

COUNT(*)
--------------------
231

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p38);

COUNT(*)
--------------------
200

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p39);

COUNT(*)
--------------------
199

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p40);

COUNT(*)
--------------------
210

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p41);

COUNT(*)
--------------------
234

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p42);

COUNT(*)
--------------------
244

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p43);

COUNT(*)
--------------------
194

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p44);

COUNT(*)
--------------------
246

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p45);

COUNT(*)
--------------------
232

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p46);

COUNT(*)
--------------------
239

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p47);

COUNT(*)
--------------------
185

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p48);

COUNT(*)
--------------------
213

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p49);

COUNT(*)
--------------------
206

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p50);

COUNT(*)
--------------------
214

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p51);

COUNT(*)
--------------------
236

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p52);

COUNT(*)
--------------------
211

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p53);

COUNT(*)
--------------------
203

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p54);

COUNT(*)
--------------------
222

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p55);

COUNT(*)
--------------------
211

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p56);

COUNT(*)
--------------------
221

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p57);

COUNT(*)
--------------------
204

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p58);

COUNT(*)
--------------------
231

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p59);

COUNT(*)
--------------------
225

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p60);

COUNT(*)
--------------------
235

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p61);

COUNT(*)
--------------------
224

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p62);

COUNT(*)
--------------------
227

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p63);

COUNT(*)
--------------------
240

1 rows fetched.

SQL> select count(*) from hash_data_distribute partition(p64);

COUNT(*)
--------------------
197

1 rows fetched.

SQL> drop table if exists hash_data_distribute;

Succeed.

SQL> drop table if exists tvod_result;

Succeed.

SQL> create table tvod_result (
  2     id number(12),
  3     content_id number(12) not null ,
  4     device_id number(12) not null ,
  5     pop_id number(12) not null ,
  6     lost_time date ,
  7     renew_time date,
  8     flag number(12),
  9     livecontentid number(12),
 10     constraint PK_tvod_result_id primary key(id) 
 11 )
 12 partition by range (content_id)
 13 (
 14   partition USER_P_TVOD_RESULT_1 values less than (3621225472),
 15   partition SYS_PD3E values less than (3621225497),
 16   partition SYS_PD4E values less than (3621225499),
 17   partition SYS_PD5E values less than (3621225510),
 18   partition SYS_PD6E values less than (3621225530),
 19   partition SYS_PD7E values less than (3621225550),
 20   partition SYS_PD8E values less than (3621225570)
 21 );

Succeed.

SQL> select count(*) from TVOD_RESULT partition (SYS_PD3E);

COUNT(*)            
--------------------
0                   

1 rows fetched.

SQL> alter table TVOD_RESULT drop PARTITION SYS_PD3E;

Succeed.

SQL> insert into tvod_result (id, content_id, device_id, pop_id, lost_time, renew_time, flag)
  2                values (1,
  3                         3621225498,
  4                         1,
  5                         1,
  6                         null,
  7                         null,
  8                         1
  9                         );

1 rows affected.

SQL> select count(*) from TVOD_RESULT partition (SYS_PD4E);						

COUNT(*)            
--------------------
1                   

1 rows fetched.

SQL> DELETE FROM  tvod_result WHERE content_id=3621225498;

1 rows affected.

SQL> select count(*) from TVOD_RESULT partition (SYS_PD4E);

COUNT(*)            
--------------------
0                   

1 rows fetched.

SQL> alter table TVOD_RESULT drop PARTITION SYS_PD4E;

Succeed.

SQL> insert into tvod_result (id, content_id, device_id, pop_id, lost_time, renew_time, flag)
  2                values (2,
  3                         3621225508,
  4                         1,
  5                         1,
  6                         null,
  7                         null,
  8                         1
  9                         );

1 rows affected.

SQL> insert into tvod_result (id, content_id, device_id, pop_id, lost_time, renew_time, flag)
  2                values (3,
  3                         3621225506,
  4                         1,
  5                         1,
  6                         null,
  7                         null,
  8                         1
  9                         );

1 rows affected.

SQL> select count(*) from TVOD_RESULT partition (SYS_PD5E);

COUNT(*)            
--------------------
2                   

1 rows fetched.

SQL> DELETE FROM  tvod_result WHERE content_id=3621225508;

1 rows affected.

SQL> select count(*) from TVOD_RESULT partition (SYS_PD5E);

COUNT(*)            
--------------------
1                   

1 rows fetched.

SQL> alter table TVOD_RESULT drop PARTITION SYS_PD5E;

Succeed.

SQL> insert into tvod_result (id, content_id, device_id, pop_id, lost_time, renew_time, flag)
  2                values (4,
  3                         3621225520,
  4                         1,
  5                         1,
  6                         null,
  7                         null,
  8                         1
  9                         );

CT-00823, Index PK_TVOD_RESULT_ID is unusable, need to rebuild index first.
SQL> 
SQL> drop table if exists tvod_result;

Succeed.

SQL> create table tvod_result (
  2     id number(12),
  3     content_id number(12) not null ,
  4     device_id number(12) not null ,
  5     pop_id number(12) not null ,
  6     lost_time date ,
  7     renew_time date,
  8     flag number(12),
  9     livecontentid number(12),
 10     constraint PK_tvod_result_id primary key(id) 
 11 )
 12 partition by range (content_id)
 13 (
 14   partition USER_P_TVOD_RESULT_1 values less than (3621225472),
 15   partition SYS_PD3E values less than (3621225497),
 16   partition SYS_PD4E values less than (3621225499),
 17   partition SYS_PD5E values less than (3621225510),
 18   partition SYS_PD6E values less than (3621225530),
 19   partition SYS_PD7E values less than (3621225550),
 20   partition SYS_PD8E values less than (3621225570)
 21 );

Succeed.

SQL> select count(*) from TVOD_RESULT partition (SYS_PD3E);

COUNT(*)            
--------------------
0                   

1 rows fetched.

SQL> alter table TVOD_RESULT truncate PARTITION SYS_PD3E;

Succeed.

SQL> insert into tvod_result (id, content_id, device_id, pop_id, lost_time, renew_time, flag)
  2                values (1,
  3                         3621225498,
  4                         1,
  5                         1,
  6                         null,
  7                         null,
  8                         1
  9                         );

1 rows affected.

SQL> select count(*) from TVOD_RESULT partition (SYS_PD4E);						

COUNT(*)            
--------------------
1                   

1 rows fetched.

SQL> DELETE FROM  tvod_result WHERE content_id=3621225498;

1 rows affected.

SQL> select count(*) from TVOD_RESULT partition (SYS_PD4E);

COUNT(*)            
--------------------
0                   

1 rows fetched.

SQL> alter table TVOD_RESULT truncate PARTITION SYS_PD4E;

Succeed.

SQL> insert into tvod_result (id, content_id, device_id, pop_id, lost_time, renew_time, flag)
  2                values (2,
  3                         3621225508,
  4                         1,
  5                         1,
  6                         null,
  7                         null,
  8                         1
  9                         );

1 rows affected.

SQL> insert into tvod_result (id, content_id, device_id, pop_id, lost_time, renew_time, flag)
  2                values (3,
  3                         3621225506,
  4                         1,
  5                         1,
  6                         null,
  7                         null,
  8                         1
  9                         );

1 rows affected.

SQL> select count(*) from TVOD_RESULT partition (SYS_PD5E);

COUNT(*)            
--------------------
2                   

1 rows fetched.

SQL> DELETE FROM  tvod_result WHERE content_id=3621225508;

1 rows affected.

SQL> select count(*) from TVOD_RESULT partition (SYS_PD5E);

COUNT(*)            
--------------------
1                   

1 rows fetched.

SQL> alter table TVOD_RESULT truncate PARTITION SYS_PD5E;

Succeed.

SQL> insert into tvod_result (id, content_id, device_id, pop_id, lost_time, renew_time, flag)
  2                values (4,
  3                         3621225520,
  4                         1,
  5                         1,
  6                         null,
  7                         null,
  8                         1
  9                         );

CT-00823, Index PK_TVOD_RESULT_ID is unusable, need to rebuild index first.
SQL> drop table if exists tvod_result;

Succeed.

SQL> 
SQL> drop table if exists test_split_index;

Succeed.

SQL> create table test_split_index(c1 int, c2 int) partition by range(c1)
  2 (partition p1 values less than(100), partition p2 values less than(200));

Succeed.

SQL> create index idx1_local on test_split_index(c1) local;

Succeed.

SQL> select PART#, NAME from indexpart$ where table# = (select id from table$ where name='TEST_SPLIT_INDEX') order by PART#;

PART#        NAME                                                            
------------ ----------------------------------------------------------------
10           P1                                                              
20           P2                                                              

2 rows fetched.

SQL> alter table test_split_index split partition p1 at(50) into (partition p11, partition p12);

Succeed.

SQL> select PART#, NAME from indexpart$ where table# = (select id from table$ where name='TEST_SPLIT_INDEX') order by PART#;

PART#        NAME                                                            
------------ ----------------------------------------------------------------
9            P11                                                             
11           P12                                                             
20           P2                                                              

3 rows fetched.

SQL> drop table test_split_index;

Succeed.

SQL>
SQL> drop table if exists test_number_hash;

Succeed.

SQL> create table test_number_hash(id number(30)) partition by hash(id)
  2 (
  3 partition p1,
  4 partition p2
  5 );

Succeed.

SQL>
SQL> insert into test_number_hash values(256256256256256256256);

1 rows affected.

SQL> select * from test_number_hash where id = 256256256256256256256;

ID
----------------------------------------
256256256256256256256

1 rows fetched.

SQL> update test_number_hash set id = 123;

1 rows affected.

SQL> select * from test_number_hash where id = 123;

ID
----------------------------------------
123

1 rows fetched.

SQL> update test_number_hash set id = 10001001;

1 rows affected.

SQL> select * from test_number_hash where id = 10001001;

ID
----------------------------------------
10001001

1 rows fetched.

SQL> update test_number_hash set id = 256256256256256256256;

1 rows affected.

SQL> select * from test_number_hash where id = 256256256256256256256;

ID
----------------------------------------
256256256256256256256

1 rows fetched.

SQL> drop table test_number_hash;

Succeed.

SQL> --DTS2019092108429
SQL> drop table if exists partition_test_8429;

Succeed.

SQL> create table partition_test_8429(id int not null,c_int int,c_vchar varchar(20) not null,c_clob clob not null,c_blob blob not null,c_date date,constraint partition_test_8429_con primary key(c_vchar))
  2 PARTITION BY RANGE(id) interval(10)
  3 (
  4 PARTITION p1 VALUES LESS THAN(100),
  5 PARTITION p2 VALUES LESS THAN(200),
  6 PARTITION p3 VALUES LESS THAN(300)
  7 );

Succeed.

SQL> insert into partition_test_8429 values(1,100,'abc123',lpad('123abc',50,'abc'),lpad('11100011',50,'1100'),to_timestamp(to_char('1800-01-01 10:51:47'),'yyyy-mm-dd hh24:mi:ss'));

1 rows affected.

SQL> insert into partition_test_8429 select id + 100, c_int, c_vchar||'100', c_clob,c_blob,c_date from partition_test_8429;

1 rows affected.

SQL> select count(*) from (partition_test_8429) partition(p2) t1;

COUNT(*)            
--------------------
1                   

1 rows fetched.

SQL> select count(*) from ((partition_test_8429) partition(p2)) t1;

COUNT(*)            
--------------------
1                   

1 rows fetched.

SQL> select count(*) from ((partition_test_8429) partition(p2) t1);

COUNT(*)            
--------------------
1                   

1 rows fetched.

SQL> select count(*) from ((partition_test_8429) t1 partition(p2) t2);

CT-00601, [1:57]Sql syntax error: expected end in bracket but partition found
SQL> select count(*) from ((partition_test_8429) t1 partition(p2)) t2;

CT-00601, [1:57]Sql syntax error: expected end in bracket but partition found
SQL> select count(*) from ((partition_test_8429)  partition(p2) t1) t2;

CT-00601, [1:66]Sql syntax error: invalid table alias
SQL> select count(*) from (partition_test_8429 partition(p2)  as join);

COUNT(*)            
--------------------
1                   

1 rows fetched.

SQL> select count(*) from (partition_test_8429 partition(p2) join);

CT-00601, [1:61]Sql syntax error: more text expected but terminated
SQL> select count(*) from (partition_test_8429 partition(p2)  as limit);

COUNT(*)            
--------------------
1                   

1 rows fetched.

SQL> select count(*) from (partition_test_8429 partition(p2)  as left);

COUNT(*)            
--------------------
1                   

1 rows fetched.

SQL> select count(*) from (partition_test_8429 partition(p2)  as offset);

COUNT(*)            
--------------------
1                   

1 rows fetched.

SQL> select count(*) from (partition_test_8429 partition(p2) offset);

CT-00601, [1:63]Sql syntax error: expected end but offset found
SQL> select count(*) from (partition_test_8429 partition(p2)  as using);

COUNT(*)            
--------------------
1                   

1 rows fetched.

SQL> select count(*) from (partition_test_8429 partition(p2)  as cross);

COUNT(*)            
--------------------
1                   

1 rows fetched.

SQL> drop table if exists partition_test_8429;

Succeed.

SQL>
SQL> drop table if exists test_drop_part;

Succeed.

SQL> create table test_drop_part(id int) partition by range(id)
  2 (
  3 partition p1 values less than(50)
  4 );

Succeed.

SQL> alter table test_drop_part drop partition PART_NOT_EXISTS;

CT-00800, A table (sub)partition PART_NOT_EXISTS does not exist.
SQL> drop table if exists test_drop_part;

Succeed.

SQL> 
SQL> --DTS2019101500890
SQL> drop table if exists HIS_BUSINESSINFO;

Succeed.

SQL> create table HIS_BUSINESSINFO
  2 (
  3   busi_seq             VARCHAR2(16) not null,
  4   rela_bsno            VARCHAR2(16),
  5   rela_busi_type       VARCHAR2(5),
  6   cust_id              NUMBER(24),
  7   sub_id               NUMBER(24),
  8   group_sub_id         NUMBER(24),
  9   acct_id              NUMBER(24),
 10   msisdn               VARCHAR2(64),
 11   iccid                VARCHAR2(20),
 12   imsi                 VARCHAR2(20),
 13   busi_type            VARCHAR2(5) not null,
 14   tele_type            VARCHAR2(8),
 15   busi_oper_id         VARCHAR2(20),
 16   busi_dept_id         VARCHAR2(20),
 17   busi_local_id        VARCHAR2(10),
 18   busi_date            DATE not null,
 19   busi_state           VARCHAR2(1) not null,
 20   reason_code          VARCHAR2(10),
 21   reason               VARCHAR2(100),
 22   busi_source          VARCHAR2(2) not null,
 23   busi_desc            VARCHAR2(512),
 24   remark               VARCHAR2(1024),
 25   partition_id         NUMBER(8) not null,
 26   rela_seq             VARCHAR2(32),
 27   be_id                VARCHAR2(32) default '101' not null,
 28   oper_be_id           VARCHAR2(32),
 29   transaction_id       VARCHAR2(32),
 30   order_id             VARCHAR2(16),
 31   external_order_id    VARCHAR2(32),
 32   external_sub_id      VARCHAR2(32),
 33   external_cust_id     VARCHAR2(32),
 34   external_acct_id     VARCHAR2(32),
 35   cust_code            VARCHAR2(64),
 36   acct_code            VARCHAR2(64),
 37   sub_code             VARCHAR2(64),
 38   is_cancel            VARCHAR2(1),
 39   status_date          DATE,
 40   complete_timestamp   TIMESTAMP,
 41   tech_channel_id      VARCHAR2(20),
 42   canceled_busi_seq    VARCHAR2(16),
 43   cancel_busi_seq      VARCHAR2(16),
 44   customer_order_id    VARCHAR2(16),
 45   prepaid_flag         VARCHAR2(1),
 46   is_display           VARCHAR2(8),
 47   file_name            VARCHAR2(256),
 48   isbatch              VARCHAR2(8),
 49   execute_type         NUMBER(1),
 50   reserve_execute_date DATE,
 51   contact_seq          VARCHAR2(30),
 52   alias_busi_type      VARCHAR2(5),
 53   cust_type            VARCHAR2(20),
 54   wait_im_paid         VARCHAR2(1),
 55   im_paid_flag         VARCHAR2(1),
 56   im_paid_date         DATE,
 57   contact_time         DATE,
 58   sort_num             NUMBER(2),
 59   trace_id             VARCHAR2(16),
 60   ponr_flag            VARCHAR2(1),
 61   modify_oper_id       VARCHAR2(20),
 62   modify_date          DATE,
 63   info1                VARCHAR2(128),
 64   info2                VARCHAR2(128),
 65   info3                VARCHAR2(128),
 66   info4                VARCHAR2(128),
 67   info5                VARCHAR2(128),
 68   info6                VARCHAR2(128),
 69   info7                VARCHAR2(128),
 70   info8                VARCHAR2(128),
 71   info9                VARCHAR2(128),
 72   info10               VARCHAR2(128),
 73   operate_type         VARCHAR2(16) default '0000000000000000',
 74   wish_date            DATE,
 75   shift_service_order  NUMBER(1),
 76   order_type           NUMBER(1) default 0 not null,
 77   accept_node          VARCHAR2(20)
 78 )
 79 partition by range (PARTITION_ID)
 80 (
 81 partition P201901 values less than (201901),
 82 partition P201902 values less than (201902),
 83 partition P201903 values less than (201903),
 84 partition P201904 values less than (201904),
 85 partition P201905 values less than (201905),
 86 partition P201906 values less than (201906),
 87 partition P201907 values less than (201907),
 88 partition P201908 values less than (201908),
 89 partition P201909 values less than (201909),
 90 partition P201910 values less than (201910),
 91 partition P201911 values less than (201911),
 92 partition P201912 values less than (201912)
 93 );

Succeed.

SQL> 
SQL> create index index_status_date on HIS_BUSINESSINFO(status_date) parallel 5;

Succeed.

SQL> 
SQL> create index index_complete_timestamp on HIS_BUSINESSINFO(complete_timestamp);

Succeed.

SQL> 
SQL> explain select * from HIS_BUSINESSINFO where status_date > sysdate - 100;

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------
| Id  | Description                                 | Owner | Name              | Rows | Cost | Bytes | Remark |
----------------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                            |       |                   |      |      |       |        |
| 1   |   TABLE ACCESS BY INDEX ROWID Filter:[0,12) | SYS   | HIS_BUSINESSINFO  |      |      |       |        |
| 2   |     INDEX RANGE SCAN                        | SYS   | INDEX_STATUS_DATE |      |      |       |        |
----------------------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   2 - access: STATUS_DATE > SYSDATE - 100                      

10 rows fetched.

SQL> 
SQL> explain select * from HIS_BUSINESSINFO where status_date > current_date - 100;

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------
| Id  | Description                                 | Owner | Name              | Rows | Cost | Bytes | Remark |
----------------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                            |       |                   |      |      |       |        |
| 1   |   TABLE ACCESS BY INDEX ROWID Filter:[0,12) | SYS   | HIS_BUSINESSINFO  |      |      |       |        |
| 2   |     INDEX RANGE SCAN                        | SYS   | INDEX_STATUS_DATE |      |      |       |        |
----------------------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   2 - access: STATUS_DATE > CURRENT_DATE - 100                 

10 rows fetched.

SQL> 
SQL> explain select * from HIS_BUSINESSINFO where complete_timestamp > CURRENT_TIMESTAMP - 100;

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------
| Id  | Description                                 | Owner | Name                     | Rows | Cost | Bytes | Remark |
-----------------------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                            |       |                          |      |      |       |        |
| 1   |   TABLE ACCESS BY INDEX ROWID Filter:[0,12) | SYS   | HIS_BUSINESSINFO         |      |      |       |        |
| 2   |     INDEX RANGE SCAN                        | SYS   | INDEX_COMPLETE_TIMESTAMP |      |      |       |        |
-----------------------------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   2 - access: COMPLETE_TIMESTAMP > CURRENT_TIMESTAMP - 100     

10 rows fetched.

SQL> 
SQL> explain select * from HIS_BUSINESSINFO where complete_timestamp > LOCALTIMESTAMP - 100;

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------
| Id  | Description                                 | Owner | Name                     | Rows | Cost | Bytes | Remark |
-----------------------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                            |       |                          |      |      |       |        |
| 1   |   TABLE ACCESS BY INDEX ROWID Filter:[0,12) | SYS   | HIS_BUSINESSINFO         |      |      |       |        |
| 2   |     INDEX RANGE SCAN                        | SYS   | INDEX_COMPLETE_TIMESTAMP |      |      |       |        |
-----------------------------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   2 - access: COMPLETE_TIMESTAMP > LOCALTIMESTAMP - 100        

10 rows fetched.

SQL> delete from HIS_BUSINESSINFO;

0 rows affected.

SQL> drop table HIS_BUSINESSINFO;

Succeed.

SQL>
SQL> DROP TABLE IF EXISTS TEST_EXPR_BOUNDVAL;

Succeed.

SQL> CREATE TABLE TEST_EXPR_BOUNDVAL(ID INT) PARTITION BY RANGE(ID)
  2 (
  3 PARTITION P1 VALUES LESS THAN(60 - 10),
  4 PARTITION P2 VALUES LESS THAN(100)
  5 );

CT-00601, [3:34]Sql syntax error: can not specify an expression for a range partition boundval
SQL>
SQL> DROP TABLE IF EXISTS TEST_EXPR_BOUNDVAL;

Succeed.

SQL> CREATE TABLE TEST_EXPR_BOUNDVAL(ID INT) PARTITION BY RANGE(ID)
  2 (
  3 PARTITION P1 VALUES LESS THAN(50),
  4 PARTITION P2 VALUES LESS THAN(100)
  5 );

Succeed.

SQL> ALTER TABLE TEST_EXPR_BOUNDVAL SPLIT PARTITION P2 AT(100 - 20) INTO (PARTITION P1, PARTITION P2);

CT-00601, [1:58]Sql syntax error: can not specify an expression for a range partition boundval
SQL> 
SQL> --DongFangTong
SQL> drop table if exists DFT_KC24;

Succeed.

SQL> create table DFT_KC24
  2 (
  3   AAZ208 NUMBER(16) not null,
  4   AAZ216 NUMBER(16),
  5   AAE036 DATE
  6 )
  7 partition by range (AAE036)
  8 (
  9   partition PART2012 values less than   (TO_DATE(' 2013-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS' )),
 10   partition PART201301 values less than (TO_DATE(' 2013-02-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS' )),
 11   partition PART201302 values less than (TO_DATE(' 2013-03-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS' )),
 12   partition PART201303 values less than (TO_DATE(' 2013-04-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS' )),
 13   partition PART201304 values less than (TO_DATE(' 2013-05-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS' )),
 14   partition PART201305 values less than (TO_DATE(' 2013-06-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS' )),
 15   partition PART201306 values less than (TO_DATE(' 2013-07-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS' )),
 16   partition PART201307 values less than (TO_DATE(' 2013-08-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS' )),
 17   partition PART201308 values less than (TO_DATE(' 2013-09-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS' )),
 18   partition PART201309 values less than (TO_DATE(' 2013-10-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS' )),
 19   partition PART201310 values less than (TO_DATE(' 2013-11-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS' )),
 20   partition PARTOTHER values less than (MAXVALUE)
 21 );

Succeed.

SQL> alter table DFT_KC24 add constraint PK_KC24 primary key (AAZ208);

Succeed.

SQL> explain select count(*) from DFT_KC24 where aae036>=TO_DATE(201302, 'yyyymm') AND aae036<=TO_DATE(201303, 'yyyymm');

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
----------------------------------------------------------------------------------------------
| Id  | Description                        | Owner | Name     | Rows | Cost | Bytes | Remark |
----------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                   |       |          |      |      |       |        |
| 1   |   AGGR                             |       |          |      |      |       |        |
| 2   |     TABLE ACCESS FULL Filter:[2,4) | SYS   | DFT_KC24 |      |      |       |        |
----------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   2 - filter: AAE036 >= to_date('2013-02-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND AAE036 <= to_date('2013-03-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS')

10 rows fetched.

SQL> explain select count(*) from DFT_KC24 where aae036>=TO_DATE(201302, 'yyyymm') AND aae036<=add_months(TO_DATE(201302, 'yyyymm'),1);

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
----------------------------------------------------------------------------------------------
| Id  | Description                        | Owner | Name     | Rows | Cost | Bytes | Remark |
----------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                   |       |          |      |      |       |        |
| 1   |   AGGR                             |       |          |      |      |       |        |
| 2   |     TABLE ACCESS FULL Filter:[2,4) | SYS   | DFT_KC24 |      |      |       |        |
----------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   2 - filter: AAE036 >= to_date('2013-02-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND AAE036 <= to_date('2013-03-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS')

10 rows fetched.

SQL> drop table DFT_KC24;

Succeed.

SQL>
SQL> DROP TABLE IF EXISTS storage_no_part;

Succeed.

SQL> create table storage_no_part(id int);

Succeed.

SQL> alter table storage_no_part modify partition part_1 storage (maxsize 1G);

CT-00130, Operation modify part storage is not supported on non-partitioned table
SQL> drop table storage_no_part;

Succeed.

SQL> --raw as part key
SQL> drop table if exists part_key_t1;

Succeed.

SQL> drop table if exists part_key_t2;

Succeed.

SQL> create table part_key_t1 ( i raw(100))partition by list(i) (partition part_key_t1_p1 values('11001100110011001100110011001100110011001111100011',''));

Succeed.

SQL> create table part_key_t2 ( i raw(100))partition by list(i) SUBPARTITION BY list(i)
  2     (partition part_key_t2_p2 values('11001100110011001100110011001100110011001111100011','')
  3     (subpartition part_key_t2_sp2 values('11001100110011001100110011001100110011001111100011','')));

Succeed.

SQL> select * from part_key_t1  where i='11001100110011001100110011001100110011001111100011';

I
----------------------------------------------------------------

0 rows fetched.

SQL> select * from part_key_t2  where i='11001100110011001100110011001100110011001111100011';

I
----------------------------------------------------------------

0 rows fetched.

SQL>
SQL> drop table if exists tbl_interval_csf;

Succeed.

SQL> create table tbl_interval_csf(col_int int AUTO_INCREMENT, col_integer integer,
  2 col_BINARY_INTEGER BINARY_INTEGER,
  3 col_smallint smallint not null default '7',
  4 col_bigint bigint not null default '3',
  5 col_real real,
  6 col_double double comment 'double',
  7 col_float float,
  8 col_BINARY_DOUBLE BINARY_DOUBLE,
  9 col_decimal decimal,
 10 col_number1 number,
 11 col_number2 number(20,2),
 12 col_number3 number(20,-3),
 13 col_number4 number(3,10),
 14 col_number5 number(38,7),
 15 col_numeric numeric,
 16 col_char1 char(100),
 17 col_char2 char(100),
 18 col_text text,
 19 col_binary1 binary(200),
 20 col_varbinary1 varbinary(100),
 21 col_raw1 raw(100),
 22 col_bool bool,
 23 col_boolean boolean,
 24 col_interval1 INTERVAL YEAR TO MONTH,
 25 col_interval2 INTERVAL DAY TO SECOND,
 26 primary key(col_int)
 27 )
 28 partition by range(col_number1) interval (10)
 29 (
 30 partition p_interval_01 values less than (10) ,
 31 partition p_interval_02 values less than (20) ,
 32 partition p_interval_03 values less than (30)
 33 );

Succeed.

SQL> insert into TBL_INTERVAL_CSF(col_int,col_number1,col_number2,col_number3,col_number4) values (14,12323131231231231231231.23123,1,12323131231231231231231.23123,0);

CT-01103, Invalid (sub)partition key, inserted partition key does not map to any partition
SQL> 
SQL> --support part csf format
SQL> drop table  if exists t_part_csf;

Succeed.

SQL> create table t_part_csf(id int, name varchar2(100)) PARTITION BY list(id) 
  2 (
  3 partition p1 values (1) format csf,
  4 partition p2 values (2),
  5 partition p3 values (3) format csf
  6 ); 

Succeed.

SQL> alter table t_part_csf add partition p6 values(4) format csf;

Succeed.

SQL> alter table t_part_csf add partition p7 values(5);

Succeed.

SQL> 
SQL> drop table  if exists t_part_csf;

Succeed.

SQL> create table t_part_csf(id int, name varchar2(100)) PARTITION BY range(id) 
  2 (
  3 partition p1 VALUES LESS THAN (1) format csf,
  4 partition p2 VALUES LESS THAN (2),
  5 partition p3 VALUES LESS THAN (3) format csf
  6 ); 

Succeed.

SQL> alter table t_part_csf add partition p6 VALUES LESS THAN(4) format csf;

Succeed.

SQL> alter table t_part_csf add partition p7 VALUES LESS THAN(5);

Succeed.

SQL> 
SQL> drop table  if exists t_part_csf;

Succeed.

SQL> create table t_part_csf(id int, name varchar2(100)) PARTITION BY range(id) interval(1)
  2 (
  3 partition p1 VALUES LESS THAN (1) format csf,
  4 partition p2 VALUES LESS THAN (2),
  5 partition p3 VALUES LESS THAN (3) format csf
  6 );

Succeed.

SQL> alter table t_part_csf add partition p6 VALUES LESS THAN(4) format csf;

CT-01110, The operation add interval partition was not allowed
SQL> alter table t_part_csf add partition p7 VALUES LESS THAN(5);

CT-01110, The operation add interval partition was not allowed
SQL> 
SQL> drop table  if exists t_part_csf;

Succeed.

SQL> create table t_part_csf(id int, name varchar2(100)) PARTITION BY hash(id)
  2 (
  3 partition p1 format csf,
  4 partition p2,
  5 partition p3 format csf
  6 );

Succeed.

SQL> alter table t_part_csf add partition p6 format csf;

CT-00613, Invalid operation, data redistribute between different partition row types are forbidden
SQL> alter table t_part_csf add partition p7;

Succeed.

SQL> 
SQL> drop table if exists t_part_csf;

Succeed.

SQL> create table t_part_csf(id int, name varchar2(100)) PARTITION BY range(id) 
  2 (
  3 partition p1 VALUES LESS THAN (10) format csf,
  4 partition p2 VALUES LESS THAN (20),
  5 partition p3 VALUES LESS THAN (30) format csf
  6 ); 

Succeed.

SQL> insert into t_part_csf values(1,'jack');

1 rows affected.

SQL> insert into t_part_csf values(2,'rose');

1 rows affected.

SQL> commit;

Succeed.

SQL> update t_part_csf set id=11;

CT-00613, Invalid operation, cross partition update between different partition row types are forbidden
SQL> alter table t_part_csf split partition p1 at(5) into (partition p4, partition p5);

Succeed.

SQL> alter table t_part_csf split partition p2 at(15) into (partition p6, partition p7);

Succeed.

SQL> 
SQL> drop table  if exists t_part_csf;

Succeed.

SQL> create table t_part_csf(id int, name varchar2(100)) PARTITION BY hash(id)
  2 (
  3 partition p1 format csf,
  4 partition p2,
  5 partition p3 format csf
  6 );

Succeed.

SQL> alter table t_part_csf coalesce partition;

Succeed.

SQL> alter table t_part_csf coalesce partition;

CT-00613, Invalid operation, coalesce partition between different partition row types are forbidden
SQL> 
SQL> drop table  if exists t_part_csf3;

Succeed.

SQL> create table t_part_csf3(id number, name varchar2(100)) PARTITION BY range(id) interval(10)
  2 (
  3 partition p1 VALUES LESS THAN (11),
  4 partition p2 VALUES LESS THAN (21),
  5 partition p3 VALUES LESS THAN (31)
  6 ) format csf;

Succeed.

SQL> insert into t_part_csf3 values(1, 'a');

1 rows affected.

SQL> update t_part_csf3 set id = 16000000 where id = 1;

1 rows affected.

SQL> 
SQL> 
SQL> drop table  if exists t_part_csf3;

Succeed.

SQL> create table t_part_csf3(id number, name varchar2(100)) PARTITION BY range(id) interval(10)
  2 (
  3 partition p1 VALUES LESS THAN (11) format csf,
  4 partition p2 VALUES LESS THAN (21),
  5 partition p3 VALUES LESS THAN (31)
  6 );

Succeed.

SQL> insert into t_part_csf3 values(1, 'a');

1 rows affected.

SQL> update t_part_csf3 set id = 16000000 where id = 1;

CT-00613, Invalid operation, cross partition update between different partition row types are forbidden
SQL> 
SQL> drop table  if exists t_part_csf3;

Succeed.

SQL> create table t_part_csf3(id number, name varchar2(100)) PARTITION BY range(id) interval(10)
  2 (
  3 partition p1 VALUES LESS THAN (11) format csf,
  4 partition p2 VALUES LESS THAN (21),
  5 partition p3 VALUES LESS THAN (31)
  6 );

Succeed.

SQL> insert into t_part_csf3 values(1, 'a');

1 rows affected.

SQL> alter table t_part_csf3 add add_column varchar2(20) default '11111';

Succeed.

SQL> 
SQL> drop table if exists t_part_csf3;

Succeed.

SQL> create table t_part_csf3(id int primary key auto_increment, c_clob clob) PARTITION BY range(id) interval(10)
  2 (
  3 partition p1 VALUES LESS THAN (500) format csf,
  4 partition p2 VALUES LESS THAN (1000)
  5 );

Succeed.

SQL> declare 
  2 i integer;
  3 begin
  4 for i in 1 .. 1019 loop
  5 insert into t_part_csf3(c_clob) values(lpad('a',5000,'a'));
  6 end loop;
  7 commit;
  8 end;
  9 /

PL/SQL procedure successfully completed.

SQL> delete from t_part_csf3 where mod(id,2)=0;

509 rows affected.

SQL> alter table t_part_csf3 modify lob (c_clob) (shrink space);

Succeed.

SQL> 
SQL> 
SQL> --DTS2020091807DK5HP1300
SQL> drop table if exists storage_lob_inline_tbl_000;

Succeed.

SQL> CREATE TABLE storage_lob_inline_tbl_000(C_ID INT not null,c_d_id DATE NOT NULL,C_W_ID int NOT NULL,C_FIRST1 VARCHAR(100) NOT NULL,C_FIRST2 VARCHAR(100) NOT NULL,C_FIRST3 VARCHAR(100) NOT NULL,C_FIRST4 VARCHAR(100) NOT NULL,C_FIRST5 VARCHAR(100) NOT NULL,C_FIRST6 VARCHAR(100) NOT NULL,C_FIRST7 VARCHAR(100) NOT NULL,C_FIRST8 VARCHAR(100) NOT NULL,C_DATA LONG,C_TEXT BLOB,C_CLOB CLOB);

Succeed.

SQL> insert into storage_lob_inline_tbl_000 values(0,'2018-01-01 10:51:47',0,'AA','BB','CC','DD','EE','FF','GG','HH','LONG','111','CLOB');

1 rows affected.

SQL> commit;

Succeed.

SQL> CREATE or replace procedure lob_inline_func_001(startall int,endall int) as
  2 i INT;
  3 BEGIN
  4  FOR i IN startall..endall LOOP
  5     insert into storage_lob_inline_tbl_000 select c_id+i*10,c_d_id+i*10,c_w_id+i*10,'AA'||i,'BB'||i,'CC'||i,'DD'||i,'EE'||i,'FF'||i,'GG'||i,'HH'||i,c_data,c_text,c_clob from storage_lob_inline_tbl_000 where c_id=0;commit;
  6  END LOOP;
  7 END;
  8 /

Succeed.

SQL> call lob_inline_func_001(2,100);

PL/SQL procedure successfully completed.

SQL> 
SQL> drop table if exists nebula_ddl_hash_001;

Succeed.

SQL> CREATE TABLE nebula_ddl_hash_001 (C_ID INT,C_D_ID DATE NOT NULL,C_W_ID int NOT NULL,C_FIRST1 varchar(7744) NOT NULL,C_FIRST2 varchar(7744) NOT NULL,C_FIRST3 varchar(7744) NOT NULL,C_FIRST4 varchar(7744) NOT NULL,C_FIRST5 varchar(7744) NOT NULL,C_FIRST6 varchar(7744) NOT NULL,C_FIRST7 varchar(7744) NOT NULL,C_FIRST8 varchar(7744) NOT NULL,C_DATA LONG,C_TEXT BLOB,C_CLOB CLOB) partition by hash(c_id,c_d_id) (partition part_1 storage(INITIAL 128K maxsize 5G) format csf,partition PART_2 format csf,partition part_3 format csf,partition part_4,partition part_5);

Succeed.

SQL> insert into nebula_ddl_hash_001 select C_ID,C_D_ID,C_W_ID,C_FIRST1,C_FIRST2,C_FIRST3,C_FIRST4,C_FIRST5,C_FIRST6,C_FIRST7,C_FIRST8,C_DATA,C_TEXT,C_CLOB from storage_lob_inline_tbl_000 where mod(c_id,3)=0;

34 rows affected.

SQL> insert into nebula_ddl_hash_001 select C_ID,C_D_ID,C_W_ID,lpad('sbfacwjdafgjyjhfpyxcpmnutcjxrbfgxxbm',7000,'yxcfgdsgtcsdsjxrbxxbm'),lpad('sbfacwjdafgjyjhfpyxcpmnutcjxrbfgxxbm',7744,'yxcfgdsgtcsdsjxrbxxbm'),lpad('sbfacwjdafgjyjhfpyxcpmnutcjxrbfgxxbm',7744,'yxcfgdsgtcsdsjxrbxxbm'),lpad('sbfacwjdafgjyjhfpyxcpmnutcjxrbfgxxbm',7744,'yxcfgdsgtcsdsjxrbxxbm'),lpad('sbfacwjdafgjyjhfpyxcpmnutcjxrbfgxxbm',7744,'yxcfgdsgtcsdsjxrbxxbm'),lpad('sbfacwjdafgjyjhfpyxcpmnutcjxrbfgxxbm',7744,'yxcfgdsgtcsdsjxrbxxbm'),lpad('sbfacwjdafgjyjhfpyxcpmnutcjxrbfgxxbm',7744,'yxcfgdsgtcsdsjxrbxxbm'),lpad('sbfacwjdafgjyjhfpyxcpmnutcjxrbfgxxbm',7744,'yxcfgdsgtcsdsjxrbxxbm'),C_DATA,C_TEXT,C_CLOB from storage_lob_inline_tbl_000 where mod(c_id,3)=1;

33 rows affected.

SQL> insert into nebula_ddl_hash_001 select C_ID,C_D_ID,C_W_ID,C_FIRST1,C_FIRST2,C_FIRST3,C_FIRST4,C_FIRST5,C_FIRST6,C_FIRST7,C_FIRST8,lpad('c_datajhfpyxcpmnutcjxrbfgxxbm',4000,'yxcfgdsgtcsdsjxrbxxbm'),lpad('123456656565767',4000,'565656576768787'),C_CLOB from storage_lob_inline_tbl_000 where mod(c_id,3)=2;

33 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> alter table nebula_ddl_hash_001 add partition add_part_001_001;

CT-00613, Invalid operation, data redistribute between different partition row types are forbidden
SQL> alter table nebula_ddl_hash_001 add partition add_part_001_2;

CT-00613, Invalid operation, data redistribute between different partition row types are forbidden
SQL> alter table nebula_ddl_hash_001 add add_column varchar(4000) default lpad('c_datajhfpyxcpmnutcjxrbfgxxbm',2100,'yxcfgdsgtcsdsjxrbxxbm');

Succeed.

SQL> alter table nebula_ddl_hash_001 drop column add_column;

Succeed.

SQL> 
SQL> drop table if exists storage_lob_inline_tbl_000;

Succeed.

SQL> CREATE TABLE storage_lob_inline_tbl_000(C_ID INT not null,c_d_id DATE NOT NULL,C_W_ID int NOT NULL,C_FIRST1 VARCHAR(100) NOT NULL,C_FIRST2 VARCHAR(100) NOT NULL,C_FIRST3 VARCHAR(100) NOT NULL,C_FIRST4 VARCHAR(100) NOT NULL,C_FIRST5 VARCHAR(100) NOT NULL,C_FIRST6 VARCHAR(100) NOT NULL,C_FIRST7 VARCHAR(100) NOT NULL,C_FIRST8 VARCHAR(100) NOT NULL,C_DATA LONG,C_TEXT BLOB,C_CLOB CLOB);

Succeed.

SQL> create unique index STORAGE_LOB_INLINE_INDEX_000 on storage_lob_inline_tbl_000(c_id,c_d_id,c_w_id);

Succeed.

SQL> insert into storage_lob_inline_tbl_000 values(0,'2018-01-01 10:51:47',0,'AA','BB','CC','DD','EE','FF','GG','HH','LONG','111','CLOB');

1 rows affected.

SQL> commit;

Succeed.

SQL> CREATE or replace procedure lob_inline_func_001(startall int,endall int) as
  2 i INT;
  3 BEGIN
  4  FOR i IN startall..endall LOOP
  5     insert into storage_lob_inline_tbl_000 select c_id+i*10,c_d_id+i*10,c_w_id+i*10,'AA'||i,'BB'||i,'CC'||i,'DD'||i,'EE'||i,'FF'||i,'GG'||i,'HH'||i,c_data,c_text,c_clob from storage_lob_inline_tbl_000 where c_id=0;commit;
  6  END LOOP;
  7 END;
  8 /

Succeed.

SQL> call lob_inline_func_001(2,100);

PL/SQL procedure successfully completed.

SQL> select count(*) from storage_lob_inline_tbl_000;

COUNT(*)            
--------------------
100                 

1 rows fetched.

SQL> commit;

Succeed.

SQL> 
SQL> drop table if exists nebula_ddl_hash_004;

Succeed.

SQL> CREATE TABLE nebula_ddl_hash_004 (C_ID INT,C_D_ID DATE NOT NULL,C_W_ID int NOT NULL,C_FIRST1 varchar(7744) NOT NULL,C_FIRST2 varchar(7744) NOT NULL,C_FIRST3 varchar(7744) NOT NULL,C_FIRST4 varchar(7744) NOT NULL,C_FIRST5 varchar(7744) NOT NULL,C_FIRST6 varchar(7744) NOT NULL,C_FIRST7 varchar(7744) NOT NULL,C_FIRST8 varchar(7744) NOT NULL,C_DATA LONG,C_TEXT BLOB,C_CLOB CLOB) partition by hash(c_id,c_d_id) (partition part_1 storage(INITIAL 128K maxsize 5G) format csf,partition PART_2 format csf,partition part_3 format csf,partition part_4,partition part_5,partition part_6,partition part_7 format csf,partition part_8 storage(INITIAL 128K maxsize 5G) format csf,partition PART_9,partition part_10);

Succeed.

SQL> insert into nebula_ddl_hash_004 select C_ID,C_D_ID,C_W_ID,C_FIRST1,C_FIRST2,C_FIRST3,C_FIRST4,C_FIRST5,C_FIRST6,C_FIRST7,C_FIRST8,C_DATA,C_TEXT,C_CLOB from storage_lob_inline_tbl_000 where mod(c_id,3)=0;

34 rows affected.

SQL> insert into nebula_ddl_hash_004 select C_ID,C_D_ID,C_W_ID,lpad('sbfacwjdafgjyjhfpyxcpmnutcjxrbfgxxbm',7000,'yxcfgdsgtcsdsjxrbxxbm'),lpad('sbfacwjdafgjyjhfpyxcpmnutcjxrbfgxxbm',7744,'yxcfgdsgtcsdsjxrbxxbm'),lpad('sbfacwjdafgjyjhfpyxcpmnutcjxrbfgxxbm',7744,'yxcfgdsgtcsdsjxrbxxbm'),lpad('sbfacwjdafgjyjhfpyxcpmnutcjxrbfgxxbm',7744,'yxcfgdsgtcsdsjxrbxxbm'),lpad('sbfacwjdafgjyjhfpyxcpmnutcjxrbfgxxbm',7744,'yxcfgdsgtcsdsjxrbxxbm'),lpad('sbfacwjdafgjyjhfpyxcpmnutcjxrbfgxxbm',7744,'yxcfgdsgtcsdsjxrbxxbm'),lpad('sbfacwjdafgjyjhfpyxcpmnutcjxrbfgxxbm',7744,'yxcfgdsgtcsdsjxrbxxbm'),lpad('sbfacwjdafgjyjhfpyxcpmnutcjxrbfgxxbm',7744,'yxcfgdsgtcsdsjxrbxxbm'),C_DATA,C_TEXT,C_CLOB from storage_lob_inline_tbl_000 where mod(c_id,3)=1;

33 rows affected.

SQL> insert into nebula_ddl_hash_004 select C_ID,C_D_ID,C_W_ID,C_FIRST1,C_FIRST2,C_FIRST3,C_FIRST4,C_FIRST5,C_FIRST6,C_FIRST7,C_FIRST8,lpad('c_datajhfpyxcpmnutcjxrbfgxxbm',4000,'yxcfgdsgtcsdsjxrbxxbm'),lpad('123456656565767',4000,'565656576768787'),C_CLOB from storage_lob_inline_tbl_000 where mod(c_id,3)=2;

33 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> delete from nebula_ddl_hash_004;rollback;

100 rows affected.


Succeed.

SQL> update nebula_ddl_hash_004 set c_data='aaaa',c_text='33333',c_clob='bbbbb';rollback;

100 rows affected.


Succeed.

SQL> update nebula_ddl_hash_004 set c_data='aaaa',c_text='33333',c_clob='bbbbb';commit;

100 rows affected.


Succeed.

SQL> savepoint aa;update nebula_ddl_hash_004 set c_data='aaaaa',c_text='33333',c_clob='bbbbb';rollback to savepoint aa;

Succeed.


100 rows affected.


Succeed.

SQL> update nebula_ddl_hash_004 set c_data=lpad('c_datajhfpyxcpmnutcjxrbfgxxbm',1000,'yxcfgdsgtcsdsjxrbxxbm'),c_text=lpad('12323243',5000,'4354545'),c_clob=lpad('c_datajhfpyxcpmnutcjxrbfgxxbm',7744,'yxcfgdsgtcsdsjxrbxxbm');rollback;

100 rows affected.


Succeed.

SQL> update nebula_ddl_hash_004 set c_data=lpad('c_datajhfpyxcpmnutcjxrbfgxxbm',1000,'yxcfgdsgtcsdsjxrbxxbm'),c_text=lpad('12323243',5000,'4354545'),c_clob=lpad('c_datajhfpyxcpmnutcjxrbfgxxbm',7744,'yxcfgdsgtcsdsjxrbxxbm');commit;

100 rows affected.


Succeed.

SQL> savepoint aa;update nebula_ddl_hash_004 set c_data=lpad('c_datajhfpyxcpmnutcjxrbfgxxbm',1000,'yxcfgdsgtcsdsjxrbxxbm'),c_text=lpad('12323243',5000,'4354545'),c_clob=lpad('c_datajhfpyxcpmnutcjxrbfgxxbm',7744,'yxcfgdsgtcsdsjxrbxxbm');rollback to savepoint aa;

Succeed.


100 rows affected.


Succeed.

SQL> alter table nebula_ddl_hash_004 add partition add_part_004 tablespace nebula_tablespace;alter table nebula_ddl_hash_004 add partition add_part storage (maxsize 5G);

CT-00780, The tablespace NEBULA_TABLESPACE does not exist.
SQL> alter table nebula_ddl_hash_004 coalesce partition ;

CT-00613, Invalid operation, coalesce partition between different partition row types are forbidden
SQL> alter table nebula_ddl_hash_004 add add_column varchar(7744) default lpad('c_datajhfpyxcpmnutcjxrbfgxxbm',7744,'yxcfgdsgtcsdsjxrbxxbm');

CT-00727, update row size 70108 exceeds the limitation 63957
SQL> alter table nebula_ddl_hash_004 drop column add_column;

CT-00844, The column NEBULA_DDL_HASH_004.ADD_COLUMN does not exist.
SQL> alter table nebula_ddl_hash_004 modify lob (c_clob) (shrink space);alter table nebula_ddl_hash_004 modify lob (c_text) (shrink space);alter table nebula_ddl_hash_004 modify lob (c_data) (shrink space);

Succeed.


Succeed.


Succeed.

SQL> alter system load dictionary for adm_tables;alter system load dictionary for adm_indexes;alter system load dictionary for adm_users;alter system load dictionary for adm_tab_columns;

Succeed.


Succeed.


Succeed.


Succeed.

SQL> alter table nebula_ddl_hash_004 storage (maxsize 5G);alter table nebula_ddl_hash_004 storage (maxsize 2G) format csf;

Succeed.


Succeed.

SQL> 
SQL> 
SQL> delete from nebula_ddl_hash_004;rollback;

100 rows affected.


Succeed.

SQL> update nebula_ddl_hash_004 set c_data='aaaa',c_text='33333',c_clob='bbbbb';rollback;

100 rows affected.


Succeed.

SQL> update nebula_ddl_hash_004 set c_data='aaaa',c_text='33333',c_clob='bbbbb';commit;

100 rows affected.


Succeed.

SQL> savepoint aa;update nebula_ddl_hash_004 set c_data='aaaaa',c_text='33333',c_clob='bbbbb';rollback to savepoint aa;

Succeed.


100 rows affected.


Succeed.

SQL> update nebula_ddl_hash_004 set c_data=lpad('c_datajhfpyxcpmnutcjxrbfgxxbm',1000,'yxcfgdsgtcsdsjxrbxxbm'),c_text=lpad('12323243',5000,'4354545'),c_clob=lpad('c_datajhfpyxcpmnutcjxrbfgxxbm',7744,'yxcfgdsgtcsdsjxrbxxbm');rollback;

100 rows affected.


Succeed.

SQL> update nebula_ddl_hash_004 set c_data=lpad('c_datajhfpyxcpmnutcjxrbfgxxbm',1000,'yxcfgdsgtcsdsjxrbxxbm'),c_text=lpad('12323243',5000,'4354545'),c_clob=lpad('c_datajhfpyxcpmnutcjxrbfgxxbm',7744,'yxcfgdsgtcsdsjxrbxxbm');commit;

100 rows affected.


Succeed.

SQL> savepoint aa;update nebula_ddl_hash_004 set c_data=lpad('c_datajhfpyxcpmnutcjxrbfgxxbm',1000,'yxcfgdsgtcsdsjxrbxxbm'),c_text=lpad('12323243',5000,'4354545'),c_clob=lpad('c_datajhfpyxcpmnutcjxrbfgxxbm',7744,'yxcfgdsgtcsdsjxrbxxbm');rollback to savepoint aa;

Succeed.


100 rows affected.


Succeed.

SQL> alter table nebula_ddl_hash_004 add partition add_part_004 tablespace nebula_tablespace;alter table nebula_ddl_hash_004 add partition add_part storage (maxsize 5G);

CT-00780, The tablespace NEBULA_TABLESPACE does not exist.
SQL> alter table nebula_ddl_hash_004 coalesce partition ;

CT-00613, Invalid operation, coalesce partition between different partition row types are forbidden
SQL> alter table nebula_ddl_hash_004 add add_column varchar(7744) default lpad('c_datajhfpyxcpmnutcjxrbfgxxbm',7744,'yxcfgdsgtcsdsjxrbxxbm');

CT-00727, update row size 70108 exceeds the limitation 63957
SQL> alter table nebula_ddl_hash_004 drop column add_column;

CT-00844, The column NEBULA_DDL_HASH_004.ADD_COLUMN does not exist.
SQL> alter table nebula_ddl_hash_004 modify lob (c_clob) (shrink space);alter table nebula_ddl_hash_004 modify lob (c_text) (shrink space);alter table nebula_ddl_hash_004 modify lob (c_data) (shrink space);

Succeed.


Succeed.


Succeed.

SQL> alter system load dictionary for adm_tables;alter system load dictionary for adm_indexes;alter system load dictionary for adm_users;alter system load dictionary for adm_tab_columns;

Succeed.


Succeed.


Succeed.


Succeed.

SQL> alter table nebula_ddl_hash_004 storage (maxsize 5G);alter table nebula_ddl_hash_004 storage (maxsize 2G) format csf;
Succeed.


Succeed.

SQL>
SQL> drop table if exists test_null_part_column;

Succeed.

SQL> create table test_null_part_column(id number) partition by hash(id)
  2 (
  3 partition p1
  4 );

Succeed.

SQL>
SQL> insert into test_null_part_column values(null);

1 rows affected.

SQL> insert into test_null_part_column values(null);

1 rows affected.

SQL> insert into test_null_part_column values(null);

1 rows affected.

SQL> insert into test_null_part_column values(null);

1 rows affected.

SQL> insert into test_null_part_column values(null);

1 rows affected.

SQL> commit;

Succeed.

SQL> alter table test_null_part_column add partition p2;

Succeed.

SQL> select count(*) from test_null_part_column partition(p1);

COUNT(*)
--------------------
5

1 rows fetched.

SQL> drop table if exists test_null_part_column;

Succeed.

SQL> --20201214
SQL> drop table if exists t_subpart_001;

Succeed.

SQL> create table t_subpart_001(c_d_id bigint NOT NULL) PARTITION BY RANGE(c_d_id) subpartition BY RANGE(c_d_id) (PARTITION P1 VALUES LESS THAN(10)(subpartition p11 VALUES LESS THAN(5),subpartition p12 VALUES LESS THAN(array[1])),PARTITION P2 VALUES LESS THAN(50) (subpartition p21 VALUES LESS THAN(30),subpartition p22 VALUES LESS THAN(MAXVALUE)));

CT-00601, [1:220]Sql syntax error: text is incorrect
SQL> create table t_subpart_001(c_d_id bigint NOT NULL) PARTITION BY RANGE(c_d_id)(PARTITION P1 VALUES LESS THAN(array[1]));

CT-00601, [1:114]Sql syntax error: text is incorrect
SQL> create table t_subpart_001(c_d_id bigint NOT NULL) PARTITION BY RANGE(c_d_id)(PARTITION P1 VALUES LESS THAN(1 1));

CT-00601, [1:111]Sql syntax error: the word "1" is not correct
SQL> create table t_subpart_001(c_d_id bigint NOT NULL) PARTITION BY RANGE(c_d_id)(PARTITION P1 VALUES LESS THAN(array{1}));

CT-00601, [1:109]Sql syntax error: namable char expected but { found
SQL> create table t_subpart_001(c_d_id bigint NOT NULL) PARTITION BY RANGE(c_d_id)(PARTITION P1 VALUES LESS THAN(array);

CT-00601, [1:78]Sql syntax error: text is not completed
SQL> create table t_subpart_001(c_d_id bigint NOT NULL) PARTITION BY list(c_d_id)(PARTITION P1 VALUES (array[1]));

CT-00606, Inconsistent datatypes, expected BINARY_BIGINT - got ARRAY

SQL> --20210107
SQL> drop table if exists R_ANNC_SUBVOICELANMAP;

Succeed.

SQL> create table R_ANNC_SUBVOICELANMAP(f1 int, f2 int, f3 int, f4 int, f5 int, f6 int, f7 int, f8 int, f9 int, f10 int, f11 int, f12 int, f13 int, f14 int, f15 int, f16 int)
  2 partition by hash(f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16) partitions 10;

Succeed.

SQL> insert into R_ANNC_SUBVOICELANMAP values(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1);

1 rows affected.

SQL> insert into R_ANNC_SUBVOICELANMAP values(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2);

1 rows affected.

SQL> select * from R_ANNC_SUBVOICELANMAP where f1 in (1,2,3,4,5) and f2 in (1,2,3,4,5) and f3 in (1,2,3,4,5) and f4 in (1,2,3,4,5) and f5 in (1,2,3,4,5) and f6 in (1,2,3,4,5) and f7 in (1,2,3,4,5) and f8 in (1,2,3,4,5) and f9 in (1,2,3,4,5) and f10 in (1,2,3,4,5) and f11 in (1,2,3,4,5) and f12 in (1,2,3,4,5) and f13 in (1,2,3,4,5) and f14 in (1,2,3,4,5) and f15 in (1,2,3,4,5) and f16 in (1,2,3,4,5);

F1           F2           F3           F4           F5           F6           F7           F8           F9           F10          F11          F12          F13          F14          F15          F16
------------ ------------ ------------ ------------ ------------ ------------ ------------ ------------ ------------ ------------ ------------ ------------ ------------ ------------ ------------ ------------
1            1            1            1            1            1            1            1            1            1            1            1            1            1            1           1
2            2            2            2            2            2            2            2            2            2            2            2            2            2            2           2

2 rows fetched.

SQL> select * from R_ANNC_SUBVOICELANMAP where f1 in (1,2,3,4) and f2 in (1,2,3,4) and f3 in (1,2,3,4) and f4 in (1,2,3,4) and f5 in (1,2,3,4) and f6 in (1,2,3,4) and f7 in (1,2,3,4) and f8 in (1,2,3,4) and f9 in (1,2,3,4) and f10 in (1,2,3,4) and f11 in (1,2,3,4) and f12 in (1,2,3,4) and f13 in (1,2,3,4) and f14 in (1,2,3,4) and f15 in (1,2,3,4) and f16 in (1,2,3,4);

F1           F2           F3           F4           F5           F6           F7           F8           F9           F10          F11          F12          F13          F14          F15          F16
------------ ------------ ------------ ------------ ------------ ------------ ------------ ------------ ------------ ------------ ------------ ------------ ------------ ------------ ------------ ------------
1            1            1            1            1            1            1            1            1            1            1            1            1            1            1           1
2            2            2            2            2            2            2            2            2            2            2            2            2            2            2           2

2 rows fetched.

SQL> drop table R_ANNC_SUBVOICELANMAP;

Succeed.

SQL> 
SQL> -- test partition table dynamic sample
SQL> DROP TABLE IF EXISTS F_TNN000012_LTECELL_H;

Succeed.

SQL> DROP TABLE IF EXISTS F_TNN000018_LTECELL_H;

Succeed.

SQL> alter system set cbo = on;

Succeed.

SQL> CREATE TABLE "F_TNN000012_LTECELL_H"
  2 (
  3   "STARTTIME" DATE NOT NULL,
  4   "NEID" NUMBER(19) NOT NULL,
  5   "MONTH" NUMBER(3) NOT NULL,
  6   "DAY" NUMBER(3) NOT NULL,
  7   "HOUR" NUMBER(3) NOT NULL,
  8   "DSTOFFSET" NUMBER(5),
  9   "LTECELLID" NUMBER(19) NOT NULL,
 10   "PERIOD" NUMBER(10),
 11   "RESULTNO" NUMBER(10) NOT NULL,
 12   "DELETEFLAG" NUMBER(10),
 13   "SUBDELETEFLAG" NUMBER(10),
 14   "PREINTEGRITY" NUMBER(10),
 15   "INTEGRITY" NUMBER(10),
 16   "C1526726737" NUMBER(25, 5)
 17 )
 18 PARTITION BY RANGE ("STARTTIME")
 19 (
 20     PARTITION DEFAULT_19000101 VALUES LESS THAN (to_date('19000101', 'YYYYMMDD'))  INITRANS 2 PCTFREE 8 FORMAT CSF,
 21     PARTITION PRS_PART_20210105 VALUES LESS THAN (to_date('20210105', 'YYYYMMDD'))  INITRANS 2 PCTFREE 8 FORMAT CSF,
 22     PARTITION PRS_PART_20210106 VALUES LESS THAN (to_date('20210106', 'YYYYMMDD'))  INITRANS 2 PCTFREE 8 FORMAT CSF,
 23     PARTITION PRS_PART_20210107 VALUES LESS THAN (to_date('20210107', 'YYYYMMDD'))  INITRANS 2 PCTFREE 3 FORMAT CSF,
 24     PARTITION PRS_PART_20210108 VALUES LESS THAN (to_date('20210108', 'YYYYMMDD'))  INITRANS 2 PCTFREE 3 FORMAT CSF
 25 )
 26 INITRANS 2
 27 MAXTRANS 255
 28 PCTFREE 8
 29 FORMAT CSF;

Succeed.

SQL> CREATE INDEX "III_TNN000012_LTECELL_H" ON "F_TNN000012_LTECELL_H"("RESULTNO")
  2 LOCAL
  3 INITRANS 2
  4 PCTFREE 8;

Succeed.

SQL> 
SQL> CREATE INDEX "II_TNN000012_LTECELL_H" ON "F_TNN000012_LTECELL_H"("LTECELLID")
  2 LOCAL
  3 INITRANS 2
  4 PCTFREE 8;

Succeed.

SQL> CREATE UNIQUE INDEX "I_TNN000012_LTECELL_H" ON "F_TNN000012_LTECELL_H"("STARTTIME", "HOUR", "LTECELLID", "DSTOFFSET")
  2 LOCAL
  3 INITRANS 2
  4 PCTFREE 8;

Succeed.

SQL> 
SQL> CREATE INDEX "NE_TNN000012_LTECELL_H" ON "F_TNN000012_LTECELL_H"("NEID", "HOUR")
  2 LOCAL
  3 INITRANS 2
  4 PCTFREE 8;

Succeed.

SQL> 
SQL> CREATE TABLE "F_TNN000018_LTECELL_H"
  2 (
  3   "STARTTIME" DATE NOT NULL,
  4   "NEID" NUMBER(19) NOT NULL,
  5   "MONTH" NUMBER(3) NOT NULL,
  6   "DAY" NUMBER(3) NOT NULL,
  7   "HOUR" NUMBER(3) NOT NULL,
  8   "DSTOFFSET" NUMBER(5),
  9   "LTECELLID" NUMBER(19) NOT NULL,
 10   "PERIOD" NUMBER(10),
 11   "RESULTNO" NUMBER(10) NOT NULL,
 12   "DELETEFLAG" NUMBER(10),
 13   "SUBDELETEFLAG" NUMBER(10),
 14   "PREINTEGRITY" NUMBER(10),
 15   "INTEGRITY" NUMBER(10),
 16   "C1526730137" NUMBER(25, 5),
 17   "C1526730138" NUMBER(25, 5),
 18   "C1526728293" NUMBER(25, 5),
 19   "C1526728294" NUMBER(25, 5)
 20 )
 21 PARTITION BY RANGE ("STARTTIME")
 22 (
 23     PARTITION DEFAULT_19000101 VALUES LESS THAN (to_date('19000101', 'YYYYMMDD'))  INITRANS 2 PCTFREE 8 FORMAT CSF,
 24     PARTITION PRS_PART_20201231 VALUES LESS THAN (to_date('20201231', 'YYYYMMDD'))  INITRANS 2 PCTFREE 8 FORMAT CSF,
 25     PARTITION PRS_PART_20210101 VALUES LESS THAN (to_date('20210101', 'YYYYMMDD'))  INITRANS 2 PCTFREE 8 FORMAT CSF,
 26     PARTITION PRS_PART_20210102 VALUES LESS THAN (to_date('20210102', 'YYYYMMDD'))  INITRANS 2 PCTFREE 8 FORMAT CSF,
 27     PARTITION PRS_PART_20210103 VALUES LESS THAN (to_date('20210103', 'YYYYMMDD'))  INITRANS 2 PCTFREE 8 FORMAT CSF,
 28     PARTITION PRS_PART_20210104 VALUES LESS THAN (to_date('20210104', 'YYYYMMDD'))  INITRANS 2 PCTFREE 8 FORMAT CSF,
 29     PARTITION PRS_PART_20210105 VALUES LESS THAN (to_date('20210105', 'YYYYMMDD'))  INITRANS 2 PCTFREE 8 FORMAT CSF,
 30     PARTITION PRS_PART_20210106 VALUES LESS THAN (to_date('20210106', 'YYYYMMDD'))  INITRANS 2 PCTFREE 8 FORMAT CSF,
 31     PARTITION PRS_PART_20210107 VALUES LESS THAN (to_date('20210107', 'YYYYMMDD'))  INITRANS 2 PCTFREE 3 FORMAT CSF,
 32     PARTITION PRS_PART_20210108 VALUES LESS THAN (to_date('20210108', 'YYYYMMDD'))  INITRANS 2 PCTFREE 3 FORMAT CSF
 33 )
 34 INITRANS 2
 35 MAXTRANS 255
 36 PCTFREE 8
 37 FORMAT CSF;

Succeed.

SQL> 
SQL> CREATE INDEX "III_TNN000018_LTECELL_H" ON "F_TNN000018_LTECELL_H"("RESULTNO")
  2 LOCAL
  3 INITRANS 2
  4 PCTFREE 8;

Succeed.

SQL> CREATE INDEX "II_TNN000018_LTECELL_H" ON "F_TNN000018_LTECELL_H"("LTECELLID")
  2 LOCAL
  3 INITRANS 2
  4 PCTFREE 8;

Succeed.

SQL> 
SQL> CREATE UNIQUE INDEX "I_TNN000018_LTECELL_H" ON "F_TNN000018_LTECELL_H"("STARTTIME", "HOUR", "LTECELLID", "DSTOFFSET")
  2 LOCAL
  3 INITRANS 2
  4 PCTFREE 8;

Succeed.

SQL> 
SQL> CREATE INDEX "NE_TNN000018_LTECELL_H" ON "F_TNN000018_LTECELL_H"("NEID", "HOUR")
  2 LOCAL
  3 INITRANS 2
  4 PCTFREE 8;

Succeed.

SQL> 
SQL> insert into F_TNN000018_LTECELL_H values
  2 ('2021-01-04 00:00:00', 9, 1, 4, 23, 0, 300000001539, 60, 1048, 0, 0, 60, 60, 19, 55, 50, 54 ),
  3 ('2021-01-04 00:00:00', 9, 1, 4, 23, 0, 300000001537, 60, 1048, 0, 0, 60, 60, 27, 0,  52, 57 ),
  4 ('2021-01-04 00:00:00', 9, 1, 4, 23, 0, 300000001538, 60, 1048, 0, 0, 60, 60, 43, 63, 75, 16 ),
  5 ('2021-01-04 00:00:00', 9, 1, 4, 23, 0, 300000001534, 60, 1048, 0, 0, 60, 60, 5,  25, 13, 64 ),
  6 ('2021-01-04 00:00:00', 9, 1, 4, 23, 0, 300000001535, 60, 1048, 0, 0, 60, 60, 88, 27, 9,  75 ),
  7 ('2021-01-04 00:00:00', 9, 1, 4, 22, 0, 300000001539, 60, 1049, 0, 0, 60, 60, 37, 21, 39, 71 ),
  8 ('2021-01-04 00:00:00', 9, 1, 4, 22, 0, 300000001537, 60, 1049, 0, 0, 60, 60, 90, 100, 61, 59),
  9 ('2021-01-04 00:00:00', 9, 1, 4, 22, 0, 300000001538, 60, 1049, 0, 0, 60, 60, 5,  71, 66, 81 ),
 10 ('2021-01-04 00:00:00', 9, 1, 4, 22, 0, 300000001534, 60, 1049, 0, 0, 60, 60, 36, 55, 82, 29 ),
 11 ('2021-01-04 00:00:00', 9, 1, 4, 22, 0, 300000001535, 60, 1049, 0, 0, 60, 60, 96, 24, 36, 48 ),
 12 ('2021-01-04 00:00:00', 9, 1, 4, 21, 0, 300000001539, 60, 1050, 0, 0, 60, 60, 81, 66, 41, 26 ),
 13 ('2021-01-04 00:00:00', 9, 1, 4, 21, 0, 300000001537, 60, 1050, 0, 0, 60, 60, 78, 1,  72, 15 ),
 14 ('2021-01-04 00:00:00', 9, 1, 4, 21, 0, 300000001538, 60, 1050, 0, 0, 60, 60, 13, 29, 90, 41 ),
 15 ('2021-01-04 00:00:00', 9, 1, 4, 21, 0, 300000001534, 60, 1050, 0, 0, 60, 60, 11, 86, 28, 43 ),
 16 ('2021-01-04 00:00:00', 9, 1, 4, 21, 0, 300000001535, 60, 1050, 0, 0, 60, 60, 8,  95, 98, 8  ),
 17 ('2021-01-04 00:00:00', 9, 1, 4, 20, 0, 300000001539, 60, 1051, 0, 0, 60, 60, 83, 93, 26, 27 ),
 18 ('2021-01-04 00:00:00', 9, 1, 4, 20, 0, 300000001537, 60, 1051, 0, 0, 60, 60, 80, 83, 75, 47 ),
 19 ('2021-01-04 00:00:00', 9, 1, 4, 20, 0, 300000001538, 60, 1051, 0, 0, 60, 60, 9,  93, 75, 72 ),
 20 ('2021-01-04 00:00:00', 9, 1, 4, 20, 0, 300000001534, 60, 1051, 0, 0, 60, 60, 63, 96, 58, 54 ),
 21 ('2021-01-04 00:00:00', 9, 1, 4, 20, 0, 300000001535, 60, 1051, 0, 0, 60, 60, 99, 86, 88, 16 ),
 22 ('2021-01-04 00:00:00', 9, 1, 4, 19, 0, 300000001539, 60, 1052, 0, 0, 60, 60, 41, 25, 98, 12 ),
 23 ('2021-01-04 00:00:00', 9, 1, 4, 19, 0, 300000001537, 60, 1052, 0, 0, 60, 60, 57, 57, 82, 86 ),
 24 ('2021-01-04 00:00:00', 9, 1, 4, 19, 0, 300000001538, 60, 1052, 0, 0, 60, 60, 93, 80, 73, 23 ),
 25 ('2021-01-04 00:00:00', 9, 1, 4, 19, 0, 300000001534, 60, 1052, 0, 0, 60, 60, 56, 29, 43, 29 ),
 26 ('2021-01-04 00:00:00', 9, 1, 4, 19, 0, 300000001535, 60, 1052, 0, 0, 60, 60, 11, 41, 5,  80 ),
 27 ('2021-01-04 00:00:00', 9, 1, 4, 18, 0, 300000001539, 60, 1053, 0, 0, 60, 60, 48, 64, 42, 33 ),
 28 ('2021-01-04 00:00:00', 9, 1, 4, 18, 0, 300000001537, 60, 1053, 0, 0, 60, 60, 96, 80, 43, 65 ),
 29 ('2021-01-04 00:00:00', 9, 1, 4, 18, 0, 300000001538, 60, 1053, 0, 0, 60, 60, 81, 85, 86, 41 ),
 30 ('2021-01-04 00:00:00', 9, 1, 4, 18, 0, 300000001534, 60, 1053, 0, 0, 60, 60, 28, 76, 36, 81 ),
 31 ('2021-01-04 00:00:00', 9, 1, 4, 18, 0, 300000001535, 60, 1053, 0, 0, 60, 60, 8,  67, 87, 25 ),
 32 ('2021-01-04 00:00:00', 9, 1, 4, 17, 0, 300000001539, 60, 1054, 0, 0, 60, 60, 63, 87, 40, 74 ),
 33 ('2021-01-04 00:00:00', 9, 1, 4, 17, 0, 300000001537, 60, 1054, 0, 0, 60, 60, 74, 60, 53, 86 ),
 34 ('2021-01-04 00:00:00', 9, 1, 4, 17, 0, 300000001538, 60, 1054, 0, 0, 60, 60, 32, 3,  50, 51 ),
 35 ('2021-01-04 00:00:00', 9, 1, 4, 17, 0, 300000001534, 60, 1054, 0, 0, 60, 60, 10, 62, 7,  35 ),
 36 ('2021-01-04 00:00:00', 9, 1, 4, 17, 0, 300000001535, 60, 1054, 0, 0, 60, 60, 41, 74, 63, 76 ),
 37 ('2021-01-04 00:00:00', 9, 1, 4, 16, 0, 300000001539, 60, 1055, 0, 0, 60, 60, 27, 46, 91, 48 ),
 38 ('2021-01-04 00:00:00', 9, 1, 4, 16, 0, 300000001537, 60, 1055, 0, 0, 60, 60, 52, 69, 6,  47 ),
 39 ('2021-01-04 00:00:00', 9, 1, 4, 16, 0, 300000001538, 60, 1055, 0, 0, 60, 60, 1,  34, 24, 88 ),
 40 ('2021-01-04 00:00:00', 9, 1, 4, 16, 0, 300000001534, 60, 1055, 0, 0, 60, 60, 78, 21, 41, 33 ),
 41 ('2021-01-04 00:00:00', 9, 1, 4, 16, 0, 300000001535, 60, 1055, 0, 0, 60, 60, 24, 12, 11, 36 ),
 42 ('2021-01-04 00:00:00', 9, 1, 4, 15, 0, 300000001539, 60, 1056, 0, 0, 60, 60, 1,  8,  93, 61 ),
 43 ('2021-01-04 00:00:00', 9, 1, 4, 15, 0, 300000001537, 60, 1056, 0, 0, 60, 60, 5,  74, 42, 5  ),
 44 ('2021-01-04 00:00:00', 9, 1, 4, 15, 0, 300000001538, 60, 1056, 0, 0, 60, 60, 71, 78, 99, 51 ),
 45 ('2021-01-04 00:00:00', 9, 1, 4, 15, 0, 300000001534, 60, 1056, 0, 0, 60, 60, 54, 96, 25, 43 ),
 46 ('2021-01-04 00:00:00', 9, 1, 4, 15, 0, 300000001535, 60, 1056, 0, 0, 60, 60, 69, 35, 34, 50 ),
 47 ('2021-01-04 00:00:00', 9, 1, 4, 14, 0, 300000001539, 60, 1057, 0, 0, 60, 60, 87, 17, 2,  89 ),
 48 ('2021-01-04 00:00:00', 9, 1, 4, 14, 0, 300000001537, 60, 1057, 0, 0, 60, 60, 75, 53, 31, 100),
 49 ('2021-01-04 00:00:00', 9, 1, 4, 14, 0, 300000001538, 60, 1057, 0, 0, 60, 60, 68, 40, 81, 24 ),
 50 ('2021-01-04 00:00:00', 9, 1, 4, 14, 0, 300000001534, 60, 1057, 0, 0, 60, 60, 17, 78, 57, 35 ),
 51 ('2021-01-04 00:00:00', 9, 1, 4, 14, 0, 300000001535, 60, 1057, 0, 0, 60, 60, 51, 8,  42, 25 ),
 52 ('2021-01-04 00:00:00', 9, 1, 4, 13, 0, 300000001539, 60, 1058, 0, 0, 60, 60, 25, 61, 42, 31 ),
 53 ('2021-01-04 00:00:00', 9, 1, 4, 13, 0, 300000001537, 60, 1058, 0, 0, 60, 60, 4,  51, 6,  100),
 54 ('2021-01-04 00:00:00', 9, 1, 4, 13, 0, 300000001538, 60, 1058, 0, 0, 60, 60, 38, 39, 75, 53 ),
 55 ('2021-01-04 00:00:00', 9, 1, 4, 13, 0, 300000001534, 60, 1058, 0, 0, 60, 60, 69, 22, 65, 31 ),
 56 ('2021-01-04 00:00:00', 9, 1, 4, 13, 0, 300000001535, 60, 1058, 0, 0, 60, 60, 6,  87, 91, 59 ),
 57 ('2021-01-04 00:00:00', 9, 1, 4, 12, 0, 300000001539, 60, 1059, 0, 0, 60, 60, 44, 34, 34, 28 ),
 58 ('2021-01-04 00:00:00', 9, 1, 4, 12, 0, 300000001537, 60, 1059, 0, 0, 60, 60, 88, 8,  62, 52 ),
 59 ('2021-01-04 00:00:00', 9, 1, 4, 12, 0, 300000001538, 60, 1059, 0, 0, 60, 60, 46, 53, 52, 33 ),
 60 ('2021-01-04 00:00:00', 9, 1, 4, 12, 0, 300000001534, 60, 1059, 0, 0, 60, 60, 25, 3,  20, 78 ),
 61 ('2021-01-04 00:00:00', 9, 1, 4, 12, 0, 300000001535, 60, 1059, 0, 0, 60, 60, 68, 68, 85, 62 ),
 62 ('2021-01-04 00:00:00', 9, 1, 4, 11, 0, 300000001539, 60, 1060, 0, 0, 60, 60, 92, 68, 94, 88 ),
 63 ('2021-01-04 00:00:00', 9, 1, 4, 11, 0, 300000001537, 60, 1060, 0, 0, 60, 60, 8,  89, 23, 42 ),
 64 ('2021-01-04 00:00:00', 9, 1, 4, 11, 0, 300000001538, 60, 1060, 0, 0, 60, 60, 23, 89, 82, 97 ),
 65 ('2021-01-04 00:00:00', 9, 1, 4, 11, 0, 300000001534, 60, 1060, 0, 0, 60, 60, 70, 17, 56, 15 ),
 66 ('2021-01-04 00:00:00', 9, 1, 4, 11, 0, 300000001535, 60, 1060, 0, 0, 60, 60, 32, 11, 11, 69 ),
 67 ('2021-01-04 00:00:00', 9, 1, 4, 10, 0, 300000001539, 60, 1061, 0, 0, 60, 60, 15, 13, 92, 38 ),
 68 ('2021-01-04 00:00:00', 9, 1, 4, 10, 0, 300000001537, 60, 1061, 0, 0, 60, 60, 81, 49, 7,  7  ),
 69 ('2021-01-04 00:00:00', 9, 1, 4, 10, 0, 300000001538, 60, 1061, 0, 0, 60, 60, 50, 86, 41, 37 ),
 70 ('2021-01-04 00:00:00', 9, 1, 4, 10, 0, 300000001534, 60, 1061, 0, 0, 60, 60, 8,  35, 7,  9  ),
 71 ('2021-01-04 00:00:00', 9, 1, 4, 10, 0, 300000001535, 60, 1061, 0, 0, 60, 60, 31, 28, 77, 65 ),
 72 ('2021-01-04 00:00:00', 9, 1, 4, 9 , 0, 300000001539, 60, 1062, 0, 0, 60, 60, 43, 35, 88, 14 ),
 73 ('2021-01-04 00:00:00', 9, 1, 4, 9 , 0, 300000001537, 60, 1062, 0, 0, 60, 60, 13, 6,  14, 8  ),
 74 ('2021-01-04 00:00:00', 9, 1, 4, 9 , 0, 300000001538, 60, 1062, 0, 0, 60, 60, 30, 60, 62, 23 ),
 75 ('2021-01-04 00:00:00', 9, 1, 4, 9 , 0, 300000001534, 60, 1062, 0, 0, 60, 60, 82, 98, 86, 100),
 76 ('2021-01-04 00:00:00', 9, 1, 4, 9 , 0, 300000001535, 60, 1062, 0, 0, 60, 60, 67, 36, 67, 13 );

75 rows affected.

SQL> 
SQL> commit;

Succeed.

SQL> 
SQL> select ObjId, NeId, DSTOffset, Hour, (avg(Period)) Period, (max(Period_cond)) Period_cond, StartTime, (sum(Integrity)) Integrity, (sum(PreIntegrity)) PreIntegrity, (sum(C1526726737)) C1526726737, (sum(C1526730138)) C1526730138 from (
  2 select  (T0.LTECellId) ObjId, (T0.NeId) NeId, StartTime, T0.Hour, T0.DSTOffset, T0.Period, 0 Period_cond, Integrity, PreIntegrity,C1526726737,null C1526730138, 1 RecordNum from f_TNN000012_LTECell_H T0 where  ((T0.LTECellId=300000147130)) and ( (T0.StartTime >  TO_DATE('2021/01/01','YYYY/MM/DD') or  (T0.StartTime =  TO_DATE('2021/01/01','YYYY/MM/DD') and T0.Hour >= 0)) and  (T0.StartTime <  TO_DATE('2021/01/05','YYYY/MM/DD') or  (T0.StartTime =  TO_DATE('2021/01/05','YYYY/MM/DD') and T0.Hour < 4)))
  3  union all select  (T0.LTECellId) ObjId, (T0.NeId) NeId, StartTime, T0.Hour, T0.DSTOffset, T0.Period, 0 Period_cond, Integrity, PreIntegrity,null C1526726737,C1526730138, 1 RecordNum from f_TNN000018_LTECell_H T0 where  ((T0.LTECellId=300000147130)) and ( (T0.StartTime >  TO_DATE('2021/01/01','YYYY/MM/DD') or  (T0.StartTime =  TO_DATE('2021/01/01','YYYY/MM/DD') and T0.Hour >= 0)) and  (T0.StartTime <  TO_DATE('2021/01/05','YYYY/MM/DD') or  (T0.StartTime =  TO_DATE('2021/01/05','YYYY/MM/DD') 
  4  and T0.Hour < 4))))group by NeId,ObjId, StartTime,Hour  ,DSTOffset;

OBJID                                    NEID                                     DSTOFFSET                                HOUR                                     PERIOD                                   PERIOD_COND  STARTTIME              INTEGRITY                                PREINTEGRITY                             C1526726737                              C1526730138                             
---------------------------------------- ---------------------------------------- ---------------------------------------- ---------------------------------------- ---------------------------------------- ------------ ---------------------- ---------------------------------------- ---------------------------------------- ---------------------------------------- ----------------------------------------

0 rows fetched.

SQL> 
SQL> -- re-create the partitions
SQL> alter table F_TNN000018_LTECELL_H drop PARTITION PRS_PART_20201231;

Succeed.

SQL> alter table F_TNN000018_LTECELL_H drop PARTITION PRS_PART_20210101;

Succeed.

SQL> alter table F_TNN000018_LTECELL_H drop PARTITION PRS_PART_20210102;

Succeed.

SQL> alter table F_TNN000018_LTECELL_H drop PARTITION PRS_PART_20210103;

Succeed.

SQL> alter table F_TNN000018_LTECELL_H drop PARTITION PRS_PART_20210104;

Succeed.

SQL> alter table F_TNN000018_LTECELL_H drop PARTITION PRS_PART_20210105;

Succeed.

SQL> alter table F_TNN000018_LTECELL_H drop PARTITION PRS_PART_20210106;

Succeed.

SQL> alter table F_TNN000018_LTECELL_H drop PARTITION PRS_PART_20210107;

Succeed.

SQL> alter table F_TNN000018_LTECELL_H drop PARTITION PRS_PART_20210108;

Succeed.

SQL> 
SQL> alter table F_TNN000018_LTECELL_H add PARTITION PRS_PART_20201231 VALUES LESS THAN (to_date('20201231', 'YYYYMMDD'))  INITRANS 2 PCTFREE 8 FORMAT CSF;

Succeed.

SQL> alter table F_TNN000018_LTECELL_H add PARTITION PRS_PART_20210101 VALUES LESS THAN (to_date('20210101', 'YYYYMMDD'))  INITRANS 2 PCTFREE 8 FORMAT CSF;

Succeed.

SQL> alter table F_TNN000018_LTECELL_H add PARTITION PRS_PART_20210102 VALUES LESS THAN (to_date('20210102', 'YYYYMMDD'))  INITRANS 2 PCTFREE 8 FORMAT CSF;

Succeed.

SQL> alter table F_TNN000018_LTECELL_H add PARTITION PRS_PART_20210103 VALUES LESS THAN (to_date('20210103', 'YYYYMMDD'))  INITRANS 2 PCTFREE 8 FORMAT CSF;

Succeed.

SQL> alter table F_TNN000018_LTECELL_H add PARTITION PRS_PART_20210104 VALUES LESS THAN (to_date('20210104', 'YYYYMMDD'))  INITRANS 2 PCTFREE 8 FORMAT CSF;

Succeed.

SQL> alter table F_TNN000018_LTECELL_H add PARTITION PRS_PART_20210105 VALUES LESS THAN (to_date('20210105', 'YYYYMMDD'))  INITRANS 2 PCTFREE 8 FORMAT CSF;

Succeed.

SQL> alter table F_TNN000018_LTECELL_H add PARTITION PRS_PART_20210106 VALUES LESS THAN (to_date('20210106', 'YYYYMMDD'))  INITRANS 2 PCTFREE 8 FORMAT CSF;

Succeed.

SQL> alter table F_TNN000018_LTECELL_H add PARTITION PRS_PART_20210107 VALUES LESS THAN (to_date('20210107', 'YYYYMMDD'))  INITRANS 2 PCTFREE 8 FORMAT CSF;

Succeed.

SQL> alter table F_TNN000018_LTECELL_H add PARTITION PRS_PART_20210108 VALUES LESS THAN (to_date('20210108', 'YYYYMMDD'))  INITRANS 2 PCTFREE 8 FORMAT CSF;

Succeed.

SQL> 
SQL> -- add data for the last selected partitions
SQL> insert into F_TNN000018_LTECELL_H values
  2 ('2021-01-04 00:00:00', 9, 1, 4, 23, 0, 300000001539, 60, 1048, 0, 0, 60, 60, 19, 55, 50, 54 ),
  3 ('2021-01-04 00:00:00', 9, 1, 4, 23, 0, 300000001537, 60, 1048, 0, 0, 60, 60, 27, 0,  52, 57 ),
  4 ('2021-01-04 00:00:00', 9, 1, 4, 23, 0, 300000001538, 60, 1048, 0, 0, 60, 60, 43, 63, 75, 16 ),
  5 ('2021-01-04 00:00:00', 9, 1, 4, 23, 0, 300000001534, 60, 1048, 0, 0, 60, 60, 5,  25, 13, 64 ),
  6 ('2021-01-04 00:00:00', 9, 1, 4, 23, 0, 300000001535, 60, 1048, 0, 0, 60, 60, 88, 27, 9,  75 ),
  7 ('2021-01-04 00:00:00', 9, 1, 4, 22, 0, 300000001539, 60, 1049, 0, 0, 60, 60, 37, 21, 39, 71 ),
  8 ('2021-01-04 00:00:00', 9, 1, 4, 22, 0, 300000001537, 60, 1049, 0, 0, 60, 60, 90, 100, 61, 59),
  9 ('2021-01-04 00:00:00', 9, 1, 4, 22, 0, 300000001538, 60, 1049, 0, 0, 60, 60, 5,  71, 66, 81 ),
 10 ('2021-01-04 00:00:00', 9, 1, 4, 22, 0, 300000001534, 60, 1049, 0, 0, 60, 60, 36, 55, 82, 29 ),
 11 ('2021-01-04 00:00:00', 9, 1, 4, 22, 0, 300000001535, 60, 1049, 0, 0, 60, 60, 96, 24, 36, 48 ),
 12 ('2021-01-04 00:00:00', 9, 1, 4, 21, 0, 300000001539, 60, 1050, 0, 0, 60, 60, 81, 66, 41, 26 ),
 13 ('2021-01-04 00:00:00', 9, 1, 4, 21, 0, 300000001537, 60, 1050, 0, 0, 60, 60, 78, 1,  72, 15 ),
 14 ('2021-01-04 00:00:00', 9, 1, 4, 21, 0, 300000001538, 60, 1050, 0, 0, 60, 60, 13, 29, 90, 41 ),
 15 ('2021-01-04 00:00:00', 9, 1, 4, 21, 0, 300000001534, 60, 1050, 0, 0, 60, 60, 11, 86, 28, 43 ),
 16 ('2021-01-04 00:00:00', 9, 1, 4, 21, 0, 300000001535, 60, 1050, 0, 0, 60, 60, 8,  95, 98, 8  ),
 17 ('2021-01-04 00:00:00', 9, 1, 4, 20, 0, 300000001539, 60, 1051, 0, 0, 60, 60, 83, 93, 26, 27 ),
 18 ('2021-01-04 00:00:00', 9, 1, 4, 20, 0, 300000001537, 60, 1051, 0, 0, 60, 60, 80, 83, 75, 47 ),
 19 ('2021-01-04 00:00:00', 9, 1, 4, 20, 0, 300000001538, 60, 1051, 0, 0, 60, 60, 9,  93, 75, 72 ),
 20 ('2021-01-04 00:00:00', 9, 1, 4, 20, 0, 300000001534, 60, 1051, 0, 0, 60, 60, 63, 96, 58, 54 ),
 21 ('2021-01-04 00:00:00', 9, 1, 4, 20, 0, 300000001535, 60, 1051, 0, 0, 60, 60, 99, 86, 88, 16 ),
 22 ('2021-01-04 00:00:00', 9, 1, 4, 19, 0, 300000001539, 60, 1052, 0, 0, 60, 60, 41, 25, 98, 12 ),
 23 ('2021-01-04 00:00:00', 9, 1, 4, 19, 0, 300000001537, 60, 1052, 0, 0, 60, 60, 57, 57, 82, 86 ),
 24 ('2021-01-04 00:00:00', 9, 1, 4, 19, 0, 300000001538, 60, 1052, 0, 0, 60, 60, 93, 80, 73, 23 ),
 25 ('2021-01-04 00:00:00', 9, 1, 4, 19, 0, 300000001534, 60, 1052, 0, 0, 60, 60, 56, 29, 43, 29 ),
 26 ('2021-01-04 00:00:00', 9, 1, 4, 19, 0, 300000001535, 60, 1052, 0, 0, 60, 60, 11, 41, 5,  80 ),
 27 ('2021-01-04 00:00:00', 9, 1, 4, 18, 0, 300000001539, 60, 1053, 0, 0, 60, 60, 48, 64, 42, 33 ),
 28 ('2021-01-04 00:00:00', 9, 1, 4, 18, 0, 300000001537, 60, 1053, 0, 0, 60, 60, 96, 80, 43, 65 ),
 29 ('2021-01-04 00:00:00', 9, 1, 4, 18, 0, 300000001538, 60, 1053, 0, 0, 60, 60, 81, 85, 86, 41 ),
 30 ('2021-01-04 00:00:00', 9, 1, 4, 18, 0, 300000001534, 60, 1053, 0, 0, 60, 60, 28, 76, 36, 81 ),
 31 ('2021-01-04 00:00:00', 9, 1, 4, 18, 0, 300000001535, 60, 1053, 0, 0, 60, 60, 8,  67, 87, 25 ),
 32 ('2021-01-04 00:00:00', 9, 1, 4, 17, 0, 300000001539, 60, 1054, 0, 0, 60, 60, 63, 87, 40, 74 ),
 33 ('2021-01-04 00:00:00', 9, 1, 4, 17, 0, 300000001537, 60, 1054, 0, 0, 60, 60, 74, 60, 53, 86 ),
 34 ('2021-01-04 00:00:00', 9, 1, 4, 17, 0, 300000001538, 60, 1054, 0, 0, 60, 60, 32, 3,  50, 51 ),
 35 ('2021-01-04 00:00:00', 9, 1, 4, 17, 0, 300000001534, 60, 1054, 0, 0, 60, 60, 10, 62, 7,  35 ),
 36 ('2021-01-04 00:00:00', 9, 1, 4, 17, 0, 300000001535, 60, 1054, 0, 0, 60, 60, 41, 74, 63, 76 ),
 37 ('2021-01-04 00:00:00', 9, 1, 4, 16, 0, 300000001539, 60, 1055, 0, 0, 60, 60, 27, 46, 91, 48 ),
 38 ('2021-01-04 00:00:00', 9, 1, 4, 16, 0, 300000001537, 60, 1055, 0, 0, 60, 60, 52, 69, 6,  47 ),
 39 ('2021-01-04 00:00:00', 9, 1, 4, 16, 0, 300000001538, 60, 1055, 0, 0, 60, 60, 1,  34, 24, 88 ),
 40 ('2021-01-04 00:00:00', 9, 1, 4, 16, 0, 300000001534, 60, 1055, 0, 0, 60, 60, 78, 21, 41, 33 ),
 41 ('2021-01-04 00:00:00', 9, 1, 4, 16, 0, 300000001535, 60, 1055, 0, 0, 60, 60, 24, 12, 11, 36 ),
 42 ('2021-01-04 00:00:00', 9, 1, 4, 15, 0, 300000001539, 60, 1056, 0, 0, 60, 60, 1,  8,  93, 61 ),
 43 ('2021-01-04 00:00:00', 9, 1, 4, 15, 0, 300000001537, 60, 1056, 0, 0, 60, 60, 5,  74, 42, 5  ),
 44 ('2021-01-04 00:00:00', 9, 1, 4, 15, 0, 300000001538, 60, 1056, 0, 0, 60, 60, 71, 78, 99, 51 ),
 45 ('2021-01-04 00:00:00', 9, 1, 4, 15, 0, 300000001534, 60, 1056, 0, 0, 60, 60, 54, 96, 25, 43 ),
 46 ('2021-01-04 00:00:00', 9, 1, 4, 15, 0, 300000001535, 60, 1056, 0, 0, 60, 60, 69, 35, 34, 50 ),
 47 ('2021-01-04 00:00:00', 9, 1, 4, 14, 0, 300000001539, 60, 1057, 0, 0, 60, 60, 87, 17, 2,  89 ),
 48 ('2021-01-04 00:00:00', 9, 1, 4, 14, 0, 300000001537, 60, 1057, 0, 0, 60, 60, 75, 53, 31, 100),
 49 ('2021-01-04 00:00:00', 9, 1, 4, 14, 0, 300000001538, 60, 1057, 0, 0, 60, 60, 68, 40, 81, 24 ),
 50 ('2021-01-04 00:00:00', 9, 1, 4, 14, 0, 300000001534, 60, 1057, 0, 0, 60, 60, 17, 78, 57, 35 ),
 51 ('2021-01-04 00:00:00', 9, 1, 4, 14, 0, 300000001535, 60, 1057, 0, 0, 60, 60, 51, 8,  42, 25 ),
 52 ('2021-01-04 00:00:00', 9, 1, 4, 13, 0, 300000001539, 60, 1058, 0, 0, 60, 60, 25, 61, 42, 31 ),
 53 ('2021-01-04 00:00:00', 9, 1, 4, 13, 0, 300000001537, 60, 1058, 0, 0, 60, 60, 4,  51, 6,  100),
 54 ('2021-01-04 00:00:00', 9, 1, 4, 13, 0, 300000001538, 60, 1058, 0, 0, 60, 60, 38, 39, 75, 53 ),
 55 ('2021-01-04 00:00:00', 9, 1, 4, 13, 0, 300000001534, 60, 1058, 0, 0, 60, 60, 69, 22, 65, 31 ),
 56 ('2021-01-04 00:00:00', 9, 1, 4, 13, 0, 300000001535, 60, 1058, 0, 0, 60, 60, 6,  87, 91, 59 ),
 57 ('2021-01-04 00:00:00', 9, 1, 4, 12, 0, 300000001539, 60, 1059, 0, 0, 60, 60, 44, 34, 34, 28 ),
 58 ('2021-01-04 00:00:00', 9, 1, 4, 12, 0, 300000001537, 60, 1059, 0, 0, 60, 60, 88, 8,  62, 52 ),
 59 ('2021-01-04 00:00:00', 9, 1, 4, 12, 0, 300000001538, 60, 1059, 0, 0, 60, 60, 46, 53, 52, 33 ),
 60 ('2021-01-04 00:00:00', 9, 1, 4, 12, 0, 300000001534, 60, 1059, 0, 0, 60, 60, 25, 3,  20, 78 ),
 61 ('2021-01-04 00:00:00', 9, 1, 4, 12, 0, 300000001535, 60, 1059, 0, 0, 60, 60, 68, 68, 85, 62 ),
 62 ('2021-01-04 00:00:00', 9, 1, 4, 11, 0, 300000001539, 60, 1060, 0, 0, 60, 60, 92, 68, 94, 88 ),
 63 ('2021-01-04 00:00:00', 9, 1, 4, 11, 0, 300000001537, 60, 1060, 0, 0, 60, 60, 8,  89, 23, 42 ),
 64 ('2021-01-04 00:00:00', 9, 1, 4, 11, 0, 300000001538, 60, 1060, 0, 0, 60, 60, 23, 89, 82, 97 ),
 65 ('2021-01-04 00:00:00', 9, 1, 4, 11, 0, 300000001534, 60, 1060, 0, 0, 60, 60, 70, 17, 56, 15 ),
 66 ('2021-01-04 00:00:00', 9, 1, 4, 11, 0, 300000001535, 60, 1060, 0, 0, 60, 60, 32, 11, 11, 69 ),
 67 ('2021-01-04 00:00:00', 9, 1, 4, 10, 0, 300000001539, 60, 1061, 0, 0, 60, 60, 15, 13, 92, 38 ),
 68 ('2021-01-04 00:00:00', 9, 1, 4, 10, 0, 300000001537, 60, 1061, 0, 0, 60, 60, 81, 49, 7,  7  ),
 69 ('2021-01-04 00:00:00', 9, 1, 4, 10, 0, 300000001538, 60, 1061, 0, 0, 60, 60, 50, 86, 41, 37 ),
 70 ('2021-01-04 00:00:00', 9, 1, 4, 10, 0, 300000001534, 60, 1061, 0, 0, 60, 60, 8,  35, 7,  9  ),
 71 ('2021-01-04 00:00:00', 9, 1, 4, 10, 0, 300000001535, 60, 1061, 0, 0, 60, 60, 31, 28, 77, 65 ),
 72 ('2021-01-04 00:00:00', 9, 1, 4, 9 , 0, 300000001539, 60, 1062, 0, 0, 60, 60, 43, 35, 88, 14 ),
 73 ('2021-01-04 00:00:00', 9, 1, 4, 9 , 0, 300000001537, 60, 1062, 0, 0, 60, 60, 13, 6,  14, 8  ),
 74 ('2021-01-04 00:00:00', 9, 1, 4, 9 , 0, 300000001538, 60, 1062, 0, 0, 60, 60, 30, 60, 62, 23 ),
 75 ('2021-01-04 00:00:00', 9, 1, 4, 9 , 0, 300000001534, 60, 1062, 0, 0, 60, 60, 82, 98, 86, 100),
 76 ('2021-01-04 00:00:00', 9, 1, 4, 9 , 0, 300000001535, 60, 1062, 0, 0, 60, 60, 67, 36, 67, 13 );

75 rows affected.

SQL> 
SQL> commit;

Succeed.

SQL> 
SQL> select ObjId, NeId, DSTOffset, Hour, (avg(Period)) Period, (max(Period_cond)) Period_cond, StartTime, (sum(Integrity)) Integrity, (sum(PreIntegrity)) PreIntegrity, (sum(C1526726737)) C1526726737, (sum(C1526730138)) C1526730138 from (
  2 select  (T0.LTECellId) ObjId, (T0.NeId) NeId, StartTime, T0.Hour, T0.DSTOffset, T0.Period, 0 Period_cond, Integrity, PreIntegrity,C1526726737,null C1526730138, 1 RecordNum from f_TNN000012_LTECell_H T0 where  ((T0.LTECellId=300000147130)) and ( (T0.StartTime >  TO_DATE('2021/01/01','YYYY/MM/DD') or  (T0.StartTime =  TO_DATE('2021/01/01','YYYY/MM/DD') and T0.Hour >= 0)) and  (T0.StartTime <  TO_DATE('2021/01/05','YYYY/MM/DD') or  (T0.StartTime =  TO_DATE('2021/01/05','YYYY/MM/DD') and T0.Hour < 4)))
  3  union all select  (T0.LTECellId) ObjId, (T0.NeId) NeId, StartTime, T0.Hour, T0.DSTOffset, T0.Period, 0 Period_cond, Integrity, PreIntegrity,null C1526726737,C1526730138, 1 RecordNum from f_TNN000018_LTECell_H T0 where  ((T0.LTECellId=300000147130)) and ( (T0.StartTime >  TO_DATE('2021/01/01','YYYY/MM/DD') or  (T0.StartTime =  TO_DATE('2021/01/01','YYYY/MM/DD') and T0.Hour >= 0)) and  (T0.StartTime <  TO_DATE('2021/01/05','YYYY/MM/DD') or  (T0.StartTime =  TO_DATE('2021/01/05','YYYY/MM/DD') 
  4  and T0.Hour < 4))))group by NeId,ObjId, StartTime,Hour  ,DSTOffset;

OBJID                                    NEID                                     DSTOFFSET                                HOUR                                     PERIOD                                   PERIOD_COND  STARTTIME              INTEGRITY                                PREINTEGRITY                             C1526726737                              C1526730138                             
---------------------------------------- ---------------------------------------- ---------------------------------------- ---------------------------------------- ---------------------------------------- ------------ ---------------------- ---------------------------------------- ---------------------------------------- ---------------------------------------- ----------------------------------------

0 rows fetched.

SQL> 
SQL> alter system set cbo = off;

Succeed.

SQL> 
SQL> DROP TABLE IF EXISTS FB_TBL_PART_RB;

Succeed.

SQL> CREATE TABLE FB_TBL_PART_RB(ID INT, C1 INT)
  2 PARTITION BY RANGE (ID)
  3 (
  4 PARTITION P1 VALUES LESS THAN (10),
  5 PARTITION P2 VALUES LESS THAN (maxvalue)
  6 ) TABLESPACE USERS;

Succeed.

SQL> CREATE INDEX IDX_1_PART ON FB_TBL_PART_RB (C1);

Succeed.

SQL> CREATE INDEX IDX_2_PART ON FB_TBL_PART_RB (ID) local;

Succeed.

SQL> 
SQL> INSERT INTO FB_TBL_PART_RB VALUES (1, 1);

1 rows affected.

SQL> INSERT INTO FB_TBL_PART_RB VALUES (40, 1);

1 rows affected.

SQL> COMMIT;

Succeed.

SQL> ALTER INDEX IDX_2_PART ON FB_TBL_PART_RB modify PARTITION P1 UNUSABLE;

Succeed.

SQL> truncate table FB_TBL_PART_RB;

Succeed.

SQL> alter index idx_2_part ON FB_TBL_PART_RB rebuild;

Succeed.

SQL> FLASHBACK TABLE FB_TBL_PART_RB TO BEFORE TRUNCATE force;

Succeed.

SQL> delete from FB_TBL_PART_RB;

2 rows affected.

SQL> DROP TABLE IF EXISTS FB_TBL_PART_RB;
Succeed.




