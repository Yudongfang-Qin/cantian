

SQL> -- prepare user for SPC100 import
SQL> drop user if exists test_compatible_none_data cascade;

Succeed.

SQL> create user test_compatible_none_data identified by Test_123456; 

Succeed.

SQL> grant dba to test_compatible_none_data;

Succeed.

SQL> 
SQL> drop user if exists test_compatible_with_data cascade;

Succeed.

SQL> create user test_compatible_with_data identified by Test_123456; 

Succeed.

SQL> grant dba to test_compatible_with_data;

Succeed.

SQL> 
SQL> -- this test case is for import compatible 
SQL> -- SPC100 version compatible test
SQL> imp users=test_compatible_none_data filetype=bin file="./data/compatible_data/spc100/compatible_none_data/exp_bin.dmp";
Parsing import options ... 
Verify options ...
  verify schema ...
Starting import ...
Preparing to import ...
-- IMPORT TYPE = SCHEMA
-- IMPORT OBJECTS = TEST_COMPATIBLE_NONE_DATA
-- DUMP FILE = ./data/compatible_data/spc100/compatible_none_data/exp_bin.dmp
-- LOG FILE = 
-- FILE TYPE = BIN
-- SHOW = N
-- FEEDBACK = 10000
-- PARALLEL = 1
-- DDL_PARALLEL = 1
-- CONTENT_MODE = ALL
-- IGNORE = N
-- CREATE_USER = N
-- TIMING = OFF
-- BATCH_COUNT = 10000
-- DISABLE_TRIGGER = Y
-- NOLOGGING = N


Importing schema TEST_COMPATIBLE_NONE_DATA ... 
  Importing sequence of schema TEST_COMPATIBLE_NONE_DATA ...
    Sequence importing success, 0 rows are loaded.

  Importing tables of schema TEST_COMPATIBLE_NONE_DATA ,total number : 0 ...
    The order of importing table is:
    TABLE NAME                                                       RECORD NUMBER 
    ---------------------------------------------------------------- --------------

  Importing foreign key of schema TEST_COMPATIBLE_NONE_DATA ...
    Foreign key importing success, 0 rows are loaded.

  Importing fuction/procedure/trigger of schema TEST_COMPATIBLE_NONE_DATA ...
    Fuction/procedure/trigger importing success, 0 rows are loaded.

  Importing view of schema TEST_COMPATIBLE_NONE_DATA ...
    View importing success, 0 rows are loaded.
data importing success, 0 rows are loaded.
Logical import succeeded.

SQL> imp users=test_compatible_with_data filetype=bin file="./data/compatible_data/spc100/compatible_with_data/exp_bin.dmp";
Parsing import options ... 
Verify options ...
  verify schema ...
Starting import ...
Preparing to import ...
-- IMPORT TYPE = SCHEMA
-- IMPORT OBJECTS = TEST_COMPATIBLE_WITH_DATA
-- DUMP FILE = ./data/compatible_data/spc100/compatible_with_data/exp_bin.dmp
-- LOG FILE = 
-- FILE TYPE = BIN
-- SHOW = N
-- FEEDBACK = 10000
-- PARALLEL = 1
-- DDL_PARALLEL = 1
-- CONTENT_MODE = ALL
-- IGNORE = N
-- CREATE_USER = N
-- TIMING = OFF
-- BATCH_COUNT = 10000
-- DISABLE_TRIGGER = Y
-- NOLOGGING = N


Importing schema TEST_COMPATIBLE_WITH_DATA ... 
  Importing sequence of schema TEST_COMPATIBLE_WITH_DATA ...
    Sequence importing success, 1 rows are loaded.

  Importing tables of schema TEST_COMPATIBLE_WITH_DATA ,total number : 2 ...
    The order of importing table is:
    TABLE NAME                                                       RECORD NUMBER 
    ---------------------------------------------------------------- --------------
Waring: the file _16CDE03F2FA2047F0000.D doesn't exsit, we will get it from the previous directory
Waring: the file _16CDE03F2FA2047F0000.L doesn't exsit, we will get it from the previous directory
Waring: the file _16CDE03F2FA2047F0000.L doesn't exsit, we will get it from the previous directory
    TEST1                                                                4         

  Importing foreign key of schema TEST_COMPATIBLE_WITH_DATA ...
    Foreign key importing success, 1 rows are loaded.

  Importing fuction/procedure/trigger of schema TEST_COMPATIBLE_WITH_DATA ...
    Fuction/procedure/trigger importing success, 1 rows are loaded.

  Importing view of schema TEST_COMPATIBLE_WITH_DATA ...
    View importing success, 3 rows are loaded.
data importing success, 4 rows are loaded.
Logical import succeeded.

SQL> 
SQL> 
SQL> -- prepare user for SPC200 import
SQL> drop user if exists test_compatible_none_data cascade;

Succeed.

SQL> create user test_compatible_none_data identified by Test_123456; 

Succeed.

SQL> grant dba to test_compatible_none_data;

Succeed.

SQL> 
SQL> drop user if exists test_compatible_with_data cascade;

Succeed.

SQL> create user test_compatible_with_data identified by Test_123456; 

Succeed.

SQL> grant dba to test_compatible_with_data;

Succeed.

SQL> 
SQL> -- SPC200 version compatible test
SQL> -- 1. none data test
SQL> exp users=test_compatible_none_data filetype=bin file="./data/compatible_data/spc200/compatible_none_data/exp_bin.dmp";
Parsing export options ... 
Verify options ...
  verify schema ...
Starting export ...
Preparing to export ...
-- EXPORT TYPE = SCHEMA
-- EXPORT OBJECTS = TEST_COMPATIBLE_NONE_DATA
-- FILE TYPE = BIN
-- DUMP FILE = ./data/compatible_data/spc200/compatible_none_data/exp_bin.dmp
-- LOG FILE = 
-- QUERY = ""
-- COMPRESS = N
-- CONSISTENT = N
-- CONTENT_MODE = ALL
-- SKIP_COMMENTS = N
-- FORCE = N
-- SKIP_ADD_DROP_TABLE = N
-- SKIP_TRIGGERS = N
-- QUOTE_NAMES = Y
-- TABLESPACE = N
-- COMMIT_BATCH = 1000
-- INSERT_BATCH = 1
-- FEEDBACK = 10000
-- PARALLEL = 0
-- TENANT = N
-- CREATE_USER = N
-- ROLE = N
-- GRANT = N
-- WITH_CR_MODE = N
-- WITH_FORMAT_CSF = Y
-- INDEX_PARTITIONS = N

Exporting schema TEST_COMPATIBLE_NONE_DATA ...
Exporting sequence of schema TEST_COMPATIBLE_NONE_DATA ...
Exporting profile of schema TEST_COMPATIBLE_NONE_DATA ...
Exporting type of schema TEST_COMPATIBLE_NONE_DATA ...
Exporting tables of schema TEST_COMPATIBLE_NONE_DATA ...
Reading table objects of TEST_COMPATIBLE_NONE_DATA

The order of exporting table is:
TABLE NAME                                                       LEVEL     
---------------------------------------------------------------- ----------

Exporting tables (scripts or data) of TEST_COMPATIBLE_NONE_DATA
Exporting procedures/functions/triggers of schema TEST_COMPATIBLE_NONE_DATA ...
Exporting views of schema TEST_COMPATIBLE_NONE_DATA ...
Exporting synonyms of schema TEST_COMPATIBLE_NONE_DATA ...
Exporting package of schema TEST_COMPATIBLE_NONE_DATA ...
End of export schema TEST_COMPATIBLE_NONE_DATA ...

Logical export succeeded.

SQL> -- 2. with data test
SQL> conn test_compatible_with_data/Test_123456@127.0.0.1:1611

connected.

SQL> -- 2.1 create sequence
SQL> DROP SEQUENCE IF EXISTS seq_test_1;

Succeed.

SQL> create sequence seq_test_1 start with 100 increment by 2 cache 99999;

Succeed.

SQL> -- 2.2 create tablespace 
SQL> create tablespace test_compatible_with_data_tablespace datafile 'test_compatible_with_data' size 32m autoextend on;

Succeed.

SQL> -- 2.3 create table
SQL> drop table if exists test1 CASCADE CONSTRAINTS;

Succeed.

SQL> create table test1 (
  2 col_int int , 
  3 col_int1 int,
  4 col_varchar varchar(8000), 
  5 col_nvarchar1 nvarchar(1000),
  6 col_nvarchar2 nvarchar(4000),
  7 col_clob clob,
  8 primary key (col_int));

Succeed.

SQL> -- 2.4 construct table data
SQL> insert into test1 values (1, 6, '', '', '', '');

1 rows affected.

SQL> insert into test1 values (2, 6, 'this is a large record', 'this is a large record', 'this is a large record', 'this is a large record');

1 rows affected.

SQL> insert into test1 values (3, 6, 'this is a small record', 'this is a small record', 'this is a small record', 'this is a small record');

1 rows affected.

SQL> insert into test1 values (4, 6, 'this is a large record', 'this is a large record', 'this is a large record', 'this is a large record');

1 rows affected.

SQL> -- 2.5 create a procedure and make record 2,4 larger
SQL> create or replace procedure make_test1_data2_larger_col_nvarchar2(size_col_nvarchar2 in int, size_col_clob in int )
  2 as
  3 begin 
  4     for i in 1..size_col_nvarchar2 loop
  5         update test1 set col_nvarchar2=col_nvarchar2||col_nvarchar2 where col_int = 2 or col_int = 4;
  6     end loop;
  7     for i in 1..size_col_clob loop
  8         update test1 set col_clob=col_clob||col_clob where col_int = 2 or col_int = 4;
  9     end loop;
 10 end;
 11 /

Succeed.

SQL> 
SQL> call make_test1_data2_larger_col_nvarchar2(6,10);

PL/SQL procedure successfully completed.

SQL> 
SQL> -- 2.6 create index
SQL> create index test1_index on test1 ( col_int, col_int1);

Succeed.

SQL> 
SQL> -- 2.7 create foreign key 
SQL> drop table if exists test2 CASCADE CONSTRAINTS;

Succeed.

SQL> create table test2 ( col_int1 int, col_int2 int);

Succeed.

SQL> alter table test2 add constraint test2_foreign_key foreign key (col_int1) references test1 (col_int);

Succeed.

SQL> 
SQL> -- 2.8 create view
SQL> create or replace view view_test2 as select * from test2;

Succeed.

SQL> 
SQL> -- 2.9 create function
SQL> create or replace function func_test1(a varchar)
  2 RETURN varchar
  3 AS
  4 BEGIN
  5    if (a = 'ab') then
  6         return a;
  7    else
  8         return 'abc';
  9    end if;
 10 END;
 11 /

Succeed.

SQL> 
SQL> -- 2.10 create trigger
SQL> create or replace trigger trig_test1 
  2 BEFORE INSERT ON test1
  3 BEGIN
  4         dbe_output.print_line('BEFORE test1');
  5 END;
  6 /

Succeed.

SQL> 
SQL> -- 2.11 export and import information 
SQL> conn sys/Huawei@123@127.0.0.1:1611

connected.

SQL> exp users=test_compatible_with_data filetype=bin file="./data/compatible_data/spc200/compatible_with_data/exp_bin.dmp";
Parsing export options ... 
Verify options ...
  verify schema ...
Starting export ...
Preparing to export ...
-- EXPORT TYPE = SCHEMA
-- EXPORT OBJECTS = TEST_COMPATIBLE_WITH_DATA
-- FILE TYPE = BIN
-- DUMP FILE = ./data/compatible_data/spc200/compatible_with_data/exp_bin.dmp
-- LOG FILE = 
-- QUERY = ""
-- COMPRESS = N
-- CONSISTENT = N
-- CONTENT_MODE = ALL
-- SKIP_COMMENTS = N
-- FORCE = N
-- SKIP_ADD_DROP_TABLE = N
-- SKIP_TRIGGERS = N
-- QUOTE_NAMES = Y
-- TABLESPACE = N
-- COMMIT_BATCH = 1000
-- INSERT_BATCH = 1
-- FEEDBACK = 10000
-- PARALLEL = 0
-- TENANT = N
-- CREATE_USER = N
-- ROLE = N
-- GRANT = N
-- WITH_CR_MODE = N
-- WITH_FORMAT_CSF = Y
-- INDEX_PARTITIONS = N

Exporting schema TEST_COMPATIBLE_WITH_DATA ...
Exporting sequence of schema TEST_COMPATIBLE_WITH_DATA ...
Exporting profile of schema TEST_COMPATIBLE_WITH_DATA ...
Exporting type of schema TEST_COMPATIBLE_WITH_DATA ...
Exporting tables of schema TEST_COMPATIBLE_WITH_DATA ...
Reading table objects of TEST_COMPATIBLE_WITH_DATA

The order of exporting table is:
TABLE NAME                                                       LEVEL     
---------------------------------------------------------------- ----------
TEST1                                                            1         
TEST2                                                            2         

Exporting tables (scripts or data) of TEST_COMPATIBLE_WITH_DATA
exporting table TEST_COMPATIBLE_WITH_DATA.TEST1 ...
  exporting DDL of TEST_COMPATIBLE_WITH_DATA.TEST1 ...
  exporting data of TEST_COMPATIBLE_WITH_DATA.TEST1 ...
    data exporting success, 4 rows are dumped.

  exporting indexes on TEST_COMPATIBLE_WITH_DATA.TEST1 ...
  exporting constraints on TEST_COMPATIBLE_WITH_DATA.TEST1 ...

exporting table TEST_COMPATIBLE_WITH_DATA.TEST2 ...
  exporting DDL of TEST_COMPATIBLE_WITH_DATA.TEST2 ...
  exporting data of TEST_COMPATIBLE_WITH_DATA.TEST2 ...
    data exporting success, 0 rows are dumped.

  exporting indexes on TEST_COMPATIBLE_WITH_DATA.TEST2 ...
  exporting constraints on TEST_COMPATIBLE_WITH_DATA.TEST2 ...

Exporting procedures/functions/triggers of schema TEST_COMPATIBLE_WITH_DATA ...
  exporting PROCEDURE TEST_COMPATIBLE_WITH_DATA.MAKE_TEST1_DATA2_LARGER_COL_NVARCHAR2
  exporting FUNCTION TEST_COMPATIBLE_WITH_DATA.FUNC_TEST1
  exporting TRIGGER TEST_COMPATIBLE_WITH_DATA.TRIG_TEST1
Exporting views of schema TEST_COMPATIBLE_WITH_DATA ...
  exporting view TEST_COMPATIBLE_WITH_DATA.VIEW_TEST2
Exporting synonyms of schema TEST_COMPATIBLE_WITH_DATA ...
Exporting package of schema TEST_COMPATIBLE_WITH_DATA ...
End of export schema TEST_COMPATIBLE_WITH_DATA ...

Logical export succeeded.

SQL> 
SQL> imp users=test_compatible_none_data filetype=bin file="./data/compatible_data/spc200/compatible_none_data/exp_bin.dmp";
Parsing import options ... 
Verify options ...
  verify schema ...
Starting import ...
Preparing to import ...
-- IMPORT TYPE = SCHEMA
-- IMPORT OBJECTS = TEST_COMPATIBLE_NONE_DATA
-- DUMP FILE = ./data/compatible_data/spc200/compatible_none_data/exp_bin.dmp
-- LOG FILE = 
-- FILE TYPE = BIN
-- SHOW = N
-- FEEDBACK = 10000
-- PARALLEL = 1
-- DDL_PARALLEL = 1
-- CONTENT_MODE = ALL
-- IGNORE = N
-- CREATE_USER = N
-- TIMING = OFF
-- BATCH_COUNT = 10000
-- DISABLE_TRIGGER = Y
-- NOLOGGING = N


Importing schema TEST_COMPATIBLE_NONE_DATA ... 
  Importing sequence of schema TEST_COMPATIBLE_NONE_DATA ...
    Sequence importing success, 0 rows are loaded.
  Importing profile of schema TEST_COMPATIBLE_NONE_DATA ...
    Profile importing success, 0 rows are loaded.
  Importing type of schema TEST_COMPATIBLE_NONE_DATA ...
    Type importing success, 0 rows are loaded.

  Importing tables of schema TEST_COMPATIBLE_NONE_DATA ,total number : 0 ...
    The order of importing table is:
    TABLE NAME                                                       RECORD NUMBER 
    ---------------------------------------------------------------- --------------

  Importing foreign key of schema TEST_COMPATIBLE_NONE_DATA ...
    Foreign key importing success, 0 rows are loaded.

  Importing fuction/procedure/trigger of schema TEST_COMPATIBLE_NONE_DATA ...
    Fuction/procedure/trigger importing success, 0 rows are loaded.

  Importing view of schema TEST_COMPATIBLE_NONE_DATA ...
    View importing success, 0 rows are loaded.

  Importing synonym of schema TEST_COMPATIBLE_NONE_DATA ...
    Synonym importing success, 0 rows are loaded.

  Importing package of schema TEST_COMPATIBLE_NONE_DATA ...
    Package importing success, 0 rows are loaded.

data importing success, 0 rows are loaded.
Logical import succeeded.

SQL> imp users=test_compatible_with_data filetype=bin file="./data/compatible_data/spc200/compatible_with_data/exp_bin.dmp";
Parsing import options ... 
Verify options ...
  verify schema ...
Starting import ...
Preparing to import ...
-- IMPORT TYPE = SCHEMA
-- IMPORT OBJECTS = TEST_COMPATIBLE_WITH_DATA
-- DUMP FILE = ./data/compatible_data/spc200/compatible_with_data/exp_bin.dmp
-- LOG FILE = 
-- FILE TYPE = BIN
-- SHOW = N
-- FEEDBACK = 10000
-- PARALLEL = 1
-- DDL_PARALLEL = 1
-- CONTENT_MODE = ALL
-- IGNORE = N
-- CREATE_USER = N
-- TIMING = OFF
-- BATCH_COUNT = 10000
-- DISABLE_TRIGGER = Y
-- NOLOGGING = N


Importing schema TEST_COMPATIBLE_WITH_DATA ... 
  Importing sequence of schema TEST_COMPATIBLE_WITH_DATA ...
    Sequence importing success, 1 rows are loaded.
  Importing profile of schema TEST_COMPATIBLE_WITH_DATA ...
    Profile importing success, 0 rows are loaded.
  Importing type of schema TEST_COMPATIBLE_WITH_DATA ...
    Type importing success, 0 rows are loaded.

  Importing tables of schema TEST_COMPATIBLE_WITH_DATA ,total number : 2 ...
    The order of importing table is:
    TABLE NAME                                                       RECORD NUMBER 
    ---------------------------------------------------------------- --------------
    TEST1                                                                4         

  Importing foreign key of schema TEST_COMPATIBLE_WITH_DATA ...
    Foreign key importing success, 1 rows are loaded.

  Importing fuction/procedure/trigger of schema TEST_COMPATIBLE_WITH_DATA ...
    Fuction/procedure/trigger importing success, 3 rows are loaded.

  Importing view of schema TEST_COMPATIBLE_WITH_DATA ...
    View importing success, 1 rows are loaded.

  Importing synonym of schema TEST_COMPATIBLE_WITH_DATA ...
    Synonym importing success, 0 rows are loaded.

  Importing package of schema TEST_COMPATIBLE_WITH_DATA ...
    Package importing success, 0 rows are loaded.

data importing success, 4 rows are loaded.
Logical import succeeded.

SQL> 
SQL> -- clear tablespace
SQL> drop user test_compatible_with_data cascade;

Succeed.

SQL> drop tablespace test_compatible_with_data_tablespace including contents and datafiles;

Succeed.

SQL> 
SQL> 
SQL> 


