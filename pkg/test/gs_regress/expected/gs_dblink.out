

SQL> CREATE DATABASE LINK TEST_LINK connect to sys identified by sys using '127.0.0.1:1611';

Succeed.

SQL> DROP TABLE IF EXISTS T1_DBLINK;

Succeed.

SQL> CREATE TABLE T1_DBLINK(f1 int);

Succeed.

SQL> INSERT INTO T1_DBLINK(f1) values(1);

1 rows affected.

SQL> INSERT INTO T1_DBLINK(f1) values(7);

1 rows affected.

SQL> INSERT INTO T1_DBLINK(f1) values(8);

1 rows affected.

SQL> SELECT f1 FROM T1_DBLINK@test_link order by f1;

F1
------------

0 rows fetched.

SQL> COMMIT;

Succeed.

SQL> SELECT f1 FROM T1_DBLINK@test_link order by f1;

F1
------------
1
7
8

3 rows fetched.

SQL>
SQL> --multi dblink
SQL> CREATE DATABASE LINK TEST_LINK connect to sys identified by sys using '127.0.0.1:1611';

CT-00604, Duplicate dblink name TEST_LINK
SQL> CREATE DATABASE LINK dbl_1 connect to sys identified by sys using '127.0.0.1:1611';

Succeed.

SQL> SELECT f1 FROM T1_DBLINK@dbl_1 order by f1;

F1
------------
1
7
8

3 rows fetched.

SQL>
SQL> --alter
SQL> ALTER DATABASE LINK TEST_LINK connect to sys1 identified by sys;

CT-01398, The dblink connecting to this user does not exist
SQL> ALTER DATABASE LINK TEST_LINK connect to sys identified by sys1;

Succeed.

SQL> SELECT f1 FROM T1_DBLINK@test_link order by f1;

CT-01218, [1:16]Connection status unexpected, node id = 449, error number = CT-00329, error message = 'Incorrect user or password'
SQL> ALTER DATABASE LINK TEST_LINK connect to sys identified by sys;

Succeed.

SQL> SELECT f1 FROM T1_DBLINK@test_link order by f1;

F1
------------
1
7
8

3 rows fetched.

SQL> SELECT OWNER, DB_LINK, USERNAME, HOST FROM ADM_DB_LINKS ORDER BY DB_LINK;

OWNER                                                            DB_LINK                                                          USERNAME                                                         HOST
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
SYS                                                              DBL_1                                                            SYS                                                              127.0.0.1:1611
SYS                                                              TEST_LINK                                                        SYS                                                              127.0.0.1:1611

2 rows fetched.

SQL> SELECT NODE_NAME, NODE_TYPE, NODE_HOST, NODE_PORT FROM SYS_DATA_NODES ORDER BY NODE_NAME;

NODE_NAME                                                        NODE_TYPE                                                        NODE_HOST                                                        NODE_PORT
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------
0-DBL_1                                                          datanode                                                         127.0.0.1                                                        1611
0-TEST_LINK                                                      datanode                                                         127.0.0.1                                                        1611

2 rows fetched.

SQL>
SQL> --in brackets
SQL> select f1 FROM (T1_DBLINK@test_link) order by f1;

F1
------------
1
7
8

3 rows fetched.

SQL> select * FROM (T1_DBLINK@test_link a) where a.f1 = 7;

F1
------------
7

1 rows fetched.

SQL> explain select * FROM T1_DBLINK@test_link join T1_DBLINK@test_link;

EXPLAIN PLAN OUTPUT
----------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
| Id  | Description      | Owner | Name | Rows | Cost | Bytes | Remark                                                                                             |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT |       |      |      |      |       |                                                                                                    |
| 1   |   REMOTE SCAN    |       |      |      |      |       | PUSHDOWN SQL: SELECT SYS.T1_DBLINK.F1,SYS.T1_DBLINK.F1 FROM SYS.T1_DBLINK INNER JOIN SYS.T1_DBLINK |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

6 rows fetched.

SQL> select * FROM T1_DBLINK@test_link join T1_DBLINK@test_link;

CT-01213, Node id = 449, error number = CT-00601, error message = 'Sql syntax error: column ambiguously defined'
SQL>
SQL> --error name
SQL> CREATE DATABASE LINK dblink@ CONNECT TO bpm IDENTIFIED BY Cantian_234 USING '127.0.0.1:1611';

CT-00601, [1:28]Sql syntax error: CONNECT expected
SQL> CREATE DATABASE LINK d#$%^&* CONNECT TO bpm IDENTIFIED BY Cantian_234 USING '127.0.0.1:1611';

CT-00601, [1:22]Sql syntax error: invalid database link name was found
SQL> CREATE DATABASE LINK dblink9 CONNECT TO d#$%^&* IDENTIFIED BY Cantian_234 USING '127.0.0.1:1611';

CT-00601, [1:41]Sql syntax error: invalid user name was found
SQL> CREATE DATABASE LINK d/*@*/uu CONNECT TO bpm IDENTIFIED BY Cantian_234 USING '127.0.0.1:1611';

CT-00601, [1:28]Sql syntax error: CONNECT expected
SQL> CREATE DATABASE LINK db/*542510*/! CONNECT TO bpm IDENTIFIED BY Cantian_234 USING '127.0.0.1:1611';

CT-00601, [1:34]Sql syntax error: CONNECT expected
SQL> CREATE DATABASE LINK dblinkdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd CONNECT TO bpm IDENTIFIED BY Cantian_234 USING '127.0.0.1:1611';

CT-00601, Sql syntax error: object is too long or varaint name
SQL>
SQL> --Assert raised, expect: remote_cursor->current_stmt_index < remote_cursor->stmt_count
SQL> DROP TABLE IF EXISTS T2_DBLINK;

Succeed.

SQL> CREATE TABLE T2_DBLINK(F1 INT);

Succeed.

SQL> explain SELECT 1 AS C0 FROM (T2_DBLINK@TEST_LINK CROSS JOIN T1_DBLINK@dbl_1) FULL OUTER JOIN SYS_DUMMY ON (true);

EXPLAIN PLAN OUTPUT
----------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------
| Id  | Description            | Owner | Name      | Rows | Cost | Bytes | Remark                                     |
-----------------------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT       |       |           |      |      |       |                                            |
| 1   |   NESTED LOOPS FULL    |       |           |      |      |       |                                            |
| 2   |     NESTED LOOPS       |       |           |      |      |       |                                            |
| 3   |       REMOTE SCAN      |       |           |      |      |       | PUSHDOWN SQL: SELECT 1  FROM SYS.T2_DBLINK |
| 4   |       REMOTE SCAN      |       |           |      |      |       | PUSHDOWN SQL: SELECT 1  FROM SYS.T1_DBLINK |
| 5   |     TABLE ACCESS FULL  | SYS   | SYS_DUMMY |      |      |       |                                            |
-----------------------------------------------------------------------------------------------------------------------

10 rows fetched.

SQL> SELECT 1 AS C0 FROM (T2_DBLINK@TEST_LINK CROSS JOIN T1_DBLINK@dbl_1) FULL OUTER JOIN SYS_DUMMY ON (true);

C0
------------
1

1 rows fetched.

SQL> DROP TABLE T2_DBLINK;

Succeed.

SQL>
SQL> --deparse error
SQL> drop table if exists temp001_0526;

Succeed.

SQL> create table temp001_0526(f1 int, f2 varchar(100), f3 raw(100));

Succeed.

SQL> explain select case when max(f2) over(partition by f1 order by f2 asc) > max(f2) then 1 else 2 end from temp001_0526@TEST_LINK group by f2,f1;

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
| Id  | Description       | Owner | Name | Rows | Cost | Bytes | Remark                                           |
-------------------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT  |       |      |      |      |       |                                                  |
| 1   |   WINDOW SORT     |       |      |      |      |       |                                                  |
| 2   |     HASH GROUP BY |       |      |      |      |       |                                                  |
| 3   |       REMOTE SCAN |       |      |      |      |       | PUSHDOWN SQL: SELECT F1,F2 FROM SYS.TEMP001_0526 |
-------------------------------------------------------------------------------------------------------------------

8 rows fetched.

SQL> select case when max(f2) over(partition by f1 order by f2 asc) > max(f2) then 1 else 2 end from temp001_0526@TEST_LINK group by f2,f1;

CASE WHEN MAX(F2) OVER(PARTITION BY F1 ORDER BY F2 ASC) > MAX(F2
----------------------------------------------------------------

0 rows fetched.

SQL> drop table temp001_0526;

Succeed.

SQL>
SQL> --not support
SQL> DROP TABLE IF EXISTS T_FOR_PIVOT;

Succeed.

SQL> CREATE TABLE T_FOR_PIVOT (CITY VARCHAR(10),DAY_1 VARCHAR(20),TEMPERATURE INT);

Succeed.

SQL> INSERT INTO T_FOR_PIVOT VALUES('BJ','MONDAY','30');

1 rows affected.

SQL> INSERT INTO T_FOR_PIVOT VALUES('BJ','TUESDAY','32');

1 rows affected.

SQL> COMMIT;

Succeed.

SQL> DROP TABLE IF EXISTS T_FOR_UNPIVOT;

Succeed.

SQL> CREATE TABLE T_FOR_UNPIVOT(CITY VARCHAR(10),MONDAY INT,TUESDAY INT);

Succeed.

SQL> INSERT INTO T_FOR_UNPIVOT VALUES ('BJ','30','32');

1 rows affected.

SQL> INSERT INTO T_FOR_UNPIVOT VALUES ('BJ','','');

1 rows affected.

SQL> COMMIT;

Succeed.

SQL> SELECT * FROM T_FOR_PIVOT@dbl_1 PIVOT(MAX(TEMPERATURE) FOR DAY_1 IN ('MONDAY','TUESDAY'));

CT-00101, [1:33]Capability: pivot or unpivot on dblink table not supported
SQL> SELECT * FROM T_FOR_UNPIVOT@dbl_1 UNPIVOT EXCLUDE NULLS(TEMPERATURE FOR DAY_1 IN (MONDAY, TUESDAY));

CT-00101, [1:35]Capability: pivot or unpivot on dblink table not supported
SQL> --join +
SQL> select * from T1_DBLINK@test_link l,T1_DBLINK@test_link m where l.f1=m.f1(+);

CT-00101, Capability: join with '(+)' on dblink is not supported
SQL> --json
SQL> drop table if exists tbl_json_memy_002;

Succeed.

SQL> create table tbl_json_memy_002(id int,c_bigint bigint,c_json clob check(c_json is json));

Succeed.

SQL> select t2.* from tbl_json_memy_002@test_link t1,json_table(t1.c_json,'$' null on error columns(f1 varchar2(100) path '$.A10000.k50000',f2 varchar2(100) path '$.A20000.k100000',f3 varchar2(100) path '$.A30000.k150000',f4 varchar2(100) path '$.A40000.k200000',f5 varchar2(100) path '$.A60000.k300000',f6 varchar2(100) path '$.A70000.k350000',f7 varchar2(100) path '$.A80000.k400000') ) t2 where t1.id>13;

CT-00101, Capability: Json table on dblink is not supported
SQL> drop table if exists t_DBLINK_001;

Succeed.

SQL> CREATE TABLE t_DBLINK_001(
  2 COL_1 int,
  3 COL_2 integer,
  4 COL_3 int,
  5 COL_4 real,
  6 COL_5 number,
  7 COL_6 float,
  8 COL_7 decimal(12,6),
  9 COL_8 number,
 10 COL_9 numeric,
 11 COL_10 char(30),
 12 COL_11 varchar(30),
 13 COL_12 varchar2(4000 char),
 14 COL_13 blob,
 15 COL_14 date,
 16 COL_15 date,
 17 COL_16 timestamp,
 18 COL_17 timestamp with time zone,
 19 COL_18 timestamp with local time zone,
 20 COL_19 char(30),
 21 COL_20 char(30),
 22 COL_21 interval year to month,
 23 COL_22 interval day to second,
 24 col_23 blob,
 25 col_24 clob
 26 );

Succeed.

SQL> --error
SQL> select
  2 distinct
  3 min(COL_2) over (partition by (select COL_2 from t_DBLINK_001@test_link where COL_2 =y.COL_2) ) AS COL_2 ,
  4 (select COL_5 from t_DBLINK_001 where COL_2 =y.COL_2) AS c3
  5 from t_DBLINK_001 y group  by COL_2;

CT-00101, Capability: subquery contain group by column not supported
SQL> --error
SQL> select
  2 distinct
  3 (select COL_2 from t_DBLINK_001@test_link where COL_2 =y.COL_2)  AS COL_2 ,
  4 (select COL_5 from t_DBLINK_001 where COL_2 =y.COL_2) AS c3
  5 from t_DBLINK_001 y group by COL_2;

CT-00101, Capability: subquery contain group by column not supported
SQL> --error
SQL> select
  2 distinct
  3 min(COL_2) over (partition by (select COL_2 from t_DBLINK_001@test_link where COL_2 =y.COL_2) ) AS COL_2
  4 from t_DBLINK_001 y group by COL_2;

CT-00101, Capability: subquery contain group by column not supported
SQL> --predicate
SQL> EXPLAIN SELECT
  2 STDDEV_SAMP(CAST(NULL AS BINARY_INTEGER)) AS C0
  3 FROM
  4 (t_DBLINK_001@test_link AS REF_0)
  5  LEFT OUTER JOIN
  6 ((SELECT 'a' AS C3 FROM T1_DBLINK@test_link ) AS SUBQ_0)
  7 ON (SUBQ_0.C3 REGEXP '.*')
  8 WHERE
  9 exists ( SELECT 1 FROM tbl_json_memy_002 AS REF_3 WHERE SUBQ_0.C3 in ( 'a', 'b'));

EXPLAIN PLAN OUTPUT
----------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| Id  | Description              | Owner | Name                    | Rows | Cost | Bytes | Remark                                                                                                                                                                           |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT         |       |                         |      |      |       |                                                                                                                                                                                  |
| 1   |   AGGR                   |       |                         |      |      |       |                                                                                                                                                                                  |
| 2   |     FILTER               |       |                         |      |      |       |                                                                                                                                                                                  |
| 3   |       REMOTE SCAN        |       |                         |      |      |       | PUSHDOWN SQL: SELECT SUBQ_0.C3 FROM SYS.T_DBLINK_001 REF_0 INNER JOIN (SELECT 'a' AS C3 FROM SYS.T1_DBLINK WHERE  ( 'a' )  IN ( 'a','b' )  AND 'a' REGEXP '.*') SUBQ_0 ON  TRUE  |
| 4   |     FILTER               |       |                         |      |      |       |                                                                                                                                                                                  |
| 5   |       TABLE ACCESS FULL  | SYS   | TBL_JSON_MEMY_002 REF_3 |      |      |       |                                                                                                                                                                                  |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

10 rows fetched.

SQL> --rewrite core
SQL> SELECT
  2  SUBQ_1.C2 | SUBQ_1.C2
  3 FROM
  4 (SELECT
  5  SUBQ_0.C3 AS C2
  6  FROM
  7  (SELECT
  8   NULL AS C1,
  9   NULL AS C3
 10   FROM
 11   t_DBLINK_001@test_link
 12  ) AS SUBQ_0
 13 ) AS SUBQ_1
 14 ORDER BY 1;

SUBQ_1.C2 | SUBQ_1.C2
---------------------

0 rows fetched.

SQL> --project_col_info->col not set in subselect
SQL> SELECT
  2     SUBQ_1.C2 | SUBQ_1.C3 as XXX
  3 FROM
  4     (SELECT
  5         1 AS C0,
  6         TRUE AS C1,
  7         SUBQ_0.C0 AS C2,
  8         SUBQ_0.C0 AS C3
  9       FROM
 10         (SELECT NULL AS C0 FROM t_DBLINK_001@test_link) AS SUBQ_0
 11     ) AS SUBQ_1
 12 ORDER BY 1, SUBQ_1.C1;

XXX
--------------------

0 rows fetched.

SQL>
SQL> --sqlkiller core
SQL> drop TABLE if exists "OM_PROVISION_TEST_RECORD";

Succeed.

SQL> CREATE TABLE "OM_PROVISION_TEST_RECORD"
  2 (
  3   "SEQ_ID" NUMBER(20) NOT NULL,
  4   "BE_ID" NUMBER(10) NOT NULL,
  5   "TEST_NAME" VARCHAR(256 BYTE) NOT NULL,
  6   "ORDER_ID" NUMBER(20) NOT NULL,
  7   "PROV_REQ_SEQ" NUMBER(20) NOT NULL,
  8   "OPERATOR_ID" NUMBER(20),
  9   "CREATE_TIME" DATE NOT NULL,
 10   "LAST_MODIFY_TIME" DATE NOT NULL,
 11   "TENANT_ID" NUMBER(20),
 12   "C_EX_FIELD1" VARCHAR(255 BYTE),
 13   "C_EX_FIELD2" VARCHAR(255 BYTE),
 14   "C_EX_FIELD3" VARCHAR(255 BYTE),
 15   "C_EX_FIELD4" VARCHAR(255 BYTE),
 16   "C_EX_FIELD5" VARCHAR(255 BYTE)
 17 );

Succeed.

SQL> drop TABLE if exists "OM_PROVISION_REQ_PROP";

Succeed.

SQL> CREATE TABLE "OM_PROVISION_REQ_PROP"
  2 (
  3   "SEQ_ID" NUMBER(20) NOT NULL,
  4   "BE_ID" NUMBER(10) NOT NULL,
  5   "PROV_REQ_SEQ" NUMBER(20) NOT NULL,
  6   "SUB_ORDER_ID" NUMBER(20) NOT NULL,
  7   "SUB_EXTERNAL_ID" VARCHAR(256 BYTE),
  8   "TRANSFERMATION_REF" VARCHAR(256 BYTE),
  9   "FORMAT_LINE" VARCHAR(4000 BYTE),
 10   "CREATE_TIME" DATE NOT NULL,
 11   "ORDER_MODEL_ATTACH_ID" VARCHAR(32 BYTE),
 12   "FORMAT_LINE1" VARCHAR(4000 BYTE),
 13   "FORMAT_LINE2" VARCHAR(4000 BYTE),
 14   "FORMAT_LINE3" VARCHAR(4000 BYTE),
 15   "FORMAT_LINE4" VARCHAR(4000 BYTE),
 16   "TENANT_ID" NUMBER(20),
 17   "C_EX_FIELD1" VARCHAR(255 BYTE),
 18   "C_EX_FIELD2" VARCHAR(255 BYTE),
 19   "C_EX_FIELD3" VARCHAR(255 BYTE),
 20   "C_EX_FIELD4" VARCHAR(255 BYTE),
 21   "C_EX_FIELD5" VARCHAR(255 BYTE),
 22   "FORMAT_LINE5" VARCHAR(4000 BYTE),
 23   "FORMAT_LINE6" VARCHAR(4000 BYTE),
 24   "FORMAT_LINE7" VARCHAR(4000 BYTE),
 25   "FORMAT_LINE8" VARCHAR(4000 BYTE)
 26 );

Succeed.

SQL> drop TABLE if exists "D_RNC";

Succeed.

SQL> CREATE TABLE "D_RNC"
  2 (
  3   "NEID" NUMBER,
  4   "RNCNAME" VARCHAR(10 BYTE)
  5 );

Succeed.

SQL> drop TABLE if exists "OM_RES_BUSI_HIS";

Succeed.

SQL> CREATE TABLE "OM_RES_BUSI_HIS"("NEID" NUMBER, "RNCNAME" VARCHAR(10 BYTE));

Succeed.

SQL> drop TABLE if exists "OM_SHIPPING_INFO_HIS";

Succeed.

SQL> CREATE TABLE "OM_SHIPPING_INFO_HIS"
  2 (
  3   "SHIPPING_ID" NUMBER(20) NOT NULL,
  4   "ORDER_ID" NUMBER(20) NOT NULL,
  5   "SHIPPING_CARRIER_ID" VARCHAR(16 BYTE) NOT NULL,
  6   "SHIPPING_MODE_ID" VARCHAR(20 BYTE),
  7   "SHIPPING_METHOD_ID" VARCHAR(16 BYTE),
  8   "CONTACT_INFO_ID" NUMBER(20),
  9   "ADDR_ID" NUMBER(20),
 10   "SHIPPING_TIME_LIMIT" VARCHAR(4 BYTE),
 11   "SHIPPING_FROM_DATE" DATE,
 12   "SHIPPING_TO_DATE" DATE,
 13   "REMARK" VARCHAR(255 BYTE),
 14   "PRINT_INVOICE_FLAG" VARCHAR(1 BYTE),
 15   "FULFILLMENT_CENTER" VARCHAR(64 BYTE),
 16   "CREATE_TIME" DATE,
 17   "SHIPPING_STATUS" VARCHAR(32 BYTE),
 18   "BE_ID" NUMBER(10),
 19   "PARTITION_ID" NUMBER(8) NOT NULL,
 20   "EX_FIELD1" VARCHAR(32 BYTE),
 21   "EX_FIELD2" VARCHAR(32 BYTE),
 22   "EX_FIELD3" VARCHAR(32 BYTE),
 23   "EX_FIELD4" VARCHAR(32 BYTE),
 24   "EX_FIELD5" VARCHAR(32 BYTE),
 25   "EX_FIELD6" VARCHAR(32 BYTE),
 26   "EX_FIELD7" VARCHAR(32 BYTE),
 27   "EX_FIELD8" VARCHAR(32 BYTE),
 28   "EX_FIELD9" VARCHAR(32 BYTE),
 29   "EX_FIELD10" VARCHAR(32 BYTE),
 30   "EX_FIELD11" VARCHAR(32 BYTE),
 31   "EX_FIELD12" VARCHAR(32 BYTE),
 32   "EX_FIELD13" VARCHAR(32 BYTE),
 33   "EX_FIELD14" VARCHAR(32 BYTE),
 34   "EX_FIELD15" VARCHAR(32 BYTE),
 35   "EX_FIELD16" VARCHAR(32 BYTE),
 36   "EX_FIELD17" VARCHAR(32 BYTE),
 37   "EX_FIELD18" VARCHAR(32 BYTE),
 38   "EX_FIELD19" VARCHAR(32 BYTE),
 39   "EX_FIELD20" VARCHAR(32 BYTE),
 40   "HIS_DATE" DATE,
 41   "TENANT_ID" NUMBER(20),
 42   "C_EX_FIELD1" VARCHAR(32 BYTE),
 43   "C_EX_FIELD2" VARCHAR(32 BYTE),
 44   "C_EX_FIELD3" VARCHAR(32 BYTE),
 45   "C_EX_FIELD4" VARCHAR(32 BYTE),
 46   "C_EX_FIELD5" VARCHAR(32 BYTE),
 47   "C_EX_FIELD6" VARCHAR(32 BYTE),
 48   "C_EX_FIELD7" VARCHAR(32 BYTE),
 49   "C_EX_FIELD8" VARCHAR(32 BYTE),
 50   "C_EX_FIELD9" VARCHAR(32 BYTE),
 51   "C_EX_FIELD10" VARCHAR(32 BYTE),
 52   "C_EX_FIELD11" VARCHAR(32 BYTE),
 53   "C_EX_FIELD12" VARCHAR(32 BYTE),
 54   "C_EX_FIELD13" VARCHAR(32 BYTE),
 55   "C_EX_FIELD14" VARCHAR(32 BYTE),
 56   "C_EX_FIELD15" VARCHAR(32 BYTE),
 57   "C_EX_FIELD16" VARCHAR(32 BYTE),
 58   "C_EX_FIELD17" VARCHAR(32 BYTE),
 59   "C_EX_FIELD18" VARCHAR(32 BYTE),
 60   "C_EX_FIELD19" VARCHAR(32 BYTE),
 61   "C_EX_FIELD20" VARCHAR(32 BYTE),
 62   "RETURN_FLAG" VARCHAR(32 BYTE),
 63   "OP_CODE" VARCHAR(1 BYTE),
 64   "REF_SHIPPING_ID" NUMBER(20),
 65   "INVOICE_URL" VARCHAR(1024 BYTE),
 66   "EXTERNAL_SHIPPING_ID" VARCHAR(32 BYTE),
 67   "RESOURCE_RESERVE_NO" VARCHAR(32 BYTE)
 68 );

Succeed.

SQL> SELECT
  2 MAX( CAST( NULL AS TIMESTAMP( 6 ) WITH TIME ZONE )) AS C0
  3 FROM
  4 (( OM_PROVISION_TEST_RECORD@test_link AS REF_0 ) FULL
  5 OUTER JOIN ( D_RNC@test_link AS REF_1 ) ON
  6 ( TO_BLOB( '' ) IN (
  7 SELECT
  8 '0' AS C1
  9 FROM
 10 OM_PROVISION_REQ_PROP@test_link AS REF_2
 11 WHERE
 12 TRUE
 13 LIMIT 28 OFFSET 85 )))
 14 INNER JOIN ( OM_SHIPPING_INFO_HIS@test_link AS REF_3 ) ON
 15 ( FALSE )
 16 WHERE
 17 CURRENT_TIMESTAMP() < CAST( '2021-05-25 17:55:07' AS TIMESTAMP( 6 ))
 18 ORDER BY
 19 MAX( CAST( NULL AS TIMESTAMP( 6 ) WITH TIME ZONE )) DESC LIMIT 55;

C0
----------------------------------------


1 rows fetched.

SQL>
SQL> --winsort
SQL> insert into D_RNC values (1,'123'),(2,'asdfasdf'),(3,'dfdd');

3 rows affected.

SQL> insert into OM_RES_BUSI_HIS values (1,'123'),(2,'asdfasdf'),(3,'dfdd');

3 rows affected.

SQL> commit;

Succeed.

SQL> --origin sql
SQL> SELECT
  2 COUNT(CAST(NULL AS VARBINARY(100))) OVER
  3 (PARTITION BY SUBQ_0.C4
  4  ORDER BY SUBQ_0.C0 DESC,SUBQ_0.C3 DESC NULLS LAST ROWS
  5  BETWEEN NVL2( CAST(CASE WHEN  SUBQ_0.C1 REGEXP '.*' THEN  SUBQ_0.C3 ELSE SUBQ_0.C3 END AS BINARY_UINT32),
  6                CAST(SUBQ_0.C3 AS BINARY_UINT32),
  7    CAST(CASE WHEN  SUBQ_0.C1 = SUBQ_0.C1 THEN  SUBQ_0.C3 ELSE  SUBQ_0.C3 END AS BINARY_UINT32)
  8   ) FOLLOWING AND UNBOUNDED FOLLOWING
  9 ) AS C0,
 10 SUBQ_0.C4 AS C1,
 11 SUBQ_0.C4 AS C2
 12 FROM (D_RNC@test_link AS REF_0)
 13 FULL OUTER JOIN
 14 ((SELECT
 15    CAST('313634 8:34:55' AS INTERVAL DAY(7) TO SECOND) AS C0,
 16    NULL AS C1,
 17    NULL AS C2,
 18    NULL AS C3,
 19    CAST('2021-05-27 02:27:06' AS TIMESTAMP WITH TIME ZONE) AS C4
 20    FROM
 21   OM_RES_BUSI_HIS@test_link AS REF_1
 22    WHERE 'v74(vg$s)J_&;MZ-sxl0HiEy@h3N_{5G%qsj1OtZRB4/#1C5?g' LIKE '%') AS SUBQ_0)
SQL> ON (SUBQ_0.C1 REGEXP '.*')
  2 WHERE TRUE ORDER BY SUBQ_0.C2 NULLS LAST,3 DESC;

CT-00601, [5:9]Sql syntax error: windowing border value cannot be NULL
SQL> --simple sql
SQL> SELECT
  2 COUNT(CAST(NULL AS VARBINARY(100))) OVER
  3 (ORDER BY SUBQ_0.C3 ROWS BETWEEN NVL2(SUBQ_0.C3, 1, 0) FOLLOWING AND UNBOUNDED FOLLOWING) AS C0
  4 FROM
  5 D_RNC@test_link AS REF_0
  6 ,
  7 (SELECT
  8  NULL AS C3
  9  FROM OM_RES_BUSI_HIS@test_link AS REF_1
 10 ) AS SUBQ_0;

C0
--------------------
0
0
0
0
0
0
0
0
0

9 rows fetched.

SQL> --group by NULL
SQL> SELECT
  2   NULL AS C0,
  3   MIN(
  4     CAST(CURRENT_TIMESTAMP() AS TIMESTAMP)) AS C1
  5 FROM
  6   D_RNC@test_link AS REF_0
  7 WHERE CAST('2021-06-02 09:45:00' AS TIMESTAMP(6) WITH TIME ZONE) BETWEEN
  8   NULL AND
  9   CURRENT_TIMESTAMP()
 10 GROUP BY
 11   NULL
 12 LIMIT 19, 58;

C0 C1
-- --------------------------------

0 rows fetched.

SQL> explain SELECT
  2   NULL AS C0,
  3   MIN(
  4     CAST(CURRENT_TIMESTAMP() AS TIMESTAMP)) AS C1
  5 FROM
  6   D_RNC@test_link AS REF_0
  7 WHERE CAST('2021-06-02 09:45:00' AS TIMESTAMP(6) WITH TIME ZONE) BETWEEN
  8   NULL AND
  9   CURRENT_TIMESTAMP()
 10 GROUP BY
 11   NULL
 12 LIMIT 19, 58;

EXPLAIN PLAN OUTPUT
----------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| Id  | Description      | Owner | Name | Rows | Cost | Bytes | Remark                                                                                                                                                                                              |
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT |       |      |      |      |       |                                                                                                                                                                                                     |
| 1   |   QUERY LIMIT    |       |      |      |      |       |                                                                                                                                                                                                     |
| 2   |     REMOTE SCAN  |       |      |      |      |       | PUSHDOWN SQL: SELECT NULL AS C0, MIN(CAST(? AS TIMESTAMP(6))) AS C1 FROM SYS.D_RNC REF_0 WHERE CAST('2021-06-02 09:45:00' AS TIMESTAMP(6) WITH TIME ZONE) BETWEEN NULL AND ? GROUP BY NULL LIMIT 77 |
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

7 rows fetched.

SQL> --no arg func
SQL> SELECT DISTINCT
  2   SUM(
  3    CAST(CURRENT_LOCAL_SCN() AS BINARY_BIGINT)) AS C0,
  4   AVG(
  5     CAST(CURRENT_LOCAL_SCN() AS BINARY_BIGINT)) AS C1
  6 FROM
  7   D_RNC@test_link AS REF_0
  8 WHERE TRUE
  9 ORDER BY
 10   SUM(
 11     CAST(CURRENT_LOCAL_SCN() AS BINARY_BIGINT))  NULLS FIRST,
 12   1 DESC NULLS FIRST
 13 LIMIT 42 OFFSET 58;

C0                                       C1
---------------------------------------- ----------------------------------------

0 rows fetched.

SQL>
SQL> --local table subselect join dblink table
SQL> drop table if exists par_group1;

Succeed.

SQL> create table par_group1(a int, b int ,c int);

Succeed.

SQL> insert into par_group1 values(1,2,3);

1 rows affected.

SQL> insert into par_group1 values(1,2,3);

1 rows affected.

SQL> commit;

Succeed.

SQL> drop table if exists par_group_link;

Succeed.

SQL> create table par_group_link(a int, b int ,c int);

Succeed.

SQL> insert into par_group_link values(1,2,3);

1 rows affected.

SQL> commit;

Succeed.

SQL> explain select * from (select b from par_group1 group by b) join par_group_link@TEST_LINK;

EXPLAIN PLAN OUTPUT
----------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
| Id  | Description                | Owner | Name       | Rows | Cost | Bytes | Remark                                             |
------------------------------------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT           |       |            |      |      |       |                                                    |
| 1   |   NESTED LOOPS             |       |            |      |      |       |                                                    |
| 2   |     SUBSELECT              |       |            |      |      |       |                                                    |
| 3   |       HASH GROUP BY        |       |            |      |      |       |                                                    |
| 4   |         TABLE ACCESS FULL  | SYS   | PAR_GROUP1 |      |      |       |                                                    |
| 5   |     REMOTE SCAN            |       |            |      |      |       | PUSHDOWN SQL: SELECT A,B,C FROM SYS.PAR_GROUP_LINK |
------------------------------------------------------------------------------------------------------------------------------------

10 rows fetched.

SQL> select * from (select b from par_group1 group by b) join par_group_link@TEST_LINK;

B            A            B            C
------------ ------------ ------------ ------------
2            1            2            3

1 rows fetched.

SQL> explain select count(*) from par_group_link@TEST_LINK union all select count(*) from (select 1 from sys_dummy);

EXPLAIN PLAN OUTPUT
----------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------
| Id  | Description                | Owner | Name      | Rows | Cost | Bytes | Remark                                                |
--------------------------------------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT           |       |           |      |      |       |                                                       |
| 1   |   UNION ALL                |       |           |      |      |       |                                                       |
| 2   |     AGGR                   |       |           |      |      |       |                                                       |
| 3   |       REMOTE SCAN          |       |           |      |      |       | PUSHDOWN SQL: SELECT COUNT(*) FROM SYS.PAR_GROUP_LINK |
| 4   |     AGGR                   |       |           |      |      |       |                                                       |
| 5   |       SUBSELECT            |       |           |      |      |       |                                                       |
| 6   |         TABLE ACCESS FULL  | SYS   | SYS_DUMMY |      |      |       |                                                       |
--------------------------------------------------------------------------------------------------------------------------------------

11 rows fetched.

SQL> select count(*) from par_group_link@TEST_LINK union all select count(*) from (select 1 from sys_dummy);

COUNT(*)
--------------------
1
1

2 rows fetched.

SQL> select count(*) from par_group_link@TEST_LINK union all select max(3) from (select 1 from sys_dummy);

COUNT(*)
--------------------
1
3

2 rows fetched.

SQL> select count(*) from par_group_link@TEST_LINK union all select 1 from (select 1 from sys_dummy);

COUNT(*)
--------------------
1
1

2 rows fetched.

SQL>
SQL> --patition
SQL> drop table if exists t_base_001;

Succeed.

SQL> create table t_base_001(id number,c_int decimal,c_vchar varchar(100),c_clob clob,c_blob blob,c_date date)
  2 PARTITION BY RANGE(id)
  3 (
  4 PARTITION p1 VALUES LESS THAN(5),
  5 PARTITION p2 VALUES LESS THAN(50),
  6 PARTITION p3 VALUES LESS THAN(maxvalue)
  7 );

Succeed.

SQL> insert into t_base_001 values(-100,-110,-120,lpad('123abc',50,'abc'),lpad('11100011',50,'1100'),to_timestamp(to_char('1800-01-01 10:51:47'),'yyyy-mm-dd hh24:mi:ss'));

1 rows affected.

SQL> CREATE or replace procedure proc_insert(tname varchar,startall int,endall int) as
  2 sqlst varchar(500);
  3 BEGIN
  4   FOR i IN startall..endall LOOP
  5             sqlst := 'insert into ' || tname ||' select id+'||i||',c_int+'||i||',c_vchar+'||i||',c_clob||'||i||',c_blob'||',c_date from '||tname|| ' where id=-100';
  6         execute immediate sqlst;
  7   END LOOP;
  8 END;
  9 /

Succeed.

SQL> call proc_insert('t_base_001',1,250);

PL/SQL procedure successfully completed.

SQL> commit;

Succeed.

SQL> create index idx_t_base_001_001 on t_base_001(id);

Succeed.

SQL> select count(*) from t_base_001@test_link t1 join t_base_001 partition(p2) t2 on t1.id=t2.id where t1.id<10 or t2.id<'-20';

COUNT(*)
--------------------
5

1 rows fetched.

SQL>
SQL> --drop
SQL> drop table t_base_001;

Succeed.

SQL> drop procedure proc_insert;

Succeed.

SQL> DROP TABLE "OM_PROVISION_TEST_RECORD";

Succeed.

SQL> DROP TABLE "OM_PROVISION_REQ_PROP";

Succeed.

SQL> DROP TABLE "D_RNC";

Succeed.

SQL> DROP TABLE "OM_RES_BUSI_HIS";

Succeed.

SQL> DROP TABLE "OM_SHIPPING_INFO_HIS";

Succeed.

SQL> DROP DATABASE LINK TEST_LINK;

Succeed.

SQL> DROP DATABASE LINK dbl_1;

Succeed.

SQL> drop table par_group1;

Succeed.

SQL> drop table par_group_link;

Succeed.

SQL> SELECT F1 FROM T1_DBLINK@test_link;

CT-01398, [1:16]The dblink TEST_LINK does not exist
SQL> SELECT OWNER, DB_LINK, USERNAME, HOST FROM ADM_DB_LINKS ORDER BY DB_LINK;

OWNER                                                            DB_LINK                                                          USERNAME                                                         HOST
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> SELECT NODE_NAME, NODE_TYPE, NODE_HOST, NODE_PORT FROM SYS_DATA_NODES ORDER BY NODE_NAME;

NODE_NAME                                                        NODE_TYPE                                                        NODE_HOST                                                        NODE_PORT
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------

0 rows fetched.

SQL>
SQL> ALTER DATABASE LINK dblink1 connect to sys identified by sys;

CT-01398, The dblink DBLINK1 does not exist
SQL> CREATE DATABASE LINK dblink1 connect to sys identified by sys using '127.0.0.1:1611';

Succeed.

SQL> CREATE DATABASE LINK dblink1 connect to sys identified by sys using '127.0.0.1:1611';

CT-00604, Duplicate dblink name DBLINK1
SQL> ALTER DATABASE LINK dblink1 connect to sys identified by sys;

Succeed.

SQL> drop DATABASE LINK dblink1;

Succeed.

SQL> drop DATABASE LINK dblink1;

CT-01398, The dblink DBLINK1 does not exist
SQL> ALTER DATABASE LINK dblink1 connect to sys identified by sys;

CT-01398, The dblink DBLINK1 does not exist
SQL> DROP TABLE T1_DBLINK;

Succeed.

SQL> DROP TABLE T_FOR_PIVOT;

Succeed.

SQL> DROP TABLE T_FOR_UNPIVOT;

Succeed.

SQL> drop table tbl_json_memy_002;

Succeed.

SQL> DROP TABLE t_DBLINK_001;

Succeed.

SQL>
SQL> --2pc core
SQL> drop user if exists pp cascade;

Succeed.

SQL> create user pp identified by Cantian_234;

Succeed.

SQL> grant dba to pp;

Succeed.

SQL> drop user if exists qq cascade;

Succeed.

SQL> create user qq identified by Cantian_234;

Succeed.

SQL> grant dba to qq;

Succeed.

SQL> conn pp/Cantian_234@127.0.0.1:1611

connected.

SQL> drop table if exists t_DBLINK_001;

Succeed.

SQL> CREATE TABLE t_DBLINK_001(COL_1 int);

Succeed.

SQL> insert into t_DBLINK_001 values (10);

1 rows affected.

SQL> commit;

Succeed.

SQL> conn qq/Cantian_234@127.0.0.1:1611

connected.

SQL> drop table if exists t_DBLINK_002;

Succeed.

SQL> CREATE TABLE t_DBLINK_002(COL_1 int);

Succeed.

SQL> insert into t_DBLINK_002 values (10);

1 rows affected.

SQL> commit;

Succeed.

SQL> CREATE DATABASE LINK dblink1 CONNECT TO pp IDENTIFIED BY Cantian_234 USING '127.0.0.1:1611';

Succeed.

SQL> CREATE DATABASE LINK dblink2 CONNECT TO qq IDENTIFIED BY Cantian_234 USING '127.0.0.1:1611';

Succeed.

SQL> select count(*) from t_DBLINK_001@DBLINK1;

COUNT(*)
--------------------
1

1 rows fetched.

SQL> select count(*) from (t_DBLINK_001@DBLINK1);

COUNT(*)
--------------------
1

1 rows fetched.

SQL> select t0.COL_1,t1.col_1 from t_DBLINK_002@DBLINK2 t0,t_DBLINK_001@DBLINK1 t1 where t0.COL_1=t1.col_1;

COL_1        COL_1
------------ ------------
10           10

1 rows fetched.

SQL> --create/alter/drop dblink for other user
SQL> CREATE DATABASE LINK pp.dblink1 CONNECT TO pp IDENTIFIED BY Cantian_234 USING '127.0.0.1:1611';

CT-00101, [1:22]Capability: Creating database link for other user is not supported
SQL> ALTER DATABASE LINK pp.dblink1 CONNECT TO pp IDENTIFIED BY Cantian_2345;

CT-00101, [1:21]Capability: Altering database link for other user is not supported
SQL> DROP DATABASE LINK pp.dblink1;

CT-00101, [1:20]Capability: Dropping database link for other user is not supported
SQL> drop table t_DBLINK_002;

Succeed.

SQL> DROP DATABASE LINK dblink1;

Succeed.

SQL> DROP DATABASE LINK dblink2;

Succeed.

SQL> conn sys/Huawei@123@127.0.0.1:1611

connected.

SQL> drop user pp cascade;

Succeed.

SQL> drop user qq cascade;

Succeed.

SQL>
SQL> create user u_drop identified by Cantian_234;

Succeed.

SQL> grant dba to u_drop;

Succeed.

SQL> conn u_drop/Cantian_234@127.0.0.1:1611

connected.

SQL> CREATE DATABASE LINK dblink_drop CONNECT TO u_drop IDENTIFIED BY Cantian_234 USING '127.0.0.1:1611';

Succeed.

SQL> conn sys/Huawei@123@127.0.0.1:1611

connected.

SQL> drop user u_drop cascade;

Succeed.

SQL> select count(*) from sys_links where name = 'DBLINK_DROP';

COUNT(*)
--------------------
0

1 rows fetched.

SQL> --20210803
SQL> drop user if exists test0803 cascade;

Succeed.

SQL> create user test0803 identified by Cantian_234;

Succeed.

SQL> grant dba to test0803;

Succeed.

SQL> CREATE DATABASE LINK dblink1 CONNECT TO test0803 IDENTIFIED BY Cantian_234 USING '127.0.0.1:1611';

Succeed.

SQL> drop table if exists test0803.t_DBLINK_001;

Succeed.

SQL> CREATE TABLE  test0803.t_DBLINK_001(
  2      COL_1 int,
  3      COL_2 integer,
  4      COL_3 int,
  5      COL_4 real,
  6      COL_5 number
  7 );

Succeed.

SQL> begin
  2     for i in 1..20 loop
  3       insert into test0803.t_DBLINK_001 values(
  4       i,
  5       i+1,
  6       i+2,
  7       i+3.1415926,
  8       i+445.255
  9       );
 10       commit;
 11     end loop;
 12 end;
 13 /

PL/SQL procedure successfully completed.

SQL> select  t0.COL_1 ,f3 from (select  to_char(COL_1) new_COL_1, COL_1,nvl(sum(COL_1),0) f1, nvl(sum(COL_2),0) f2, nvl(sum(COL_1) / sum(COL_2),0) f3 from test0803.t_DBLINK_001@dblink1 where COL_1 <20 group by COL_1) t0 cross join test0803.t_DBLINK_001@dblink1 t where t.COL_1=t0.COL_1 order by t0.COL_1 limit 12;

COL_1        F3
------------ --------------------
1            0.5
2            0.666666666666667
3            0.75
4            0.8
5            0.833333333333333
6            0.857142857142857
7            0.875
8            0.888888888888889
9            0.9
10           0.909090909090909
11           0.916666666666667
12           0.923076923076923

12 rows fetched.

SQL> explain select  t0.COL_1 ,f3 from (select  to_char(COL_1) new_COL_1, COL_1,nvl(sum(COL_1),0) f1, nvl(sum(COL_2),0) f2, nvl(sum(COL_1) / sum(COL_2),0) f3 from test0803.t_DBLINK_001@dblink1 where COL_1 <20 group by COL_1) t0 cross join test0803.t_DBLINK_001@dblink1 t where t.COL_1=t0.COL_1 order by t0.COL_1 limit 12;

EXPLAIN PLAN OUTPUT
----------------------------------------------------------------

| Id  | Description                  | Owner | Name | Rows | Cost | Bytes | Remark                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |

| 0   | SELECT STATEMENT             |       |      |      |      |       ||
| 1   |   QUERY LIMIT                |       |      |      |      |       ||
| 2   |     REMOTE SCAN (MERGE SORT) |       |      |      |      |       | PUSHDOWN SQL: SELECT T0.COL_1,T0.F3,T.COL_1 FROM (SELECT TO_CHAR(TEST0803.T_DBLINK_001.COL_1) AS NEW_COL_1, TEST0803.T_DBLINK_001.COL_1, NVL(SUM(TEST0803.T_DBLINK_001.COL_1),0) AS F1, NVL(SUM(TEST0803.T_DBLINK_001.COL_2),0) AS F2, NVL(SUM(TEST0803.T_DBLINK_001.COL_1)/SUM(TEST0803.T_DBLINK_001.COL_2),0) AS F3 FROM TEST0803.T_DBLINK_001 WHERE TEST0803.T_DBLINK_001.COL_1 < 20 GROUP BY TEST0803.T_DBLINK_001.COL_1) T0 CROSS JOIN TEST0803.T_DBLINK_001 T WHERE T.COL_1 = T0.COL_1 ORDER BY T0.COL_1 LIMIT 12 |


7 rows fetched.

SQL> explain select  t0.COL_1 ,f3 from (select  to_char(COL_1) new_COL_1, COL_1,nvl(sum(COL_1),0) f1, nvl(sum(COL_2),0) f2, nvl(sum(COL_1) / sum(COL_2),0) f3 from test0803.t_DBLINK_001@dblink1 where COL_1 <20 group by COL_1) t0 left join test0803.t_DBLINK_001@dblink1 t2 on t2.COL_1=t0.COL_1 cross join test0803.t_DBLINK_001@dblink1 t where t.COL_1=t0.COL_1 order by t0.COL_1 limit 12;

EXPLAIN PLAN OUTPUT
----------------------------------------------------------------

| Id  | Description                  | Owner | Name | Rows | Cost | Bytes | Remark|

| 0   | SELECT STATEMENT             |       |      |      |      |       ||
| 1   |   QUERY LIMIT                |       |      |      |      |       ||
| 2   |     REMOTE SCAN (MERGE SORT) |       |      |      |      |       | PUSHDOWN SQL: SELECT T0.COL_1,T0.F3,T2.COL_1,T.COL_1 FROM (SELECT TO_CHAR(TEST0803.T_DBLINK_001.COL_1) AS NEW_COL_1, TEST0803.T_DBLINK_001.COL_1, NVL(SUM(TEST0803.T_DBLINK_001.COL_1),0) AS F1, NVL(SUM(TEST0803.T_DBLINK_001.COL_2),0) AS F2, NVL(SUM(TEST0803.T_DBLINK_001.COL_1)/SUM(TEST0803.T_DBLINK_001.COL_2),0) AS F3 FROM TEST0803.T_DBLINK_001 WHERE TEST0803.T_DBLINK_001.COL_1 < 20 GROUP BY TEST0803.T_DBLINK_001.COL_1) T0 LEFT JOIN TEST0803.T_DBLINK_001 T2 ON T2.COL_1 = T0.COL_1 CROSS JOIN TEST0803.T_DBLINK_001 T WHERE T.COL_1 = T0.COL_1 ORDER BY T0.COL_1 LIMIT 12 |


7 rows fetched.

SQL> DROP DATABASE LINK dblink1;

Succeed.

SQL> conn sys/Huawei@123@127.0.0.1:1611

connected.

SQL> drop user test0803 cascade;

Succeed.

SQL>
SQL> --DTS2021091321795
SQL> DROP TABLE IF EXISTS "OM_PAYMENT_PROP";

Succeed.

SQL> DROP TABLE IF EXISTS "OM_WORK_ORDER";

Succeed.

SQL> DROP TABLE IF EXISTS "OM_ORDER_VERTICAL";

Succeed.

SQL> DROP TABLE IF EXISTS "OM_INTERACTION_LOG_HIS";

Succeed.

SQL> CREATE DATABASE LINK dblink1 CONNECT TO sys IDENTIFIED BY sys USING '127.0.0.1:1611';

Succeed.

SQL> CREATE DATABASE LINK dblink2 CONNECT TO sys IDENTIFIED BY sys USING '127.0.0.1:1611';

Succeed.

SQL> CREATE DATABASE LINK dblink3 CONNECT TO sys IDENTIFIED BY sys USING '127.0.0.1:1611';

Succeed.

SQL> CREATE TABLE "OM_WORK_ORDER"
  2 (
  3   "WORK_ORDER_ID" NUMBER(20) NOT NULL,
  4   "ORDER_ID" NUMBER(20) NOT NULL,
  5   "FULFILLMENT_UNIT_ID" VARCHAR(128 BYTE) NOT NULL,
  6   "WORK_ORDER_TYPE" VARCHAR(16 BYTE),
  7   "CREATE_TIME" DATE NOT NULL,
  8   "STATUS" VARCHAR(4 BYTE),
  9   "STATUS_TIME" DATE,
 10   "START_TIME" DATE,
 11   "END_TIME" DATE,
 12   "VERSION_ID" NUMBER(20) NOT NULL,
 13   "BE_ID" NUMBER(10) NOT NULL,
 14   "EXTERNAL_ID" VARCHAR(32 BYTE),
 15   "EX_FIELD1" VARCHAR(32 BYTE),
 16   "EX_FIELD2" VARCHAR(32 BYTE),
 17   "EX_FIELD3" VARCHAR(32 BYTE),
 18   "EX_FIELD4" VARCHAR(32 BYTE),
 19   "EX_FIELD5" VARCHAR(32 BYTE),
 20   "EX_FIELD6" VARCHAR(32 BYTE),
 21   "EX_FIELD7" VARCHAR(32 BYTE),
 22   "EX_FIELD8" VARCHAR(32 BYTE),
 23   "EX_FIELD9" VARCHAR(32 BYTE),
 24   "EX_FIELD10" VARCHAR(32 BYTE),
 25   "EX_FIELD11" VARCHAR(32 BYTE),
 26   "EX_FIELD12" VARCHAR(32 BYTE),
 27   "EX_FIELD13" VARCHAR(32 BYTE),
 28   "EX_FIELD14" VARCHAR(32 BYTE),
 29   "EX_FIELD15" VARCHAR(32 BYTE),
 30   "EX_FIELD16" VARCHAR(32 BYTE),
 31   "EX_FIELD17" VARCHAR(32 BYTE),
 32   "EX_FIELD18" VARCHAR(32 BYTE),
 33   "EX_FIELD19" VARCHAR(32 BYTE),
 34   "EX_FIELD20" VARCHAR(32 BYTE),
 35   "TENANT_ID" NUMBER(20),
 36   "C_EX_FIELD1" VARCHAR(32 BYTE),
 37   "C_EX_FIELD2" VARCHAR(32 BYTE),
 38   "C_EX_FIELD3" VARCHAR(32 BYTE),
 39   "C_EX_FIELD4" VARCHAR(32 BYTE),
 40   "C_EX_FIELD5" VARCHAR(32 BYTE),
 41   "C_EX_FIELD6" VARCHAR(32 BYTE),
 42   "C_EX_FIELD7" VARCHAR(32 BYTE),
 43   "C_EX_FIELD8" VARCHAR(32 BYTE),
 44   "C_EX_FIELD9" VARCHAR(32 BYTE),
 45   "C_EX_FIELD10" VARCHAR(32 BYTE),
 46   "C_EX_FIELD11" VARCHAR(32 BYTE),
 47   "C_EX_FIELD12" VARCHAR(32 BYTE),
 48   "C_EX_FIELD13" VARCHAR(32 BYTE),
 49   "C_EX_FIELD14" VARCHAR(32 BYTE),
 50   "C_EX_FIELD15" VARCHAR(32 BYTE),
 51   "C_EX_FIELD16" VARCHAR(32 BYTE),
 52   "C_EX_FIELD17" VARCHAR(32 BYTE),
 53   "C_EX_FIELD18" VARCHAR(32 BYTE),
 54   "C_EX_FIELD19" VARCHAR(32 BYTE),
 55   "C_EX_FIELD20" VARCHAR(32 BYTE),
 56   "C_EX_FIELD21" VARCHAR(32 BYTE),
 57   "C_EX_FIELD22" VARCHAR(32 BYTE),
 58   "C_EX_FIELD23" VARCHAR(32 BYTE),
 59   "C_EX_FIELD24" VARCHAR(32 BYTE),
 60   "C_EX_FIELD25" VARCHAR(32 BYTE),
 61   "C_EX_FIELD26" VARCHAR(32 BYTE),
 62   "C_EX_FIELD27" VARCHAR(32 BYTE),
 63   "C_EX_FIELD28" VARCHAR(32 BYTE),
 64   "C_EX_FIELD29" VARCHAR(32 BYTE),
 65   "C_EX_FIELD30" VARCHAR(32 BYTE)
 66 );

Succeed.

SQL> CREATE TABLE "OM_PAYMENT_PROP"
  2 (
  3   "PAYMENT_PROP_ID" NUMBER(20) NOT NULL,
  4   "PAYMENT_ID" NUMBER(20) NOT NULL,
  5   "ATTR_ID" NUMBER(20) NOT NULL,
  6   "PAYMENT_ATTR_DEF_ID" NUMBER(20) NOT NULL,
  7   "PAYMENT_METHOD" VARCHAR(16 BYTE) NOT NULL,
  8   "ATTR_VALUE" VARCHAR(128 BYTE),
  9   "BE_ID" NUMBER(10),
 10   "CREATE_TIME" DATE,
 11   "TENANT_ID" NUMBER(20),
 12   "C_EX_FIELD1" VARCHAR(255 BYTE),
 13   "C_EX_FIELD2" VARCHAR(255 BYTE),
 14   "C_EX_FIELD3" VARCHAR(255 BYTE),
 15   "C_EX_FIELD4" VARCHAR(255 BYTE),
 16   "C_EX_FIELD5" VARCHAR(255 BYTE)
 17 );

Succeed.

SQL> CREATE TABLE "OM_ORDER_VERTICAL"
  2 (
  3   "ID" NUMBER(20),
  4   "FIELD_NAME" VARCHAR(64 BYTE),
  5   "CREATE_TIME" DATE,
  6   "BE_ID" NUMBER(10),
  7   "FIELD0" VARCHAR(4000 BYTE),
  8   "FIELD1" VARCHAR(4000 BYTE),
  9   "FIELD2" VARCHAR(4000 BYTE),
 10   "FIELD3" VARCHAR(4000 BYTE),
 11   "FIELD4" VARCHAR(4000 BYTE),
 12   "FIELD5" VARCHAR(4000 BYTE),
 13   "FIELD6" VARCHAR(4000 BYTE),
 14   "FIELD7" VARCHAR(4000 BYTE),
 15   "FIELD8" VARCHAR(4000 BYTE),
 16   "FIELD9" VARCHAR(4000 BYTE),
 17   "FIELD10" VARCHAR(4000 BYTE),
 18   "FIELD11" VARCHAR(4000 BYTE),
 19   "FIELD12" VARCHAR(4000 BYTE),
 20   "FIELD13" VARCHAR(4000 BYTE),
 21   "FIELD14" VARCHAR(4000 BYTE),
 22   "FIELD15" VARCHAR(4000 BYTE),
 23   "FIELD16" VARCHAR(4000 BYTE),
 24   "FIELD17" VARCHAR(4000 BYTE),
 25   "FIELD18" VARCHAR(4000 BYTE),
 26   "FIELD19" VARCHAR(4000 BYTE),
 27   "TENANT_ID" NUMBER(20),
 28   "C_EX_FIELD1" VARCHAR(255 BYTE),
 29   "C_EX_FIELD2" VARCHAR(255 BYTE),
 30   "C_EX_FIELD3" VARCHAR(255 BYTE),
 31   "C_EX_FIELD4" VARCHAR(255 BYTE),
 32   "C_EX_FIELD5" VARCHAR(255 BYTE),
 33   "HIS_DATE" DATE
 34 );

Succeed.

SQL> CREATE TABLE "OM_INTERACTION_LOG_HIS"
  2 (
  3   "INTERACTION_LOG_ID" NUMBER(20) NOT NULL,
  4   "ORDER_ID" NUMBER(20) NOT NULL,
  5   "SEQUENCE_ID" NUMBER(10) NOT NULL,
  6   "OPU_NAME" VARCHAR(256 BYTE) NOT NULL,
  7   "ACTIVITY_ID" VARCHAR(256 BYTE),
  8   "INTERFACE_NAME" VARCHAR(256 BYTE),
  9   "REQUEST_DATE" DATE,
 10   "RESPONSE_DATE" DATE,
 11   "STATUS" VARCHAR(32 BYTE),
 12   "LAST_RETRY_DATE" DATE,
 13   "RETRY_TIMES" NUMBER(4),
 14   "BE_ID" NUMBER(10) NOT NULL,
 15   "CREATE_TIME" DATE,
 16   "TENANT_ID" NUMBER(20),
 17   "C_EX_FIELD1" VARCHAR(255 BYTE),
 18   "C_EX_FIELD2" VARCHAR(255 BYTE),
 19   "C_EX_FIELD3" VARCHAR(255 BYTE),
 20   "C_EX_FIELD4" VARCHAR(255 BYTE),
 21   "C_EX_FIELD5" VARCHAR(255 BYTE)
 22 );

Succeed.

SQL> SELECT
  2   COUNT(CAST(CAST('8328-2' AS INTERVAL YEAR(4) TO MONTH) AS INTERVAL YEAR(4) TO MONTH)) AS C0
  3 FROM
  4   (((OM_INTERACTION_LOG_HIS@dblink2 AS REF_0) CROSS JOIN (OM_ORDER_VERTICAL@dblink3 AS REF_1))
  5    FULL OUTER JOIN
  6    (OM_WORK_ORDER@dblink2 AS REF_2)
  7    ON (CAST('2021-09-13 14:51:13' AS TIMESTAMP WITH LOCAL TIME ZONE) <> NULL))
  8   CROSS JOIN
  9   (OM_PAYMENT_PROP@dblink1 AS REF_3)
 10 WHERE REGEXP_LIKE(CONCAT(
 11     CAST(CAST('282541 17:17:33' AS INTERVAL DAY(7) TO SECOND) AS INTERVAL DAY(7) TO SECOND),
 12     CAST(NULL AS CHAR(100))),'.*')
 13 OFFSET 39 LIMIT 18;

C0
--------------------

0 rows fetched.

SQL> explain SELECT
  2   COUNT(CAST(CAST('8328-2' AS INTERVAL YEAR(4) TO MONTH) AS INTERVAL YEAR(4) TO MONTH)) AS C0
  3 FROM
  4   (((OM_INTERACTION_LOG_HIS@dblink2 AS REF_0) CROSS JOIN (OM_ORDER_VERTICAL@dblink3 AS REF_1))
  5    FULL OUTER JOIN
  6    (OM_WORK_ORDER@dblink2 AS REF_2)
  7    ON (CAST('2021-09-13 14:51:13' AS TIMESTAMP WITH LOCAL TIME ZONE) <> NULL))
  8   CROSS JOIN
  9   (OM_PAYMENT_PROP@dblink1 AS REF_3)
 10 WHERE REGEXP_LIKE(CONCAT(
 11     CAST(CAST('282541 17:17:33' AS INTERVAL DAY(7) TO SECOND) AS INTERVAL DAY(7) TO SECOND),
 12     CAST(NULL AS CHAR(100))),'.*')
 13 OFFSET 39 LIMIT 18;

EXPLAIN PLAN OUTPUT
----------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
| Id  | Description               | Owner | Name | Rows | Cost | Bytes | Remark                                                        |
----------------------------------------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT          |       |      |      |      |       |                                                               |
| 1   |   QUERY LIMIT             |       |      |      |      |       |                                                               |
| 2   |     AGGR                  |       |      |      |      |       |                                                               |
| 3   |       NESTED LOOPS        |       |      |      |      |       |                                                               |
| 4   |         NESTED LOOPS FULL |       |      |      |      |       |                                                               |
| 5   |           NESTED LOOPS    |       |      |      |      |       |                                                               |
| 6   |             REMOTE SCAN   |       |      |      |      |       | PUSHDOWN SQL: SELECT 1  FROM SYS.OM_INTERACTION_LOG_HIS REF_0 |
| 7   |             REMOTE SCAN   |       |      |      |      |       | PUSHDOWN SQL: SELECT 1  FROM SYS.OM_ORDER_VERTICAL REF_1      |
| 8   |           REMOTE SCAN     |       |      |      |      |       | PUSHDOWN SQL: SELECT 1  FROM SYS.OM_WORK_ORDER REF_2          |
| 9   |         REMOTE SCAN       |       |      |      |      |       | PUSHDOWN SQL: SELECT 1  FROM SYS.OM_PAYMENT_PROP REF_3        |
----------------------------------------------------------------------------------------------------------------------------------------

14 rows fetched.

SQL> DROP DATABASE LINK dblink1;

Succeed.

SQL> DROP DATABASE LINK dblink2;

Succeed.

SQL> DROP DATABASE LINK dblink3;

Succeed.

SQL> DROP TABLE "OM_PAYMENT_PROP";

Succeed.

SQL> DROP TABLE "OM_WORK_ORDER";

Succeed.

SQL> DROP TABLE "OM_ORDER_VERTICAL";

Succeed.

SQL> DROP TABLE "OM_INTERACTION_LOG_HIS";

Succeed.