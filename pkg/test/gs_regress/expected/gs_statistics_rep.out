

SQL> drop user if exists hzy_sts_rep cascade;

Succeed.

SQL> create user hzy_sts_rep identified by Cantian_234;

Succeed.

SQL> 
SQL> drop table if exists hzy_sts_rep.STATS_INTERVAL_REP;

Succeed.

SQL> create table hzy_sts_rep.STATS_INTERVAL_REP(
  2 c_id int,
  3 c_d_id int NOT NULL,
  4 c_w_id int NOT NULL,
  5 c_first varchar(50) NOT NULL,
  6 c_middle char(2),
  7 c_last varchar(16) NOT NULL,
  8 c_street_1 varchar(20) NOT NULL,
  9 c_street_2 varchar(20),
 10 c_city varchar(20) NOT NULL,
 11 c_state char(2) NOT NULL,
 12 c_zip char(9) NOT NULL,
 13 c_phone char(16) NOT NULL,
 14 c_since timestamp,
 15 c_credit char(2) NOT NULL,
 16 c_credit_lim numeric(12,2),
 17 c_discount numeric(4,4),
 18 c_balance numeric(12,2),
 19 c_ytd_payment real NOT NULL,
 20 c_payment_cnt number NOT NULL,
 21 c_delivery_cnt bool NOT NULL,
 22 c_end date NOT NULL,
 23 c_data varchar(1000),
 24 c_clob clob,
 25 c_text blob);

Succeed.

SQL> CREATE INDEX hzy_sts_rep.hzy_sts_rep_indx_087 ON hzy_sts_rep.STATS_INTERVAL_REP(c_d_id,c_last);

Succeed.

SQL> CREATE INDEX hzy_sts_rep.hzy_sts_rep_indx_088 ON hzy_sts_rep.STATS_INTERVAL_REP(c_w_id);

Succeed.

SQL> CREATE INDEX hzy_sts_rep.hzy_sts_rep_indx_089 ON hzy_sts_rep.STATS_INTERVAL_REP(c_d_id, c_w_id, c_last);

Succeed.

SQL> ANALYZE TABLE  hzy_sts_rep.STATS_INTERVAL_REP COMPUTE STATISTICS FOR REPORT;

Succeed.

SQL> 
SQL> CREATE or replace procedure hzy_sts_rep.lob_hzy_proc_1115(startnum int,endall int) is
  2 i INT :=1;
  3 j varchar(10);
  4 BEGIN
  5   FOR i IN startnum..endall LOOP
  6     select cast(i as varchar(10)) into j from dual;
  7     insert into  hzy_sts_rep.STATS_INTERVAL_REP select i,i,i,'is'||j||'cmRDs'||j,'OE','BAR'||j||'Bar'||j,'bkili'||j||'fcrRGF'||j,'pmbwo'||j||'vhSDGj'||j,'dyf'||j||'rDa'||j,'uq',4801||j,940||j||215||j,'2011-12-11 00:00:00','GC',50000.0,0.4361328,-10.0,10.0,1,true,'2011-12-11 00:00:00','dasd'||j,'dasdsd'||j,'\x1234354587643123455213445656723123424554566776763221132454566768767433242323445453565654542323';
  8   END LOOP;
  9 END;
 10 /

Succeed.

SQL> call hzy_sts_rep.lob_hzy_proc_1115(1,20);

PL/SQL procedure successfully completed.

SQL> call hzy_sts_rep.lob_hzy_proc_1115(1,15);

PL/SQL procedure successfully completed.

SQL> call hzy_sts_rep.lob_hzy_proc_1115(10,30);

PL/SQL procedure successfully completed.

SQL> call hzy_sts_rep.lob_hzy_proc_1115(50,100);

PL/SQL procedure successfully completed.

SQL> call hzy_sts_rep.lob_hzy_proc_1115(50,150);

PL/SQL procedure successfully completed.

SQL> commit;

Succeed.

SQL> ANALYZE TABLE  hzy_sts_rep.STATS_INTERVAL_REP COMPUTE STATISTICS FOR REPORT;

Succeed.

SQL> ANALYZE TABLE  hzy_sts_rep.STATS_INTERVAL_REP COMPUTE STATISTICS;

Succeed.

SQL> ANALYZE TABLE  hzy_sts_rep.STATS_INTERVAL_REP COMPUTE STATISTICS FOR REPORT SAMPLE 30;

Succeed.

SQL> 
SQL> drop table if exists hzy_sts_rep.STATS_INTERVAL_REP;

Succeed.

SQL> create GLOBAL TEMPORARY table hzy_sts_rep.STATS_INTERVAL_REP(
  2 c_id int,
  3 c_d_id int NOT NULL,
  4 c_w_id int NOT NULL,
  5 c_first varchar(50) NOT NULL,
  6 c_middle char(2),
  7 c_last varchar(16) NOT NULL,
  8 c_street_1 varchar(20) NOT NULL,
  9 c_street_2 varchar(20),
 10 c_city varchar(20) NOT NULL,
 11 c_state char(2) NOT NULL,
 12 c_zip char(9) NOT NULL,
 13 c_phone char(16) NOT NULL,
 14 c_since timestamp,
 15 c_credit char(2) NOT NULL,
 16 c_credit_lim numeric(12,2),
 17 c_discount numeric(4,4),
 18 c_balance numeric(12,2),
 19 c_ytd_payment real NOT NULL,
 20 c_payment_cnt number NOT NULL,
 21 c_delivery_cnt bool NOT NULL,
 22 c_end date NOT NULL,
 23 c_data varchar(1000),
 24 c_clob clob,
 25 c_text blob);

Succeed.

SQL> CREATE INDEX hzy_sts_rep.hzy_sts_rep_indx_087 ON hzy_sts_rep.STATS_INTERVAL_REP(c_d_id,c_last);

Succeed.

SQL> CREATE INDEX hzy_sts_rep.hzy_sts_rep_indx_088 ON hzy_sts_rep.STATS_INTERVAL_REP(c_w_id);

Succeed.

SQL> CREATE INDEX hzy_sts_rep.hzy_sts_rep_indx_089 ON hzy_sts_rep.STATS_INTERVAL_REP(c_d_id, c_w_id, c_last);

Succeed.

SQL> ANALYZE TABLE  hzy_sts_rep.STATS_INTERVAL_REP COMPUTE STATISTICS FOR REPORT;

Succeed.

SQL> ANALYZE TABLE  hzy_sts_rep.STATS_INTERVAL_REP COMPUTE STATISTICS;

Succeed.

SQL> ANALYZE TABLE  hzy_sts_rep.STATS_INTERVAL_REP COMPUTE STATISTICS FOR REPORT;

Succeed.

SQL> ANALYZE TABLE  hzy_sts_rep.STATS_INTERVAL_REP COMPUTE STATISTICS FOR REPORT SAMPLE 40;

Succeed.

SQL> 
SQL> CREATE or replace procedure hzy_sts_rep.lob_hzy_proc_1115(startnum int,endall int) is
  2 i INT :=1;
  3 j varchar(10);
  4 BEGIN
  5   FOR i IN startnum..endall LOOP
  6     select cast(i as varchar(10)) into j from dual;
  7     insert into  hzy_sts_rep.STATS_INTERVAL_REP select i,i,i,'is'||j||'cmRDs'||j,'OE','BAR'||j||'Bar'||j,'bkili'||j||'fcrRGF'||j,'pmbwo'||j||'vhSDGj'||j,'dyf'||j||'rDa'||j,'uq',4801||j,940||j||215||j,'2011-12-11 00:00:00','GC',50000.0,0.4361328,-10.0,10.0,1,true,'2011-12-11 00:00:00','dasd'||j,'dasdsd'||j,'\x1234354587643123455213445656723123424554566776763221132454566768767433242323445453565654542323';
  8   END LOOP;
  9 END;
 10 /

Succeed.

SQL> call hzy_sts_rep.lob_hzy_proc_1115(1,20);

PL/SQL procedure successfully completed.

SQL> call hzy_sts_rep.lob_hzy_proc_1115(1,15);

PL/SQL procedure successfully completed.

SQL> call hzy_sts_rep.lob_hzy_proc_1115(10,30);

PL/SQL procedure successfully completed.

SQL> call hzy_sts_rep.lob_hzy_proc_1115(50,100);

PL/SQL procedure successfully completed.

SQL> commit;

Succeed.

SQL> ANALYZE TABLE  hzy_sts_rep.STATS_INTERVAL_REP COMPUTE STATISTICS FOR REPORT;

Succeed.

SQL> ANALYZE TABLE  hzy_sts_rep.STATS_INTERVAL_REP COMPUTE STATISTICS;

Succeed.

SQL> ANALYZE TABLE  hzy_sts_rep.STATS_INTERVAL_REP COMPUTE STATISTICS FOR REPORT SAMPLE 30;

Succeed.

SQL> 
SQL> ALTER SYSTEM SET LOCAL_TEMPORARY_TABLE_ENABLED=TRUE;

Succeed.

SQL> drop table if exists hzy_sts_rep.#STATS_INTERVAL_REP;

Succeed.

SQL> create TEMPORARY table hzy_sts_rep.#STATS_INTERVAL_REP(
  2 c_id int,
  3 c_d_id int NOT NULL,
  4 c_w_id int NOT NULL,
  5 c_first varchar(50) NOT NULL,
  6 c_middle char(2),
  7 c_last varchar(16) NOT NULL,
  8 c_street_1 varchar(20) NOT NULL,
  9 c_street_2 varchar(20),
 10 c_city varchar(20) NOT NULL,
 11 c_state char(2) NOT NULL,
 12 c_zip char(9) NOT NULL,
 13 c_phone char(16) NOT NULL,
 14 c_since timestamp,
 15 c_credit char(2) NOT NULL,
 16 c_credit_lim numeric(12,2),
 17 c_discount numeric(4,4),
 18 c_balance numeric(12,2),
 19 c_ytd_payment real NOT NULL,
 20 c_payment_cnt number NOT NULL,
 21 c_delivery_cnt bool NOT NULL,
 22 c_end date NOT NULL,
 23 c_data varchar(1000),
 24 c_clob clob,
 25 c_text blob);

Succeed.

SQL> CREATE INDEX hzy_sts_rep.hzy_sts_rep_indx_087 ON hzy_sts_rep.#STATS_INTERVAL_REP(c_d_id,c_last);

Succeed.

SQL> CREATE INDEX hzy_sts_rep.hzy_sts_rep_indx_088 ON hzy_sts_rep.#STATS_INTERVAL_REP(c_w_id);

Succeed.

SQL> CREATE INDEX hzy_sts_rep.hzy_sts_rep_indx_089 ON hzy_sts_rep.#STATS_INTERVAL_REP(c_d_id, c_w_id, c_last);

Succeed.

SQL> ANALYZE TABLE  hzy_sts_rep.#STATS_INTERVAL_REP COMPUTE STATISTICS FOR REPORT;

Succeed.

SQL> ANALYZE TABLE  hzy_sts_rep.#STATS_INTERVAL_REP COMPUTE STATISTICS;

Succeed.

SQL> ANALYZE TABLE  hzy_sts_rep.#STATS_INTERVAL_REP COMPUTE STATISTICS FOR REPORT;

Succeed.

SQL> ANALYZE TABLE  hzy_sts_rep.#STATS_INTERVAL_REP COMPUTE STATISTICS FOR REPORT SAMPLE 40;

Succeed.

SQL> 
SQL> CREATE or replace procedure hzy_sts_rep.lob_hzy_proc_1115(startnum int,endall int) is
  2 i INT :=1;
  3 j varchar(10);
  4 BEGIN
  5   FOR i IN startnum..endall LOOP
  6     select cast(i as varchar(10)) into j from dual;
  7     insert into  hzy_sts_rep.#STATS_INTERVAL_REP select i,i,i,'is'||j||'cmRDs'||j,'OE','BAR'||j||'Bar'||j,'bkili'||j||'fcrRGF'||j,'pmbwo'||j||'vhSDGj'||j,'dyf'||j||'rDa'||j,'uq',4801||j,940||j||215||j,'2011-12-11 00:00:00','GC',50000.0,0.4361328,-10.0,10.0,1,true,'2011-12-11 00:00:00','dasd'||j,'dasdsd'||j,'\x1234354587643123455213445656723123424554566776763221132454566768767433242323445453565654542323';
  8   END LOOP;
  9 END;
 10 /

Succeed.

SQL> call hzy_sts_rep.lob_hzy_proc_1115(1,20);

PL/SQL procedure successfully completed.

SQL> call hzy_sts_rep.lob_hzy_proc_1115(10,30);

PL/SQL procedure successfully completed.

SQL> call hzy_sts_rep.lob_hzy_proc_1115(50,100);

PL/SQL procedure successfully completed.

SQL> commit;

Succeed.

SQL> ANALYZE TABLE  hzy_sts_rep.#STATS_INTERVAL_REP COMPUTE STATISTICS FOR REPORT;

Succeed.

SQL> ANALYZE TABLE  hzy_sts_rep.#STATS_INTERVAL_REP COMPUTE STATISTICS;

Succeed.

SQL> ANALYZE TABLE  hzy_sts_rep.#STATS_INTERVAL_REP COMPUTE STATISTICS FOR REPORT SAMPLE 30;

Succeed.

SQL> ALTER SYSTEM SET LOCAL_TEMPORARY_TABLE_ENABLED=FALSE;

Succeed.

SQL> 
SQL> drop table if exists hzy_sts_rep.STATS_INTERVAL_REP;

Succeed.

SQL> create table hzy_sts_rep.STATS_INTERVAL_REP(
  2 c_id int,
  3 c_d_id int NOT NULL,
  4 c_w_id int NOT NULL,
  5 c_first varchar(50) NOT NULL,
  6 c_middle char(2),
  7 c_last varchar(16) NOT NULL,
  8 c_street_1 varchar(20) NOT NULL,
  9 c_street_2 varchar(20),
 10 c_city varchar(20) NOT NULL,
 11 c_state char(2) NOT NULL,
 12 c_zip char(9) NOT NULL,
 13 c_phone char(16) NOT NULL,
 14 c_since timestamp,
 15 c_credit char(2) NOT NULL,
 16 c_credit_lim numeric(12,2),
 17 c_discount numeric(4,4),
 18 c_balance numeric(12,2),
 19 c_ytd_payment real NOT NULL,
 20 c_payment_cnt number NOT NULL,
 21 c_delivery_cnt bool NOT NULL,
 22 c_end date NOT NULL,
 23 c_data varchar(1000),
 24 c_clob clob,
 25 c_text blob) 
 26 partition by range(c_id) 
 27 (
 28    partition PART_H1 values less than (10),
 29    partition PART_H2 values less than (20),
 30    partition PART_H3 values less than (30),
 31    partition PART_H4 values less than (40),
 32    partition PART_5 values less than (50),
 33    partition PART_6 values less than (60),
 34    partition PART_7 values less than (70),
 35    partition PART_8 values less than (80),
 36    partition PART_9 values less than (90),
 37    partition PART_H10 values less than (maxvalue)
 38 );

Succeed.

SQL> 
SQL> CREATE INDEX hzy_sts_rep.hzy_sts_rep_indx_087 ON hzy_sts_rep.STATS_INTERVAL_REP(c_d_id,c_last) local;

Succeed.

SQL> CREATE INDEX hzy_sts_rep.hzy_sts_rep_indx_088 ON hzy_sts_rep.STATS_INTERVAL_REP(c_w_id);

Succeed.

SQL> CREATE INDEX hzy_sts_rep.hzy_sts_rep_indx_089 ON hzy_sts_rep.STATS_INTERVAL_REP(c_d_id, c_w_id, c_last);

Succeed.

SQL> ANALYZE TABLE  hzy_sts_rep.STATS_INTERVAL_REP COMPUTE STATISTICS FOR REPORT;

Succeed.

SQL> 
SQL> CREATE or replace procedure hzy_sts_rep.lob_hzy_proc_1115(startnum int,endall int) is
  2 i INT :=1;
  3 j varchar(10);
  4 BEGIN
  5   FOR i IN startnum..endall LOOP
  6     select cast(i as varchar(10)) into j from dual;
  7     insert into  hzy_sts_rep.STATS_INTERVAL_REP select i,i,i,'is'||j||'cmRDs'||j,'OE','BAR'||j||'Bar'||j,'bkili'||j||'fcrRGF'||j,'pmbwo'||j||'vhSDGj'||j,'dyf'||j||'rDa'||j,'uq',4801||j,940||j||215||j,'2011-12-11 00:00:00','GC',50000.0,0.4361328,-10.0,10.0,1,true,'2011-12-11 00:00:00','dasd'||j,'dasdsd'||j,'\x1234354587643123455213445656723123424554566776763221132454566768767433242323445453565654542323';
  8   END LOOP;
  9 END;
 10 /

Succeed.

SQL> call hzy_sts_rep.lob_hzy_proc_1115(1,20);

PL/SQL procedure successfully completed.

SQL> call hzy_sts_rep.lob_hzy_proc_1115(25,45);

PL/SQL procedure successfully completed.

SQL> call hzy_sts_rep.lob_hzy_proc_1115(50,100);

PL/SQL procedure successfully completed.

SQL> commit;

Succeed.

SQL> ANALYZE TABLE  hzy_sts_rep.STATS_INTERVAL_REP COMPUTE STATISTICS FOR REPORT;

Succeed.

SQL> exec DBE_STATS.COLLECT_TABLE_STATS('hzy_sts_rep', 'STATS_INTERVAL_REP', 'PART_H1',30);

PL/SQL procedure successfully completed.

SQL> ANALYZE TABLE  hzy_sts_rep.STATS_INTERVAL_REP COMPUTE STATISTICS FOR REPORT;

Succeed.

SQL> ANALYZE TABLE  hzy_sts_rep.STATS_INTERVAL_REP COMPUTE STATISTICS FOR REPORT SAMPLE 40;

Succeed.

SQL> 
SQL> drop user if exists hzy_sts_rep cascade;

Succeed.

SQL> 
SQL> drop table if exists FVT_LIST_INDEX32_TABLE_001;

Succeed.

SQL> create table FVT_LIST_INDEX32_TABLE_001 
  2 (
  3     ID INT ,
  4     NAME1 VARCHAR(100),
  5     TIME1 DATETIME,
  6     BR1 BOOLEAN,
  7     C_CLOB CLOB,
  8     b_blob blob
  9 )
 10 partition by list(id)
 11 (
 12 partition t1 values (1,2,3,4,5,6,7,8,9,10),
 13 partition t2 values (11,12,13,14,15,16,17,18,19,20),
 14 partition t3 values (21,22,23,24,25,26,27,28,29,30),
 15 partition t4 values (31,32,33,34,35,36,37,38,39,40),
 16 partition t5 values (41,42,43,44,45,46,47,48,49,50)
 17 );

Succeed.

SQL> insert into FVT_LIST_INDEX32_TABLE_001 values(9,'_1_1xx&','2019-6-30',true,'x1x#','1345');

1 rows affected.

SQL> insert into FVT_LIST_INDEX32_TABLE_001 values(11,'_1_1xx&_2','2019-7-31',false,'x1x#_111','134501a');

1 rows affected.

SQL> insert into FVT_LIST_INDEX32_TABLE_001 values(11,'_1_1xx&_2','2019-7-31',false,'x1x#_111','134501a');

1 rows affected.

SQL> insert into FVT_LIST_INDEX32_TABLE_001 values(20,'_1_1xx&_3','2019-8-30','1','x1x#_111','134501a1');

1 rows affected.

SQL> insert into FVT_LIST_INDEX32_TABLE_001 values(21,'_1_1xx&_3','2019-9-30','0','x1x#_112','134501a2');

1 rows affected.

SQL> insert into FVT_LIST_INDEX32_TABLE_001 values(31,'_1_1xx&_3','2019-10-31','0','x1x#_112','134501a2');

1 rows affected.

SQL> insert into FVT_LIST_INDEX32_TABLE_001 values(40,'_1_1xx&_3','2019-10-31','0','x1x#_112','134501a2');

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> drop index if exists FVT_LIST_INDEX1_001 ON FVT_LIST_INDEX32_TABLE_001;

Succeed.

SQL> create index  FVT_LIST_INDEX1_001 ON FVT_LIST_INDEX32_TABLE_001(id) local;

Succeed.

SQL> analyze table FVT_LIST_INDEX32_TABLE_001 compute statistics ;

Succeed.

SQL> exec DBE_STATS.COLLECT_TABLE_STATS('SYS', 'FVT_LIST_INDEX32_TABLE_001', part_name=>NULL,sample_ratio => 10,method_opt=>'for all indexed columns');

PL/SQL procedure successfully completed.

SQL> select COL# ,ROW_NUM from SYS_HISTGRAM_ABSTR where  TAB# = (select id from sys_tables where name = 'FVT_LIST_INDEX32_TABLE_001') and col# = 2 order by SPARE1;

COL#         ROW_NUM     
------------ ------------
2            1           
2            3           
2            1           
2            2           
2            7           

5 rows fetched.

SQL> 


