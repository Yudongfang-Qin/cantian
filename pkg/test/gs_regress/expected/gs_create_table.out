SQL> conn / as  sysdba hello

ZS-00001: "/ AS SYSDBA [host:port] [-D data_dir] ", or "/ AS CLSMGR [host:port] [-D data_dir] " is expected

SQL> conn / as  sysdba

connected.

SQL> drop table if exists f_timestamp;

Succeed.

SQL> create table f_timestamp(f_id INT NOT NULL, f_var VARCHAR(64), f_time TIMESTAMP(10));

CT-00601, [1:81]Sql syntax error: timestamp precision must be between 0 and 6

SQL> conn / as  sysdba

connected.

SQL> drop table if exists testcao;

Succeed.

SQL> create table testcao(col nvarchar2(5) default '中国中国中');

Succeed.

SQL> insert into testcao values('中国中国人');

1 rows affected.

SQL> insert into testcao values('中国中国中中');

CT-01346, The column "COL" length exceeded the maximum, (actual: 6, maximum: 5).
SQL> drop table if exists testcao;

Succeed.

SQL> conn / as  sysdba

connected.

SQL> drop table if exists lob4;

Succeed.

SQL> drop table lib$;

CT-00843, The table or view SYS.LIB$ does not exist.
SQL> conn / as sysdba

connected.

SQL> create view v_ct_sub_094(c1, c2.int.int.abc) as select 'abc' c1,2+3 c2 from dual;

CT-00601, [1:30]Sql syntax error: too many dot for column
SQL> create view v_ct_sub_095(c1, c1) as select 'abc' c1,2+3 c2 from dual;

CT-00604, Duplicate column name C1
SQL> create table yyyyyyy44( id int, ii.ee.rr.tt int);

CT-00601, [1:33]Sql syntax error: too many dot for column
SQL> conn / as  sysdba

connected.

SQL> drop table if exists flash_back_query_view2;

Succeed.

SQL> drop view if exists flash_back_query_view2;

Succeed.

SQL> create table flash_back_query_view2 as select 2 id,3 c_int from dual;

Succeed.

SQL> create or replace view flash_back_query_view2 as select 2 id,3 c_int from dual;

CT-01301, SYS.FLASH_BACK_QUERY_VIEW2 already exists
SQL> drop table if exists flash_back_query_view2;

Succeed.

SQL> drop view if exists flash_back_query_view2;

Succeed.

SQL> create table t_default_check_006(c_clob clob default max(2) over(partition by 1));

CT-01316, [1:54]Unexpected windows sort analytic function
SQL> create user test_user1111 identified by cao102_cao;

Succeed.

SQL> alter user test_user1111 identified by '';

CT-00601, [1:40]Sql syntax error: invalid identifier, length 0
SQL> alter system set LOCAL_TEMPORARY_TABLE_ENABLED=TRUE;

Succeed.

SQL> create temporary table #t10(id int , name varchar(32));

Succeed.

SQL> insert into #t10 values (10,'cao');

1 rows affected.

SQL> insert into #t10 values (20,'jie');

1 rows affected.

SQL> select * from #t10;

ID           NAME                            
------------ --------------------------------
10           cao                             
20           jie                             

2 rows fetched.

SQL> drop temporary  table #t10;

Succeed.

SQL> select * from #t10;

CT-00843, [1:15]The table or view SYS.#T10 does not exist.
SQL> create global temporary table t10(id int , name varchar(32));

Succeed.

SQL> insert into t10 values (10,'cao');

1 rows affected.

SQL> insert into t10 values (20,'jie');

1 rows affected.

SQL> select * from t10;

ID           NAME                            
------------ --------------------------------
10           cao                             
20           jie                             

2 rows fetched.

SQL> drop temporary  table t10;

Succeed.

SQL> select * from t10;

CT-00843, [1:15]The table or view SYS.T10 does not exist.
SQL> --DTS2018121910986
SQL> desc ALL_TAB_MODIFICATIONS;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
TABLE_OWNER                                  VARCHAR(64 BYTE)                    
TABLE_NAME                                   VARCHAR(64 BYTE)                    
PARTITION_NAME                               VARCHAR(64 BYTE)                    
SUBPARTITION_NAME                            VARCHAR(64 BYTE)                    
INSERTS                                      BINARY_INTEGER                      
UPDATES                                      BINARY_INTEGER                      
DELETES                                      BINARY_INTEGER                      
TIMESTAMP                                    TIMESTAMP(6)                        
DROP_SEGMENTS                                BINARY_INTEGER                      

SQL> drop table if exists t_not_null_base_001;

Succeed.

SQL> drop table if exists t_not_null_base_002;

Succeed.

SQL> drop table if exists t_not_null_test_004;

Succeed.

SQL> drop table if exists t_not_null_test_006;

Succeed.

SQL> create table t_not_null_base_001(id int,c_int int not null,c_char char(10) not null,c_vchar varchar(100) not null,c_date date,c_clob clob not null);

Succeed.

SQL> create table t_not_null_base_002(id int,c_int int not null,c_char char(10) not null,c_vchar varchar(100) not null,c_date date,c_clob clob not null);

Succeed.

SQL> create table t_not_null_test_004 as select t1.c_int c1,t2.c_int c2,t3.c_int c3 from t_not_null_base_001 t1 left join t_not_null_base_002 t2 on t1.id=t2.id right join t_not_null_base_001 t3 on t3.id=t1.id;

Succeed.

SQL> desc t_not_null_test_004;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           BINARY_INTEGER                      
C2                                           BINARY_INTEGER                      
C3                                  NOT NULL BINARY_INTEGER                      

SQL> create table t_not_null_test_006 as select t1.c_int c1,t2.c_int c2,t3.c_int c3 from t_not_null_base_001 t1 left join t_not_null_base_002 t2 on t1.id=t2.id full join t_not_null_base_001 t3 on t3.id=t1.id;

Succeed.

SQL> desc t_not_null_test_006;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           BINARY_INTEGER                      
C2                                           BINARY_INTEGER                      
C3                                           BINARY_INTEGER                      

SQL> drop table if exists t_not_null_base_001;

Succeed.

SQL> drop table if exists t_not_null_base_002;

Succeed.

SQL> drop table if exists t_not_null_test_004;

Succeed.

SQL> drop table if exists t_not_null_test_006;

Succeed.

SQL> drop table if exists base_001;

Succeed.

SQL> drop table if exists base_002;

Succeed.

SQL> drop table if exists test_1;

Succeed.

SQL> drop table if exists test_2;

Succeed.

SQL> drop table if exists test_3;

Succeed.

SQL> drop table if exists test_4;

Succeed.

SQL> drop table if exists test_5;

Succeed.

SQL> drop view  if exists view_base_002;

Succeed.

SQL> create table base_001(id int ,c_int int not null);

Succeed.

SQL> create table base_002(id int ,c_int int not null);

Succeed.

SQL> create view view_base_002 as select * from base_002;

Succeed.

SQL> insert into base_001 values (10,200);

1 rows affected.

SQL> insert into base_001 values (20,300);

1 rows affected.

SQL> insert into base_001 values (30,400);

1 rows affected.

SQL> insert into base_002 values (10,100);

1 rows affected.

SQL> create table test_1 as select t1.c_int c1,t2.c_int c2, t3.c_int c3 from (base_001 t1 left join base_002 t2 on t1.id=t2.id) right join base_001 t3 on t3.id=t1.id ;

Succeed.

SQL> create table test_2 as select t1.c_int c1,t2.c_int c2, t3.c_int c3 from (base_001 t1 left join (select id ,c_int from base_002) t2 on t1.id=t2.id) right join base_001 t3 on t3.id=t1.id ;

Succeed.

SQL> create table test_3 as select t1.c_int c1,t2.c_int c2, t3.c_int c3 from (base_001 t1 left join view_base_002 t2 on t1.id=t2.id) right join base_001 t3 on t3.id=t1.id ;

Succeed.

SQL> create table test_4 as select t1.c_int c1,t2.c_int c2 from base_001 t1 left join base_002 t2 on t1.id=t2.id;

Succeed.

SQL> create table test_5 as select t1.c_int c1,t2.c_int c2 from base_001 t1 right join base_002 t2 on t1.id=t2.id;

Succeed.

SQL> desc test_1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           BINARY_INTEGER                      
C2                                           BINARY_INTEGER                      
C3                                  NOT NULL BINARY_INTEGER                      

SQL> desc test_2;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           BINARY_INTEGER                      
C2                                           BINARY_INTEGER                      
C3                                  NOT NULL BINARY_INTEGER                      

SQL> desc test_3;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           BINARY_INTEGER                      
C2                                           BINARY_INTEGER                      
C3                                  NOT NULL BINARY_INTEGER                      

SQL> desc test_4;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                  NOT NULL BINARY_INTEGER                      
C2                                           BINARY_INTEGER                      

SQL> desc test_5;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           BINARY_INTEGER                      
C2                                  NOT NULL BINARY_INTEGER                      

SQL> drop table if exists base_001;

Succeed.

SQL> drop table if exists base_002;

Succeed.

SQL> drop table if exists test_1;

Succeed.

SQL> drop table if exists test_2;

Succeed.

SQL> drop table if exists test_3;

Succeed.

SQL> drop table if exists test_4;

Succeed.

SQL> drop table if exists test_5;

Succeed.

SQL> drop view  if exists view_base_002;

Succeed.

SQL> --DTS2019012901334
SQL> drop table if exists acid2;

Succeed.

SQL> create table acid2(a number(25,3));

Succeed.

SQL> create index acid2_idx on acid2(a);

Succeed.

SQL> delete from acid2 where rowid in (select rowid from acid2 order by rowscn limit 3);

0 rows affected.

SQL> drop table if exists acid2;

Succeed.

SQL> DROP TABLE IF EXISTS T_CREATE_TAB_AS_SELECT_1;

Succeed.

SQL> CREATE TABLE T_CREATE_TAB_AS_SELECT_1
  2 (
  3     sn           NUMBER(38),
  4     operation    VARCHAR2(516)  not null,
  5     logLevel     VARCHAR2(7)    not null constraint CHK_T_CREATE_TAB_AS_SELECT_SEC_LEVEL1 check(logLevel in ('WARNING','MINOR','RISK')),
  6     userId       VARCHAR2(512)  not null,
  7     datetime     NUMBER(38)     not null,
  8     source       VARCHAR2(300)  not null,
  9     terminal     VARCHAR2(60)   not null,
 10     targetObj    VARCHAR2(765)  not null,
 11     result       VARCHAR2(10)   not null constraint CHK_T_CREATE_TAB_AS_SELECT_RESULT1 check(result in ('SUCCESSFUL','FAILURE','POK')),
 12     detail       VARCHAR2(3072) not null,
 13     addInfo      VARCHAR2(2400),
 14     PRIMARY KEY ( sn ) using index tablespace users
 15 )tablespace users;

Succeed.

SQL> INSERT INTO T_CREATE_TAB_AS_SELECT_1 VALUES(1, 'NEW', 'MINOR', '000001', 1, 'SOURCE 1', 'TERMINAL 1', 'TARGET 1', 'POK', 'NO MORE DETAIL', 'NO MORE ADDITION INFO');

1 rows affected.

SQL> INSERT INTO T_CREATE_TAB_AS_SELECT_1 VALUES(2, 'NEW', 'MINOR', '000002', 2, 'SOURCE 1', 'TERMINAL 1', 'TARGET 1', 'POK', 'NO MORE DETAIL', 'NO MORE ADDITION INFO');

1 rows affected.

SQL> INSERT INTO T_CREATE_TAB_AS_SELECT_1 VALUES(3, 'NEW', 'MINOR', '000003', 3, 'SOURCE 1', 'TERMINAL 1', 'TARGET 1', 'POK', 'NO MORE DETAIL', 'NO MORE ADDITION INFO');

1 rows affected.

SQL> INSERT INTO T_CREATE_TAB_AS_SELECT_1 VALUES(4, 'NEW', 'MINOR', '000004', 4, 'SOURCE 1', 'TERMINAL 1', 'TARGET 1', 'POK', 'NO MORE DETAIL', 'NO MORE ADDITION INFO');

1 rows affected.

SQL> SELECT CONS_TYPE, COLS, COL_LIST, COND_TEXT FROM SYS_CONSTRAINT_DEFS WHERE USER#=0 AND  TABLE# = (SELECT ID  FROM SYS_TABLES WHERE  NAME = 'T_CREATE_TAB_AS_SELECT_1') ORDER BY CONS_TYPE,COLS,COL_LIST;

CONS_TYPE    COLS         COL_LIST                                                         COND_TEXT                                                       
------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
0            1            0                                                                                                                                
3            1            2                                                                logLevel in ('WARNING','MINOR','RISK')                          
3            1            8                                                                result in ('SUCCESSFUL','FAILURE','POK')                        

3 rows fetched.

SQL> col sn format a10;


SQL> col operation format a10;


SQL> col logLevel format a10;


SQL> col userId format a10;


SQL> col datetime format a10;


SQL> col source format a10;


SQL> col terminal format a10;


SQL> col targetObj format a10;


SQL> col result format a10;


SQL> col detail format a10;


SQL> col addInfo format a10;


SQL> 
SQL> 
SQL> DROP TABLE IF EXISTS T_CREATE_TAB_AS_SELECT_2;

Succeed.

SQL> CREATE TABLE T_CREATE_TAB_AS_SELECT_2 AS SELECT * FROM T_CREATE_TAB_AS_SELECT_1;

Succeed.

SQL> SELECT CONS_TYPE, COLS, COL_LIST, COND_TEXT FROM SYS_CONSTRAINT_DEFS WHERE USER#=0 AND  TABLE# = (SELECT ID  FROM SYS_TABLES WHERE  NAME = 'T_CREATE_TAB_AS_SELECT_2') ORDER BY CONS_TYPE,COLS,COL_LIST;

CONS_TYPE    COLS         COL_LIST                                                         COND_TEXT                                                       
------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> select * from T_CREATE_TAB_AS_SELECT_2 ORDER BY SN;

SN         OPERATION  LOGLEVEL   USERID     DATETIME   SOURCE     TERMINAL   TARGETOBJ  RESULT     DETAIL     ADDINFO   
---------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
1          NEW        MINOR      000001     1          SOURCE 1   TERMINAL 1 TARGET 1   POK        NO MORE DE NO MORE AD
2          NEW        MINOR      000002     2          SOURCE 1   TERMINAL 1 TARGET 1   POK        NO MORE DE NO MORE AD
3          NEW        MINOR      000003     3          SOURCE 1   TERMINAL 1 TARGET 1   POK        NO MORE DE NO MORE AD
4          NEW        MINOR      000004     4          SOURCE 1   TERMINAL 1 TARGET 1   POK        NO MORE DE NO MORE AD

4 rows fetched.

SQL> 
SQL> DROP TABLE IF EXISTS T_CREATE_TAB_AS_SELECT_3;

Succeed.

SQL> CREATE TABLE T_CREATE_TAB_AS_SELECT_3(sn, operation, loglevel, userid, datetime, source, terminal, targetobj, result, detail, addinfo)
  2 AS SELECT * FROM T_CREATE_TAB_AS_SELECT_1;

Succeed.

SQL> SELECT CONS_TYPE, COLS, COL_LIST, COND_TEXT FROM SYS_CONSTRAINT_DEFS WHERE USER#=0 AND  TABLE# = (SELECT ID  FROM SYS_TABLES WHERE  NAME = 'T_CREATE_TAB_AS_SELECT_3') ORDER BY CONS_TYPE,COLS,COL_LIST;

CONS_TYPE    COLS         COL_LIST                                                         COND_TEXT                                                       
------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> select * from T_CREATE_TAB_AS_SELECT_3 ORDER BY SN;

SN         OPERATION  LOGLEVEL   USERID     DATETIME   SOURCE     TERMINAL   TARGETOBJ  RESULT     DETAIL     ADDINFO   
---------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
1          NEW        MINOR      000001     1          SOURCE 1   TERMINAL 1 TARGET 1   POK        NO MORE DE NO MORE AD
2          NEW        MINOR      000002     2          SOURCE 1   TERMINAL 1 TARGET 1   POK        NO MORE DE NO MORE AD
3          NEW        MINOR      000003     3          SOURCE 1   TERMINAL 1 TARGET 1   POK        NO MORE DE NO MORE AD
4          NEW        MINOR      000004     4          SOURCE 1   TERMINAL 1 TARGET 1   POK        NO MORE DE NO MORE AD

4 rows fetched.

SQL> 
SQL> DROP TABLE IF EXISTS T_CREATE_TAB_AS_SELECT_4;

Succeed.

SQL> CREATE TABLE T_CREATE_TAB_AS_SELECT_4
  2 (
  3     sn, 
  4     operation not null, 
  5     loglevel  not null constraint CHK_T_CREATE_TAB_AS_SELECT_SEC_LEVEL4 check(logLevel in ('WARNING','MINOR','RISK')), 
  6     userid    not null, 
  7     datetime  not null, 
  8     source    not null, 
  9     terminal  not null, 
 10     targetobj not null, 
 11     result    not null constraint CHK_T_CREATE_TAB_AS_SELECT_RESULT4 check(result in ('SUCCESSFUL','FAILURE','POK')), 
 12     detail    not null, 
 13     addinfo,
 14     PRIMARY KEY ( sn ) using index tablespace users
 15 )tablespace users AS SELECT * FROM T_CREATE_TAB_AS_SELECT_1;

Succeed.

SQL> SELECT CONS_TYPE, COLS, COL_LIST, COND_TEXT FROM SYS_CONSTRAINT_DEFS WHERE USER#=0 AND  TABLE# = (SELECT ID  FROM SYS_TABLES WHERE  NAME = 'T_CREATE_TAB_AS_SELECT_4') ORDER BY CONS_TYPE,COLS,COL_LIST;

CONS_TYPE    COLS         COL_LIST                                                         COND_TEXT                                                       
------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
0            1            0                                                                                                                                
3            1            2                                                                logLevel in ('WARNING','MINOR','RISK')                          
3            1            8                                                                result in ('SUCCESSFUL','FAILURE','POK')                        

3 rows fetched.

SQL> select * from T_CREATE_TAB_AS_SELECT_4 ORDER BY SN;

SN         OPERATION  LOGLEVEL   USERID     DATETIME   SOURCE     TERMINAL   TARGETOBJ  RESULT     DETAIL     ADDINFO   
---------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
1          NEW        MINOR      000001     1          SOURCE 1   TERMINAL 1 TARGET 1   POK        NO MORE DE NO MORE AD
2          NEW        MINOR      000002     2          SOURCE 1   TERMINAL 1 TARGET 1   POK        NO MORE DE NO MORE AD
3          NEW        MINOR      000003     3          SOURCE 1   TERMINAL 1 TARGET 1   POK        NO MORE DE NO MORE AD
4          NEW        MINOR      000004     4          SOURCE 1   TERMINAL 1 TARGET 1   POK        NO MORE DE NO MORE AD

4 rows fetched.

SQL> 
SQL> DROP TABLE IF EXISTS T_CREATE_TAB_AS_SELECT_5;

Succeed.

SQL> CREATE TABLE T_CREATE_TAB_AS_SELECT_5 tablespace users AS SELECT sn + 1, operation, loglevel, userid, datetime, source, terminal, targetobj, result, detail, addinfo FROM T_CREATE_TAB_AS_SELECT_1;

CT-00601, Sql syntax error: must name expression with a column alias
SQL> select * from T_CREATE_TAB_AS_SELECT_5 ORDER BY SN;

CT-00843, [1:15]The table or view SYS.T_CREATE_TAB_AS_SELECT_5 does not exist.
SQL> 
SQL> --DTS2018070909827
SQL> create table unique_t (c_char unique);

CT-00601, [1:38]Sql syntax error: As-select clause expected
SQL> create table not_null_t (c_char not null);

CT-00601, [1:42]Sql syntax error: As-select clause expected
SQL> 
SQL> -- extend
SQL> drop table if exists t_create_as1;

Succeed.

SQL> drop table if exists t_create_as2;

Succeed.

SQL> create table t_create_as1(f1 int not null, f2 number(10,0));

Succeed.

SQL> insert into t_create_as1 values(1,11),(2,22),(3,33),(4,44),(1,11),(2,22);

6 rows affected.

SQL> commit;

Succeed.

SQL> desc t_create_as1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
F1                                  NOT NULL BINARY_INTEGER                      
F2                                           NUMBER(10)                          

SQL> select * from t_create_as1 order by f1, f2;

F1           F2                                      
------------ ----------------------------------------
1            11                                      
1            11                                      
2            22                                      
2            22                                      
3            33                                      
4            44                                      

6 rows fetched.

SQL> 
SQL> create table t_create_as2 as select distinct f1, f2 from t_create_as1;

Succeed.

SQL> desc t_create_as2;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
F1                                  NOT NULL BINARY_INTEGER                      
F2                                           NUMBER(10)                          

SQL> select * from t_create_as2 order by f1, f2;

F1           F2                                      
------------ ----------------------------------------
1            11                                      
2            22                                      
3            33                                      
4            44                                      

4 rows fetched.

SQL> drop table t_create_as2;

Succeed.

SQL> 
SQL> create table t_create_as2 as select f1, f2 from t_create_as1 group by f1, f2;

Succeed.

SQL> desc t_create_as2;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
F1                                  NOT NULL BINARY_INTEGER                      
F2                                           NUMBER(10)                          

SQL> select * from t_create_as2 order by f1, f2;

F1           F2                                      
------------ ----------------------------------------
1            11                                      
2            22                                      
3            33                                      
4            44                                      

4 rows fetched.

SQL> drop table t_create_as2;

Succeed.

SQL> 
SQL> create table t_create_as2 as select * from (select * from t_create_as1);

Succeed.

SQL> desc t_create_as2;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
F1                                  NOT NULL BINARY_INTEGER                      
F2                                           NUMBER(10)                          

SQL> select * from t_create_as2 order by f1, f2;

F1           F2                                      
------------ ----------------------------------------
1            11                                      
1            11                                      
2            22                                      
2            22                                      
3            33                                      
4            44                                      

6 rows fetched.

SQL> drop table t_create_as2;

Succeed.

SQL> 
SQL> create table t_create_as2 as select * from t_create_as1 union select * from t_create_as1;

Succeed.

SQL> desc t_create_as2;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
F1                                           BINARY_INTEGER                      
F2                                           NUMBER(10)                          

SQL> select * from t_create_as2 order by f1, f2;

F1           F2                                      
------------ ----------------------------------------
1            11                                      
2            22                                      
3            33                                      
4            44                                      

4 rows fetched.

SQL> drop table t_create_as2;

Succeed.

SQL> 
SQL> create table t_create_as2 as select * from t_create_as1 union all select * from t_create_as1;

Succeed.

SQL> desc t_create_as2;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
F1                                           BINARY_INTEGER                      
F2                                           NUMBER(10)                          

SQL> select * from t_create_as2 order by f1, f2;

F1           F2                                      
------------ ----------------------------------------
1            11                                      
1            11                                      
1            11                                      
1            11                                      
2            22                                      
2            22                                      
2            22                                      
2            22                                      
3            33                                      
3            33                                      
4            44                                      
4            44                                      

12 rows fetched.

SQL> drop table t_create_as2;

Succeed.

SQL> 
SQL> create table t_create_as2 as select * from t_create_as1 minus select * from t_create_as1;

Succeed.

SQL> desc t_create_as2;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
F1                                           BINARY_INTEGER                      
F2                                           NUMBER(10)                          

SQL> select * from t_create_as2 order by f1, f2;

F1           F2                                      
------------ ----------------------------------------

0 rows fetched.

SQL> drop table t_create_as2;

Succeed.

SQL> 
SQL> create table t_create_as2 as select f1+1 as f1, f2+1 as f2 from t_create_as1;

Succeed.

SQL> desc t_create_as2;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
F1                                           BINARY_BIGINT                       
F2                                           NUMBER                              

SQL> select * from t_create_as2 order by f1, f2;

F1                   F2                                      
-------------------- ----------------------------------------
2                    12                                      
2                    12                                      
3                    23                                      
3                    23                                      
4                    34                                      
5                    45                                      

6 rows fetched.

SQL> drop table t_create_as2;

Succeed.

SQL> 
SQL> drop table if exists t_create_tinyint;

Succeed.

SQL> create table t_create_tinyint(x tinyint, y tinyint unsigned);

Succeed.

SQL> desc t_create_tinyint;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
X                                            BINARY_INTEGER                      
Y                                            BINARY_UINT32                       

SQL> 
SQL> drop table if exists t_create_double;

Succeed.

SQL> create table t_create_double(x tinyint, y double unsigned);

CT-00601, [1:50]Sql syntax error: constraint expected but unsigned found
SQL> create table t_create_double(x tinyint, y char(100) unsigned);

CT-00601, [1:53]Sql syntax error: constraint expected but unsigned found
SQL> create table t_create_double(x tinyint, y number unsigned);

CT-00601, [1:50]Sql syntax error: constraint expected but unsigned found
SQL> 
SQL> --check column size when create table
SQL> DROP TABLE IF EXISTS max_row_len;

Succeed.

SQL> CREATE TABLE max_row_len(c1 INTEGER, c2 VARCHAR(4000), c3 VARCHAR(4000),c4 VARCHAR(4000), c5 VARCHAR(4000),c6 VARCHAR(4000), c7 VARCHAR(4000),c8 VARCHAR(4000), c9 VARCHAR(4000));

Succeed.

SQL> CREATE TABLE max_row_len(c1 CLOB, c2 VARCHAR(4000), c3 VARCHAR(4000),c4 VARCHAR(4000), c5 VARCHAR(4000),c6 VARCHAR(4000), c7 VARCHAR(4000),c8 VARCHAR(4000), c9 VARCHAR(4000));

CT-01301, SYS.MAX_ROW_LEN already exists
SQL> CREATE TABLE max_row_len(c1 INTEGER, c2 VARCHAR(4000), c3 VARCHAR(4000),c4 VARCHAR(4000), c5 VARCHAR(4000),c6 VARCHAR(4000), c7 VARCHAR(4000),c8 VARCHAR(4000));

CT-01301, SYS.MAX_ROW_LEN already exists
SQL> DROP TABLE max_row_len;

Succeed.

SQL> 
SQL> 
SQL> DROP TABLE IF EXISTS "TM_FMBASEPACKAGE";

Succeed.

SQL> CREATE TABLE "TM_FMBASEPACKAGE" ( "MOID" NUMBER(19) NOT NULL , "PACKAGENAME" VARCHAR2(255) NULL , "PACKAGEPATH" VARCHAR2(255) NULL , "PACKAGEDESC" VARCHAR2(512) NULL , "PACKAGESIZE" NUMBER(19) NULL , "PACKAGETYPE" NUMBER(10) NULL , "UPDATEPOLICY" NUMBER(10) NULL , "PACKAGEDATE" VARCHAR2(255) NULL , "PACKAGESTATUS" VARCHAR2(255) NULL , "UPDATESTATE" NUMBER(10) NULL ) LOGGING COMPRESS FOR ALL1 NOCACHE ;

CT-00601, [1:391]Sql syntax error: ALL or DIRECT_LOAD expected
SQL> CREATE TABLE "TM_FMBASEPACKAGE" ( "MOID" NUMBER(19) NOT NULL , "PACKAGENAME" VARCHAR2(255) NULL , "PACKAGEPATH" VARCHAR2(255) NULL , "PACKAGEDESC" VARCHAR2(512) NULL , "PACKAGESIZE" NUMBER(19) NULL , "PACKAGETYPE" NUMBER(10) NULL , "UPDATEPOLICY" NUMBER(10) NULL , "PACKAGEDATE" VARCHAR2(255) NULL , "PACKAGESTATUS" VARCHAR2(255) NULL , "UPDATESTATE" NUMBER(10) NULL ) LOGGING NOCOMPRESS NOCACHE ;

Succeed.

SQL> drop table TM_FMBASEPACKAGE;

Succeed.

SQL> CREATE TABLE "TM_FMBASEPACKAGE" ( "MOID" NUMBER(19) NOT NULL , "PACKAGENAME" VARCHAR2(255) NULL , "PACKAGEPATH" VARCHAR2(255) NULL , "PACKAGEDESC" VARCHAR2(512) NULL , "PACKAGESIZE" NUMBER(19) NULL , "PACKAGETYPE" NUMBER(10) NULL , "UPDATEPOLICY" NUMBER(10) NULL , "PACKAGEDATE" VARCHAR2(255) NULL , "PACKAGESTATUS" VARCHAR2(255) NULL , "UPDATESTATE" NUMBER(10) NULL ) LOGGING COMPRESS NOCACHE ;

CT-00130, Operation create compress table is not supported on non heap table and non user bitmap tablespace
SQL> drop table TM_FMBASEPACKAGE;

CT-00843, The table or view SYS.TM_FMBASEPACKAGE does not exist.
SQL> CREATE TABLE "TM_FMBASEPACKAGE" ( "MOID" NUMBER(19) NOT NULL , "PACKAGENAME" VARCHAR2(255) NULL , "PACKAGEPATH" VARCHAR2(255) NULL , "PACKAGEDESC" VARCHAR2(512) NULL , "PACKAGESIZE" NUMBER(19) NULL , "PACKAGETYPE" NUMBER(10) NULL , "UPDATEPOLICY" NUMBER(10) NULL , "PACKAGEDATE" VARCHAR2(255) NULL , "PACKAGESTATUS" VARCHAR2(255) NULL , "UPDATESTATE" NUMBER(10) NULL ) LOGGING COMPRESS FOR ALL OPERATIONS  NOCACHE ;

Succeed.

SQL> drop table TM_FMBASEPACKAGE;

Succeed.

SQL> CREATE TABLE "TM_FMBASEPACKAGE" ( "MOID" NUMBER(19) NOT NULL , "PACKAGENAME" VARCHAR2(255) NULL , "PACKAGEPATH" VARCHAR2(255) NULL , "PACKAGEDESC" VARCHAR2(512) NULL , "PACKAGESIZE" NUMBER(19) NULL , "PACKAGETYPE" NUMBER(10) NULL , "UPDATEPOLICY" NUMBER(10) NULL , "PACKAGEDATE" VARCHAR2(255) NULL , "PACKAGESTATUS" VARCHAR2(255) NULL , "UPDATESTATE" NUMBER(10) NULL ) LOGGING COMPRESS FOR DIRECT_LOAD OPERATIONS  NOCACHE ;

Succeed.

SQL> drop table TM_FMBASEPACKAGE;

Succeed.

SQL> 
SQL> drop table if exists tbl1;

Succeed.

SQL> create table tbl1 as select substring('abcABC 123456 !@#$%^&',1,2) c from dual;

Succeed.

SQL> desc tbl1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C                                            VARCHAR(2 BYTE)                     

SQL> drop table if exists tbl1;

Succeed.

SQL> create table tbl1 as select substring('abcABC 123456 !@#$%^&',1,100) c from dual;

Succeed.

SQL> desc tbl1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C                                            VARCHAR(21 BYTE)                    

SQL> drop table if exists tbl1;

Succeed.

SQL> create table tbl1 as select substring('abcABC 123456 !@#$%^&',5,10) c from dual;

Succeed.

SQL> desc tbl1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C                                            VARCHAR(10 BYTE)                    

SQL> drop table if exists tbl1;

Succeed.

SQL> create table tbl1 as select substring('abcABC 123456 !@#$%^&',-5,4) c from dual;

Succeed.

SQL> desc tbl1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C                                            VARCHAR(4 BYTE)                     

SQL> 
SQL> drop table if exists tbl2;

Succeed.

SQL> create table tbl2 (str varchar(10), f1 int, f2 int, f3 number(10), f4 number(8,2));

Succeed.

SQL> drop table if exists tbl1;

Succeed.

SQL> create table tbl1 as select substring('abcABC 123456 !@#$%^&',f1,4) c from tbl2;

Succeed.

SQL> desc tbl1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C                                            VARCHAR(21 BYTE)                    

SQL> drop table if exists tbl1;

Succeed.

SQL> create table tbl1 as select substring(str,1,4) c from tbl2;

Succeed.

SQL> desc tbl1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C                                            VARCHAR(10 BYTE)                    

SQL> drop table if exists tbl1;

Succeed.

SQL> create table tbl1 as select substring(str,f1,f2) c from tbl2;

Succeed.

SQL> desc tbl1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C                                            VARCHAR(10 BYTE)                    

SQL> drop table if exists tbl1;

Succeed.

SQL> create table tbl1 as select case when reverse('abc')='cba' then 'a' else 'b' end c from dual;

Succeed.

SQL> desc tbl1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C                                            CHAR(1 BYTE)                        

SQL> drop table if exists tbl1;

Succeed.

SQL> create table tbl1 as select case when reverse('abc')='cba' then 'a' else 7 end c from dual;

Succeed.

SQL> 
SQL> drop table if exists tbl1;

Succeed.

SQL> create table tbl1 as select case when reverse('abc')='cba' then '1231a' else 'ab' end c from dual;

Succeed.

SQL> desc tbl1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C                                            CHAR(5 BYTE)                        

SQL> drop table if exists tbl1;

Succeed.

SQL> create table tbl1 as select case when reverse('abc')='cba' then f1 else str end c from tbl2;

Succeed.

SQL> 
SQL> drop table if exists tbl1;

Succeed.

SQL> create table tbl1 as select case when reverse(str)='cfa' then null else f4 end c from tbl2;

Succeed.

SQL> desc tbl1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C                                            NUMBER(8, 2)                        

SQL> drop table if exists tbl1;

Succeed.

SQL> create table tbl1 as select case when reverse(str)='cfa' then f3 else null end c from tbl2;

Succeed.

SQL> desc tbl1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C                                            NUMBER(10)                          

SQL> drop table if exists tbl1;

Succeed.

SQL> create table tbl1 as select case when reverse(str)='cfa' then f3 else f4 end c from tbl2;

Succeed.

SQL> desc tbl1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C                                            NUMBER                              

SQL> drop table if exists tbl1;

Succeed.

SQL> drop table if exists tbl2;

Succeed.

SQL> 
SQL> desc -q select case when 1 != 2 then cast(123123.123 as number(38)) else cast(1231231.123 as number(20, 10)) end as B from dual;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
B                                            NUMBER                              

SQL> desc -q select case when 1 != 2 then cast(123123.123 as number(38)) end as B from dual;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
B                                            NUMBER(38)                          

SQL> desc -q select case when 1 != 2 then cast(123123.123 as number(38,2)) else cast(1231231.123 as number(38, 2)) end as B from dual;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
B                                            NUMBER(38, 2)                       

SQL> desc -q select case when 1 != 2 then cast(123123.123 as number(38,2)) else cast(1231231.123 as number(38, 3)) end as B from dual;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
B                                            NUMBER                              

SQL> 
SQL> create table null_col_table as select null as b from dual;

CT-00620, Can't set NULL value for column 'B'
SQL> 
SQL> drop table if exists aa;

Succeed.

SQL> create table aa(i int);

Succeed.

SQL> alter table aa add add_column varchar(3900) default (select lpad('bbbbb',395,'aaaaa') from dual);

CT-01316, [1:61]Unexpected SUBSELECT
SQL> drop FUNCTION if exists func_aa;

Succeed.

SQL> CREATE FUNCTION func_aa(A varchar, B int)
  2 RETURN varchar
  3 AS
  4 BEGIN
  5    return lpad(A,B,'aaaaa');
  6 END;
  7 /

Succeed.

SQL> alter table aa add add_column varchar(3900) default func_aa('bbbbb', 10);

Succeed.

SQL> insert into aa values (1,default);

1 rows affected.

SQL> select * from aa;

I            ADD_COLUMN                                                      
------------ ----------------------------------------------------------------
1            aaaaabbbbb                                                      

1 rows fetched.

SQL> drop table aa;

Succeed.

SQL> 
SQL> 
SQL> drop table if exists GCT_TAB_TEST1;

Succeed.

SQL> create table GCT_TAB_TEST1 as select cast(null as number(30,10)) as b from dual;

Succeed.

SQL> desc GCT_TAB_TEST1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
B                                            NUMBER(30, 10)                      

SQL> select * from GCT_TAB_TEST1;

B                                       
----------------------------------------
                                        

1 rows fetched.

SQL> 
SQL> drop table if exists GCT_TAB_TEST1;

Succeed.

SQL> create table GCT_TAB_TEST1 as select cast(null as varchar(200)) as b from dual;

Succeed.

SQL> desc GCT_TAB_TEST1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
B                                            VARCHAR(200 BYTE)                   

SQL> select * from GCT_TAB_TEST1;

B                                                               
----------------------------------------------------------------
                                                                

1 rows fetched.

SQL> 
SQL> drop table if exists GCT_TAB_TEST1;

Succeed.

SQL> create table GCT_TAB_TEST1 as select cast(null as binary_integer) as b from dual;

Succeed.

SQL> desc GCT_TAB_TEST1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
B                                            BINARY_INTEGER                      

SQL> select * from GCT_TAB_TEST1;

B           
------------
            

1 rows fetched.

SQL> 
SQL> drop table if exists GCT_TAB_TEST1;

Succeed.

SQL> create table GCT_TAB_TEST1 as select cast(null as number) || '' as b from dual;

Succeed.

SQL> desc GCT_TAB_TEST1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
B                                            VARCHAR(52 BYTE)                    

SQL> 
SQL> drop table if exists GCT_TAB_TEST1;

Succeed.

SQL> create table GCT_TAB_TEST1 as select cast(null as double) || ''  as b from dual;

Succeed.

SQL> desc GCT_TAB_TEST1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
B                                            VARCHAR(24 BYTE)                    

SQL> 
SQL> drop table if exists GCT_TAB_TEST1;

Succeed.

SQL> create table GCT_TAB_TEST1 as select cast(null as double) || systimestamp  as b from dual;

Succeed.

SQL> desc GCT_TAB_TEST1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
B                                            VARCHAR(72 BYTE)                    

SQL> 
SQL> drop table if exists GCT_TAB_TEST1;

Succeed.

SQL> create table GCT_TAB_TEST1 as select systimestamp  as b from dual;

Succeed.

SQL> desc GCT_TAB_TEST1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
B                                            TIMESTAMP(6) WITH TIME ZONE         

SQL> 
SQL> drop table if exists GCT_TAB_TEST1;

Succeed.

SQL> create table GCT_TAB_TEST1 as select systimestamp(4)  as b from dual;

Succeed.

SQL> desc GCT_TAB_TEST1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
B                                            TIMESTAMP(4) WITH TIME ZONE         

SQL> 
SQL> drop table if exists GCT_TAB_TEST1;

Succeed.

SQL> create table GCT_TAB_TEST1 as select cast(systimestamp(1) as timestamp(5))  as b from dual;

Succeed.

SQL> desc GCT_TAB_TEST1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
B                                            TIMESTAMP(5)                        

SQL> 
SQL> drop table if exists GCT_TAB_TEST1;

Succeed.

SQL> create table GCT_TAB_TEST1 as  select cast(1 as number(30, 2)) + cast(2 as  number(30,2)) XX from dual;

Succeed.

SQL> desc GCT_TAB_TEST1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
XX                                           NUMBER                              

SQL> select * from GCT_TAB_TEST1;

XX                                      
----------------------------------------
3                                       

1 rows fetched.

SQL> 
SQL> drop table if exists GCT_TAB_TEST1;

Succeed.

SQL> create table GCT_TAB_TEST1 as select systimestamp - sysdate  as b from dual;

Succeed.

SQL> desc GCT_TAB_TEST1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
B                                            INTERVAL DAY(7) TO SECOND(6)        

SQL> 
SQL> drop table if exists GCT_TAB_TEST1;

Succeed.

SQL> drop view if exists GCT_VIEW_TEST1;

Succeed.

SQL> create table GCT_TAB_TEST1(x number(10));

Succeed.

SQL> create view GCT_VIEW_TEST1 as select case when x != 100 then x end as id from GCT_TAB_TEST1;

Succeed.

SQL> desc GCT_VIEW_TEST1

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
ID                                           NUMBER(10)                          

SQL> 
SQL> drop table if exists GCT_TAB_TEST1;

Succeed.

SQL> create table GCT_TAB_TEST1 as select cast(null as varchar(300)) || null as C from dual;

Succeed.

SQL> desc GCT_TAB_TEST1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C                                            VARCHAR(300 BYTE)                   

SQL> 
SQL> drop table if exists GCT_TAB_TEST1;

Succeed.

SQL> create table GCT_TAB_TEST1 as select null + dummy as b from dual;

Succeed.

SQL> desc GCT_TAB_TEST1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
B                                            NUMBER                              

SQL> 
SQL> drop table if exists GCT_TAB_TEST1;

Succeed.

SQL> create table GCT_TAB_TEST1 as select 1 + dummy as b from dual;

CT-00636, [1:40]Invalid number -- unexpected character
SQL> 
SQL> drop table if exists GCT_TAB_TEST1;

Succeed.

SQL> create table GCT_TAB_TEST1 as select  1 + null + '2' as b from dual;

CT-00620, Can't set NULL value for column 'B'
SQL> desc GCT_TAB_TEST1;

CT-00843, [1:15]The table or view SYS.GCT_TAB_TEST1 does not exist.

SQL> 
SQL> drop table if exists GCT_TAB_TEST1;

Succeed.

SQL> create table GCT_TAB_TEST1 as select  1 + null + '2asdfa' as b from dual;

CT-00620, Can't set NULL value for column 'B'
SQL> desc GCT_TAB_TEST1;

CT-00843, [1:15]The table or view SYS.GCT_TAB_TEST1 does not exist.

SQL> 
SQL> drop table if exists GCT_TAB_TEST1;

Succeed.

SQL> create table GCT_TAB_TEST1 as select  null + '2asdfa' as b from dual;

CT-00620, Can't set NULL value for column 'B'
SQL> desc GCT_TAB_TEST1;

CT-00843, [1:15]The table or view SYS.GCT_TAB_TEST1 does not exist.

SQL> 
SQL> drop table if exists GCT_TAB_TEST1;

Succeed.

SQL> create table GCT_TAB_TEST1 as select  '2asdfa'+null as b from dual;

CT-00620, Can't set NULL value for column 'B'
SQL> desc GCT_TAB_TEST1;

CT-00843, [1:15]The table or view SYS.GCT_TAB_TEST1 does not exist.

SQL> 
SQL> drop table if exists GCT_TAB_TEST1;

Succeed.

SQL> create table GCT_TAB_TEST1 as select  1 + 2 + systimestamp +null as b from dual;

Succeed.

SQL> desc GCT_TAB_TEST1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
B                                            TIMESTAMP(6) WITH TIME ZONE         

SQL> 
SQL> drop table if exists GCT_TAB_TEST1;

Succeed.

SQL> create table GCT_TAB_TEST1 as select  1 + 2 + null as b from dual;

CT-00620, Can't set NULL value for column 'B'
SQL> desc GCT_TAB_TEST1;

CT-00843, [1:15]The table or view SYS.GCT_TAB_TEST1 does not exist.

SQL> 
SQL> drop table if exists GCT_TAB_TEST1;

Succeed.

SQL> create table GCT_TAB_TEST1 as select  1 + true + null as b from dual;

CT-01320, [1:48]Undefined operator: BINARY_INTEGER + BOOLEAN
SQL> desc GCT_TAB_TEST1;

CT-00843, [1:15]The table or view SYS.GCT_TAB_TEST1 does not exist.

SQL> 
SQL> drop table if exists GCT_TAB_TEST1;

Succeed.

SQL> create table GCT_TAB_TEST1 as select  '' + 2 as b from dual;

CT-00620, Can't set NULL value for column 'B'
SQL> desc GCT_TAB_TEST1;

CT-00843, [1:15]The table or view SYS.GCT_TAB_TEST1 does not exist.

SQL> 
SQL> -- zero-length columns is not allowed
SQL> drop table if exists GCT_TAB_TEST1;

Succeed.

SQL> create table GCT_TAB_TEST1 as select substr(null, 0, 100)  as b from dual;

CT-00620, Can't set NULL value for column 'B'
SQL> create table GCT_TAB_TEST1 as select '' as b from dual;

CT-00620, Can't set NULL value for column 'B'
SQL> 
SQL> drop table if exists GCT_TAB_TEST1;

Succeed.

SQL> create table GCT_TAB_TEST1 as select null as b from dual;

CT-00620, Can't set NULL value for column 'B'
SQL> 
SQL> drop table if exists GCT_TAB_TEST1;

Succeed.

SQL> create table GCT_TAB_TEST1 as select default as b from dual;

CT-00601, [1:38]Sql syntax error: unexpected DEFAULT occurs
SQL> 
SQL> drop table if exists GCT_TAB_TEST1;

Succeed.

SQL> create table GCT_TAB_TEST1 as select null + 1.333 as b from dual;

CT-00620, Can't set NULL value for column 'B'
SQL> create table GCT_TAB_TEST1 as select null * systimestamp as b from dual;

CT-01320, [1:43]Undefined operator: VARCHAR * TIMESTAMP_TZ
SQL> create table GCT_TAB_TEST1 as select null & 100 as b from dual;

CT-00620, Can't set NULL value for column 'B'
SQL> create table GCT_TAB_TEST1 as select null >> 100 as b from dual;

CT-00620, Can't set NULL value for column 'B'
SQL> create table GCT_TAB_TEST1 as select null % 100 as b from dual;

CT-00620, Can't set NULL value for column 'B'
SQL> create table GCT_TAB_TEST1 as select null || null as C from dual;

CT-00620, Can't set NULL value for column 'C'
SQL> 
SQL> -- create view: do not verify zero-length column
SQL> drop view if exists GCT_VIEW_TEST1;

Succeed.

SQL> create view GCT_VIEW_TEST1 as select substr(null, 0, 100)  as b from dual;

Succeed.

SQL> desc GCT_VIEW_TEST1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
B                                            VARCHAR                             

SQL> 
SQL> drop view if exists GCT_VIEW_TEST1;

Succeed.

SQL> create view GCT_VIEW_TEST1 as select null as b from dual;

Succeed.

SQL> desc GCT_VIEW_TEST1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
B                                            VARCHAR                             

SQL> 
SQL> drop view if exists GCT_VIEW_TEST1;

Succeed.

SQL> create view GCT_VIEW_TEST1 as select '' as b from dual;

Succeed.

SQL> desc GCT_VIEW_TEST1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
B                                            CHAR                                

SQL> 
SQL> drop view if exists GCT_VIEW_TEST1;

Succeed.

SQL> create view GCT_VIEW_TEST1 as select default as b from dual;

CT-00601, [1:36]Sql syntax error: unexpected DEFAULT occurs
SQL> desc GCT_VIEW_TEST1;

CT-00843, [1:15]The table or view SYS.GCT_VIEW_TEST1 does not exist.

SQL> 
SQL> drop view if exists GCT_VIEW_TEST1;

Succeed.

SQL> create view GCT_VIEW_TEST1 as select null * null as b from dual;

Succeed.

SQL> desc GCT_VIEW_TEST1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
B                                            NUMBER                              

SQL> desc -q select null | null as b from dual;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
B                                            BINARY_BIGINT                       

SQL> desc -q select null || null as b from dual;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
B                                            VARCHAR                             

SQL> desc -q select '' || '' as b from dual;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
B                                            VARCHAR                             

SQL> 
SQL> drop view if exists GCT_VIEW_TEST1;

Succeed.

SQL> create view GCT_VIEW_TEST1 as select NULL as haha from dual;

Succeed.

SQL> select * from GCT_VIEW_TEST1 union select 12313 from dual;

HAHA       
-----------
12313      
           

2 rows fetched.

SQL> desc -q select * from GCT_VIEW_TEST1 union select 12313 from dual;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
HAHA                                         VARCHAR(11 BYTE)                    

SQL> 
SQL> desc -q select * from GCT_VIEW_TEST1 union all select systimestamp from dual;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
HAHA                                         VARCHAR(48 BYTE)                    

SQL> desc -q select * from GCT_VIEW_TEST1 union all select '1' from dual;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
HAHA                                         VARCHAR(1 BYTE)                     

SQL> desc -q select * from GCT_VIEW_TEST1 union all select '' from dual;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
HAHA                                         VARCHAR                             

SQL> desc -q select * from GCT_VIEW_TEST1 union all select 1313.3333 from dual;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
HAHA                                         VARCHAR(52 BYTE)                    

SQL> desc -q select * from GCT_VIEW_TEST1 union all select NULL::number(30) from dual;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
HAHA                                         VARCHAR(52 BYTE)                    

SQL> desc -q select NULL::number(30) ABC from dual union select * from GCT_VIEW_TEST1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
ABC                                          VARCHAR(52 BYTE)                    

SQL> desc -q select NULL BBC from dual union select * from GCT_VIEW_TEST1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
BBC                                          VARCHAR                             

SQL> desc -q select NULL::varchar(300) ABC from dual union select * from GCT_VIEW_TEST1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
ABC                                          VARCHAR(300 BYTE)                   

SQL> 
SQL> drop view if exists GCT_VIEW_TEST1;

Succeed.

SQL> drop table if exists GCT_TAB_TEST1;

Succeed.

SQL> 
SQL> --DTS2018111503396
SQL> drop table if exists t_not_null_base_001;

Succeed.

SQL> drop table if exists t_not_null_base_002;

Succeed.

SQL> create table t_not_null_base_001(id int,c_int int not null,c_char char(10) not null,c_vchar varchar(100) not null,c_date date,c_clob clob not null);

Succeed.

SQL> create table t_not_null_base_002(id int,c_int int not null,c_char char(10) not null,c_vchar varchar(100) not null,c_date date,c_clob clob not null);

Succeed.

SQL> 
SQL> drop table if exists t_not_null_test_121;

Succeed.

SQL> create table t_not_null_test_121(c1,c2,c3 default 'aaa') as select t1.c_clob c1,t2.c_date c2,t3.c_vchar||t3.c_vchar c3 from t_not_null_base_001 t1 right join t_not_null_base_002 t2 on t1.id=t2.id right join t_not_null_base_001 t3 on t3.id=t1.id;

Succeed.

SQL> 
SQL> --extend 
SQL> drop table if exists t_default_test_extend1;

Succeed.

SQL> create table t_default_test_extend1(c1 default 'charsizemorethan10') as select c_char from t_not_null_base_001;--error

CT-01357, [1:48]The default size (18) is too large for column "C1" (10)
SQL> 
SQL> drop table if exists t_default_test_extend2;

Succeed.

SQL> create table t_default_test_extend2(c1 int ,c2  default 'aaa'); --error

CT-00601, [1:63]Sql syntax error: As-select clause expected
SQL> 
SQL> drop table if exists t_default_test_extend3;

Succeed.

SQL> create table t_default_test_extend3(c1 varchar(100) default 'charsizemorethan10') as select c_char from t_not_null_base_001;--error

CT-00601, Sql syntax error: may not specify column datatypes in CREATE TABLE
SQL> 
SQL> --clean test data
SQL> drop table if exists  t_not_null_base_001;

Succeed.

SQL> drop table if exists  t_not_null_base_002;

Succeed.

SQL> drop table if exists  t_not_null_test_121;

Succeed.

SQL> drop table if exists  t_default_test_extend1;

Succeed.

SQL> drop table if exists  t_default_test_extend2;

Succeed.

SQL> drop table if exists  t_default_test_extend3;

Succeed.

SQL> 
SQL> --create table t2(f1 default XXX on update XXX) as select XXX;
SQL> drop table if exists default_update_t1;

Succeed.

SQL> drop table if exists default_update_t2;

Succeed.

SQL> create table default_update_t1 (t1_f1 int,t1_f2 timestamp(3) default to_timestamp('2018-01-25','yyyy-mm-dd'));

Succeed.

SQL> create table default_update_t2 (t2_f1 , t1_f2 default to_timestamp('2018-01-27','yyyy-mm-dd') ON UPDATE to_timestamp('2018-01-28','yyyy-mm-dd')) as  select t1_f1,t1_f2 from default_update_t1;

Succeed.

SQL> 
SQL> drop table if exists default_update_t2;

Succeed.

SQL> create table default_update_t2 (t2_f1 , t1_f2 timestamp(3) default to_timestamp('2018-01-27','yyyy-mm-dd') ON UPDATE to_timestamp('2018-01-28','yyyy-mm-dd')) as  
  2 select t1_f1,t1_f2 from default_update_t1;--error

CT-00601, Sql syntax error: may not specify column datatypes in CREATE TABLE
SQL> 
SQL> drop table if exists default_update_t1;

Succeed.

SQL> drop table if exists default_update_t2;

Succeed.

SQL> 
SQL> drop table if exists DTS2018121110247;

Succeed.

SQL> create table DTS2018121110247 (c1 bigint unsigned);

CT-00101, [1:35]Capability: datatype not supported
SQL> drop table if exists DTS2018121110247;

Succeed.

SQL> create table DTS2018121110247 (c1 int unsigned);

Succeed.

SQL> 
SQL> create table tx (c1 int default ge_000S%  );

CT-00601, [1:40]Sql syntax error: expression error
SQL> --DTS2018122113240
SQL> drop table if exists create_table_nvarchar;

Succeed.

SQL> create table create_table_nvarchar (id int ,name nvarchar(10));

Succeed.

SQL> desc create_table_nvarchar

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
ID                                           BINARY_INTEGER                      
NAME                                         VARCHAR(10 CHAR)                    

SQL> alter table create_table_nvarchar modify name default 'abc';

Succeed.

SQL> desc create_table_nvarchar

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
ID                                           BINARY_INTEGER                      
NAME                                         VARCHAR(10 CHAR)                    

SQL> insert into create_table_nvarchar (id) values (5);

1 rows affected.

SQL> select * from create_table_nvarchar;

ID           NAME                                                        
------------ ------------------------------------------------------------
5            abc                                                         

1 rows fetched.

SQL> 
SQL> --DTS2019011713884
SQL> CREATE USER REUSE_ENTRY_USER IDENTIFIED BY Cantian_234;

Succeed.

SQL> GRANT DBA TO REUSE_ENTRY_USER;

Succeed.

SQL> SET SERVEROUT ON;

ON
SQL> DECLARE
  2     ID1 BIGINT;
  3     ID2 BIGINT;
  4 BEGIN
  5     EXECUTE IMMEDIATE 'CREATE TABLE REUSE_ENTRY_USER.REUSE_ENTRY_TEST(I INT)';
  6     SELECT ID INTO ID1 FROM SYS_TABLES WHERE NAME='REUSE_ENTRY_TEST';
  7     EXECUTE IMMEDIATE 'DROP TABLE REUSE_ENTRY_USER.REUSE_ENTRY_TEST PURGE';
  8     EXECUTE IMMEDIATE 'CREATE TABLE REUSE_ENTRY_USER.REUSE_ENTRY_TEST(I INT)';
  9     SELECT ID INTO ID2 FROM SYS_TABLES WHERE NAME='REUSE_ENTRY_TEST';
 10     IF ID1=ID2 THEN
 11         dbe_output.print_line('REUSE ENTRY!');
 12     ELSE
 13          dbe_output.print_line(ID1);
 14          dbe_output.print_line(ID2);
 15     END IF; 
 16 END;
 17 /

REUSE ENTRY!

PL/SQL procedure successfully completed.

SQL> DROP TABLE REUSE_ENTRY_USER.REUSE_ENTRY_TEST PURGE;

Succeed.

SQL> 
SQL> --test max table count for userId
SQL> create or replace procedure test_table_limit() as 
  2     i int;
  3 begin	
  4 	for i in 0 ..16777216
  5 	loop
  6 	execute immediate 'create table table_limit_'||i||'(id int)';
  7 	end loop;
  8 end;
  9 /

Succeed.

SQL> 
SQL> drop table if exists default_update_t3;

Succeed.

SQL> drop sequence if exists seq_001;

Succeed.

SQL> drop sequence if exists seq_002;

Succeed.

SQL> create sequence seq_001 start with 0 maxvalue 1 minvalue 0 CYCLE nocache; 

Succeed.

SQL> create sequence seq_002 start with 0 maxvalue 4 minvalue 0 INCREMENT BY 2 CYCLE nocache; 

Succeed.

SQL> create table default_update_t3 (
  2 fd_int0 int, 
  3 fd_int1 int default case seq_001.NEXTVAL when 0 then seq_001.currval else 1 end  on update case when seq_002.NEXTVAL >= 2 then (case seq_002.currval when 2  then 2 else 4 end)  else 0 end, 
  4 fd_varchar1 varchar(100) default TRIM(LEADING 'a' FROM TRIM(TRAILING 'b' FROM 'aaaaaaccccccbbbbb')), 
  5 fd_varchar2 varchar(100) default IF('TRUE', IF (0, 'no', 'yes'), 'no'));

Succeed.

SQL> insert into default_update_t3 (fd_int0) values(0);

1 rows affected.

SQL> insert into default_update_t3 (fd_int0) values(1);

1 rows affected.

SQL> insert into default_update_t3 (fd_int0) values(2);

1 rows affected.

SQL> insert into default_update_t3 (fd_int0) values(3);

1 rows affected.

SQL> insert into default_update_t3 (fd_int0) values(4);

1 rows affected.

SQL> select * from default_update_t3 order by fd_int0;

FD_INT0      FD_INT1      FD_VARCHAR1                                                      FD_VARCHAR2                                                     
------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
0            0            cccccc                                                           yes                                                             
1            1            cccccc                                                           yes                                                             
2            0            cccccc                                                           yes                                                             
3            1            cccccc                                                           yes                                                             
4            0            cccccc                                                           yes                                                             

5 rows fetched.

SQL> update default_update_t3 set fd_varchar1 = 'ddddddd' where fd_int0 = 0;

1 rows affected.

SQL> update default_update_t3 set fd_varchar1 = 'ddddddd' where fd_int0 = 1;

1 rows affected.

SQL> update default_update_t3 set fd_varchar1 = 'ddddddd' where fd_int0 = 2;

1 rows affected.

SQL> update default_update_t3 set fd_varchar1 = 'ddddddd' where fd_int0 = 3;

1 rows affected.

SQL> update default_update_t3 set fd_varchar1 = 'ddddddd' where fd_int0 = 4;

1 rows affected.

SQL> select * from default_update_t3 order by fd_int0;

FD_INT0      FD_INT1      FD_VARCHAR1                                                      FD_VARCHAR2                                                     
------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
0            0            ddddddd                                                          yes                                                             
1            2            ddddddd                                                          yes                                                             
2            4            ddddddd                                                          yes                                                             
3            0            ddddddd                                                          yes                                                             
4            2            ddddddd                                                          yes                                                             

5 rows fetched.

SQL> drop table default_update_t3;

Succeed.

SQL> drop sequence seq_002;

Succeed.

SQL> drop sequence seq_001;

Succeed.

SQL> 
SQL> 
SQL> drop table t_join_table_base;

CT-00843, The table or view SYS.T_JOIN_TABLE_BASE does not exist.
SQL> CREATE TABLE t_join_table_base(id int, c_dsval interval day(7) to second(5));

Succeed.

SQL> delete from t_join_table_base;

0 rows affected.

SQL> INSERT INTO t_join_table_base VALUES(5, '-1234 0:0:0.0004');

1 rows affected.

SQL> INSERT INTO t_join_table_base VALUES(5, null);

1 rows affected.

SQL> INSERT INTO t_join_table_base VALUES(5, null);

1 rows affected.

SQL> commit;

Succeed.

SQL> create table aa100 as select t1.c_dsval,null c from t_join_table_base t1 union select null,t1.c_dsval from t_join_table_base t1;

Succeed.

SQL> select count(*) from aa100;

COUNT(*)            
--------------------
3                   

1 rows fetched.

SQL> drop table aa100;

Succeed.

SQL> drop table t_join_table_base;

Succeed.

SQL> 
SQL> --tablename has special char
SQL> CREATE TABLE "hgqioh"gqeri"(f1 int);

CT-00601, [1:22]Sql syntax error: namable char expected but " found
SQL> CREATE TABLE "hgqioh""gqeri"(f1 int);

CT-00601, [1:14]Sql syntax error: invalid variant/object name was found
SQL> CREATE TABLE "hgqioh\"\"gqeri"(f1 int);

CT-00601, [1:23]Sql syntax error: text is incorrect
SQL> 
SQL> drop table if exists t_create_table1;

Succeed.

SQL> create table t_create_table1(f1 int);

Succeed.

SQL> alter table t_create_table1 rename to "hgqioh""gqeri";

CT-00601, [1:39]Sql syntax error: invalid variant/object name was found
SQL> alter table t_create_table1 rename column f1 xxx f2;

CT-00601, [1:46]Sql syntax error: TO expected but xxx found
SQL> alter table t_create_table1 rename column f1 to f2;

Succeed.

SQL> desc t_create_table1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
F2                                           BINARY_INTEGER                      

SQL> drop table t_create_table1;

Succeed.

SQL> 
SQL> --external table error test
SQL> drop table if exists t_create_table1;

Succeed.

SQL> create table afatest6 (
  2     test1    int unique auto_increment,-- primary key auto_increment not null, 
  3     test2    int, --unique auto_increment,
  4     text    varchar(10)
  5 )
  6 organization external(
  7   type loader
  8   directory '.'
  9   access parameters (
 10     records delimited by newline
 11     fields terminated by ','
 12   )
 13   location 'error_test'
 14 );

CT-00101, Capability: specify seialize column on external table not supported
SQL> 
SQL> create table Student12  --current not suppport the symbol of Unicode
  2 (
  3 StudentSex nvarchar(2) CHECK(StudentSex=N'男' or StudentSex=N'女') 
  4 );

CT-00601, [3:42]Sql syntax error: invalid word ''男'' found
SQL> drop table if exists t_sub_query_001;

Succeed.

SQL> drop table if exists t_ct_sub_137;

Succeed.

SQL> drop table if exists t_ct_sub_138;

Succeed.

SQL> drop table if exists t_ct_sub_139;

Succeed.

SQL> create table t_sub_query_001(id int,c_int int not null,c_vchar varchar(100) not null,c_clob clob not null,c_blob blob not null,c_date date)
  2 partition by range (c_int)
  3 (partition t001_1 values less than (1000),
  4 partition t001_2 values less than (2000),partition t001_3 values less than (4000),
  5 partition t001_4 values less than (maxvalue)
  6 );

Succeed.

SQL> insert into t_sub_query_001 values(1,1000,'abc123',lpad('123abc',50,'abc'),lpad('11100011',50,'1100'),to_timestamp(to_char('1800-01-01 10:51:47'),'yyyy-mm-dd hh24:mi:ss'));

1 rows affected.

SQL> CREATE or replace procedure proc_insert(tname varchar,startall int,endall int) as
  2 sqlst varchar(500);
  3 BEGIN
  4 FOR i IN startall..endall LOOP
  5 sqlst := 'insert into ' || tname ||' select id+'||i||',c_int+'||i||',c_vchar||'||i||',c_clob||'||i||',c_blob'||',c_date from '||tname|| ' where id=1';
  6 execute immediate sqlst;
  7 END LOOP;
  8 END;
  9 /

Succeed.

SQL> exec proc_insert('t_sub_query_001',1,5);

PL/SQL procedure successfully completed.

SQL> commit;

Succeed.

SQL> create table t_ct_sub_137 as select stddev_pop((select c_int from t_sub_query_001 t2 where t1.id=t2.id)) over(PARTITION BY id order by 1) c from t_sub_query_001 t1;

Succeed.

SQL> create table t_ct_sub_138 as select row_number((select c_int from t_sub_query_001 t2 where t1.id=t2.id)) over(PARTITION BY id order by 1) c from t_sub_query_001 t1;

CT-00615, [1:37]Invalid argument number for ROW_NUMBER, min=0, max=0
SQL> create table t_ct_sub_139 as select *,row_number() over(PARTITION BY id order by c_int) num  from t_sub_query_001;

Succeed.

SQL> drop table if exists t_sub_query_001;

Succeed.

SQL> drop table if exists t_ct_sub_137;

Succeed.

SQL> drop table if exists t_ct_sub_138;

Succeed.

SQL> drop table if exists t_ct_sub_139;

Succeed.

SQL> drop table if exists t_order_base_000;

Succeed.

SQL> drop table if exists t_ct_sub_062;

Succeed.

SQL> CREATE TABLE t_order_base_000("ID" INT NOT NULL, "CHR_FIELD" VARCHAR(30), "VALUE" NUMBER);

Succeed.

SQL> insert into t_order_base_000 select rownum, decode(mod(rownum, 2), 0, NULL, rpad('CHR_', 10, chr(rownum + 64))), decode(mod(rownum, 3), 0, NULL, rownum * 10000) from dual connect by rownum < 6;

5 rows affected.

SQL> commit;

Succeed.

SQL> create table t_ct_sub_062(c1 default 'aaa' constraint t_ct_sub_062con check(c1 is not null) unique) as select distinct CHR_FIELD c1 from t_order_base_000 where CHR_FIELD is not null order by c1 desc nulls last;

Succeed.

SQL> select distinct CHR_FIELD c1 from t_order_base_000 where CHR_FIELD is not null order by c1 desc nulls last;

C1
------------------------------
CHR_EEEEEE
CHR_CCCCCC
CHR_AAAAAA

3 rows fetched.

SQL> select * from t_ct_sub_062;

C1
------------------------------
CHR_AAAAAA
CHR_CCCCCC
CHR_EEEEEE

3 rows fetched.

SQL> drop table if exists t_order_base_000;

Succeed.

SQL> drop table if exists t_ct_sub_062;

Succeed.

SQL> drop table if exists  t_ct_sub_06o;

Succeed.

SQL> create table t_ct_sub_06o(c1 int default 5 constraint t_ct_sub_062con primary key constraint t_ct_sub_062con1 primary key, age int);

CT-00601, Sql syntax error: duplicate or conflicting primary key/unique specifications
SQL> select CONSTRAINT_NAME, CONSTRAINT_TYPE, TABLE_NAME from all_constraints where TABLE_NAME like  'T_CT_SUB_06O' order by CONSTRAINT_NAME asc;

CONSTRAINT_NAME                                                  CONSTRAINT_TYPE TABLE_NAME
---------------------------------------------------------------- --------------- ----------------------------------------------------------------

0 rows fetched.

SQL> drop table if exists  t_ct_sub_06o;

Succeed.

SQL> create table t_ct_sub_06o(c1 int default 5 constraint t_ct_sub_062con check(c1 > 2) constraint t_ct_sub_062con1 check(c1 > 3));

CT-00601, [1:113]Sql syntax error: duplicate or conflicting check specifications
SQL> select CONSTRAINT_NAME, CONSTRAINT_TYPE, TABLE_NAME from all_constraints where TABLE_NAME like  'T_CT_SUB_06O' order by CONSTRAINT_NAME asc;

CONSTRAINT_NAME                                                  CONSTRAINT_TYPE TABLE_NAME
---------------------------------------------------------------- --------------- ----------------------------------------------------------------

0 rows fetched.

SQL> drop table if exists  t_ct_sub_06o;

Succeed.

SQL> create table t_ct_sub_06o(c1 varchar(10) default 'aaa' constraint t_ct_sub_062con check(c1 is not null) constraint t_ct_sub_062con1 unique);

Succeed.

SQL> select CONSTRAINT_NAME, CONSTRAINT_TYPE, TABLE_NAME from all_constraints where TABLE_NAME like  'T_CT_SUB_06O' order by CONSTRAINT_NAME asc;

CONSTRAINT_NAME                                                  CONSTRAINT_TYPE TABLE_NAME
---------------------------------------------------------------- --------------- ----------------------------------------------------------------
T_CT_SUB_062CON                                                  C               T_CT_SUB_06O
T_CT_SUB_062CON1                                                 U               T_CT_SUB_06O

2 rows fetched.

SQL> drop table if exists  t_ct_sub_06o;

Succeed.

SQL> drop table if exists caojiebao_059_1;

Succeed.

SQL> drop table if exists caojiebao_059_2;

Succeed.

SQL> drop table if exists t_cao;

Succeed.

SQL> create table caojiebao_059_1(c1 varchar(10),c2 int,constraint caojiebao_059_1con primary key(c1));

Succeed.

SQL> create table caojiebao_059_2(c1 varchar(10),c2 int,constraint caojiebao_059_2con unique(c1));

Succeed.

SQL> insert into caojiebao_059_1 values('a',2);

1 rows affected.

SQL> insert into caojiebao_059_2 values('a',2);

1 rows affected.

SQL> create table caojiebao_059_2_for(c1 varchar(10) constraint caojiebao_059_2con_for  references caojiebao_059_2(c1) ON DELETE SET NULL,c2 int);

Succeed.

SQL> select CONSTRAINT_NAME, CONSTRAINT_TYPE, TABLE_NAME from all_constraints where TABLE_NAME = 'CAOJIEBAO_059_2_FOR';

CONSTRAINT_NAME                                                  CONSTRAINT_TYPE TABLE_NAME
---------------------------------------------------------------- --------------- ----------------------------------------------------------------
CAOJIEBAO_059_2CON_FOR                                           R               CAOJIEBAO_059_2_FOR

1 rows fetched.

SQL> drop table if exists caojiebao_059_2_for;

Succeed.

SQL> create table caojiebao_059_2_for(c1 varchar(10) constraint caojiebao_059_2con_for  references caojiebao_059_2(c1) ON DELETE SET NULL,c2 int, constraint caojiebao_059_2con_for_1  foreign  key (c1) references caojiebao_059_2(c1) ON DELETE SET NULL);

CT-00789, The foreign key constraint already exists.
SQL> select CONSTRAINT_NAME, CONSTRAINT_TYPE, TABLE_NAME from all_constraints where TABLE_NAME = 'CAOJIEBAO_059_2_FOR';

CONSTRAINT_NAME                                                  CONSTRAINT_TYPE TABLE_NAME
---------------------------------------------------------------- --------------- ----------------------------------------------------------------

0 rows fetched.

SQL> drop table if exists caojiebao_059_2_for;

Succeed.

SQL> create table caojiebao_059_2_for(c1 varchar(10) constraint caojiebao_059_2con_for  references caojiebao_059_2(c1) ON DELETE SET NULL,c2 int, constraint caojiebao_059_2con_for_1  foreign  key (c1) references caojiebao_059_1(c1) ON DELETE SET NULL);

Succeed.

SQL> select CONSTRAINT_NAME, CONSTRAINT_TYPE, TABLE_NAME from all_constraints where TABLE_NAME = 'CAOJIEBAO_059_2_FOR' order by CONSTRAINT_NAME;

CONSTRAINT_NAME                                                  CONSTRAINT_TYPE TABLE_NAME
---------------------------------------------------------------- --------------- ----------------------------------------------------------------
CAOJIEBAO_059_2CON_FOR                                           R               CAOJIEBAO_059_2_FOR
CAOJIEBAO_059_2CON_FOR_1                                         R               CAOJIEBAO_059_2_FOR

2 rows fetched.

SQL> drop table if exists caojiebao_059_2_for;

Succeed.

SQL> drop table if exists t_ct_sub_059_1;

Succeed.

SQL> create table t_ct_sub_059_1(c1 varchar(10),c2 int,constraint t_ct_sub_059_1con primary key(c1));

Succeed.

SQL> insert into t_ct_sub_059_1 values('a',2);

1 rows affected.

SQL> drop table if exists t_ct_sub_059;

Succeed.

SQL> create table t_ct_sub_059(c1 constraint t_ct_sub_059con references t_ct_sub_059_1(c1) ON DELETE SET NULL,c2 constraint t_ct_sub_059con2 references t_ct_sub_059_1(c1) ON DELETE SET NULL) as select * from t_ct_sub_059_1;

CT-00817, In the FOREIGN KEY constraint, the column type does not match the type of the referenced column.
SQL> drop table if exists t_ct_sub_059_1;

Succeed.

SQL> drop table if exists caojiebao_059_1;

Succeed.

SQL> drop table if exists caojiebao_059_2;

Succeed.

SQL> create table cao025(c2 int) PARTITION BY RANGE (c2) INTERVAL(10) (partition p11 values less than (10), partition p12 values less than (1000), partition p13 values less than (maxvalue)) ;

CT-00601, [1:175]Sql syntax error: Maxvalue partition cannot be specified for interval partitioned
SQL> create global temporary table gt_ct_sub_0032(c int) ON COMMIT DELETE ROWS ON COMMIT PRESERVE ROWS;

CT-00601, [1:75]Sql syntax error: too many option for table
SQL> drop table if exists t_ct_sub_155;

Succeed.

SQL> CREATE TABLE t_ct_sub_155(
  2 C_INTEGER INTEGER,
  3 C_CLOB CLOB,
  4 C_BLOB BLOB
  5 ) PCTFREE 10 INITRANS 10
  6 LOB(C_BLOB) STORE AS(ENABLE STORAGE IN ROW)
  7 LOB(C_BLOB) STORE AS(ENABLE STORAGE IN ROW)
  8 LOB(C_CLOB) STORE AS(ENABLE STORAGE IN ROW);
CT-00601, Sql syntax error: duplicate lob storage option specificed
SQL> drop table if exists t_order_base_000;

Succeed.

SQL> drop table if exists t_ct_sub_034;

Succeed.

SQL> CREATE TABLE t_order_base_000("ID" INT NOT NULL, "CHR_FIELD" VARCHAR(30), "VALUE" int);

Succeed.

SQL> insert into t_order_base_000 values(1,'abc',10);

1 rows affected.

SQL> create table t_ct_sub_034(c2 primary key AUTO_INCREMENT) as select CHR_FIELD  from t_order_base_000;

CT-00601, Sql syntax error: auto increment column C2 only support int type
SQL> create table t_ct_sub_034(c1 default 'aaa',c2 primary key AUTO_INCREMENT) as select CHR_FIELD c1,value c2 from t_order_base_000;

Succeed.

SQL> select AUTO_INCREMENT from  ADM_TAB_COLUMNS where table_name='T_CT_SUB_034' order by AUTO_INCREMENT asc;

AUTO_INCREMENT
--------------
N
Y

2 rows fetched.

SQL> drop table if exists t_order_base_000;

Succeed.

SQL> drop table if exists t_ct_sub_034;

Succeed.

SQL> 
SQL> -- union rs_columns
SQL> drop table if exists t_createas_1;

Succeed.

SQL> drop table if exists t_createas_2;

Succeed.

SQL> drop table if exists t_createas_3;

Succeed.

SQL> create table t_createas_1(f1 number(10), f2 decimal(10), f3 decimal(10));

Succeed.

SQL> create table t_createas_2(f1 number(10), f2 decimal(10), f3 decimal(10));

Succeed.

SQL> create table t_createas_3(f1 decimal(15), f2 number(15), f3 number);

Succeed.

SQL> desc -q select * from t_createas_1 union select * from t_createas_2;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
F1                                           NUMBER(10)                          
F2                                           NUMBER(10)                          
F3                                           NUMBER(10)                          

SQL> desc -q select * from t_createas_1 union select * from t_createas_3;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
F1                                           NUMBER                              
F2                                           NUMBER                              
F3                                           NUMBER                              

SQL> drop table t_createas_1;

Succeed.

SQL> drop table t_createas_2;

Succeed.

SQL> drop table t_createas_3;

Succeed.

SQL> 
SQL> drop table if exists SYS_CTRL_PARAM_DEF;

Succeed.

SQL> drop table if exists SYS_CTRL_PARAM_CFG;

Succeed.

SQL> drop view if exists SYS_CTRL_PARAM;

Succeed.

SQL> create table SYS_CTRL_PARAM_DEF
  2 (
  3    GROUP_CODE                   VARCHAR2(63) NOT NULL,
  4    PARAM_CODE                   VARCHAR2(63) NOT NULL,
  5    BE_ID                        NUMBER(10) NOT NULL,
  6    BE_CODE                      VARCHAR2(256),
  7    EDIT_METHOD                  VARCHAR2(1),
  8    DATA_TYPE                    VARCHAR2(1),
  9    VALUE                        VARCHAR2(127),
 10    NAME                         VARCHAR2(63),
 11    NOTE                         VARCHAR2(256),
 12    EXTEND_ITEM_ID               NUMBER(10),
 13    CONF_FLAG                    VARCHAR2(1),
 14    DATA_VALIDATOR               VARCHAR2(256),
 15    FEATURE_NAME                 VARCHAR2(256)
 16 );

Succeed.

SQL> create table SYS_CTRL_PARAM_CFG
  2 (
  3    GROUP_CODE                   VARCHAR2(63) NOT NULL,
  4    PARAM_CODE                   VARCHAR2(63) NOT NULL,
  5    BE_ID                        NUMBER(10) NOT NULL,
  6    BE_CODE                      VARCHAR2(256),
  7    EDIT_METHOD                  VARCHAR2(1),
  8    DATA_TYPE                    VARCHAR2(1),
  9    VALUE                        VARCHAR2(127),
 10    NAME                         VARCHAR2(63),
 11    NOTE                         VARCHAR2(256),
 12    EXTEND_ITEM_ID               NUMBER(10),
 13    CONF_FLAG                    VARCHAR2(1),
 14    DATA_VALIDATOR               VARCHAR2(256),
 15    FEATURE_NAME                 VARCHAR2(256)
 16 );

Succeed.

SQL> create view SYS_CTRL_PARAM(GROUP_CODE,PARAM_CODE,BE_ID,BE_CODE,EDIT_METHOD,DATA_TYPE,VALUE,NAME,NOTE,EXTEND_ITEM_ID,CONF_FLAG,FEATURE_NAME) AS SELECT B.GROUP_CODE,B.PARAM_CODE,B.BE_ID,B.BE_CODE,B.EDIT_METHOD,B.DATA_TYPE,B.VALUE,B.NAME,B.NOTE,B.EXTEND_ITEM_ID,B.CONF_FLAG,B.FEATURE_NAME FROM SYS_CTRL_PARAM_CFG B UNION SELECT A.GROUP_CODE,A.PARAM_CODE,A.BE_ID,A.BE_CODE,A.EDIT_METHOD,A.DATA_TYPE,A.VALUE,A.NAME,A.NOTE,A.EXTEND_ITEM_ID,A.CONF_FLAG,A.FEATURE_NAME FROM SYS_CTRL_PARAM_DEF A where (A.GROUP_CODE,A.PARAM_CODE) NOT IN (select B.GROUP_CODE,B.PARAM_CODE from SYS_CTRL_PARAM_CFG B);

Succeed.

SQL> desc SYS_CTRL_PARAM;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
GROUP_CODE                                   VARCHAR(63 BYTE)                    
PARAM_CODE                                   VARCHAR(63 BYTE)                    
BE_ID                                        NUMBER(10)                          
BE_CODE                                      VARCHAR(256 BYTE)                   
EDIT_METHOD                                  VARCHAR(1 BYTE)                     
DATA_TYPE                                    VARCHAR(1 BYTE)                     
VALUE                                        VARCHAR(127 BYTE)                   
NAME                                         VARCHAR(63 BYTE)                    
NOTE                                         VARCHAR(256 BYTE)                   
EXTEND_ITEM_ID                               NUMBER(10)                          
CONF_FLAG                                    VARCHAR(1 BYTE)                     
FEATURE_NAME                                 VARCHAR(256 BYTE)                   

SQL> drop table SYS_CTRL_PARAM_DEF;

Succeed.

SQL> drop table SYS_CTRL_PARAM_CFG;

Succeed.

SQL> drop view SYS_CTRL_PARAM;

Succeed.

SQL> --DTS2019070207776
SQL> drop table if exists origin;

Succeed.

SQL> create table origin(id int, name char(10) not null, read int);

Succeed.

SQL> insert into origin values(1, 'fhd', 1520);

1 rows affected.

SQL> insert into origin values(3, 'fer', 45848);

1 rows affected.

SQL> drop table if exists tabnew;

Succeed.

SQL> create table tabnew(id_new, name_new,read_new) as select * from origin;

Succeed.

SQL> insert into tabnew values(5, null, 526);
CT-00620, Can't set NULL value for column 'NAME_NEW'
SQL>                                                                                         
SQL> drop table if exists t_not_null_t1;                                                     

Succeed.                                                                                     

SQL> drop table if exists t_not_null_t2;                                                     

Succeed.

SQL> create table t_not_null_t1(c_char char(10));                                            

Succeed.                                                                                     

SQL> create table t_not_null_t2(c3 not null) as select c_char||c_char c3 from t_not_null_t1; 

Succeed.                                                                                     

SQL> desc t_not_null_t2;

Name                                Null?    Type
----------------------------------- -------- ------------------------------------
C3                                  NOT NULL VARCHAR(20 BYTE)

SQL> 
SQL> drop temporary table if exists #ma_temp;

Succeed.

SQL> alter system set LOCAL_TEMPORARY_TABLE_ENABLED =true;

Succeed.

SQL> create temporary table #ma_temp(id int, name char(10) not null, read int);

Succeed.

SQL> create public synonym table_origin for #ma_temp;

CT-00601, Sql syntax error: Prevent creating synonyms of local temporary tables
SQL> drop temporary table #ma_temp;

Succeed.

SQL> alter system set LOCAL_TEMPORARY_TABLE_ENABLED =false;

Succeed.

SQL> 
SQL> create table test_tb_PROC_006(c_int int,
  2 c_number number,
  3 c_varchar varchar(80),
  4 c_date date);

Succeed.

SQL>
SQL>
SQL> CREATE OR REPLACE PROCEDURE  PROC_FOR_LOOP_JOIN_1_DML_TRUNCATE_PROC_006()
  2 IS
  3 b_sql varchar2(3000) ;
  4 BEGIN
  5  for i in 1..2
  6  loop
  7      b_sql :='drop table if exists test_tb_PROC_006';
  8   execute immediate b_sql;
  9
 10   b_sql :='drop index if exists test1_inx on test_tb_PROC_006';
 11   execute immediate b_sql;
 12 
 13   b_sql :='create table test_tb_PROC_006(c_int int,
 14 c_number number,
 15 c_varchar varchar(80),
 16 c_date date)';
 17   execute immediate b_sql;
 18 
 19   b_sql:='create index test1_inx on test_tb_PROC_006(c_date) ';
 20   execute immediate b_sql;
 21 
 22   b_sql :='drop table if exists test_tb_PROC_006';
 23   execute immediate b_sql;
 24
 25   b_sql :='drop index if exists test1_inx on test_tb_PROC_006';
 26   execute immediate b_sql;
 27  end loop;
 28
 29 END;
 30 /

Succeed.

SQL>
SQL> call PROC_FOR_LOOP_JOIN_1_DML_TRUNCATE_PROC_006();

PL/SQL procedure successfully completed.

SQL> 
SQL> --DTS2019091803372
SQL> alter system set LOCAL_TEMPORARY_TABLE_ENABLED = true;

Succeed.

SQL> DROP TABLE IF EXISTS #ZSCREATE_B003;

Succeed.

SQL> CREATE TEMPORARY TABLE #ZSCREATE_B003 (COL_14 BINARY_DOUBLE DEFAULT 1846345728 / (6 + 1) ON UPDATE NULL ,COL_15 UINT DEFAULT 1e1 ON UPDATE 11) LOB (COL_14,COL_15) STORE AS (TABLESPACE zs_tablespace3) APPENDONLY ON CRMODE ROW;

CT-00601, [1:144]Sql syntax error: Temporary tables do not support LOB clauses
SQL> CREATE TEMPORARY TABLE #ZSCREATE_B003 (COL_26 TIMESTAMP(1) DEFAULT TO_TIMESTAMP('2008-08-27 09:39:03', 'YYYY-MM-DD HH24:Mi:SS') ON UPDATE TO_TIMESTAMP('2011-08-08 08:08:08', 'YYYY-MM-DD HH24:Mi:SS') );

Succeed.

SQL> DROP TABLE IF EXISTS #ZSCREATE_B003;

Succeed.

SQL> CONN / AS SYSDBA

connected.

SQL> DROP USER IF EXISTS LINSHI1;

Succeed.

SQL> DROP USER IF EXISTS LINSHI2;

Succeed.

SQL> DROP TABLE IF EXISTS TT1;

Succeed.

SQL> DROP TABLE IF EXISTS TT2;

Succeed.

SQL> CREATE USER LINSHI1 IDENTIFIED BY CANTIAN_234;

Succeed.

SQL> CREATE USER LINSHI2 IDENTIFIED BY CANTIAN_234;

Succeed.

SQL> CREATE TABLE TT1(ID INT);

Succeed.

SQL> CREATE TABLE TT2(ID INT);

Succeed.

SQL> INSERT INTO TT1 VALUES(1);

1 rows affected.

SQL> INSERT INTO TT2 VALUES(2);

1 rows affected.

SQL> CREATE TEMPORARY TABLE LINSHI1.#LOCAL_TEMP_TBL_012 AS SELECT * FROM TT1;

Succeed.

SQL> CREATE TEMPORARY TABLE LINSHI2.#LOCAL_TEMP_TBL_012 AS SELECT * FROM TT2;

Succeed.

SQL> SELECT * FROM LINSHI1.#LOCAL_TEMP_TBL_012;

ID
------------
1

1 rows fetched.

SQL> SELECT * FROM LINSHI2.#LOCAL_TEMP_TBL_012;

ID
------------
2

1 rows fetched.

SQL> DROP USER IF EXISTS LINSHI1;

Succeed.

SQL> DROP USER IF EXISTS LINSHI2;

Succeed.

SQL> DROP TABLE IF EXISTS TT1;

Succeed.

SQL> DROP TABLE IF EXISTS TT2;

Succeed.

SQL> alter system set LOCAL_TEMPORARY_TABLE_ENABLED = false;

Succeed.

SQL> 
SQL> --DTS2019091603759
SQL> DROP TABLE IF EXISTS test_blob_default;

Succeed.

SQL> CREATE TABLE test_blob_default (COL_14 blob DEFAULT ' 0 ');

CT-00105, Invalid format of hex
SQL> CREATE TABLE test_blob_default (COL_14 blob DEFAULT '0');

Succeed.

SQL> desc test_blob_default;

Name                                Null?    Type
----------------------------------- -------- ------------------------------------
COL_14                                       BLOB

SQL> DROP TABLE IF EXISTS test_blob_default;

Succeed.

SQL> CREATE TABLE test_blob_default (COL_14 blob DEFAULT '0',id int);

Succeed.

SQL> insert into test_blob_default(id) values(3);

1 rows affected.

SQL> commit;

Succeed.

SQL> select * from test_blob_default;

COL_14                                                           ID
---------------------------------------------------------------- ------------
00                                                               3

1 rows fetched.

SQL> DROP TABLE IF EXISTS test_blob_default;

Succeed.

SQL> 
SQL> --DTS2019081004379
SQL> drop table if exists t_avg_base_001;

Succeed.

SQL> drop table if exists t_avg_101;

Succeed.

SQL> create table t_avg_base_001(id number,deptno number,name varchar2(20),sal number);

Succeed.

SQL> insert into t_avg_base_001 values(1,1,'1aa',120);

1 rows affected.

SQL> insert into t_avg_base_001 values(2,1,'2aa',300);

1 rows affected.

SQL> insert into t_avg_base_001 values(3,1,'3aa',100);

1 rows affected.

SQL> insert into t_avg_base_001 values(4,1,'4aa',99);

1 rows affected.

SQL> insert into t_avg_base_001 values(5,1,'5aa',90);

1 rows affected.

SQL> insert into t_avg_base_001 values(6,2,'6aa',87);

1 rows affected.

SQL> insert into t_avg_base_001 values(7,2,'7aa',500);

1 rows affected.

SQL> insert into t_avg_base_001 values(8,2,'8aa',200);

1 rows affected.

SQL> insert into t_avg_base_001 values(9,2,'9aa',20);

1 rows affected.

SQL> insert into t_avg_base_001 values(10,2,'10aa',30);

1 rows affected.

SQL> insert into t_avg_base_001 values(null,2,'10aa',30);

1 rows affected.

SQL> insert into t_avg_base_001 values(12,2,'10aa',null);

1 rows affected.

SQL> commit;

Succeed.

SQL> create table t_avg_101 as select id,avg(sal) over(partition by deptno order by id) c from t_avg_base_001 t1 group by id,sal,deptno ;

Succeed.

SQL> select  * from t_avg_101  order by id;

ID                                       C                                       
---------------------------------------- ----------------------------------------
1                                        120                                     
2                                        210                                     
3                                        173.333333333333333333333333333333333333
4                                        154.75                                  
5                                        141.8                                   
6                                        87                                      
7                                        293.5                                   
8                                        262.333333333333333333333333333333333333
9                                        201.75                                  
10                                       167.4                                   
12                                       167.4                                   
                                         144.5                                   

12 rows fetched.

SQL> drop table t_avg_base_001;

Succeed.

SQL> drop table t_avg_101;

Succeed.

SQL>
SQL>--DTS2019092502068
SQL> drop table if exists nchar_test;

Succeed.

SQL> create table nchar_test(col nchar(20 byte));

CT-00601, [1:37]Sql syntax error: missing right parenthesis
SQL> create table nchar_test(col nchar(20 char));

CT-00601, [1:37]Sql syntax error: missing right parenthesis
SQL> create table nchar_test(col nchar(20));

Succeed.

SQL> desc nchar_test;

Name                                Null?    Type
----------------------------------- -------- ------------------------------------
COL                                          CHAR(20 CHAR)

SQL> alter table nchar_test modify col NCHAR(20 byte);

CT-00601, [1:43]Sql syntax error: missing right parenthesis
SQL> alter table nchar_test modify col NCHAR(20 char);

CT-00601, [1:43]Sql syntax error: missing right parenthesis
SQL> drop table if exists nchar_test;

Succeed.

SQL> drop table if exists nvarchar_test;

Succeed.

SQL> create table nvarchar_test(col nvarchar(20 byte));

CT-00601, [1:43]Sql syntax error: missing right parenthesis
SQL> create table nvarchar_test(col nvarchar(20 char));

CT-00601, [1:43]Sql syntax error: missing right parenthesis
SQL> create table nvarchar_test(col nvarchar(20));

Succeed.

SQL> alter table nvarchar_test modify col nvarchar(20 byte);

CT-00601, [1:49]Sql syntax error: missing right parenthesis
SQL> alter table nvarchar_test modify col nvarchar(20 char);

CT-00601, [1:49]Sql syntax error: missing right parenthesis
SQL> desc nvarchar_test;

Name                                Null?    Type
----------------------------------- -------- ------------------------------------
COL                                          VARCHAR(20 CHAR)

SQL> drop table if exists nvarchar_test;

Succeed.

SQL>

SQL>--DTS2019091206375

SQL> CREATE TABLE T_TEST_LOB_STORE (COL_1 DATE,COL_2 blob) LOB(COL_2,COL_2) STORE AS (DISABLE STORAGE IN ROW) ;

CT-00601, Sql syntax error: duplicate lob storage option specificed

SQL> CREATE TABLE T_TEST_LOB_STORE (COL_1 DATE,COL_2 blob) LOB(COL_1/COL_1) STORE AS (DISABLE STORAGE IN ROW) ;

CT-00601, Sql syntax error: "," expected but / found

SQL> CREATE TABLE T_TEST_LOB_STORE (COL_1 DATE,COL_2 blob) LOB(COL_1,COL_4) STORE AS (DISABLE STORAGE IN ROW) ;

CT-01110, The operation set no-lob column to mode of storage was not allowed

SQL> CREATE TABLE T_TEST_LOB_STORE (COL_1 DATE,COL_2 blob) LOB(COL_2,COL_4) STORE AS (DISABLE STORAGE IN ROW) ;

CT-00708, The object column COL_4 does not exist

SQL>

SQL> drop table if exists test_table;

Succeed.

SQL> CREATE TABLE test_table(c1 int, c2 varchar(32), c3 bigint) pctfree 0;

Succeed.

SQL> select pctfree from sys_tables where name = 'TEST_TABLE';

PCTFREE
------------
0

1 rows fetched.

SQL> drop table if exists test_table;

Succeed.

SQL> --DTS2019111503041
SQL> drop table if exists t_sql_cancel_001_001;

Succeed.

SQL> drop table if exists t_sql_cancel_102_001;

Succeed.

SQL> drop table if exists t_sql_cancel_106_001;

Succeed.

SQL> create table t_sql_cancel_001_001(id int not null,c_int int,c_vchar varchar(55) not null,c_vchar2 varchar(55) not null,c_blob blob not null,c_date date)
  2 PARTITION BY RANGE(id) interval(10)
  3 (
  4 PARTITION p1 VALUES LESS THAN(100),
  5 PARTITION p2 VALUES LESS THAN(200),
  6 PARTITION p3 VALUES LESS THAN(300)
  7 );

Succeed.

SQL>
SQL> insert into t_sql_cancel_001_001 values(1,100,'abc123',lpad('123abc',50,'abc'),lpad('11100011',50,'1100'),to_timestamp(to_char('1800-01-01 10:51:47'),'yyyy-mm-dd hh24:mi:ss'));

1 rows affected.

SQL>
SQL> CREATE or replace procedure proc_insert(tname varchar,startall int,endall int) as
  2 sqlst varchar(500);
  3 BEGIN
  4   FOR i IN startall..endall LOOP
  5         sqlst := 'insert into ' || tname ||' select id+'||i||',c_int+'||i||',c_vchar||'||i||',c_vchar2||'||i||',c_blob'||',c_date from '||tname|| ' where id=1';
  6         execute immediate sqlst;
  7   END LOOP;
  8 END;
  9 /

Succeed.

SQL> exec proc_insert('t_sql_cancel_001_001',1,50);

PL/SQL procedure successfully completed.

SQL> exec proc_insert('t_sql_cancel_001_001',10,30);

PL/SQL procedure successfully completed.

SQL> commit;

Succeed.

SQL>
SQL> create table t_sql_cancel_102_001 as SELECT t0.* from (select * from (select c_vchar,c_int from t_sql_cancel_001_001) PIVOT(MAX(length(c_vchar)) FOR c_vchar IN ('abc1233' c1,'abc12333' c2))) t0;

Succeed.

SQL> desc t_sql_cancel_102_001;

Name                                Null?    Type
----------------------------------- -------- ------------------------------------
C_INT                                        BINARY_INTEGER
C1                                           BINARY_BIGINT
C2                                           BINARY_BIGINT

SQL> create table t_sql_cancel_106_001 as select t0.* from (select * from t_sql_cancel_102_001 unpivot(bbb for aaa in (c1 as 'abc',c2 as 'def'))) t0;

Succeed.

SQL> desc t_sql_cancel_106_001;

Name                                Null?    Type
----------------------------------- -------- ------------------------------------
C_INT                                        BINARY_INTEGER
AAA                                          CHAR(3 BYTE)
BBB                                          BINARY_BIGINT

SQL> drop table t_sql_cancel_001_001;

Succeed.

SQL> drop table t_sql_cancel_102_001;

Succeed.

SQL> drop table t_sql_cancel_106_001;

Succeed.

SQL>
SQL> CREATE TABLE TEST_STORAGE(c_id int) STORAGE(INITIAL  120K);

Succeed.

SQL> SELECT INITIAL_PAGES FROM SYS_STORAGE WHERE ORG_SCN = (SELECT ORG_SCN FROM SYS_TABLES WHERE NAME ='TEST_STORAGE');

INITIAL_PAGES
-------------
15           

1 rows fetched.

SQL> INSERT INTO TEST_STORAGE VALUES(1);

1 rows affected.

SQL> SELECT PAGES FROM DBA_SEGMENTS WHERE SEGMENT_TYPE='TABLE' AND SEGMENT_NAME ='TEST_STORAGE';

PAGES               
--------------------
16                  

1 rows fetched.

SQL> DROP TABLE TEST_STORAGE;

Succeed.

SQL> SELECT INITIAL_PAGES FROM SYS_STORAGE;

INITIAL_PAGES
-------------

0 rows fetched.

SQL> 
SQL> drop table if exists test_storage;

Succeed.

SQL> create table test_storage(c1 int, c2 int) storage(initial 120K) partition by hash(c1,c2) partitions 16;

Succeed.

SQL> drop table if exists test_storage;

Succeed.

SQL> 
SQL> drop table if exists test_storage;

Succeed.

SQL> create table test_storage(c_id int) storage(initial  120k) nologging;

Succeed.

SQL> drop table if exists test_storage;

Succeed.

SQL> 
SQL> drop table if exists test_storage;

Succeed.

SQL> create global temporary table test_storage(c1 int) storage(initial 120k);

CT-00101, Capability: storage option without heap table not supported
SQL> drop table if exists test_storage;

Succeed.

SQL> 
SQL> alter system set LOCAL_TEMPORARY_TABLE_ENABLED=true;

Succeed.

SQL> drop table if exists #test_storage;

Succeed.

SQL> create temporary table #test_storage(c1 int) storage( initial 120K);

CT-00101, Capability: storage option without heap table not supported
SQL> drop table if exists #test_storage;

Succeed.

SQL> alter system set LOCAL_TEMPORARY_TABLE_ENABLED=false;
Succeed.

SQL>
SQL> DROP TABLE IF EXISTS tbl_base;

Succeed.

SQL> CREATE TABLE tbl_base (id INT);

Succeed.

SQL> INSERT INTO tbl_base VALUES (1);

1 rows affected.

SQL> COMMIT;

Succeed.

SQL> DROP TABLE IF EXISTS tbl_base1;

Succeed.

SQL> CREATE TABLE tbl_base1 AS SELECT SQL_CALC_FOUND_ROWS  * FROM tbl_base;

Succeed.

SQL> 
SQL> --test INI_TRANS
SQL> ALTER SYSTEM SET INI_TRANS = 3;

Succeed.

SQL> DROP TABLE IF EXISTS TEST_INITRANS3;

Succeed.

SQL> DROP TABLE IF EXISTS TEST_INITRANS4;

Succeed.

SQL> DROP USER IF EXISTS user_initrans CASCADE;

Succeed.

SQL> 
SQL> CREATE USER user_initrans IDENTIFIED BY Cantian_234;

Succeed.

SQL> CREATE TABLE user_initrans.TEST_INITRANS(post_id CHAR(2) NOT NULL, post_name CHAR(6));

Succeed.

SQL> CREATE TABLE user_initrans.TEST_INITRANS2(post_id CHAR(2) NOT NULL, post_name CHAR(6)) INITRANS 4;

Succeed.

SQL> CREATE INDEX IDX_TEST_INITRANS ON user_initrans.TEST_INITRANS(post_id ASC);

Succeed.

SQL> CREATE INDEX IDX_TEST_INITRANS2 ON user_initrans.TEST_INITRANS2(post_id ASC) INITRANS 5;

Succeed.

SQL> 
SQL> CREATE TABLE TEST_INITRANS3(post_id CHAR(2) NOT NULL, post_name CHAR(6));

Succeed.

SQL> CREATE TABLE TEST_INITRANS4(post_id CHAR(2) NOT NULL, post_name CHAR(6)) INITRANS 4;

Succeed.

SQL> CREATE INDEX IDX_TEST_INITRANS3 ON TEST_INITRANS3(post_id ASC);

Succeed.

SQL> CREATE INDEX IDX_TEST_INITRANS4 ON TEST_INITRANS4(post_id ASC) INITRANS 5;

Succeed.

SQL> 
SQL> select NAME, INITRANS from SYS_TABLES where NAME = 'TEST_INITRANS';

NAME                                                             INITRANS    
---------------------------------------------------------------- ------------
TEST_INITRANS                                                    3           

1 rows fetched.

SQL> select NAME, INITRANS from SYS_TABLES where NAME = 'TEST_INITRANS2';

NAME                                                             INITRANS    
---------------------------------------------------------------- ------------
TEST_INITRANS2                                                   4           

1 rows fetched.

SQL> select NAME, INITRANS from SYS_TABLES where NAME = 'TEST_INITRANS3';

NAME                                                             INITRANS    
---------------------------------------------------------------- ------------
TEST_INITRANS3                                                   2           

1 rows fetched.

SQL> select NAME, INITRANS from SYS_TABLES where NAME = 'TEST_INITRANS4';

NAME                                                             INITRANS    
---------------------------------------------------------------- ------------
TEST_INITRANS4                                                   4           

1 rows fetched.

SQL> select NAME, INITRANS from SYS_INDEXES where NAME = 'IDX_TEST_INITRANS';

NAME                                                             INITRANS    
---------------------------------------------------------------- ------------
IDX_TEST_INITRANS                                                3           

1 rows fetched.

SQL> select NAME, INITRANS from SYS_INDEXES where NAME = 'IDX_TEST_INITRANS2';

NAME                                                             INITRANS    
---------------------------------------------------------------- ------------
IDX_TEST_INITRANS2                                               5           

1 rows fetched.

SQL> select NAME, INITRANS from SYS_INDEXES where NAME = 'IDX_TEST_INITRANS3';

NAME                                                             INITRANS    
---------------------------------------------------------------- ------------
IDX_TEST_INITRANS3                                               2           

1 rows fetched.

SQL> select NAME, INITRANS from SYS_INDEXES where NAME = 'IDX_TEST_INITRANS4';

NAME                                                             INITRANS    
---------------------------------------------------------------- ------------
IDX_TEST_INITRANS4                                               5           

1 rows fetched.

SQL> 
SQL> ALTER SYSTEM SET INI_TRANS = 2;

Succeed.

SQL> DROP TABLE IF EXISTS TEST_INITRANS3;

Succeed.

SQL> DROP TABLE IF EXISTS TEST_INITRANS4;

Succeed.

SQL> DROP USER IF EXISTS user_initrans CASCADE;
Succeed.

SQL> --DTS202009090JWVQGP1F00
SQL> drop table if exists t_default_check_015;

Succeed.

SQL> create table t_default_check_015(id int,c_int int default array_length(array[1,2]));

Succeed.

SQL> insert into t_default_check_015 (id) values(1);

1 rows affected.

SQL> select * from t_default_check_015;

ID           C_INT       
------------ ------------
1            2           

1 rows fetched.

SQL> drop table if exists t_default_check_015;

Succeed.

SQL> create table t_default_check_015(id int,c_int int default array_length(array['abc', 'def']));

Succeed.

SQL> insert into t_default_check_015 (id) values(1);

1 rows affected.

SQL> select * from t_default_check_015;

ID           C_INT       
------------ ------------
1            2           

1 rows fetched.

SQL> drop table if exists t_default_check_015;

Succeed.

SQL> create table t_default_check_015(id int,c_char varchar(8) default array_length(array['abc', 'def']));

Succeed.

SQL> insert into t_default_check_015 (id) values(1);

1 rows affected.

SQL> select * from t_default_check_015;

ID           C_CHAR  
------------ --------
1            2       

1 rows fetched.

SQL> drop table if exists t_default_check_015;

Succeed.

SQL> create table t_default_check_015(id int,c_int int default array_length('{ghi, ddd}'));

Succeed.

SQL> insert into t_default_check_015 (id) values(1);

1 rows affected.

SQL> select * from t_default_check_015;

ID           C_INT       
------------ ------------
1            2           

1 rows fetched.

SQL> drop table if exists t_default_check_015;

Succeed.

SQL> create table t_default_check_015(id int,c_int int default length('{ghi, ddd}'));

Succeed.

SQL> insert into t_default_check_015 (id) values(1);

1 rows affected.

SQL> select * from t_default_check_015;

ID           C_INT       
------------ ------------
1            10          

1 rows fetched.

SQL> 
SQL> drop table if exists t_default_check_015;

Succeed.

SQL> create table t_default_check_015(id int,c_int int default array[1,2]);

CT-00601, [1:59]Sql syntax error: unexpected array expression
SQL> create table t_default_check_015(id int,c_char varchar(8) default array['abc', 'def']);

CT-00601, [1:67]Sql syntax error: unexpected array expression
SQL> create table t_default_check_015(id int,c_char varchar(16)[] default '{ghi, ddd}');

CT-01369, [1:82]Can not set default value for array column
SQL> create table t_default_check_015(id int,c_int int default length(array[1,2]));
CT-01366, [1:59]Invalid function argument type
SQL> 
SQL> drop table if exists t_connect_base_001;

Succeed.

SQL> create table t_connect_base_001(
  2     emp_id number(18),
  3     lead_id number(18),
  4     emp_name varchar2(200),
  5     salary number(10,2),
  6     dept_no varchar2(8)
  7 );

Succeed.

SQL> insert into t_connect_base_001 values(3,1,'arise',60000.00,'003');

1 rows affected.

SQL> insert into t_connect_base_001 values(4,2,'scott',30000.00,'002');

1 rows affected.

SQL> insert into t_connect_base_001 values(1,0,'king',1000000.00,'001');

1 rows affected.

SQL> insert into t_connect_base_001 values(2,1,'jack',50500.00,'002');

1 rows affected.

SQL> insert into t_connect_base_001 values(5,2,'tiger',25000.00,'002');

1 rows affected.

SQL> commit;

Succeed.

SQL> drop table if exists t_connect_base_101;

Succeed.

SQL> create table t_connect_base_101 as select sys_connect_by_path(lpad('abc',1,'1'),'/') c from t_connect_base_001 start with emp_id=1 connect by prior emp_id = lead_id+3 order by 1;

Succeed.

SQL> drop table t_connect_base_001;

Succeed.

SQL> drop table t_connect_base_101;

Succeed.

SQL> 
SQL> drop table if exists default_lnnvl_t;

Succeed.

SQL> create table default_lnnvl_t(c1 int,c2 boolean default lnnvl('TRUE'));

Succeed.

SQL> insert into default_lnnvl_t(c1) values(1);

1 rows affected.

SQL> select * from default_lnnvl_t;

C1           C2    
------------ ------
1            FALSE 

1 rows fetched.

SQL> drop table default_lnnvl_t;
Succeed.




