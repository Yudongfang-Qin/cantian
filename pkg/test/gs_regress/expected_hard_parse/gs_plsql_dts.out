

SQL> set serveroutput on;

ON
SQL> create user gs_plsql_dts identified by Whf00174302;

Succeed.

SQL> grant dba to gs_plsql_dts;

Succeed.

SQL> conn gs_plsql_dts/Whf00174302@127.0.0.1:1611

connected.

SQL> --CLOUDSOP Script1
SQL> drop table if exists plsql_dts_test;

Succeed.

SQL> create table plsql_dts_test(a int);

Succeed.

SQL> insert into plsql_dts_test values(1),(2);

2 rows affected.

SQL> begin
  2 --check if error.
  3 delete from plsql_dts_test t1 where exists (select * from plsql_dts_test t2 where t2.a = 1);
  4 insert into plsql_dts_test select * from plsql_dts_test where a <> '*';
  5 end;
  6 /

PL/SQL procedure successfully completed.

SQL> select * from plsql_dts_test;

A           
------------

0 rows fetched.

SQL> --CLOUDSOP Script2
SQL> drop table if exists plsql_dts_tbl_NeUserDefineGrp;

Succeed.

SQL> drop table if exists plsql_dts_tbl_BackupNeSelDefGrp;

Succeed.

SQL> drop table if exists plsql_dts_tbl_NEDefCmdGroupTable;

Succeed.

SQL> drop table if exists plsql_dts_tbl_CmdReflect;

Succeed.

SQL> drop table if exists plsql_dts_tbl_NEAccess;

Succeed.

SQL> drop table if exists PLSQL_DTS_TBL_NEUSERGROUPACCESS;

Succeed.

SQL> create table plsql_dts_tbl_NeUserDefineGrp(GrpID int, SrcGrp int, NeFdn int, CmdGroupName varchar(100));

Succeed.

SQL> create table plsql_dts_tbl_BackupNeSelDefGrp(NeFdn int, DstGrp varchar(100), SrcNeType varchar(100), DstNeType varchar(100));

Succeed.

SQL> create table plsql_dts_tbl_NEDefCmdGroupTable(CmdGroupName varchar(100), NEType int);

Succeed.

SQL> create table plsql_dts_tbl_CmdReflect(GrpID int, CmdGroupName varchar(100));

Succeed.

SQL> create table plsql_dts_tbl_NEAccess(CmdGroupName varchar(100), NeFdn varchar(100));

Succeed.

SQL> create table PLSQL_DTS_TBL_NEUSERGROUPACCESS(CmdGroupName varchar(100), NeFdn varchar(100));

Succeed.

SQL> 
SQL> create or replace procedure plsql_dts_neuser_convertSelfDefGrp (vNeFdn in varchar,vNeTypeKey in varchar,ConvertAccess in int,cus_r OUT SYS_REFCURSOR)
  2 AS
  3 exist_in_default_grp number;
  4 exist_in_custmoized_grp number;
  5 groupid number;
  6 current_groupid number;
  7 groupid_index number;
  8 vcmdgroupname varchar(10);
  9 target_cmdgrp varchar(10);
 10 cursor overladpped_cmdgrp is select GrpID,CmdGroupName from plsql_dts_tbl_NeUserDefineGrp where NeFdn = vNeFdn and CmdGroupName in (select CmdGroupName from plsql_dts_tbl_NEDefCmdGroupTable where NEType = vNeTypeKey) order by CmdGroupName;
 11 begin
 12         delete from plsql_dts_tbl_CmdReflect;
 13         insert into plsql_dts_tbl_CmdReflect select tbl1.GrpID,tbl1.CmdGroupName from plsql_dts_tbl_NeUserDefineGrp tbl1 where tbl1.NeFdn = vNeFdn and tbl1.CmdGroupName not in (select tbl2.CmdGroupName from plsql_dts_tbl_NEDefCmdGroupTable tbl2 where tbl2.NEType = vNeTypeKey) order by tbl1.CmdGroupName;
 14         open overladpped_cmdgrp;
 15         fetch overladpped_cmdgrp into groupid ,vcmdgroupname;
 16         WHILE overladpped_cmdgrp%FOUND
 17     loop
 18             begin               
 19                 current_groupid := to_number(substr(vcmdgroupname,3,length(vcmdgroupname)));
 20                 groupid_index := current_groupid;
 21                 WHILE (groupid_index < 999)
 22                 loop
 23                         begin
 24                                 groupid_index := groupid_index + 1;
 25                                     target_cmdgrp := 'G_'|| to_char(groupid_index);
 26                                     select count(*) into exist_in_default_grp from plsql_dts_tbl_NeUserDefineGrp tbl1 where tbl1.NeFdn = vNeFdn and tbl1.CmdGroupName = target_cmdgrp;
 27                                     if(exist_in_default_grp = 0) then                                           
 28                                             select count(*) into exist_in_custmoized_grp from plsql_dts_tbl_NEDefCmdGroupTable tbl2 where tbl2.NEType = vNeTypeKey and tbl2.CmdGroupName = target_cmdgrp;
 29                                             if(exist_in_custmoized_grp = 0) then
 30                                                     update plsql_dts_tbl_NeUserDefineGrp set CmdGroupName= target_cmdgrp where GrpID=groupid;
 31                                                     insert into plsql_dts_tbl_CmdReflect values(vcmdgroupname,target_cmdgrp);
 32                                                     if (ConvertAccess = 1) then                     
 33                                                             delete from plsql_dts_tbl_NEAccess where CmdGroupName = target_cmdgrp and NeFdn = vNeFdn;
 34                                                             update plsql_dts_tbl_NEAccess set CmdGroupName = target_cmdgrp where NeFdn = vNeFdn and CmdGroupName = vcmdgroupname;
 35                                                             delete from PLSQL_DTS_TBL_NEUSERGROUPACCESS where CmdGroupName = target_cmdgrp and NeFdn = vNeFdn;
 36                                                             update PLSQL_DTS_TBL_NEUSERGROUPACCESS set CmdGroupName = target_cmdgrp where NeFdn = vNeFdn and CmdGroupName = vcmdgroupname;                           
 37                                  
 38                                                 end if;
 39                                                 groupid_index := 999;
 40                                             end if;
 41                                     end if;
 42                         end;
 43                 end loop;
 44             end;
 45             fetch overladpped_cmdgrp into groupid ,vcmdgroupname;
 46     end loop;
 47     close overladpped_cmdgrp; 
 48 end;
 49 /

Succeed.

SQL> 
SQL> --CLOUDSOP Script3
SQL> drop procedure if exists plsql_dts_restoreSelfCmdGrp;

Succeed.

SQL> drop type if exists plsql_dts_restoreSelfCmdGrp force;

Succeed.

SQL> drop function if exists plsql_dts_restoreSelfCmdGrp;

Succeed.

SQL> drop package if exists plsql_dts_restoreSelfCmdGrp;

Succeed.

SQL> create or replace procedure plsql_dts_restoreSelfCmdGrp(vNeFdn in varchar, vSrcNeTypeKey in varchar, vDstNeTypeKey in varchar, ConvertAccess in int)
  2 as
  3 vgroupid number;
  4 vsrcgrpname varchar(50);
  5 vdstgrpname varchar(50);
  6 cursor self_cmdgrp is select GrpID, SrcGrp from plsql_dts_tbl_NeUserDefineGrp tbl1, plsql_dts_tbl_BackupNeSelDefGrp tbl2 where tbl1.NeFdn = tbl2.NeFdn and tbl1.CmdGroupName = tbl2.DstGrp and tbl2.NeFdn = vNeFdn and tbl2.SrcNeType = vSrcNeTypeKey and tbl2.DstNeType = vDstNeTypeKey;
  7 begin
  8     open self_cmdgrp;
  9         fetch self_cmdgrp into vgroupid ,vsrcgrpname;
 10         WHILE self_cmdgrp%FOUND
 11         loop
 12                 begin
 13                 update plsql_dts_tbl_NeUserDefineGrp set CmdGroupName = vsrcgrpname where GrpID = vgroupid;
 14                 fetch self_cmdgrp into vgroupid ,vsrcgrpname;
 15         end;
 16     end loop;
 17     close self_cmdgrp;
 18     delete from plsql_dts_tbl_BackupNeSelDefGrp where NeFdn = vNeFdn and SrcNeType = vsrcgrpname and DstNeType = vdstgrpname;    
 19 end;
 20 /

Succeed.

SQL> call  plsql_dts_restoreSelfCmdGrp('vNeFdn', 'vSrcNeTypeKey', 'vDstNeTypeKey', 2);

PL/SQL procedure successfully completed.

SQL> drop table if exists plsql_dts_tbl_NeUserDefineGrp;

Succeed.

SQL> drop table if exists plsql_dts_tbl_BackupNeSelDefGrp;

Succeed.

SQL> 
SQL> --CLOUDSOP Script4
SQL> drop table if exists plsql_dts_tbl_NeUser_Rule_Apply;

Succeed.

SQL> drop table if exists plsql_dts_tbl_NETypeRule_tmp;

Succeed.

SQL> create table plsql_dts_tbl_NETypeRule_tmp(fdn int,ruleId int);

Succeed.

SQL> create table plsql_dts_tbl_NeUser_Rule_Apply(fdn int,ruleId int);

Succeed.

SQL> 
SQL> create or replace procedure plsql_dts_neuser_syncNeTypeRuleAccess_i                                                                                                                                                  
  2 as
  3 begin
  4     delete from plsql_dts_tbl_NeUser_Rule_Apply where fdn in (select distinct fdn from plsql_dts_tbl_NETypeRule_tmp);
  5     insert into plsql_dts_tbl_NeUser_Rule_Apply select fdn,ruleId from plsql_dts_tbl_NETypeRule_tmp;
  6     delete from plsql_dts_tbl_NETypeRule_tmp;
  7 end;
  8 /

Succeed.

SQL> --CLOUDSOP Script5
SQL> drop table if exists plsql_dts_PMCOMDB.systbl_CounterAllStyle;

Succeed.

SQL> create user plsql_dts_PMCOMDB identified by Whf00174302;

Succeed.

SQL> create table plsql_dts_PMCOMDB.systbl_CounterAllStyle(CounterId int, CounterName varchar(100), CounterAliasName varchar(100), VersionId int);

Succeed.

SQL> 
SQL> CREATE OR REPLACE PROCEDURE "plsql_dts_PMCOMDB"."PROC_COUNTERSTYLE"(P_VersionId IN NUMBER,P_BeAliasName IN NUMBER)                                                                                                   
  2 AS
  3     V_SqlUpdate         VARCHAR2(255);
  4     V_CounterId         plsql_dts_PMCOMDB.systbl_CounterAllStyle.CounterId%TYPE;
  5     V_CounterName       plsql_dts_PMCOMDB.systbl_CounterAllStyle.CounterName%TYPE;
  6     V_CounterAliasName  plsql_dts_PMCOMDB.systbl_CounterAllStyle.CounterAliasName%TYPE;
  7 
  8     CURSOR cur_attr(VID NUMBER) IS
  9         SELECT CounterId ,REPLACE(CounterName,'''',''''''),REPLACE(CounterAliasName,'''','''''') from plsql_dts_PMCOMDB.systbl_CounterAllStyle where VersionId=VID;
 10 BEGIN
 11     IF cur_attr%ISOPEN THEN
 12         CLOSE cur_attr;
 13     END IF;
 14 
 15     OPEN cur_attr(P_VersionId);
 16     LOOP
 17         FETCH cur_attr INTO V_CounterId, V_CounterName,V_CounterAliasName;
 18         EXIT WHEN cur_attr%NOTFOUND;
 19 
 20         IF P_BeAliasName =0 THEN
 21             V_SqlUpdate := 'UPDATE systbl_Counters SET CounterName='''||V_CounterName||''' where CounterId='||V_CounterId||' and VersionId='||P_VersionId||'';
 22         ELSE
 23             V_SqlUpdate := 'UPDATE systbl_Counters SET CounterName='''||V_CounterAliasName||''' where CounterId='||V_CounterId||' and VersionId='||P_VersionId||'';
 24         END IF;
 25         --dbe_output.print_line(V_SqlUpdate);
 26         EXECUTE IMMEDIATE V_SqlUpdate;
 27     END LOOP;
 28     CLOSE cur_attr;
 29     COMMIT;
 30  END;
 31 /

Succeed.

SQL> drop procedure "plsql_dts_PMCOMDB"."PROC_COUNTERSTYLE";

Succeed.

SQL> drop table if exists plsql_dts_PMCOMDB.systbl_CounterAllStyle;

Succeed.

SQL> --CLOUDSOP Script6
SQL> create or replace function TO_NUMBER_ADAPTER( v_char varchar2)
  2 return NUMBER
  3 as
  4 begin
  5     if (instr(v_char, '0x') = 1) or (instr(v_char, '0X') = 1) then
  6         return 1;
  7     end if;
  8     if (REGEXP_LIKE(v_char,'[a-f]|[A-F]') = true) then
  9         return 2;
 10     end if;
 11     return 3;
 12 end;
 13 /

Succeed.

SQL> select TO_NUMBER_ADAPTER('12342334.423');

TO_NUMBER_ADAPTER('12342334.423')       
----------------------------------------
3                                       

1 rows fetched.

SQL> select TO_NUMBER_ADAPTER('fdsfsdcc');

TO_NUMBER_ADAPTER('FDSFSDCC')           
----------------------------------------
2                                       

1 rows fetched.

SQL> 
SQL> --CLOUDSOP Script7
SQL> create or replace FUNCTION inttohex(v_int numeric)
  2 RETURN VARCHAR2
  3 AS
  4     v_return VARCHAR2(4000);
  5 BEGIN
  6     SELECT upper(TRIM(to_char(to_char(v_int), 'xxxxxxxxxxxxxxxxxxxxxxxxxx'))) INTO v_return FROM dual;
  7     RETURN v_return;
  8     EXCEPTION
  9         WHEN OTHERS THEN
 10         RETURN NULL;
 11 END;
 12 /

Succeed.

SQL> 
SQL> --CLOUDSOP Script8
SQL> drop table if exists plsql_dts_Utils_CheckPoint;

Succeed.

SQL> create table plsql_dts_Utils_CheckPoint(PlanID number, Tag varchar2(100));

Succeed.

SQL> create or replace procedure plsql_dts_sp_LockFor (                                                                                                                                                                   
  2     v_PlanID in number ,
  3     v_Tag in varchar2  )
  4 as
  5     v_flag number(10, 0) ;
  6 begin
  7     insert into plsql_dts_Utils_CheckPoint
  8         select v_PlanID, v_Tag from dual where  not  exists ( select 1 from plsql_dts_Utils_CheckPoint where PlanID = v_PlanID and Tag = v_Tag ) ;
  9     commit;
 10     v_flag := 1;
 11     while  (v_flag = 1 )
 12     loop
 13         begin
 14             begin
 15                 select  count( 1 ) into v_flag from plsql_dts_Utils_CheckPoint where PlanID = v_PlanID and Tag = v_Tag;
 16             exception
 17                 when no_data_found then
 18                     null;
 19             end;
 20             begin dbe_output.print_line('Ignored Statement:  waitfor delay '); end;
 21         end;
 22     end loop;
 23 
 24 end;
 25 /

Succeed.

SQL> create or replace procedure plsql_dts_sp_UnlockFor (
  2     v_PlanID in number ,
  3     v_Tag in varchar2  )
  4 as 
  5 begin
  6     delete from plsql_dts_Utils_CheckPoint  where PlanID = v_PlanID and Tag = v_Tag;
  7 
  8 end;
  9 /

Succeed.

SQL> 
SQL> declare
  2   table_name  varchar2(100);
  3   strSQL varchar2(1000);
  4   result_cur sys_refcursor;
  5 begin
  6   table_name  := 'plsql_dts_test';
  7   strSQL := 'select * from ' || table_name;
  8   dbe_output.print_line(strSQL);
  9   OPEN result_cur for strSQL;
 10   close result_cur;
 11 end;
 12 /

select * from plsql_dts_test

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2   table_name  varchar2(100);
  3   strSQL varchar2(1000);
  4   result_cur sys_refcursor;
  5 begin
  6   table_name  := 'aaa';
  7   strSQL := 'select * from ' || table_name;
  8   dbe_output.print_line(strSQL);
  9   OPEN result_cur for strSQL;
 10 end;
 11 /

select * from aaa
CT-00932, [9:3] PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with execute errors
[9:3] CT-00922, PL/SQL: illegal line(sys_refcursor must open a legal SELECT statement)

SQL> 
SQL> begin
  2 delete from plsql_dts_test t1;
  3 end;
  4 /

PL/SQL procedure successfully completed.

SQL> 
SQL> select stmt_id,sql_text,status from sys.v$open_cursor open_cur, sys.v$me me where open_cur.session_id = me.sid;

STMT_ID      SQL_TEXT                                                         STATUS                                                          
------------ ---------------------------------------------------------------- ----------------------------------------------------------------
0            select stmt_id,sql_text,status from sys.v$open_cursor open_cur, sys.v$me me where open_cur.session_id = me.sid STMT_STATUS_EXECUTING                                           

1 rows fetched.

SQL> drop procedure if exists plsql_dts_hanoi;

Succeed.

SQL> drop function if exists plsql_dts_hanoi;

Succeed.

SQL> create or replace procedure plsql_dts_hanoi(n int,a varchar2,b varchar2,c varchar2)
  2 as
  3 v_n int :=n;
  4 v_a char(4) :=a;
  5 v_b char(4) :=b;
  6 v_c char(4) :=c;
  7 v_call_stmt varchar2(128);
  8 begin
  9     if(1=v_n)
 10  then   
 11         dbe_output.print_line(v_a||'---->'||v_c);
 12     else
 13         plsql_dts_hanoi(v_n-1,v_a,v_c,v_b);
 14         dbe_output.print_line(v_a||'---->'||v_c); 
 15   	plsql_dts_hanoi(v_n-1,v_b,v_a,v_c);
 16     end if;
 17 end;
 18 /

Succeed.

SQL> 
SQL> call plsql_dts_hanoi(3,'A','B','C');

A   ---->C   
A   ---->B   
C   ---->B   
A   ---->C   
B   ---->A   
B   ---->C   
A   ---->C   

PL/SQL procedure successfully completed.

SQL> drop procedure plsql_dts_hanoi;

Succeed.

SQL> 
SQL> create or replace procedure plsql_dts_handle_even(even int)
  2 as
  3 v_even int :=even;
  4 begin
  5   if(mod(v_even,2)=0)
  6   then
  7       dbe_output.print_line('handle_even:'||v_even);
  8    elsif(mod(v_even,2)=1)
  9   then
 10          dbe_output.print_line('please input even digit');
 11   end if;
 12 end;
 13 /

Succeed.

SQL> 
SQL> call plsql_dts_handle_even(1);

please input even digit

PL/SQL procedure successfully completed.

SQL> call plsql_dts_handle_even(2);

handle_even:2

PL/SQL procedure successfully completed.

SQL> 
SQL> create or replace procedure plsql_dts_handle_even(even int)
  2 as
  3 v_even int :=even;
  4 v_cmd varchar2(32);
  5 begin
  6   if(mod(v_even,2)=0 and 0<>v_even)
  7   then
  8       dbe_output.print_line('handle_even:'||v_even);
  9       v_cmd := 'call plsql_dts_handle_odd('||(v_even-1)||')';
 10       EXECUTE IMMEDIATE v_cmd;
 11   elsif(0 = v_even)
 12   then
 13       dbe_output.print_line('handle_even:'||v_even);
 14   else
 15       dbe_output.print_line('please input even digit');
 16   end if;
 17 end;
 18 /

Succeed.

SQL> 
SQL> create or replace procedure plsql_dts_handle_odd(odd int)
  2 as
  3 v_odd int :=odd;
  4 v_cmd varchar2(32);
  5 begin
  6   if(mod(v_odd,2)=1 and 1<>v_odd)
  7   then
  8       dbe_output.print_line('handle_odd:'||v_odd);
  9       v_cmd := 'call plsql_dts_handle_even('||(v_odd-1)||')';
 10       EXECUTE IMMEDIATE v_cmd;
 11   elsif(1 = v_odd)
 12   then
 13       dbe_output.print_line('handle_odd:'||v_odd);
 14   else
 15       dbe_output.print_line('please input odd digit');
 16   end if;
 17 end;
 18 /

Succeed.

SQL> 
SQL> call plsql_dts_handle_even(4);

handle_even:4
handle_odd:3
handle_even:2
handle_odd:1

PL/SQL procedure successfully completed.

SQL> 
SQL> drop procedure if exists plsql_dts_hanoi;

Succeed.

SQL> drop function if exists plsql_dts_hanoi;

Succeed.

SQL> create or replace procedure plsql_dts_hanoi(n int,a varchar2,b varchar2,c varchar2)
  2 as
  3 v_n int :=n;
  4 v_a char(4) :=a;
  5 v_b char(4) :=b;
  6 v_c char(4) :=c;
  7 v_call_stmt varchar2(128);
  8 begin
  9     if(1=v_n)
 10  then   
 11         dbe_output.print_line(v_a||'---->'||v_c);
 12     else
 13         v_call_stmt:='call plsql_dts_hanoi('||(v_n-1)||','''||v_a||''','''||v_c||''','''||v_b||''')';        
 14      EXECUTE IMMEDIATE v_call_stmt;
 15         dbe_output.print_line(v_a||'---->'||v_c); 
 16   v_call_stmt:='call plsql_dts_hanoi('||(v_n-1)||','''||v_b||''','''||v_a||''','''||v_c||''')';
 17      EXECUTE IMMEDIATE v_call_stmt;
 18     end if;
 19 end;
 20 /

Succeed.

SQL> 
SQL> call plsql_dts_hanoi(3,'A','B','C');

A   ---->C   
A   ---->B   
C   ---->B   
A   ---->C   
B   ---->A   
B   ---->C   
A   ---->C   

PL/SQL procedure successfully completed.

SQL> 
SQL> drop procedure plsql_dts_handle_even;

Succeed.

SQL> drop procedure plsql_dts_handle_odd;

Succeed.

SQL> drop procedure plsql_dts_hanoi;

Succeed.

SQL> 
SQL> drop table if exists plsql_dts_tbl_ADNPicoOSSArea;

Succeed.

SQL> create table plsql_dts_tbl_ADNPicoOSSArea(PLMN varchar2(100), picoDBKey NUMBER);

Succeed.

SQL> 
SQL> BEGIN
  2     declare
  3     v_plmn varchar2(100);
  4     maxDBKey NUMBER;
  5     COUNT_ROW NUMBER;
  6     tsql varchar2(500);
  7 
  8     CURSOR cur
  9         is select PLMN
 10         from (select PLMN from plsql_dts_tbl_ADNPicoOSSArea where PLMN is not NULL and PLMN <> '-1' order by picoDBKey) where rownum = 1;
 11     BEGIN
 12         open cur;
 13         fetch cur into v_plmn;
 14         WHILE cur %FOUND
 15         LOOP
 16             BEGIN
 17                 tsql := 'SELECT COUNT(PLMN) FROM plsql_dts_tbl_ADNPicoPLMN where PLMN = ''' || v_plmn || '''';
 18                 EXECUTE IMMEDIATE tsql into COUNT_ROW;
 19                 IF(COUNT_ROW <> 0) THEN
 20                     fetch cur into v_plmn;
 21                     CONTINUE;
 22                 END IF;
 23 
 24                 tsql := 'SELECT COUNT(PLMN) FROM plsql_dts_tbl_ADNPicoPLMN';
 25                 EXECUTE IMMEDIATE tsql into COUNT_ROW;
 26 
 27                 maxDBKey := 1;
 28                 IF(COUNT_ROW = 0) THEN
 29                     maxDBKey := 1;
 30                 ELSE
 31                     tsql := 'select picoDBKey from(select picoDBKey from plsql_dts_tbl_ADNPicoPLMN order by picoDBKey desc) where rownum = 1';
 32                     EXECUTE IMMEDIATE tsql into maxDBKey;
 33                     maxDBKey := maxDBKey + 1;
 34                 END IF;
 35 
 36                 tsql := 'insert into plsql_dts_tbl_ADNPicoPLMN(picoDBKey,PLMN) values(' || maxDBKey || ', ''' || v_plmn || ''')';
 37                 EXECUTE IMMEDIATE tsql;
 38 
 39                 fetch cur into v_plmn;
 40             END;
 41         END LOOP;
 42         CLOSE cur;
 43     END;
 44 END;
 45 /

PL/SQL procedure successfully completed.

SQL>  CREATE OR REPLACE FUNCTION plsql_dts_bitdomain_bitsets_to_number(bit_omc_value VARCHAR2, bit_pos_str VARCHAR2, value NUMBER)
  2  RETURN NUMBER AS bit_ne_value NUMBER(17);
  3  
  4  single_bit_pos VARCHAR2(2000);
  5  split_index NUMBER := 0;
  6  bit_pair VARCHAR2(2000);
  7  pair_index NUMBER;
  8  ne_index NUMBER;
  9  omc_index NUMBER;
 10  omc_bit_value VARCHAR2(2000);
 11  omc_max_pos NUMBER;
 12  bit_name VARCHAR2(2000);
 13  index_pair VARCHAR2(2000);
 14  single_omc_bit_value NUMBER;
 15  
 16  BEGIN
 17  
 18  IF (bit_omc_value = 'NULL' or bit_omc_value = '<NULL>' or bit_omc_value is NULL) THEN
 19      return value;
 20  END IF;
 21  
 22  single_bit_pos := bit_pos_str;
 23  bit_ne_value := 0;
 24  
 25  WHILE instr(single_bit_pos, ',') != 0 LOOP
 26      split_index := instr(single_bit_pos, ',');
 27      bit_pair := substr(single_bit_pos,1,split_index-1);
 28  
 29      pair_index := instr(bit_pair, ':');
 30      bit_name := substr(bit_pair,1,pair_index-1);
 31      index_pair := substr(bit_pair, pair_index + 1, length(bit_pair) - pair_index);
 32      pair_index := instr(index_pair, ':');
 33  
 34      omc_index := to_number(substr(index_pair, 1, pair_index-1));
 35      ne_index := to_number(substr(index_pair, pair_index+1, length(index_pair) - pair_index));
 36  
 37      if (omc_index + 1) > length(bit_omc_value) then
 38          single_omc_bit_value := 0;
 39      else
 40          single_omc_bit_value := to_number(substr(bit_omc_value, omc_index+1, 1));
 41      end if;
 42  
 43      if(single_omc_bit_value != 0 and single_omc_bit_value != 1) then
 44          single_omc_bit_value := 0;
 45      end if;
 46  
 47      bit_ne_value := bit_ne_value + power(2, ne_index)*single_omc_bit_value;
 48 
 49 single_bit_pos := substr(single_bit_pos, split_index+1, length(single_bit_pos)-split_index);
 50 END LOOP;
 51 
 52 bit_pair := single_bit_pos;
 53 
 54 pair_index := instr(bit_pair, ':');
 55 bit_name := substr(bit_pair,1,pair_index-1);
 56 
 57 index_pair := substr(bit_pair, pair_index + 1, length(bit_pair) - pair_index);
 58 pair_index := instr(index_pair, ':');
 59 
 60 omc_index := to_number(substr(index_pair,1,pair_index-1));
 61 ne_index := to_number(substr(index_pair, pair_index+1, length(index_pair)-pair_index));
 62 
 63 if omc_index + 1 > length(bit_omc_value) then
 64    single_omc_bit_value := 0;
 65 else
 66    single_omc_bit_value := to_number(substr(bit_omc_value, omc_index+1, 1));
 67 end if;
 68 
 69 if single_omc_bit_value != 0 and single_omc_bit_value != 1 then
 70    single_omc_bit_value := 0;
 71 end if;
 72 
 73 bit_ne_value := bit_ne_value + power(2, ne_index)*single_omc_bit_value;
 74 
 75 return bit_ne_value;
 76 END;
 77 /

Succeed.

SQL> create or replace function MULTIENUM_FIND_VALUE_BY_NAME(name varchar2, all_def varchar2)
  2 return number as
  3 new_value number(17) := 1;
  4 begin
  5 return new_value;
  6 end;
  7 /

Succeed.

SQL> create or replace function plsql_dts_multienum_string_to_number(enum_all_name varchar2, enum_all_def varchar2, value number)
  2 return number as
  3 enum_new_value number(17);
  4 tmp_enum_all_name varchar2(2000) := enum_all_name;
  5 split_index number;
  6 enum_name varchar2(2000);
  7 enum_value number;
  8 begin
  9 if (enum_all_name = 'NULL' or enum_all_name = '<NULL>' or enum_all_name is NULL) then
 10     return value;
 11 end if;
 12 enum_new_value := 0;
 13 while (instr(tmp_enum_all_name, '&') != 0) loop
 14     split_index := instr(tmp_enum_all_name, '&');
 15     enum_name := substr(tmp_enum_all_name, 1, split_index-1);
 16     enum_value := multienum_find_value_by_name(enum_name, enum_all_def);
 17     if (enum_value is not NULL) then 
 18         enum_new_value := enum_new_value + power(2, enum_value);
 19     end if;
 20     tmp_enum_all_name := substr(tmp_enum_all_name, split_index+1, length(tmp_enum_all_name)-split_index);
 21 end loop;
 22 enum_name := tmp_enum_all_name;
 23 enum_value := multienum_find_value_by_name(enum_name, enum_all_def);
 24 if (enum_value is not NULL) then 
 25     enum_new_value := enum_new_value + power(2, enum_value);
 26 end if;
 27 if (enum_new_value >= 2147483648) then
 28     if (enum_new_value >= 4294967296) then
 29         enum_new_value := value;
 30     end if;
 31     enum_new_value := enum_new_value - 4294967296;
 32 end if;
 33 return enum_new_value;
 34 end;
 35 /

Succeed.

SQL> select plsql_dts_bitdomain_bitsets_to_number(null, null, 1234.324324) from dual;

PLSQL_DTS_BITDOMAIN_BITSETS_TO_NUMBER(NULL, NULL, 1234.324324)
--------------------------------------------------------------
1234.324324                                                   

1 rows fetched.

SQL> 
SQL> create or replace function plsql_dts_test(value number)
  2 return varchar
  3 IS
  4 begin
  5 return upper(to_char('result :' || (value + 2)));
  6 end;
  7 /

Succeed.

SQL> select plsql_dts_test(2.33) from dual;

PLSQL_DTS_TEST(2.33)                                            
----------------------------------------------------------------
RESULT :4.33                                                    

1 rows fetched.

SQL> 
SQL> drop table if exists plsql_dts_tbl_NEAccess;

Succeed.

SQL> drop table if exists PLSQL_DTS_TBL_NEUSERGROUPACCESS;

Succeed.

SQL> drop table if exists plsql_dts_tbl_NEAccess_tmp;

Succeed.

SQL> 
SQL> create table plsql_dts_tbl_NEAccess(NeUser varchar, NeFdn int, CmdGroupName varchar);

CT-00601, [1:51]Sql syntax error: the column size must be specified
SQL> create table plsql_dts_tbl_NEAccess(NeUser varchar(20), NeFdn int, CmdGroupName varchar(20));

Succeed.

SQL> create table PLSQL_DTS_TBL_NEUSERGROUPACCESS(NeUser varchar(20), NeFdn int, CmdGroupName varchar(20));

Succeed.

SQL> create table plsql_dts_tbl_NEAccess_tmp(NeUser varchar(20), NeFdn int, CmdGroupName varchar(20));

Succeed.

SQL> 
SQL> create or replace procedure neuser_syncTmpAccess
  2 (UserType in int)
  3 as
  4 
  5 begin
  6     if UserType = 0 then
  7         delete from plsql_dts_tbl_NEAccess T1 where exists (select * from plsql_dts_tbl_NEAccess_tmp where NeUser=T1.NeUser and NeFdn=T1.NeFdn);
  8         insert into plsql_dts_tbl_NEAccess select NeUser,NeFdn,CmdGroupName from plsql_dts_tbl_NEAccess_tmp where CmdGroupName <> '*';
  9     else
 10         delete from PLSQL_DTS_TBL_NEUSERGROUPACCESS T1 where exists (select * from plsql_dts_tbl_NEAccess_tmp where NeUser=T1.NeUser and NeFdn=T1.NeFdn);
 11         insert into PLSQL_DTS_TBL_NEUSERGROUPACCESS select NeUser,NeFdn,CmdGroupName from plsql_dts_tbl_NEAccess_tmp where CmdGroupName <> '*';
 12     end if;
 13     delete from plsql_dts_tbl_NEAccess_tmp;
 14 end;
 15 /

Succeed.

SQL> 
SQL> drop table if exists plsql_dts_tbl_NEAccess;

Succeed.

SQL> drop table if exists PLSQL_DTS_TBL_NEUSERGROUPACCESS;

Succeed.

SQL> drop table if exists plsql_dts_tbl_NEAccess_tmp;

Succeed.

SQL> 
SQL> drop function plsql_dts_bitdomain_bitsets_to_number;

Succeed.

SQL> drop function plsql_dts_test;

Succeed.

SQL> drop table if exists plsql_dts_tbl_ADNPicoOSSArea;

Succeed.

SQL> drop table if exists plsql_dts_test;

Succeed.

SQL> drop table if exists plsql_dts_tbl_NeUserDefineGrp;

Succeed.

SQL> drop table if exists plsql_dts_tbl_BackupNeSelDefGrp;

Succeed.

SQL> drop table if exists plsql_dts_tbl_NEDefCmdGroupTable;

Succeed.

SQL> drop table if exists plsql_dts_tbl_CmdReflect;

Succeed.

SQL> drop table if exists plsql_dts_tbl_NEAccess;

Succeed.

SQL> drop table if exists PLSQL_DTS_TBL_NEUSERGROUPACCESS;

Succeed.

SQL> drop table if exists plsql_dts_Utils_CheckPoint;

Succeed.

SQL> drop user if exists plsql_dts_PMCOMDB cascade;

Succeed.

SQL> 
SQL> -- DTS2018063003073
SQL> declare
  2    v_real real;
  3    v_bigint bigint;
  4 begin
  5     v_real:=9223372036854775800.7898765;
  6     select v_real into v_bigint from dual;
  7  dbe_output.print_line('result: '||v_bigint);
  8 end;
  9 /

CT-00932, [6:5] PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with execute errors
[6:5] CT-00659, BIGINT out of range

SQL> 
SQL> select '9223372036854775800.7898765'::real::bigint;

CT-00659, [1:43]BIGINT out of range
SQL> select '8223372036854775800.7898765'::real::bigint;

'8223372036854775800.7898765'::REAL::BIGINT
-------------------------------------------
8223372036854775808                        

1 rows fetched.

SQL> select '1234567890123456789'::real::bigint;

'1234567890123456789'::REAL::BIGINT
-----------------------------------
1234567890123456768                

1 rows fetched.

SQL> select '123456789012345678'::real::bigint;

'123456789012345678'::REAL::BIGINT
----------------------------------
123456789012345680                

1 rows fetched.

SQL> 
SQL> -- DTS2018111510733
SQL> select '9223372036854775800.7898765'::real::bigint; 

CT-00659, [1:43]BIGINT out of range
SQL> select '9.2233720368547748e+18'::real::bigint;

'9.2233720368547748E+18'::REAL::BIGINT
--------------------------------------
9223372036854774784                   

1 rows fetched.

SQL> select '9.2233720368547758e+18'::real::bigint;

CT-00659, [1:38]BIGINT out of range
SQL> select '9.2233720368547757e+18'::real:: bigint;

CT-00659, [1:38]BIGINT out of range
SQL> select '9.2233720368547750e+18'::real:: bigint;

'9.2233720368547750E+18'::REAL:: BIGINT
---------------------------------------
9223372036854774784                    

1 rows fetched.

SQL> select '9.2233720368547754e+18'::real:: bigint;

CT-00659, [1:38]BIGINT out of range
SQL> select '9.2233720368547752e+18'::real:: bigint;

'9.2233720368547752E+18'::REAL:: BIGINT
---------------------------------------
9223372036854774784                    

1 rows fetched.

SQL> select '9.2233720368547751e+18'::real::bigint;

'9.2233720368547751E+18'::REAL::BIGINT
--------------------------------------
9223372036854774784                   

1 rows fetched.

SQL> select '-9.2233720368547758e+18'::real::bigint;

CT-00659, [1:39]BIGINT out of range
SQL> select '-9223372036854775800.78987665'::real::bigint; 

CT-00659, [1:45]BIGINT out of range
SQL> select '-9.2233720368547748e+18'::real::bigint;

'-9.2233720368547748E+18'::REAL::BIGINT
---------------------------------------
-9223372036854774784                   

1 rows fetched.

SQL> select '-9.2233720368547749e+18'::real::bigint;

'-9.2233720368547749E+18'::REAL::BIGINT
---------------------------------------
-9223372036854774784                   

1 rows fetched.

SQL> select '-9.2233720368547750e+18'::real::bigint;

'-9.2233720368547750E+18'::REAL::BIGINT
---------------------------------------
-9223372036854774784                   

1 rows fetched.

SQL> select '-9223372036854775810'::real::bigint; 

CT-00659, [1:36]BIGINT out of range
SQL> select '-9223372036854775807'::real::bigint; 

CT-00659, [1:36]BIGINT out of range
SQL> select '-9223372036854775808'::real::bigint; 

CT-00659, [1:36]BIGINT out of range
SQL> select '9223372036854775807'::real::bigint; 

CT-00659, [1:35]BIGINT out of range
SQL> select '-9.2233720368547750e+18'::real:: bigint;

'-9.2233720368547750E+18'::REAL:: BIGINT
----------------------------------------
-9223372036854774784                    

1 rows fetched.

SQL> select '-9.2233720368547751e+18'::real:: bigint;

'-9.2233720368547751E+18'::REAL:: BIGINT
----------------------------------------
-9223372036854774784                    

1 rows fetched.

SQL> 
SQL> --BEGIN: DTS2018071807758  
SQL> DROP PROCEDURE IF EXISTS Pro_ColumnOper;

Succeed.

SQL> CREATE PROCEDURE Pro_ColumnOper(TableName VARCHAR,ColumnName VARCHAR,CType INT,SqlStr VARCHAR)
  2 AS
  3    Rows1 INT;
  4    SqlStr1 VARCHAR(4000);
  5 BEGIN
  6 Rows1 := 0;
  7 SELECT COUNT(*) INTO Rows1  FROM USER_TAB_COLS WHERE TABLE_NAME=UPPER(TableName) AND COLUMN_NAME=REPLACE(ColumnName, '`', '');
  8 
  9 IF CType=1 AND Rows1<=0 THEN
 10     SqlStr1 := CONCAT( 'ALTER TABLE ',TableName,' ADD COLUMN ',ColumnName,' ',SqlStr);
 11 ELSIF CType=2 AND Rows1>0  THEN
 12     SqlStr1 := CONCAT('ALTER TABLE ',TableName,' MODIFY ',ColumnName,' ',SqlStr);
 13 ELSIF CType=3 AND Rows1>0 THEN
 14     SqlStr1 := CONCAT('ALTER TABLE  ',TableName,' DROP COLUMN  ',ColumnName);
 15 ELSE
 16     SqlStr1 :='';
 17 END IF;
 18 IF (SqlStr1 is not null) THEN
 19     EXECUTE IMMEDIATE SqlStr1;
 20 END IF;
 21 END;
 22 /

Succeed.

SQL> 
SQL> drop table if exists plsql_dts_test;

Succeed.

SQL> create table plsql_dts_test (a int,b int);

Succeed.

SQL> call Pro_ColumnOper('plsql_dts_test','C',1,'int');

PL/SQL procedure successfully completed.

SQL> select * from plsql_dts_test;

A            B            C           
------------ ------------ ------------

0 rows fetched.

SQL> call Pro_ColumnOper('plsql_dts_test','C',2,'int not null');

PL/SQL procedure successfully completed.

SQL> select * from plsql_dts_test;

A            B            C           
------------ ------------ ------------

0 rows fetched.

SQL> insert into plsql_dts_test(a) values(1);

CT-00620, Can't set NULL value for column 'C'
SQL> call Pro_ColumnOper('plsql_dts_test','A',3,'');

PL/SQL procedure successfully completed.

SQL> select * from plsql_dts_test;

B            C           
------------ ------------

0 rows fetched.

SQL> --END: DTS2018071807758  
SQL> 
SQL> --BEGIN: DTS2018071310481 
SQL> drop table if exists plsql_dts_tbl_loop_commit;

Succeed.

SQL> create table plsql_dts_tbl_loop_commit(c_id int, c_int int, c_integer integer);

Succeed.

SQL> INSERT INTO plsql_dts_tbl_loop_commit VALUES ( 20, 0, 10);

1 rows affected.

SQL> commit;

Succeed.

SQL> select c_id,c_int,c_integer from plsql_dts_tbl_loop_commit;

C_ID         C_INT        C_INTEGER   
------------ ------------ ------------
20           0            10          

1 rows fetched.

SQL> create unique index plsql_dts_tbl_loop_commit_ndx on plsql_dts_tbl_loop_commit(c_id,c_int,c_integer) online;

Succeed.

SQL> declare
  2 v_sql varchar2(128);
  3 begin
  4 for i in 1..300
  5 	loop
  6 		update plsql_dts_tbl_loop_commit set c_id=c_id+2,c_int=c_int+2,c_integer=c_integer+2;
  7 		if mod(i,2)=0
  8 		then
  9 			commit;
 10 		elsif mod(i,2)=1
 11 		then
 12 			rollback;
 13 		end if;
 14 		
 15 		if mod(i,5)=0
 16 		then
 17 			dbe_output.print_line('ROUND:'||i);
 18 			v_sql:='drop index plsql_dts_tbl_loop_commit_ndx on plsql_dts_tbl_loop_commit';
 19 			EXECUTE IMMEDIATE v_sql;
 20 			v_sql:='create unique index plsql_dts_tbl_loop_commit_ndx on plsql_dts_tbl_loop_commit(c_id,c_int,c_integer) online';
 21 			EXECUTE IMMEDIATE v_sql;
 22 		end if;
 23 	end loop;
 24 end;
 25 /

ROUND:5
ROUND:10
ROUND:15
ROUND:20
ROUND:25
ROUND:30
ROUND:35
ROUND:40
ROUND:45
ROUND:50
ROUND:55
ROUND:60
ROUND:65
ROUND:70
ROUND:75
ROUND:80
ROUND:85
ROUND:90
ROUND:95
ROUND:100
ROUND:105
ROUND:110
ROUND:115
ROUND:120
ROUND:125
ROUND:130
ROUND:135
ROUND:140
ROUND:145
ROUND:150
ROUND:155
ROUND:160
ROUND:165
ROUND:170
ROUND:175
ROUND:180
ROUND:185
ROUND:190
ROUND:195
ROUND:200
ROUND:205
ROUND:210
ROUND:215
ROUND:220
ROUND:225
ROUND:230
ROUND:235
ROUND:240
ROUND:245
ROUND:250
ROUND:255
ROUND:260
ROUND:265
ROUND:270
ROUND:275
ROUND:280
ROUND:285
ROUND:290
ROUND:295
ROUND:300

PL/SQL procedure successfully completed.

SQL> select c_id,c_int,c_integer from plsql_dts_tbl_loop_commit;

C_ID         C_INT        C_INTEGER   
------------ ------------ ------------
320          300          310         

1 rows fetched.

SQL> 
SQL> drop table if exists plsql_dts_tbl_loop_commit;

Succeed.

SQL> create table plsql_dts_tbl_loop_commit(c_id int, c_int int, c_integer integer);

Succeed.

SQL> INSERT INTO plsql_dts_tbl_loop_commit VALUES ( 20, 0, 10);

1 rows affected.

SQL> commit;

Succeed.

SQL> select c_id,c_int,c_integer from plsql_dts_tbl_loop_commit;

C_ID         C_INT        C_INTEGER   
------------ ------------ ------------
20           0            10          

1 rows fetched.

SQL> create unique index plsql_dts_tbl_loop_commit_ndx on plsql_dts_tbl_loop_commit(c_id,c_int,c_integer) online;

Succeed.

SQL> declare
  2 v_sql varchar2(128);
  3 begin
  4 for i in 1..300
  5 	loop
  6 		update plsql_dts_tbl_loop_commit set c_id=c_id+2,c_int=c_int+2,c_integer=c_integer+2;
  7 		if mod(i,2)=0
  8 		then
  9 			commit;
 10 		elsif mod(i,2)=1
 11 		then
 12 			rollback;
 13 		end if;
 14 		
 15 		if mod(i,5)=0
 16 		then
 17 			dbe_output.print_line('ROUND:'||i);
 18 			v_sql:='drop index plsql_dts_tbl_loop_commit_ndx on plsql_dts_tbl_loop_commit';
 19 			EXECUTE IMMEDIATE v_sql;
 20 			v_sql:='create unique index plsql_dts_tbl_loop_commit_ndx on plsql_dts_tbl_loop_commit(c_id,c_int,c_integer) online';
 21 			EXECUTE IMMEDIATE v_sql;
 22 		end if;
 23 	end loop;
 24 end;
 25 /

ROUND:5
ROUND:10
ROUND:15
ROUND:20
ROUND:25
ROUND:30
ROUND:35
ROUND:40
ROUND:45
ROUND:50
ROUND:55
ROUND:60
ROUND:65
ROUND:70
ROUND:75
ROUND:80
ROUND:85
ROUND:90
ROUND:95
ROUND:100
ROUND:105
ROUND:110
ROUND:115
ROUND:120
ROUND:125
ROUND:130
ROUND:135
ROUND:140
ROUND:145
ROUND:150
ROUND:155
ROUND:160
ROUND:165
ROUND:170
ROUND:175
ROUND:180
ROUND:185
ROUND:190
ROUND:195
ROUND:200
ROUND:205
ROUND:210
ROUND:215
ROUND:220
ROUND:225
ROUND:230
ROUND:235
ROUND:240
ROUND:245
ROUND:250
ROUND:255
ROUND:260
ROUND:265
ROUND:270
ROUND:275
ROUND:280
ROUND:285
ROUND:290
ROUND:295
ROUND:300

PL/SQL procedure successfully completed.

SQL> select c_id,c_int,c_integer from plsql_dts_tbl_loop_commit;

C_ID         C_INT        C_INTEGER   
------------ ------------ ------------
320          300          310         

1 rows fetched.

SQL> --END: DTS2018071310481 
SQL> 
SQL> --BEGIN:DTS2018071701307 
SQL> drop table if exists plsql_dts_emp_test;

Succeed.

SQL> create table plsql_dts_emp_test(empno int,ename varchar(10),job varchar(10) ,sal integer);

Succeed.

SQL> insert into plsql_dts_emp_test values(1,'zhangsan','doctor1',10000);

1 rows affected.

SQL> insert into plsql_dts_emp_test values(2,'zhangsan2','doctor2',10000);

1 rows affected.

SQL> insert into plsql_dts_emp_test values(123,'zhangsan3','doctor3',10000);

1 rows affected.

SQL> insert into plsql_dts_emp_test values(1,'zhansi','doctor1',12000);

1 rows affected.

SQL> insert into plsql_dts_emp_test values(2,'lisiabc','doctor2',13000);

1 rows affected.

SQL> insert into plsql_dts_emp_test values(123,'zhangwu123','doctor3',14000);

1 rows affected.

SQL> commit;

Succeed.

SQL> drop table if exists syscur_018;

Succeed.

SQL> create table syscur_018(empno int,edepart varchar(20));

Succeed.

SQL> insert into syscur_018 values(1,'jizhenshi');

1 rows affected.

SQL> insert into syscur_018 values(2,'guke');

1 rows affected.

SQL> insert into syscur_018 values(3,'xueyeke');

1 rows affected.

SQL> commit;

Succeed.

SQL> declare
  2   cv SYS_REFCURSOR;
  3   v_job plsql_dts_emp_test.job%type;
  4   v_empno  plsql_dts_emp_test.empno%type;
  5   v_edepart syscur_018.edepart%type;
  6 BEGIN
  7        open cv for select a.empno,a.job,b.edepart from plsql_dts_emp_test a right join syscur_018 b on a.empno=b.empno group by a.empno,a.job,b.edepart order by 1,2,3;
  8        loop
  9        fetch cv into v_empno,v_job,v_edepart;
 10        exit when cv%notfound;
 11                case v_empno
 12                when 1 then dbe_output.print_line('empno is '||v_empno||'----->'||'job is '||v_job||'----->'||'depart is '||v_edepart);
 13                when 2 then dbe_output.print_line('empno is '||v_empno||'----->'||'job is '||v_job||'----->'||'depart is '||v_edepart);
 14                else dbe_output.print_line('empno is '||v_empno||'----->'||'job is '||v_job||'----->'||'depart is '||v_edepart);
 15                end case;
 16        end loop;
 17        close cv;
 18 end;
 19 /

empno is 1----->job is doctor1----->depart is jizhenshi
empno is 2----->job is doctor2----->depart is guke
empno is ----->job is ----->depart is xueyeke

PL/SQL procedure successfully completed.

SQL> --END:DTS2018071701307 
SQL> 
SQL> --BEGIN:DTS2018071402784 
SQL> create or replace function v_update(v_data in date default sysdate) return int
  2 IS
  3 BEGIN
  4 EXECUTE IMMEDIATE 'set transaction isolation level serializable';
  5 update plsql_dts_tbl_loop_commit set c_id=c_id+2,c_int=c_int+2,c_integer=c_integer+2;
  6 return SQL%FOUND;
  7 end v_update;
  8 /

Succeed.

SQL> 
SQL> drop table if exists plsql_dts_tbl_loop_commit;

Succeed.

SQL> create table plsql_dts_tbl_loop_commit(c_id int, c_int int, c_integer integer);

Succeed.

SQL> INSERT INTO plsql_dts_tbl_loop_commit VALUES ( 20, 0, 10);

1 rows affected.

SQL> commit;

Succeed.

SQL> select c_id,c_int,c_integer from plsql_dts_tbl_loop_commit;

C_ID         C_INT        C_INTEGER   
------------ ------------ ------------
20           0            10          

1 rows fetched.

SQL> create unique index plsql_dts_tbl_loop_commit_ndx on plsql_dts_tbl_loop_commit(c_id,c_int,c_integer) online;

Succeed.

SQL> declare
  2 v_sql varchar2(128);
  3 v_id int;
  4 begin
  5 EXECUTE IMMEDIATE 'savepoint p1';
  6 update plsql_dts_tbl_loop_commit set c_id=c_id+2,c_int=c_int+2,c_integer=c_integer+2;
  7 EXECUTE IMMEDIATE 'rollback to savepoint p1';
  8 if 1<>v_update()
  9 then
 10 null;
 11 end if;
 12 EXECUTE IMMEDIATE 'rollback to savepoint p1';
 13 end;
 14 /

CT-00932, [8:1] PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with execute errors
[4:1] PL/SQL(GS_PLSQL_DTS.V_UPDATE) terminated with execute errors
[4:1] CT-00733, Error occurred when the transaction is in progress, set transaction must be first statement of transaction

SQL> rollback;

Succeed.

SQL> set transaction isolation level read committed;


Succeed.


SQL> --END:DTS2018071402784 
SQL> 
SQL> 
SQL> drop table if exists article;

Succeed.

SQL> create table article(
  2   id number primary key, --id
  3   cont varchar2(4000),
  4   pid number,           
  5   isleaf number(1),     
  6   alevle number(2)      
  7 );

Succeed.

SQL> insert into article values(1,'1',0,0,0);

1 rows affected.

SQL> insert into article values(2,'2',1,0,1);

1 rows affected.

SQL> insert into article values(3,'3',2,1,2);

1 rows affected.

SQL> insert into article values(4,'4',2,0,2);

1 rows affected.

SQL> insert into article values(5,'5',4,1,3);

1 rows affected.

SQL> insert into article values(6,'6',1,0,1);

1 rows affected.

SQL> insert into article values(7,'7',6,1,2);

1 rows affected.

SQL> insert into article values(8,'8',6,1,2);

1 rows affected.

SQL> insert into article values(9,'9',2,0,2);

1 rows affected.

SQL> insert into article values(10,'10',9,1,3);

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> create or replace procedure sp_tree_recur(v_pid article.pid%type,v_level int) is
  2 cursor c is select * from article where pid=v_pid;
  3 v_format_string  varchar2(4000):='';
  4 begin
  5  for c_article in c loop
  6      begin
  7        for i in 1..v_level loop
  8          v_format_string:=v_format_string||'****';
  9        end loop;
 10        dbe_output.print_line(v_format_string||c_article.cont);
 11        if(c_article.isleaf = 0) then
 12           sp_tree_recur(c_article.id,c_article.ALEVLE+1);
 13        end if;
 14      end;
 15  end loop;
 16 end;
 17 /

Succeed.

SQL> exec sp_tree_recur(0,0);

1
****2
********3
****************4
************5
************************9
************10
********6
********7
****************8

PL/SQL procedure successfully completed.

SQL> 
SQL> --core
SQL> create or replace procedure proc_UpdAttr
  2 (iRet out number)
  3 as
  4 flag number;
  5 attrgid_i number;
  6 devid_i number;
  7 mtype number;
  8 stype number;
  9 begin
 10 declare cursor attr_cur is select iid, attrid, value from tbl_ProcAttr;
 11 
 12 begin
 13 for cur_data in attr_cur loop
 14 select count(iid) into flag from tbl_ResAttr where iid = cur_data.iid and attrid = cur_data.attrid;
 15 if flag > 0 then
 16 update tbl_ResAttr set value = cur_data.value where iid = cur_data.iid and attrid = cur_data.attrid;
 17 else
 18 if cur_data.attrid >= 0 then
 19 select attrgid into attrgid_i from tbl_ResAttrStatic where attrid = cur_data.attrid;
 20 select devid, maintype, subtype into devid_i, mtype, stype from tbl_Resource where iid = cur_data.iid;
 21 insert into tbl_ResAttr(iid,attrid,value,devid,maintype,subtype,attrgid)
 22 values(cur_data.iid,cur_data.attrid,cur_data.value,devid_i,mtype,stype,attrgid_i);
 23 else
 24 delete tbl_ResAttr where iid = cur_data.iid and attrid = -cur_data.attrid;
 25 end if;
 26 end if;
 27 end loop;
 28 end;
 29 commit;
 30 iRet := 0;
 31 exception
 32 when others then
 33 iRet := 1000;
 34 rollback;
 35 end;
 36 /

Succeed.
Warning:
PL/SQL(GS_PLSQL_DTS.PROC_UPDATTR) terminated with compiling errors
[13:30] PLC-00843 The table or view GS_PLSQL_DTS.TBL_PROCATTR does not exist.
[16:8] PLC-00843 The table or view GS_PLSQL_DTS.TBL_RESATTR does not exist.
[18:4] PLC-00601 Sql syntax error: invalid column name 'ATTRID'
[20:36] PLC-00843 The table or view GS_PLSQL_DTS.TBL_RESOURCE does not exist.
[21:13] PLC-00843 The table or view GS_PLSQL_DTS.TBL_RESATTR does not exist.
[23:1] PLC-00955 Unexpected ELSE found
[27:5] PLC-00920 Undefined symbol LOOP


SQL> 
SQL> Declare
  2    v_number number(5,2) :=331.225;
  3    v_varchar2 varchar2(30) :=v_number;
  4 begin
  5     dbe_output.print_line('Hello Zenith:'||v_varchar2);
  6 end;
  7 /

Hello Zenith:331.23

PL/SQL procedure successfully completed.

SQL> 
SQL> Declare
  2    v_datetime date :=to_date('2018-01-07','YYYY-MM-DD');
  3    v_varchar2 varchar2(18) :=to_char(v_datetime,'YYYY-MM-DD');
  4 begin
  5    dbe_output.print_line('Hello Zenith:'||v_varchar2);
  6 end;
  7 /

Hello Zenith:2018-01-07

PL/SQL procedure successfully completed.

SQL> 
SQL> CREATE or replace PROCEDURE Zenith_Test_004(param1 in out varchar2 default 'hello',param2 in out varchar2 default 'zenith')
  2 IS
  3     tmp varchar2(20);
  4 begin
  5    tmp:=param1;
  6    param1:=param2;
  7    param2:=tmp;
  8 end Zenith_Test_004;
  9 /

Succeed.
Warning:
PL/SQL(GS_PLSQL_DTS.ZENITH_TEST_004) terminated with compiling errors
[1:59] PLC-00960 The OUT and IN OUT parameters were not allowed to contain a default expression.


SQL> 
SQL> CREATE or replace PROCEDURE Zenith_Test_004(param1 in out varchar2,param2 in out varchar2)
  2 IS
  3     tmp varchar2(20);
  4 begin
  5    tmp:=param1;
  6    param1:=param2;
  7    param2:=tmp;
  8 end Zenith_Test_004;
  9 /

Succeed.

SQL> 
SQL> Declare
  2    v_char1 char(8) :=null;
  3    v_char2 char(8) :=null;
  4 begin
  5    v_char1:='A';
  6    v_char2:='B';
  7    dbe_output.print_line(v_char1||':'||v_char2);
  8    Zenith_Test_004(v_char1,'B');
  9    dbe_output.print_line(v_char1||':'||v_char2);
 10 end;
 11 /

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[8:4] PLC-00949 The 2th argument of ZENITH_TEST_004 wrong type bound to an OUT position

SQL> 
SQL> Declare
  2    v_char1 char(8) :=null;
  3    v_char2 char(8) :=null;
  4 begin
  5    v_char1:='A';
  6    v_char2:='B';
  7    dbe_output.print_line(v_char1||':'||v_char2);
  8    Zenith_Test_004(v_char1,v_char2);
  9    dbe_output.print_line(v_char1||':'||v_char2);
 10 end;
 11 /

A       :B       
B       :A       

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> drop table if exists plsql_dts_emp;

Succeed.

SQL> create table plsql_dts_emp(empno int, ename varchar(100), job varchar(100), sal int);

Succeed.

SQL> insert into plsql_dts_emp values(1,'whf','doctor',1222);

1 rows affected.

SQL> insert into plsql_dts_emp values(2,'whf1','doctor',2222);

1 rows affected.

SQL> insert into plsql_dts_emp values(3,'whf2','doctor1',2222);

1 rows affected.

SQL> select * from plsql_dts_emp;

EMPNO        ENAME                                                            JOB                                                              SAL         
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------
1            whf                                                              doctor                                                           1222        
2            whf1                                                             doctor                                                           2222        
3            whf2                                                             doctor1                                                          2222        

3 rows fetched.

SQL> 
SQL> declare       
  2        cursor c_job
  3        is
  4        select *
  5        from plsql_dts_emp
  6        where job='doctor';
  7        c_row plsql_dts_emp%type;
  8 begin
  9        open c_job;
 10          loop           
 11            fetch c_job into c_row;           
 12            exit when c_job%notfound;
 13             dbe_output.print_line(c_row.empno||'-'||c_row.ename||'-'||c_row.job||'-'||c_row.sal);
 14          end loop;       
 15       close c_job;
 16 end;
 17 /

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[7:14] PLC-00941 'GS_PLSQL_DTS.plsql_dts_emp'.TYPE was not a variable, column, or attribute.

SQL> 
SQL> declare       
  2        cursor c_job
  3        is
  4        select *
  5        from plsql_dts_emp
  6        where job='doctor';
  7        c_row plsql_dts_emp%rowtype;
  8        a int;
  9        c a%type;
 10        d a%rowtype;
 11 begin
 12        open c_job;
 13          loop           
 14            fetch c_job into c_row;           
 15            exit when c_job%notfound;
 16             dbe_output.print_line(c_row.empno||'-'||c_row.ename||'-'||c_row.job||'-'||c_row.sal);
 17          end loop;       
 18       close c_job;
 19 end;
 20 /

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[10:10] PLC-00942 With ROWTYPE attribute, 'a' must name a table, cursor or cursor-variable

SQL> 
SQL> declare       
  2        cursor c_job
  3        is
  4        select *
  5        from plsql_dts_emp
  6        where job='doctor';
  7        c_row plsql_dts_emp%rowtype;
  8        type rec is record(xx int);
  9        e rec;
 10        f e%type;
 11        g e%rowtype;
 12 begin
 13        open c_job;
 14          loop           
 15            fetch c_job into c_row;           
 16            exit when c_job%notfound;
 17             dbe_output.print_line(c_row.empno||'-'||c_row.ename||'-'||c_row.job||'-'||c_row.sal);
 18          end loop;       
 19       close c_job;
 20 end;
 21 /

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[11:10] PLC-00942 With ROWTYPE attribute, 'e' must name a table, cursor or cursor-variable

SQL> 
SQL> declare
  2        
  3        cursor c_job
  4        is
  5        select *
  6        from plsql_dts_emp
  7        where job='doctor';
  8        c_row plsql_dts_emp%rowtype;
  9 begin
 10        open c_job;
 11          loop           
 12            fetch c_job into c_row;           
 13            exit when c_job%notfound;
 14             dbe_output.print_line(c_row.empno||'-'||c_row.ename||'-'||c_row.job||'-'||c_row.sal);
 15          end loop;       
 16       close c_job;
 17 end;
 18 /

1-whf-doctor-1222
2-whf1-doctor-2222

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2        
  3        cursor c_job
  4        is
  5        select empno
  6        from plsql_dts_emp
  7        where job='doctor';
  8        c_row plsql_dts_emp.empno%rowtype;
  9 begin
 10        open c_job;
 11          loop           
 12            fetch c_job into c_row;           
 13            exit when c_job%notfound;
 14             dbe_output.print_line(c_row.empno);
 15          end loop;       
 16       close c_job;
 17 end;
 18 /

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[8:14] PLC-00942 With ROWTYPE attribute, 'EMPNO' must name a table, cursor or cursor-variable

SQL> 
SQL> declare
  2        
  3        cursor c_job
  4        is
  5        select empno
  6        from plsql_dts_emp
  7        where job='doctor';
  8        c_row plsql_dts_emp.empno%type;
  9 begin
 10        open c_job;
 11          loop           
 12            fetch c_job into c_row;           
 13            exit when c_job%notfound;
 14             dbe_output.print_line(c_row);
 15          end loop;       
 16       close c_job;
 17 end;
 18 /

1
2

PL/SQL procedure successfully completed.

SQL> 
SQL> delete from plsql_dts_emp;

3 rows affected.

SQL> insert into plsql_dts_emp values(1,'whf','doctor',1222);

1 rows affected.

SQL> insert into plsql_dts_emp values(2,'whf1','doctor',2222);

1 rows affected.

SQL> insert into plsql_dts_emp values(3,'whf2','doctor1',2222);

1 rows affected.

SQL> select * from plsql_dts_emp;

EMPNO        ENAME                                                            JOB                                                              SAL         
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------
1            whf                                                              doctor                                                           1222        
2            whf1                                                             doctor                                                           2222        
3            whf2                                                             doctor1                                                          2222        

3 rows fetched.

SQL> declare        
  2        cursor c_job
  3        is
  4        select *
  5        from plsql_dts_emp
  6        where job='doctor';       
  7        c_row c_job%type;
  8 begin
  9        open c_job;
 10          loop
 11            fetch c_job into c_row;
 12            exit when c_job%notfound;
 13             dbe_output.print_line(c_row.empno||'-'||c_row.ename||'-'||c_row.job||'-'||c_row.sal);
 14          end loop;       
 15       close c_job;
 16 end;
 17 /

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[7:14] PLC-00941 'GS_PLSQL_DTS.c_job'.TYPE was not a variable, column, or attribute.

SQL> declare        
  2        cursor c_job
  3        is
  4        select *
  5        from plsql_dts_emp
  6        where job='doctor';       
  7        c_row c_job%rowtype;
  8 begin
  9        open c_job;
 10          loop
 11            fetch c_job into c_row;
 12            exit when c_job%notfound;
 13             dbe_output.print_line(c_row.empno||'-'||c_row.ename||'-'||c_row.job||'-'||c_row.sal);
 14          end loop;       
 15       close c_job;
 16 end;
 17 /

1-whf-doctor-1222
2-whf1-doctor-2222

PL/SQL procedure successfully completed.

SQL> drop table if exists plsql_dts_emp;

Succeed.

SQL> 
SQL> 
SQL> create or replace procedure proc_params(i in int, n out int, y out int, x in int default 1)
  2 as
  3   strSQL varchar2(1000);
  4 begin
  5   n:=i;
  6   dbe_output.print_line(i);
  7   dbe_output.print_line(n);
  8   dbe_output.print_line(x);
  9   dbe_output.print_line(y);  
 10   y := 20;
 11 end proc_params;
 12 /

Succeed.

SQL> DECLARE
  2     outn int;
  3     outy int;
  4 BEGIN
  5     proc_params(1, outn, outy);
  6     dbe_output.print_line(outn);
  7     dbe_output.print_line(outy);
  8 END;
  9 /

1
1
1

1
20

PL/SQL procedure successfully completed.

SQL> drop procedure proc_params;

Succeed.

SQL> 
SQL> drop table if exists Zenith_Test_006;

Succeed.

SQL> create table Zenith_Test_006(id int);

Succeed.

SQL> Declare
  2 begin
  3     insert into Zenith_Test_006 values (1);
  4     rollback;
  5     insert into Zenith_Test_006 values (2);
  6     rollback;
  7 end;
  8 /

PL/SQL procedure successfully completed.

SQL> select * from Zenith_Test_006;

ID          
------------

0 rows fetched.

SQL> drop table if exists Zenith_Test_006;

Succeed.

SQL> 
SQL> create or replace function plsql_dts_hanoi_fun(n number, oneT char, twoT char, threeT char) return number
  2 is
  3 v_sql char(128);
  4 begin
  5   if (n = 1) then
  6     dbe_output.print_line(oneT ||'---->'|| threeT);
  7   else
  8     v_sql:='call plsql_dts_hanoi_pro('||to_char(n - 1)||','''||oneT||''','''||threeT||''','''||twoT||''')';
  9     EXECUTE IMMEDIATE v_sql;
 10     dbe_output.print_line(oneT ||'---->'|| threeT);
 11     v_sql:='call plsql_dts_hanoi_pro('||to_char(n - 1)||','''||twoT||''','''||oneT||''','''||threeT||''')';
 12 	EXECUTE IMMEDIATE v_sql;
 13   end if;
 14   return 0;
 15 end plsql_dts_hanoi_fun;
 16 /

Succeed.

SQL> 
SQL> create or replace procedure plsql_dts_hanoi_pro(n int,a varchar2,b varchar2,c varchar2)
  2 as
  3 v_tmp int;
  4 v_n int :=n;
  5 v_a varchar2(4) :=a;
  6 v_b varchar2(4) :=b;
  7 v_c varchar2(4) :=c;
  8 begin
  9     if(1=v_n)
 10     then   
 11         dbe_output.print_line(v_a||'---->'||v_c);
 12     else
 13         v_tmp:=plsql_dts_hanoi_fun(v_n-1,v_a,v_c,v_b); 
 14         dbe_output.print_line(v_a||'---->'||v_c);    
 15         v_tmp:=plsql_dts_hanoi_fun(v_n-1,v_b,v_a,v_c);
 16     end if;
 17 end plsql_dts_hanoi_pro;
 18 /

Succeed.

SQL> 
SQL> select plsql_dts_hanoi_fun(3, 'A', 'B', 'C') from dual;

PLSQL_DTS_HANOI_FUN(3, 'A', 'B', 'C')   
----------------------------------------
0                                       

1 rows fetched.

A---->C
A---->B
C---->B
A---->C
B---->A
B---->C
A---->C

SQL> exec plsql_dts_hanoi_pro(3, 'A', 'B', 'C');

A---->C
A---->B
C---->B
A---->C
B---->A
B---->C
A---->C

PL/SQL procedure successfully completed.

SQL> drop function plsql_dts_hanoi_fun;

Succeed.

SQL> drop procedure plsql_dts_hanoi_pro;

Succeed.

SQL> 
SQL> drop procedure if exists plsql_dts_hanoi;

Succeed.

SQL> create or replace function plsql_dts_hanoi(n number, oneT char, twoT char, threeT char) return number
  2 is
  3 cn number := 0;
  4 begin
  5   cn := cn + 1;
  6   if (n = 1) then
  7     dbe_output.print_line(oneT || '-->' || threeT);
  8   else
  9     cn := cn + plsql_dts_hanoi(n - 1, oneT, threeT, twoT);
 10     dbe_output.print_line(oneT || '-->' || threeT);
 11     cn := cn + plsql_dts_hanoi(n - 1, twoT, oneT, threeT);
 12   end if;
 13   return cn;
 14 end plsql_dts_hanoi;
 15 /

Succeed.

SQL> select plsql_dts_hanoi(3, 'A', 'B', 'C') from dual;

PLSQL_DTS_HANOI(3, 'A', 'B', 'C')       
----------------------------------------
7                                       

1 rows fetched.

A-->C
A-->B
C-->B
A-->C
B-->A
B-->C
A-->C

SQL> drop function plsql_dts_hanoi;

Succeed.

SQL> 
SQL> create or replace function a1() return int
  2 as
  3 begin
  4 return 1;
  5 end;
  6 /

Succeed.

SQL> 
SQL> create or replace function a(yyy int) return int
  2 as
  3 begin
  4 return a1(yyy);
  5 end;
  6 /

Succeed.
Warning:
PL/SQL(GS_PLSQL_DTS.A) terminated with compiling errors
[4:8] PLC-00916 PL/SQL:syntax error(unexpected more arguments for current procedure/function)


SQL> 
SQL> create or replace function plsql_dts_hanoi(n number, oneT char, twoT char, threeT char) return number
  2 is
  3 cn number := 0;
  4 begin
  5   cn := cn + 1;
  6   if (n = 1) then
  7     dbe_output.print_line(oneT || '-->' || threeT);
  8   else
  9     cn := cn + plsql_dts_hanoi(to_char(n - 1), oneT, threeT, twoT);
 10     dbe_output.print_line(oneT || '-->' || threeT);
 11     cn := cn + plsql_dts_hanoi(n - 1, twoT, oneT, threeT);
 12   end if;
 13   return cn;
 14 end plsql_dts_hanoi;
 15 /

Succeed.

SQL> select plsql_dts_hanoi(3, 'A', 'B', 'C') from dual;

PLSQL_DTS_HANOI(3, 'A', 'B', 'C')       
----------------------------------------
7                                       

1 rows fetched.

A-->C
A-->B
C-->B
A-->C
B-->A
B-->C
A-->C

SQL> 
SQL> create or replace function plsql_dts_hanoi(n number, oneT char, twoT char, threeT char) return number
  2 is
  3 cn number := 0;
  4 begin
  5   cn := cn + 1;
  6   if (n = 1) then
  7     dbe_output.print_line(oneT || '-->' || threeT);
  8   else
  9     cn := cn + plsql_dts_hanoi(n - 1, oneT, threeT);
 10     dbe_output.print_line(oneT || '-->' || threeT);
 11     cn := cn + plsql_dts_hanoi(n - 1, twoT, oneT, threeT);
 12   end if;
 13   return cn;
 14 end plsql_dts_hanoi;
 15 /

Succeed.
Warning:
PL/SQL(GS_PLSQL_DTS.PLSQL_DTS_HANOI) terminated with compiling errors
[9:16] PLC-00644 Too few arguments for procedure/function


SQL> 
SQL> drop table if exists plsql_dts_emp;

Succeed.

SQL> create table plsql_dts_emp(empno int, ename varchar(100), job varchar(100), sal int);

Succeed.

SQL> insert into plsql_dts_emp values(1,'whf','doctor',1222);

1 rows affected.

SQL> insert into plsql_dts_emp values(2,'whf1','doctor',2222);

1 rows affected.

SQL> insert into plsql_dts_emp values(3,'whf2','doctor1',2222);

1 rows affected.

SQL> select * from plsql_dts_emp;

EMPNO        ENAME                                                            JOB                                                              SAL         
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------
1            whf                                                              doctor                                                           1222        
2            whf1                                                             doctor                                                           2222        
3            whf2                                                             doctor1                                                          2222        

3 rows fetched.

SQL> 
SQL> declare
  2 a plsql_dts_emp%rowtype;
  3 cursor mycursor is  select * from plsql_dts_emp where empno=1 order by ename;
  4 begin
  5 open mycursor;
  6 fetch mycursor into a;
  7 loop
  8 open mycursor;
  9 if  mycursor%notfound=false  then 
 10 dbe_output.print_line('a is emp:'||a.empno||'name:'||a.ename||'job:'||a.job||'sal:'||a.sal);
 11 dbe_output.print_line(mycursor%rowcount);fetch mycursor into a;
 12 end if;
 13 exit
 14 when  mycursor%notfound;
 15 end loop;
 16 exception
 17 when CURSOR_ALREADY_OPEN
 18 then
 19 dbe_output.print_line('exception CURSOR_ALREADY_OPEN');
 20 close mycursor;
 21 end;
 22 /

exception CURSOR_ALREADY_OPEN

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> declare
  2 a plsql_dts_emp%rowtype;
  3 cursor mycursor is  select * from plsql_dts_emp where empno=1 order by ename;
  4 begin
  5 dbe_output.print_line(mycursor%isopen);
  6 if  not mycursor%isopen  then 
  7 open mycursor;fetch mycursor into a;
  8 dbe_output.print_line('a is emp:'||a.empno||'name:'||a.ename||'job:'||a.job||'sal:'||a.sal);
  9 dbe_output.print_line(mycursor%rowcount);
 10 end if;
 11 dbe_output.print_line(mycursor%isopen);
 12 if  mycursor%isopen then
 13 dbe_output.print_line('mycursor is open');
 14 close mycursor;
 15 end if;
 16 dbe_output.print_line(mycursor%isopen);
 17 end;
 18 /

FALSE
a is emp:1name:whfjob:doctorsal:1222
1
TRUE
mycursor is open
FALSE

PL/SQL procedure successfully completed.

SQL> 
SQL> delete from plsql_dts_emp;

3 rows affected.

SQL> insert into plsql_dts_emp values(174302,'wanghaifeng','doctor1',12000);

1 rows affected.

SQL> insert into plsql_dts_emp values(174302,'wanghaifeng1','doctor1',8000);

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> declare
  2 cursor mycursor(job_real varchar2,max_sal number ) is  select empno,ename,(sal-max_sal) overpament from plsql_dts_emp where job=job_real and sal> max_sal  order by sal;
  3 c_empno plsql_dts_emp.empno%type;
  4 c_ename plsql_dts_emp.ename%type;
  5 c_overpament plsql_dts_emp.sal%type;
  6 begin
  7 open mycursor('doctor1',9000);
  8 fetch mycursor into c_empno,c_ename,c_overpament;
  9 close mycursor;
 10 dbe_output.print_line('result is ' || c_empno || ',' || c_ename || ',' || c_overpament);
 11 end;
 12 /

result is 174302,wanghaifeng,3000

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2 max_sal1 number;
  3 cursor mycursor(job_real varchar2,max_sal number ) is  select empno,ename,(sal-max_sal1) overpament from plsql_dts_emp where job=job_real and sal> max_sal1  order by sal;
  4 c_empno plsql_dts_emp.empno%type;
  5 c_ename plsql_dts_emp.ename%type;
  6 c_overpament plsql_dts_emp.sal%type;
  7 begin
  8 max_sal1 := 9000;
  9 open mycursor('doctor1',9000);
 10 fetch mycursor into c_empno,c_ename,c_overpament;
 11 close mycursor;
 12 dbe_output.print_line('result is ' || c_empno || ',' || c_ename || ',' || c_overpament);
 13 end;
 14 /

result is 174302,wanghaifeng,3000

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2 cursor mycursor(job_real varchar2,max_sal number default 9000) is  select empno,ename,(sal-max_sal) overpament from plsql_dts_emp where job=job_real and sal> max_sal  order by sal;
  3 c_empno plsql_dts_emp.empno%type;
  4 c_ename plsql_dts_emp.ename%type;
  5 c_overpament plsql_dts_emp.sal%type;
  6 begin
  7 open mycursor('doctor1');
  8 fetch mycursor into c_empno,c_ename,c_overpament;
  9 close mycursor;
 10 dbe_output.print_line('result is ' || c_empno || ',' || c_ename || ',' || c_overpament);
 11 end;
 12 /

result is 174302,wanghaifeng,3000

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2 cursor mycursor(job_real varchar2,max_sal number default 9000) is  select empno,ename,(sal-max_sal) overpament from plsql_dts_emp where job=job_real and sal> max_sal  order by sal;
  3 c_empno plsql_dts_emp.empno%type;
  4 c_ename plsql_dts_emp.ename%type;
  5 c_overpament plsql_dts_emp.sal%type;
  6 begin
  7 open mycursor('doctor1', max_sal=>9900);
  8 fetch mycursor into c_empno,c_ename,c_overpament;
  9 close mycursor;
 10 dbe_output.print_line('result is ' || c_empno || ',' || c_ename || ',' || c_overpament);
 11 end;
 12 /

result is 174302,wanghaifeng,2100

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2 cursor mycursor(job_real varchar2,max_sal number default 9000) is  select empno,ename,(sal-max_sal) overpament from plsql_dts_emp where job=job_real and sal> max_sal  order by sal;
  3 c_empno plsql_dts_emp.empno%type;
  4 c_ename plsql_dts_emp.ename%type;
  5 c_overpament plsql_dts_emp.sal%type;
  6 begin
  7 open mycursor(job_real=>'doctor1');
  8 fetch mycursor into c_empno,c_ename,c_overpament;
  9 close mycursor;
 10 dbe_output.print_line('result is ' || c_empno || ',' || c_ename || ',' || c_overpament);
 11 end;
 12 /

result is 174302,wanghaifeng,3000

PL/SQL procedure successfully completed.

SQL> declare
  2 cursor mycursor(job_real varchar2,max_sal number default 9000, f2 int) is  select empno,ename,(sal-max_sal) overpament from plsql_dts_emp where job=job_real and sal> max_sal  order by sal;
  3 c_empno plsql_dts_emp.empno%type;
  4 c_ename plsql_dts_emp.ename%type;
  5 c_overpament plsql_dts_emp.sal%type;
  6 begin
  7 open mycursor('doctor1', f2=> 2);
  8 fetch mycursor into c_empno,c_ename,c_overpament;
  9 close mycursor;
 10 dbe_output.print_line('result is ' || c_empno || ',' || c_ename || ',' || c_overpament);
 11 end;
 12 /

result is 174302,wanghaifeng,3000

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2 cursor mycursor(job_real varchar2,max_sal number default 9000, f2 int) is  select empno,ename,(sal-max_sal) overpament from plsql_dts_emp where job=job_real and sal> max_sal  order by sal;
  3 c_empno plsql_dts_emp.empno%type;
  4 c_ename plsql_dts_emp.ename%type;
  5 c_overpament plsql_dts_emp.sal%type;
  6 begin
  7 open mycursor('doctor1',max_sal=>8000, f2=> 2);
  8 fetch mycursor into c_empno,c_ename,c_overpament;
  9 close mycursor;
 10 dbe_output.print_line('result is ' || c_empno || ',' || c_ename || ',' || c_overpament);
 11 end;
 12 /

result is 174302,wanghaifeng,4000

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2 cursor mycursor(job_real varchar2,max_sal number default 9000, f2 int) is  select empno,ename,(sal-max_sal) overpament from plsql_dts_emp where job=job_real and sal> max_sal  order by sal;
  3 c_empno plsql_dts_emp.empno%type;
  4 c_ename plsql_dts_emp.ename%type;
  5 c_overpament plsql_dts_emp.sal%type;
  6 begin
  7 open mycursor(job_real=>'doctor1',max_sal=>8000, f2=> 2);
  8 fetch mycursor into c_empno,c_ename,c_overpament;
  9 close mycursor;
 10 dbe_output.print_line('result is ' || c_empno || ',' || c_ename || ',' || c_overpament);
 11 end;
 12 /

result is 174302,wanghaifeng,4000

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2 cursor mycursor(job_real varchar2,max_sal number default 9000, f2 int) is  select empno,ename,(sal-max_sal) overpament from plsql_dts_emp where job=job_real and sal> max_sal  order by sal;
  3 c_empno plsql_dts_emp.empno%type;
  4 c_ename plsql_dts_emp.ename%type;
  5 c_overpament plsql_dts_emp.sal%type;
  6 begin
  7 open mycursor('doctor1', f2=> 2, f2=>3);
  8 fetch mycursor into c_empno,c_ename,c_overpament;
  9 close mycursor;
 10 dbe_output.print_line('result is ' || c_empno || ',' || c_ename || ',' || c_overpament);
 11 end;
 12 /

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[7:31] PLC-00948 Duplicate argument F2 in cursor

SQL> 
SQL> declare
  2 cursor mycursor(job_real varchar2,max_sal number default 9000, f2 int) is  select empno,ename,(sal-max_sal) overpament from plsql_dts_emp where job=job_real and sal> max_sal  order by sal;
  3 c_empno plsql_dts_emp.empno%type;
  4 c_ename plsql_dts_emp.ename%type;
  5 c_overpament plsql_dts_emp.sal%type;
  6 begin
  7 open mycursor('doctor1', f2=> 2, max_sal=> 5000);
  8 fetch mycursor into c_empno,c_ename,c_overpament;
  9 close mycursor;
 10 dbe_output.print_line('result is ' || c_empno || ',' || c_ename || ',' || c_overpament);
 11 end;
 12 /

result is 174302,wanghaifeng1,3000

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2 cursor mycursor(job_real varchar2,max_sal number default 9000, f2 int) is  select empno,ename,(sal-max_sal) overpament from plsql_dts_emp where job=job_real and sal> max_sal  order by sal;
  3 c_empno plsql_dts_emp.empno%type;
  4 c_ename plsql_dts_emp.ename%type;
  5 c_overpament plsql_dts_emp.sal%type;
  6 begin
  7 open mycursor(f2=> 2, max_sal=> 5000,job_real=>'doctor1');
  8 fetch mycursor into c_empno,c_ename,c_overpament;
  9 close mycursor;
 10 dbe_output.print_line('result is ' || c_empno || ',' || c_ename || ',' || c_overpament);
 11 end;
 12 /

result is 174302,wanghaifeng1,3000

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2 cursor mycursor(job_real varchar2 ,max_sal number default 9000, factor int ) is  select empno,sal,sal*factor exp_sal  from plsql_dts_emp where job=job_real and sal> max_sal  order by sal;
  3 c_empno plsql_dts_emp.empno%type;
  4 b int;
  5 c int;
  6 rec mycursor%rowtype;
  7 begin
  8 open mycursor('doctor1',factor=>2);
  9 fetch mycursor into c_empno,b,c;
 10 if  mycursor%found  then
 11 dbe_output.print_line('c_empno is emp:'||c_empno||'sal'||b||'ep_sal'||c);
 12 dbe_output.print_line(mycursor%rowcount);
 13 end if;
 14 close mycursor;
 15 open mycursor('doctor2',8000,3);
 16 fetch mycursor into rec;
 17 dbe_output.print_line('doctor2 c_empno is emp:'||rec.empno||'sal'||rec.sal||'ep_sal'||rec.exp_sal);
 18 dbe_output.print_line(mycursor%rowcount);
 19 close mycursor;
 20 end;
 21 /

c_empno is emp:174302sal12000ep_sal24000
1
doctor2 c_empno is emp:salep_sal
0

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2 cursor mycursor(job_real varchar2 ,max_sal number default 9000, factor int ) is  select empno,sal,sal*factor exp_sal  from plsql_dts_emp where job=job_real and sal> max_sal  order by sal;
  3 c_empno plsql_dts_emp.empno%type;
  4 b  int;
  5 c int;
  6 begin
  7 open mycursor('doctor1',factor=>2);
  8 fetch mycursor into c_empno,b,c;
  9 if  mycursor%found  then
 10 dbe_output.print_line('c_empno is emp:'||c_empno||'sal'||b||'ep_sal'||c);
 11 dbe_output.print_line(mycursor%rowcount);
 12 end if;
 13 close mycursor;
 14 open mycursor('doctor2',8000,3);
 15 fetch mycursor into c_empno;
 16 dbe_output.print_line('doctor2 c_empno is emp:'||c_empno||'sal'||b||'ep_sal'||c);
 17 dbe_output.print_line(mycursor%rowcount);
 18 close mycursor;
 19 end;
 20 /

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[15:1] PLC-00926 PL/SQL: Return types of Result Set variables or query do not match

SQL> 
SQL> delete from plsql_dts_emp;

2 rows affected.

SQL> 
SQL> declare
  2 cursor mycursor(job_real varchar2 ,max_sal number default 9000, factor int ) is  select empno,sal,sal*factor exp_sal  from plsql_dts_emp where job=job_real and sal> max_sal  order by sal;
  3 c_empno plsql_dts_emp.empno%type;
  4 b  int;
  5 c int;
  6 begin
  7 open mycursor('doctor1',factor=>2);
  8 fetch mycursor into c_empno,b,c;
  9 if  mycursor%found  then
 10 dbe_output.print_line('c_empno is emp:'||c_empno||'sal'||b||'ep_sal'||c);
 11 dbe_output.print_line(mycursor%rowcount);
 12 end if;
 13 close mycursor;
 14 open mycursor('doctor2',8000,3);
 15 fetch mycursor into c_empno;
 16 dbe_output.print_line('doctor2 c_empno is emp:'||c_empno||'sal'||b||'ep_sal'||c);
 17 dbe_output.print_line(mycursor%rowcount);
 18 close mycursor;
 19 end;
 20 /

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[15:1] PLC-00926 PL/SQL: Return types of Result Set variables or query do not match

SQL> drop table plsql_dts_emp;

Succeed.

SQL> 
SQL> begin
  2 for a in (select * from plsql_dts_emp where ename like '%zhangsan%' and sal > 9000 order by empno;)
  3 loop
  4 dbe_output.print_line('a is emp:'||a.empno||'name:'||a.ename||'job:'||a.job||'sal:'||a.sal);
  5 dbe_output.print_line(mycursor%rowcount);
  6 end loop;
  7 end;
  8 /

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[2:24] PLC-00843 The table or view GS_PLSQL_DTS.PLSQL_DTS_EMP does not exist.
[5:23] PLC-00920 Undefined symbol mycursor

SQL> create table plsql_dts_emp(empno int,ename varchar(10),job varchar(10) ,sal integer);

Succeed.

SQL> insert into plsql_dts_emp values(1,'zhangsan','doctor1',10000),(2,'zhangsan2','doctor2',10000),(123,'zhangsan3','doctor3',10000);

3 rows affected.

SQL> insert into plsql_dts_emp values(1,'zhansi','doctor1',10000),(2,'lisiabc','doctor2',10000),(123,'zhangwu123','doctor3',10000);

3 rows affected.

SQL> insert into plsql_dts_emp values(10,'abc','worker',9000);

1 rows affected.

SQL> 
SQL> begin
  2 for a in (select * from plsql_dts_emp where ename like '%zhangsan%' and sal > 9000 order by empno;)
  3 loop
  4 dbe_output.print_line('a is emp:'||a.empno||'name:'||a.ename||'job:'||a.job||'sal:'||a.sal);
  5 dbe_output.print_line(mycursor%rowcount);
  6 end loop;
  7 end;
  8 /

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[5:23] PLC-00920 Undefined symbol mycursor
[8:1] PLC-00954 more text expected but EOF found

SQL> 
SQL> begin
  2 for a  in  (select * from plsql_dts_emp where ename like '%zhangsan%' and sal > 9000 order by empno)
  3 loop
  4 dbe_output.print_line('a is emp:'||a.empno||'name:'||a.ename||'job:'||a.job||'sal:'||a.sal);
  5 dbe_output.print_line(sql%rowcount);
  6 end loop;
  7 end;
  8 /

a is emp:1name:zhangsanjob:doctor1sal:10000

a is emp:2name:zhangsan2job:doctor2sal:10000

a is emp:123name:zhangsan3job:doctor3sal:10000


PL/SQL procedure successfully completed.

SQL> 
SQL> drop table plsql_dts_emp;

Succeed.

SQL> drop table if exists plsql_dts_test;

Succeed.

SQL> create table plsql_dts_test(a int, b int);

Succeed.

SQL> select * from plsql_dts_test;

A            B           
------------ ------------

0 rows fetched.

SQL> delete from plsql_dts_test;

0 rows affected.

SQL> create unique index test_idex on plsql_dts_test(a) online;

Succeed.

SQL> 
SQL> begin
  2 insert into plsql_dts_test values(1,2);
  3 insert into plsql_dts_test values(2,2);
  4 insert into plsql_dts_test values(1,2);
  5 end;
  6 /

CT-00932, [4:1] PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with execute errors
[4:1] CT-00729, Unique constraint violated, index TEST_IDEX, duplicate key 1

SQL> 
SQL> select * from plsql_dts_test;

A            B           
------------ ------------

0 rows fetched.

SQL> drop table plsql_dts_test;

Succeed.

SQL> 
SQL> --dts:DTS2018071102955
SQL> --add 2018/07/17
SQL> --begin
SQL> drop PROCEDURE if exists Pro_ColumnOper;

Succeed.

SQL> drop table if exists I_FRAME;

Succeed.

SQL> create table I_FRAME (a int);

Succeed.

SQL> 
SQL> CREATE PROCEDURE Pro_ColumnOper(a VARCHAR,b VARCHAR,c INT,d VARCHAR)
  2 AS
  3 Rows1 INT;
  4 BEGIN
  5 Rows1 := 0;
  6 dbe_output.print_line(a||b||c||d);
  7 END;
  8 /

Succeed.

SQL> 
SQL> CALL Pro_ColumnOper('I_FRAME','`softVersion`',1,"VARCHAR(128) ");

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[1:45] PLC-00601 Sql syntax error: invalid column name 'VARCHAR(128) '

SQL> CALL Pro_ColumnOper('I_FRAME','`softVersion`',1,'VARCHAR(128) ');

I_FRAME`softVersion`1VARCHAR(128) 

PL/SQL procedure successfully completed.

SQL> 
SQL> drop PROCEDURE if exists Pro_ColumnOper;

Succeed.

SQL> drop table if exists I_FRAME;

Succeed.

SQL> 
SQL> --end plsql_dts_test dts:DTS2018071102955
SQL> 
SQL> 
SQL> --test dts:DTS2018071310549
SQL> drop table if exists plsql_dts_tbl_loop_commit;

Succeed.

SQL> create table plsql_dts_tbl_loop_commit(c_id int, c_int int, c_integer integer);

Succeed.

SQL> INSERT INTO plsql_dts_tbl_loop_commit VALUES ( 20, 0, 10);

1 rows affected.

SQL> commit;

Succeed.

SQL> select c_id,c_int,c_integer from plsql_dts_tbl_loop_commit;

C_ID         C_INT        C_INTEGER   
------------ ------------ ------------
20           0            10          

1 rows fetched.

SQL> 
SQL> create or replace function v_update(v_data in date default sysdate) return int
  2 IS
  3 BEGIN
  4     EXECUTE IMMEDIATE 'set transaction isolation level serializable';
  5     update plsql_dts_tbl_loop_commit set c_id=c_id+2,c_int=c_int+2,c_integer=c_integer+2;
  6  return SQL%FOUND;
  7 end v_update;
  8 /

Succeed.

SQL> 
SQL> create unique index plsql_dts_tbl_loop_commit_ndx on plsql_dts_tbl_loop_commit(c_id,c_int,c_integer) online;

Succeed.

SQL> declare
  2     v_sql varchar2(128);
  3 begin
  4      for i in 1..30
  5   loop
  6       if 1<> v_update()
  7    then
  8        dbe_output.print_line('UPDATE FAILED:'||i);
  9    else
 10        null;
 11    end if;
 12    if mod(i,10)=0
 13    then
 14        commit;
 15    elsif mod(i,10)=5
 16    then
 17        rollback;
 18    end if;
 19   end loop;
 20 end;
 21 /

CT-00932, [6:7] PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with execute errors
[4:5] PL/SQL(GS_PLSQL_DTS.V_UPDATE) terminated with execute errors
[4:5] CT-00733, Error occurred when the transaction is in progress, set transaction must be first statement of transaction

SQL> select c_id,c_int,c_integer from plsql_dts_tbl_loop_commit;

C_ID         C_INT        C_INTEGER   
------------ ------------ ------------
20           0            10          

1 rows fetched.

SQL> rollback;

Succeed.

SQL> set transaction isolation level read committed;


Succeed.


SQL> --end plsql_dts_test dts:DTS2018071310549
SQL> 
SQL> 
SQL> --begin:DTS2018071111512 
SQL> create or replace function plsql_dts_hanoi(n number, oneT char, twoT char, threeT char) return number
  2 is
  3 v_sql char(128);
  4 v_tmp int;
  5 begin
  6   if (n = 1) then
  7     dbe_output.print_line(oneT ||'---->'|| threeT);
  8   else
  9     v_sql:='select plsql_dts_hanoi('||to_char(n - 1)||','''||oneT||''','''||threeT||''','''||twoT||''') from dual';
 10     EXECUTE IMMEDIATE v_sql;
 11     dbe_output.print_line(oneT ||'---->'|| threeT);
 12     v_sql:='select plsql_dts_hanoi('||to_char(n - 1)||','''||twoT||''','''||oneT||''','''||threeT||''') from dual';
 13  EXECUTE IMMEDIATE v_sql;
 14   end if;
 15   return 0;
 16 end plsql_dts_hanoi;
 17 /

Succeed.

SQL> 
SQL> select plsql_dts_hanoi(3, 'A', 'B', 'C') from dual;

PLSQL_DTS_HANOI(3, 'A', 'B', 'C')       
----------------------------------------
0                                       

1 rows fetched.

A---->C
A---->B
C---->B
A---->C
B---->A
B---->C
A---->C

SQL> --end:DTS2018071111512 
SQL> 
SQL> --test DTS2018071708798 :the object set and the result set has same column at fetch-into
SQL> --add 2018/07/18
SQL> --begin
SQL> drop table if exists plsql_dts_emp_test;

Succeed.

SQL> create table plsql_dts_emp_test(empno int,ename varchar(10),job varchar(10) ,sal integer);

Succeed.

SQL> insert into plsql_dts_emp_test values(1,'zhangsan','doctor1',10000);

1 rows affected.

SQL> insert into plsql_dts_emp_test values(2,'zhangsan2','doctor2',10000);

1 rows affected.

SQL> insert into plsql_dts_emp_test values(123,'zhangsan3','doctor3',10000);

1 rows affected.

SQL> insert into plsql_dts_emp_test values(1,'zhansi','doctor1',12000);

1 rows affected.

SQL> insert into plsql_dts_emp_test values(2,'lisiabc','doctor2',13000);

1 rows affected.

SQL> insert into plsql_dts_emp_test values(123,'zhangwu123','doctor3',14000);

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> --expect error
SQL> declare
  2 type syscur is record (
  3   a int,
  4   b int
  5 );
  6 cv sys_refcursor;
  7 cv1 syscur;
  8 begin
  9 open cv for select empno from plsql_dts_emp_test where job like '%1%' order by empno;
 10 loop
 11 fetch cv into cv1;
 12 exit when cv%notfound;
 13 dbe_output.print_line('empno is ' || cv1.a||'---->'||'ename is '|| cv1.b);
 14 end loop;
 15 close cv;
 16 end;
 17 /

CT-00932, [11:1] PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with execute errors
[11:1] CT-00926, PL/SQL: Return types of Result Set variables or query do not match

SQL> 
SQL> --expect error
SQL> declare
  2 type syscur is record (
  3   a int,
  4   b int
  5 );
  6 cv sys_refcursor;
  7 cv1 syscur;
  8 begin
  9 open cv for select empno,sal,ename from plsql_dts_emp_test where job like '%1%' order by empno;
 10 loop
 11 fetch cv into cv1;
 12 exit when cv%notfound;
 13 dbe_output.print_line('empno is ' || cv1.a||'---->'||'ename is '|| cv1.b);
 14 end loop;
 15 close cv;
 16 end;
 17 /

CT-00932, [11:1] PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with execute errors
[11:1] CT-00926, PL/SQL: Return types of Result Set variables or query do not match

SQL> 
SQL> --expect error
SQL> declare
  2 type syscur is record (
  3   a int,
  4   b int
  5 );
  6 cv sys_refcursor;
  7 cv1 syscur;
  8 begin
  9 open cv for select empno,ename from plsql_dts_emp_test where job like '%1%' order by empno;
 10 loop
 11 fetch cv into cv1;
 12 exit when cv%notfound;
 13 dbe_output.print_line('empno is ' || cv1.a||'---->'||'ename is '|| cv1.b);
 14 end loop;
 15 close cv;
 16 end;
 17 /

CT-00932, [11:1] PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with execute errors
[11:1] CT-00636, Invalid number -- unexpected character

SQL> 
SQL> --expect success
SQL> declare
  2 type syscur is record (
  3   a int,
  4   b varchar2(20)
  5 );
  6 cv sys_refcursor;
  7 cv1 syscur;
  8 begin
  9 open cv for select empno,ename from plsql_dts_emp_test where job like '%1%' order by empno;
 10 loop
 11 fetch cv into cv1;
 12 exit when cv%notfound;
 13 dbe_output.print_line('empno is ' || cv1.a||'---->'||'ename is '|| cv1.b);
 14 end loop;
 15 close cv;
 16 end;
 17 /

empno is 1---->ename is zhangsan
empno is 1---->ename is zhansi

PL/SQL procedure successfully completed.

SQL> CREATE OR REPLACE PROCEDURE syscur(sys_cur OUT SYS_REFCURSOR) 
  2 IS 
  3 C1 SYS_REFCURSOR; 
  4 a1 number;
  5 b1 varchar2(20);
  6 BEGIN 
  7 OPEN C1 FOR
  8     SELECT empno,ename FROM plsql_dts_emp_test  where empno=1 ORDER BY empno; 
  9 sys_cur := C1;
 10 close c1;
 11 END; 
 12 /

Succeed.

SQL> 
SQL> 
SQL> DECLARE
  2   cv SYS_REFCURSOR;
  3   v_empno  plsql_dts_emp_test.empno%TYPE;
  4   v_ename     plsql_dts_emp_test.ename%TYPE;
  5   v_sal    plsql_dts_emp_test.sal%TYPE;
  6   query_2 VARCHAR2(200) :=
  7     'select * from plsql_dts_emp_test order by 1,2,3';
  8   v_emp_test plsql_dts_emp_test%ROWTYPE;
  9 BEGIN
 10   syscur(cv);
 11   LOOP
 12     FETCH cv INTO v_empno, v_ename;
 13     EXIT WHEN cv%NOTFOUND;
 14     -- dbe_output.print_line('v_empno is :'||v_empno||'---->'||'v_ename is :'||v_ename);
 15 	dbe_output.print_line(rpad(v_empno,25,' ')||v_ename);
 16   END LOOP;
 17  
 18   dbe_output.print_line( '-------------------------------------' );
 19   CLOSE cv;
 20 END;
 21 /

CT-00932, [12:5] PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with execute errors
[12:5] CT-00905, The cursor was invalid.

SQL> 
SQL> CREATE OR REPLACE PROCEDURE syscur(sys_cur OUT SYS_REFCURSOR) 
  2 IS 
  3 C1 SYS_REFCURSOR; 
  4 a1 number;
  5 b1 varchar2(20);
  6 BEGIN 
  7 OPEN C1 FOR
  8     SELECT empno,ename FROM plsql_dts_emp_test  where empno=1 ORDER BY empno; 
  9 sys_cur := C1;
 10 END; 
 11 /

Succeed.

SQL> 
SQL> 
SQL> DECLARE
  2   cv SYS_REFCURSOR;
  3   v_empno  plsql_dts_emp_test.empno%TYPE;
  4   v_ename     plsql_dts_emp_test.ename%TYPE;
  5   v_sal    plsql_dts_emp_test.sal%TYPE;
  6   query_2 VARCHAR2(200) :=
  7     'select * from plsql_dts_emp_test order by 1,2,3';
  8   v_emp_test plsql_dts_emp_test%ROWTYPE;
  9 BEGIN
 10   syscur(cv);
 11   LOOP
 12     FETCH cv INTO v_empno, v_ename;
 13     EXIT WHEN cv%NOTFOUND;
 14     -- dbe_output.print_line('v_empno is :'||v_empno||'---->'||'v_ename is :'||v_ename);
 15 	dbe_output.print_line(rpad(v_empno,25,' ')||v_ename);
 16   END LOOP;
 17  
 18   dbe_output.print_line( '-------------------------------------' );
 19   CLOSE cv;
 20 END;
 21 /

1                        zhangsan
1                        zhansi
-------------------------------------

PL/SQL procedure successfully completed.

SQL> 
SQL> CREATE OR REPLACE PROCEDURE syscur(sys_cur OUT SYS_REFCURSOR) 
  2 IS 
  3 C1 SYS_REFCURSOR; 
  4 a1 number;
  5 b1 varchar2(20);
  6 BEGIN 
  7 OPEN C1 FOR
  8     SELECT empno,ename FROM plsql_dts_emp_test  where empno=1 ORDER BY empno; 
  9 sys_cur := C1;
 10 FETCH C1 into a1,b1;
 11 END; 
 12 /

Succeed.

SQL> 
SQL> 
SQL> DECLARE
  2   cv SYS_REFCURSOR;
  3   v_empno  plsql_dts_emp_test.empno%TYPE;
  4   v_ename     plsql_dts_emp_test.ename%TYPE;
  5   v_sal    plsql_dts_emp_test.sal%TYPE;
  6   query_2 VARCHAR2(200) :=
  7     'select * from plsql_dts_emp_test order by 1,2,3';
  8   v_emp_test plsql_dts_emp_test%ROWTYPE;
  9 BEGIN
 10   syscur(cv);
 11   LOOP
 12     FETCH cv INTO v_empno, v_ename;
 13     EXIT WHEN cv%NOTFOUND;
 14     -- dbe_output.print_line('v_empno is :'||v_empno||'---->'||'v_ename is :'||v_ename);
 15 	dbe_output.print_line(rpad(v_empno,25,' ')||v_ename);
 16   END LOOP;
 17  
 18   dbe_output.print_line( '-------------------------------------' );
 19   CLOSE cv;
 20 END;
 21 /

1                        zhansi
-------------------------------------

PL/SQL procedure successfully completed.

SQL> 
SQL> CREATE OR REPLACE PROCEDURE syscur(sys_cur OUT SYS_REFCURSOR) 
  2 IS 
  3 C1 SYS_REFCURSOR; 
  4 a1 number;
  5 b1 varchar2(20);
  6 BEGIN 
  7 OPEN C1 FOR
  8     SELECT empno,ename FROM plsql_dts_emp_test  where empno=1 ORDER BY empno; 
  9 sys_cur := C1;
 10 FETCH C1 into a1,b1;
 11 FETCH C1 into a1,b1;
 12 END; 
 13 /

Succeed.

SQL> 
SQL> 
SQL> DECLARE
  2   cv SYS_REFCURSOR;
  3   v_empno  plsql_dts_emp_test.empno%TYPE;
  4   v_ename     plsql_dts_emp_test.ename%TYPE;
  5   v_sal    plsql_dts_emp_test.sal%TYPE;
  6   query_2 VARCHAR2(200) :=
  7     'select * from plsql_dts_emp_test order by 1,2,3';
  8   v_emp_test plsql_dts_emp_test%ROWTYPE;
  9 BEGIN
 10   syscur(cv);
 11   LOOP
 12     FETCH cv INTO v_empno, v_ename;
 13     EXIT WHEN cv%NOTFOUND;
 14     -- dbe_output.print_line('v_empno is :'||v_empno||'---->'||'v_ename is :'||v_ename);
 15 	dbe_output.print_line(rpad(v_empno,25,' ')||v_ename);
 16   END LOOP;
 17  
 18   dbe_output.print_line( '-------------------------------------' );
 19   CLOSE cv;
 20 END;
 21 /

-------------------------------------

PL/SQL procedure successfully completed.

SQL> 
SQL> --cursor move-value will point the same cursor
SQL> declare
  2 C1 SYS_REFCURSOR; 
  3 D1 SYS_REFCURSOR;
  4 a1 number;
  5 b1 varchar2(20);
  6 BEGIN 
  7 OPEN C1 FOR
  8     SELECT empno,ename FROM plsql_dts_emp_test  where empno=1 ORDER BY empno; 
  9 D1 := C1;
 10 close c1;
 11 FETCH D1 into a1,b1;
 12 END; 
 13 /

CT-00932, [11:1] PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with execute errors
[11:1] CT-00905, The cursor was invalid.

SQL> 
SQL> --cursor move-value will point the same cursor
SQL> declare
  2 CURSOR C1 IS SELECT empno,ename FROM plsql_dts_emp_test  where empno=1 ORDER BY empno; 
  3 D1 SYS_REFCURSOR;
  4 a1 number;
  5 b1 varchar2(20);
  6 BEGIN 
  7 D1 := C1;
  8 for ind in C1 LOOP
  9     dbe_output.print_line('A1 is ' || a1 ||',B1 is' || b1);
 10 END LOOP;
 11 FETCH D1 into a1,b1;
 12 END; 
 13 /

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[7:7] PLC-00601 Sql syntax error: unexpected cursor type

SQL> 
SQL> declare
  2 CURSOR C1 IS SELECT empno,ename FROM plsql_dts_emp_test  where empno=1 ORDER BY empno; 
  3 CURSOR C2 IS SELECT empno,ename FROM plsql_dts_emp_test  where empno=1 ORDER BY empno; 
  4 D1 SYS_REFCURSOR;
  5 a1 number;
  6 b1 varchar2(20);
  7 BEGIN 
  8 C2 := C1;
  9 END; 
 10 /

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[8:1] PLC-00950 The expression C2 was used as the assignment target (left operand of the assignment statement).

SQL> 
SQL> declare
  2 CURSOR C1 IS SELECT empno,ename FROM plsql_dts_emp_test  where empno=1 ORDER BY empno; 
  3 D1 SYS_REFCURSOR;
  4 a1 number;
  5 b1 varchar2(20);
  6 BEGIN 
  7 D1 := C1;
  8 END; 
  9 /

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[7:7] PLC-00601 Sql syntax error: unexpected cursor type

SQL> 
SQL> declare
  2 CURSOR C1 IS SELECT empno,ename FROM plsql_dts_emp_test  where empno=1 ORDER BY empno; 
  3 D1 SYS_REFCURSOR;
  4 a1 number;
  5 b1 varchar2(20);
  6 BEGIN 
  7 D1 := C1 + C1;
  8 END; 
  9 /

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[7:7] PLC-00601 Sql syntax error: unexpected cursor type

SQL> --end
SQL> 
SQL> --test DTS2018071913156: return should jump the procedure totally.
SQL> drop table if exists trigger_tbl_028;

Succeed.

SQL> drop table if exists trigger_tbl_028_1;

Succeed.

SQL> drop table if exists trigger_tbl_028_2;

Succeed.

SQL> drop table if exists trigger_tbl_028_3;

Succeed.

SQL> drop table if exists trigger_tbl_028_4;

Succeed.

SQL> create table trigger_tbl_028(c_id int not null,c_d_id int not null,c_w_id int not null,c_credit_lim numeric(12,2),c_first varchar(32),c_since timestamp);

Succeed.

SQL> insert into trigger_tbl_028  values(1,1,1,10,'c_firstaaaaaaaa',to_timestamp('2018-01-01 00:00:00.00','yyyy-mm-dd hh24:mi:ss.ff3'));

1 rows affected.

SQL> insert into trigger_tbl_028 values(2,2,2,10,'c_firstbbbbbbbb',to_timestamp('2018-12-01 00:00:00.00','yyyy-mm-dd hh24:mi:ss.ff3'));

1 rows affected.

SQL> insert into trigger_tbl_028 values(3,3,3,10,'c_firstcccccccc',to_timestamp('2018-12-30 00:00:00.00','yyyy-mm-dd hh24:mi:ss.ff3'));

1 rows affected.

SQL> insert into trigger_tbl_028 values(1000,1000,1000,10,'c_firstdddddddd',to_timestamp('2018-12-30 00:00:00.00','yyyy-mm-dd hh24:mi:ss.ff3'));

1 rows affected.

SQL> 
SQL> create table trigger_tbl_028_1(c_id numeric(12,2),c_d_id numeric(4,4),c_w_id numeric(12,2));

Succeed.

SQL> insert into trigger_tbl_028_1 values(1,0.4361328,5000.0);

1 rows affected.

SQL> insert into trigger_tbl_028_1 values(-1,0.4000,5001.0);

1 rows affected.

SQL> insert into trigger_tbl_028_1 values(1000,0.500000,5002.0);

1 rows affected.

SQL> 
SQL> create table trigger_tbl_028_2(c_d_id int,c_id int ,c_w_id int,c_credit_lim numeric(12,2),c_discount numeric(4,4),c_balance numeric(12,2),c_first varchar(32),c_last varchar(32),cc_id int,c_since timestamp);

Succeed.

SQL> insert into trigger_tbl_028_2 values(1000,1000,1000,1,0.11,4000.0,'c_firstbbbbbbbb','c_lastbbbbbbbb',1,to_timestamp('2018-07-18 00:00:00.00','yyyy-mm-dd hh24:mi:ss.ff3'));

1 rows affected.

SQL> insert into trigger_tbl_028_2 values(2000,2000,2000,2,0.12,4001.0,'c_firstcccccccc','c_lastcccccccc',2,to_timestamp('2018-07-18 00:00:00.00','yyyy-mm-dd hh24:mi:ss.ff3'));

1 rows affected.

SQL> insert into trigger_tbl_028_2 values(1,2000,2000,2,0.12,4001.0,'c_firstdddddddd','c_lastdddddddd',2,to_timestamp('2018-07-18 00:00:00.00','yyyy-mm-dd hh24:mi:ss.ff3'));

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> create table trigger_tbl_028_3(c_d_id int,c_id int ,c_w_id int,c_credit_lim numeric(12,2),c_discount numeric(4,4),c_balance numeric(12,2),c_first varchar(32),c_last varchar(32),cc_id int,c_since timestamp);

Succeed.

SQL> 
SQL> create table trigger_tbl_028_4(c_d_id int,c_id int ,c_w_id int,c_credit_lim numeric(12,2),c_discount numeric(4,4),c_balance numeric(12,2),c_first varchar(32),c_last varchar(32),cc_id int,c_since timestamp);

Succeed.

SQL> insert into trigger_tbl_028_4 values(1,2000,2000,2,0.12,4001.0,'c_firstaaaaaaaa','c_lastcccccccc',2,to_timestamp('2018-07-18 00:00:00.00','yyyy-mm-dd hh24:mi:ss.ff3'));

1 rows affected.

SQL> commit;

Succeed.

SQL> drop sequence if exists trigger_sequence_028;

Succeed.

SQL> create sequence trigger_sequence_028;

Succeed.

SQL> create or replace trigger trg_aft_dml_028 after delete on trigger_tbl_028_4 for each row
  2 declare
  3 v_c_id number(10);
  4 v_c_d_id number(10);
  5 v_c_w_id number(10);
  6 v_c_credit_lim number(10);
  7 begin
  8   begin
  9       select a.c_id,a.c_d_id,a.c_w_id+1 as c_w_id,a.c_credit_lim into v_c_id,v_c_d_id,v_c_w_id,v_c_credit_lim from trigger_tbl_028 a,trigger_tbl_028_2 b where :new.c_first=a.c_first and :new.c_last=b.c_last;
 10       exception
 11          when  NO_DATA_FOUND then
 12            return;
 13       end;
 14   insert into trigger_tbl_028_3 values(trigger_sequence_028.nextval,v_c_id,v_c_d_id,:new.c_credit_lim,:new.c_discount,:new.c_balance,:new.c_first,:new.c_last,v_c_w_id,:new.c_since);
 15   update trigger_tbl_028 set c_w_id=v_c_w_id where c_id=:new.c_d_id;
 16   update trigger_tbl_028_1 set c_w_id=-1 where c_id=:new.c_d_id and exists(select 1 from trigger_tbl_028_2 where c_id=:new.c_id);
 17 end;
 18 /

Succeed.

SQL> 
SQL> 
SQL> delete from trigger_tbl_028_4;

1 rows affected.

SQL> select c_id,c_d_id,c_w_id from trigger_tbl_028;

C_ID         C_D_ID       C_W_ID      
------------ ------------ ------------
1            1            1           
2            2            2           
3            3            3           
1000         1000         1000        

4 rows fetched.

SQL> select c_id,c_d_id,c_w_id from trigger_tbl_028_1;

C_ID                                     C_D_ID                                   C_W_ID                                  
---------------------------------------- ---------------------------------------- ----------------------------------------
1                                        .4361                                    5000                                    
-1                                       .4                                       5001                                    
1000                                     .5                                       5002                                    

3 rows fetched.

SQL> --expect no rows
SQL> select c_id,c_d_id,c_w_id from trigger_tbl_028_3;

C_ID         C_D_ID       C_W_ID      
------------ ------------ ------------

0 rows fetched.

SQL> select c_id,c_d_id,c_w_id from trigger_tbl_028_4;

C_ID         C_D_ID       C_W_ID      
------------ ------------ ------------

0 rows fetched.

SQL> --end
SQL> 
SQL> -- only one anonymous block
SQL> declare
  2 v_order number;
  3 begin
  4 for i in 1..8192
  5 loop
  6 dbe_output.print_line('111');
  7 end loop;
  8 end;
  9 declare
 10 v_order number;
 11 begin
 12 for i in 1..8192
 13 loop
 14 dbe_output.print_line('111');
 15 end loop;
 16 end;
 17 /

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[10:1] PLC-00954 '/' expected but declare found

SQL> 
SQL> -- only one anonymous block
SQL> create or replace function test(a int) return number
  2 as
  3 v_order number := 0;
  4 begin
  5 for i in 1..8192
  6 loop
  7 dbe_output.print_line('111');
  8 end loop;
  9 return v_order;
 10 end;
 11 select test(1) from dual;
 12 /

Succeed.
Warning:
PL/SQL(GS_PLSQL_DTS.TEST) terminated with compiling errors
[11:8] PLC-00954 '/' expected but select found


SQL> 
SQL> -- only one function
SQL> create or replace function test(a int) return number
  2 as
  3 v_order number := 0;
  4 begin
  5 begin
  6 for i in 1..8192
  7 loop
  8 dbe_output.print_line('111');
  9 end loop;
 10 end;
 11 return v_order;
 12 end;
 13 begin 
 14  test(1);
 15 end;
 16 /

Succeed.
Warning:
PL/SQL(GS_PLSQL_DTS.TEST) terminated with compiling errors
[14:2] PLC-00954 '/' expected but begin found


SQL> 
SQL> CREATE OR REPLACE FUNCTION Zenith_Test_005(param1 in out varchar2) return varchar2
  2 AS
  3     tmp varchar2(20) :='Hello';
  4 Begin
  5     dbe_output.print_line(tmp||','||param1);
  6     return concat(tmp,param1);
  7 End Zenith_Test_005;
  8 /

Succeed.

SQL> select Zenith_Test_005('Zenith') from dual;

CT-00949, [1:8]The 1th argument of ZENITH_TEST_005 wrong type bound to an OUT position
SQL> 
SQL> CREATE OR REPLACE FUNCTION Zenith_Test_005(param1 in varchar2) return varchar2
  2 AS
  3     tmp varchar2(20) :='Hello';
  4 Begin
  5     dbe_output.print_line(tmp||','||param1);
  6     return concat(tmp,param1);
  7 End Zenith_Test_005;
  8 /

Succeed.

SQL> select Zenith_Test_005('Zenith') from dual;

ZENITH_TEST_005('ZENITH')                                       
----------------------------------------------------------------
HelloZenith                                                     

1 rows fetched.

Hello,Zenith

SQL> 
SQL> 
SQL> CREATE OR REPLACE FUNCTION Zenith_Test_005(param1 in out varchar2) return varchar2
  2 AS
  3     tmp varchar2(20) :='Hello';
  4 Begin
  5     dbe_output.print_line(tmp||','||param1);
  6     return concat(tmp,param1);
  7 End Zenith_Test_005;
  8 /

Succeed.

SQL> select Zenith_Test_005('Zenith') from dual;

CT-00949, [1:8]The 1th argument of ZENITH_TEST_005 wrong type bound to an OUT position
SQL> 
SQL> --begin
SQL> drop table if exists plsql_dts_employees;

Succeed.

SQL> create table plsql_dts_employees(employeesno int,ename varchar(10),job varchar(10) ,sal integer);

Succeed.

SQL> insert into plsql_dts_employees values(1,'zhangsan','doctor1',10000);

1 rows affected.

SQL> insert into plsql_dts_employees values(2,'zhangsan2','doctor2',10010);

1 rows affected.

SQL> insert into plsql_dts_employees values(123,'zhangsan3','doctor3',10020);

1 rows affected.

SQL> commit;

Succeed.

SQL> DECLARE
  2   TYPE empcurtyp IS REF CURSOR ;  -- strong type
  3   cursor1  empcurtyp;       
  4   salv  plsql_dts_employees.sal%type;
  5   mulsal  plsql_dts_employees.sal%type;
  6   factor integer := 2;
  7 BEGIN
  8   open cursor1 for select sal, sal*factor  from plsql_dts_employees ;
  9   loop 
 10   dbe_output.print_line('factor is :'|| factor);
 11   fetch cursor1 into salv,mulsal;
 12   dbe_output.print_line('sal is:'|| salv ||'mulsal is:' || mulsal);
 13   factor := factor + 1;
 14   exit when cursor1%notfound;
 15   end loop;
 16   close cursor1;
 17 END;
 18 /

factor is :2
sal is:10000mulsal is:20000
factor is :3
sal is:10010mulsal is:20020
factor is :4
sal is:10020mulsal is:20040
factor is :5
sal is:10020mulsal is:20040

PL/SQL procedure successfully completed.

SQL> 
SQL> DECLARE  
  2   factor integer := 2;
  3   cursor cur1 is select sal a, sal*factor b from plsql_dts_employees;
  4 BEGIN
  5   for lll in cur1 loop 
  6   dbe_output.print_line('factor is :'|| factor);
  7   dbe_output.print_line('sal is:'|| lll.a ||'mulsal is:' || lll.b);
  8   factor := factor + 1;
  9   end loop;
 10 END;
 11 /

factor is :2
sal is:10000mulsal is:20000
factor is :3
sal is:10010mulsal is:20020
factor is :4
sal is:10020mulsal is:20040

PL/SQL procedure successfully completed.

SQL> 
SQL> DECLARE
  2   factor integer := 2;
  3   cursor cur1 is select sal a, sal*factor b from plsql_dts_employees;
  4   cursor cur2 is select sal a, sal*factor b from plsql_dts_employees;
  5   a1 int;
  6   b1 int;
  7 BEGIN
  8   for lll in cur1 loop   
  9   dbe_output.print_line('factor is :'|| factor);
 10   dbe_output.print_line('sal is:'|| lll.a ||'mulsal is:' || lll.b);
 11   factor := factor + 1;
 12   if factor = 3 then
 13      Open cur2;
 14   end if;
 15   end loop;
 16   fetch cur2 into a1, b1;
 17   dbe_output.print_line('sal is:'|| a1 ||'mulsal is:' || b1);
 18   close cur2;
 19 END;
 20 /

factor is :2
sal is:10000mulsal is:20000
factor is :3
sal is:10010mulsal is:20020
factor is :4
sal is:10020mulsal is:20040
sal is:10000mulsal is:30000

PL/SQL procedure successfully completed.

SQL> 
SQL> create or replace  function test_outf1   return sys_refcursor is
  2 type mycurtp is  ref cursor;
  3 cursorv1  mycurtp;
  4 sys_cur1  sys_refcursor;
  5 type  XXX is record(
  6 a varchar2(100),
  7 b number(10,1),
  8 c number(11,1)
  9 );
 10 var1 XXX;
 11 begin
 12 --�ȸ�ֵ��
 13 sys_cur1 := cursorv1;
 14 open  cursorv1 for  select ename as name, sal, sal*2 ep_sal from plsql_dts_employees where ename like 'zhangsan%' ;
 15 return  sys_cur1;
 16 end;
 17 /

Succeed.

SQL> 
SQL> --expect error
SQL> select test_outf1();

CT-00905, The cursor was invalid.
SQL> 
SQL> --expect success
SQL> declare
  2 mycurtp sys_refcursor;
  3 begin 
  4 mycurtp := test_outf1();
  5 end;
  6 /

PL/SQL procedure successfully completed.

SQL> 
SQL> drop table if exists plsql_dts_employees;

Succeed.

SQL> --end
SQL> 
SQL> -------------------DTS2018080206396
SQL> drop table if exists plsql_dts_employees;

Succeed.

SQL> create table plsql_dts_employees(employeesno int,ename varchar(10),job varchar(10) ,sal integer);

Succeed.

SQL> insert into plsql_dts_employees values(1,'zhangsan','doctor1',10000);

1 rows affected.

SQL> insert into plsql_dts_employees values(2,'zhangsan2','doctor2',10010);

1 rows affected.

SQL> insert into plsql_dts_employees values(123,'zhangsan3','doctor3',10020);

1 rows affected.

SQL> alter table plsql_dts_employees add hiretime date;

Succeed.

SQL> 
SQL> create or replace function test_outf return sys_refcursor
  2 is
  3 cursorv1 sys_refcursor;
  4 begin
  5 open cursorv1 for select ename as name, sal, sal*2 ep_sal from plsql_dts_employees where ename like 'zhangsan%' ;
  6 return cursorv1;
  7 end;
  8 /

Succeed.

SQL> 
SQL> declare
  2 sys_cur1 sys_refcursor;
  3 type XXX is record(
  4 a varchar2(100),
  5 b number(10,1),
  6 c number(11,1)
  7 );
  8 var1 XXX;
  9 begin
 10 open sys_cur1 for select test_outf() from dual;
 11 loop
 12 fetch sys_cur1 into var1;
 13 exit when sys_cur1%notfound;
 14 dbe_output.print_line('��'||sys_cur1%rowcount||'�� +'||var1.a||'+'||var1.b||'+'||var1.c);
 15 end loop;
 16 close sys_cur1;
 17 end;
 18 /

CT-00932, [12:1] PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with execute errors
[12:1] CT-00926, PL/SQL: Return types of Result Set variables or query do not match

SQL> -------------------DTS2018080206396 
SQL> drop table if exists plsql_dts_test;

Succeed.

SQL> create table plsql_dts_test (a int);

Succeed.

SQL> insert into plsql_dts_test values(1),(2);

2 rows affected.

SQL> select * from plsql_dts_test;

A           
------------
1           
2           

2 rows fetched.

SQL> begin
  2 insert into plsql_dts_test values('aaa');
  3 end;
  4 /

CT-00932, [2:1] PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with execute errors
[2:1] CT-00636, Invalid number -- unexpected character

SQL> select * from plsql_dts_test;

A           
------------
1           
2           

2 rows fetched.

SQL> rollback;

Succeed.

SQL> select * from plsql_dts_test;

A           
------------

0 rows fetched.

SQL> insert into plsql_dts_test values(3),(4);

2 rows affected.

SQL> begin
  2 insert into plsql_dts_test values(5);
  3 insert into plsql_dts_test values('aaa');
  4 end;
  5 /

CT-00932, [3:1] PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with execute errors
[3:1] CT-00636, Invalid number -- unexpected character

SQL> select * from plsql_dts_test;

A           
------------
3           
4           

2 rows fetched.

SQL> begin
  2 insert into plsql_dts_test values(5);
  3 commit;
  4 insert into plsql_dts_test values('aaa');
  5 end;
  6 /

CT-00932, [4:1] PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with execute errors
[4:1] CT-00636, Invalid number -- unexpected character

SQL> select * from plsql_dts_test;

A           
------------
3           
4           
5           

3 rows fetched.

SQL> 
SQL> drop table if exists plsql_dts_test;

Succeed.

SQL> create table plsql_dts_test (a int);

Succeed.

SQL> create or replace procedure insert_test
  2 is
  3 begin
  4 insert into plsql_dts_test values('aaa');
  5 end;
  6 /

Succeed.

SQL> insert into plsql_dts_test values(1),(2);

2 rows affected.

SQL> select * from plsql_dts_test;

A           
------------
1           
2           

2 rows fetched.

SQL> exec insert_test;

CT-00932, [1:2] PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with execute errors
[3:1] PL/SQL(GS_PLSQL_DTS.INSERT_TEST) terminated with execute errors
[3:1] CT-00636, Invalid number -- unexpected character

SQL> select * from plsql_dts_test;

A           
------------
1           
2           

2 rows fetched.

SQL> rollback;

Succeed.

SQL> select * from plsql_dts_test;

A           
------------

0 rows fetched.

SQL> create or replace procedure insert_test
  2 is
  3 begin
  4 insert into plsql_dts_test values(5);
  5 insert into plsql_dts_test values('aaa');
  6 end;
  7 /

Succeed.

SQL> insert into plsql_dts_test values(3),(4);

2 rows affected.

SQL> exec insert_test;

CT-00932, [1:2] PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with execute errors
[4:1] PL/SQL(GS_PLSQL_DTS.INSERT_TEST) terminated with execute errors
[4:1] CT-00636, Invalid number -- unexpected character

SQL> select * from plsql_dts_test;

A           
------------
3           
4           

2 rows fetched.

SQL> rollback;

Succeed.

SQL> select * from plsql_dts_test;

A           
------------

0 rows fetched.

SQL> create or replace procedure insert_test
  2 is
  3 begin
  4 insert into plsql_dts_test values(5);
  5 commit;
  6 insert into plsql_dts_test values('aaa');
  7 end;
  8 /

Succeed.

SQL> insert into plsql_dts_test values(3),(4);

2 rows affected.

SQL> exec insert_test;

CT-00932, [1:2] PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with execute errors
[5:1] PL/SQL(GS_PLSQL_DTS.INSERT_TEST) terminated with execute errors
[5:1] CT-00636, Invalid number -- unexpected character

SQL> select * from plsql_dts_test;

A           
------------
3           
4           
5           

3 rows fetched.

SQL> --------------------
SQL> begin
  2 for i in 1...10 loop
  3 null;
  4 end loop;
  5 end;
  6 /

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[2:11] PLC-00954 upper_bound expected but '.' found

SQL> 
SQL> begin
  2 for i in 1.. .10 loop
  3 null;
  4 end loop;
  5 end;
  6 /

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[2:11] PLC-00954 upper_bound expected but '.' found

SQL> 
SQL> begin
  2 for i in 1.. ..10 loop
  3 null;
  4 end loop;
  5 end;
  6 /

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[2:14] PLC-00954 upper_bound expr expected but .. found

SQL> ---------------DTS2018073105339 
SQL> drop table if exists plsql_dts_emp;

Succeed.

SQL> create table plsql_dts_emp(empno int,ename varchar(10),job varchar(10) ,sal integer);

Succeed.

SQL> insert into plsql_dts_emp values(1,'zhangsan','doctor1',10000),(2,'zhangsan2','doctor2',10000),(123,'zhangsan3','doctor3',10000);

3 rows affected.

SQL> insert into plsql_dts_emp values(1,'zhansi','doctor1',10000),(2,'lisiabc','doctor2',10000),(123,'zhangwu123','doctor3',10000);

3 rows affected.

SQL> insert into plsql_dts_emp values(10,'abc','worker',9000);

1 rows affected.

SQL> insert into plsql_dts_emp values(716,'ZHANGSAN','leader',20000);

1 rows affected.

SQL> create or  replace procedure procedure2(a int) is
  2 cursor mycursor is select * from plsql_dts_emp where empno != 123 and sal=10000;
  3 b plsql_dts_emp%rowtype;
  4 mysyscur  sys_refcursor;
  5 strSQL1 varchar(1000);
  6 strSQL2 varchar(1000);
  7 begin
  8 strSQL1 := 'select * from plsql_dts_emp  where  sal <> 10000';
  9 strSQL2 := '';
 10  if a <= 10 then
 11    for i in mycursor
 12    loop
 13     dbe_output.print_line(i.ename||' is not 10000');
 14    end loop;
 15  elsif a >10  then
 16   open mysyscur for  strSQL1;
 17   fetch mysyscur into  a;  --fetch ���󣬱���
 18   dbe_output.print_line(b.ename||' a > 10 and a < 100');
 19   close mycursor;
 20  else
 21   open mysyscur for strSQL2;
 22   dbe_output.print_line('else a > 10 and a < 100');
 23  end if;
 24 end;
 25 /

Succeed.
Warning:
PL/SQL(GS_PLSQL_DTS.PROCEDURE2) terminated with compiling errors
[17:24] PLC-00950 The expression A was used as the assignment target (left operand of the assignment statement).
[25:1] PLC-00954 more text expected but EOF found


SQL> ---------------------
SQL> drop table if exists trigger_tbl_046;

Succeed.

SQL> drop table if exists trigger_tbl_046_1;

Succeed.

SQL> create table trigger_tbl_046(i int);

Succeed.

SQL> create table trigger_tbl_046_1(i int);

Succeed.

SQL> create or replace procedure proc_1
  2 is
  3 begin
  4    loop
  5     if (true)
  6       then
  7         insert into trigger_tbl_046_1 values(1);
  8         goto end_loop;
  9     end if;
 10    end loop;
 11   <<end_loop>> --label
 12 end;
 13 /

Succeed.
Warning:
PL/SQL(GS_PLSQL_DTS.PROC_1) terminated with compiling errors
[11:3] PLC-00916 PL/SQL:syntax error(END_LOOP is an invalid label)


SQL> select * from trigger_tbl_046_1;

I           
------------

0 rows fetched.

SQL> call proc_1;

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[1:2] PLC-00944 PL/SQL(GS_PLSQL_DTS.PROC_1) terminated with compiling errors
[10:3] PLC-00916 PL/SQL:syntax error(END_LOOP is an invalid label)


SQL> select * from trigger_tbl_046_1;

I           
------------

0 rows fetched.

SQL> begin
  2    loop
  3     if (true)
  4       then
  5         insert into trigger_tbl_046_1 values(1);
  6         goto end_loop;
  7     end if;
  8    end loop;
  9   <<end_loop>> --label
 10 end;
 11 /

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[9:3] PLC-00916 PL/SQL:syntax error(END_LOOP is an invalid label)

SQL> select * from trigger_tbl_046_1;

I           
------------

0 rows fetched.

SQL> create or replace function func_1 return int
  2 is
  3 begin
  4    loop
  5     if (true)
  6       then
  7         insert into trigger_tbl_046_1 values(1);
  8         goto end_loop;
  9     end if;
 10    end loop;
 11   <<end_loop>> --label
 12   return 0;
 13 end;
 14 /

Succeed.

SQL> select func_1() from dual;

FUNC_1()    
------------
0           

1 rows fetched.

SQL> select * from trigger_tbl_046_1;

I           
------------
1           

1 rows fetched.

SQL> 
SQL> drop procedure proc_1;

Succeed.

SQL> drop function func_1;

Succeed.

SQL> 
SQL> drop table if exists trigger_tbl_041;

Succeed.

SQL> drop table if exists trigger_tbl_041_1;

Succeed.

SQL> create table trigger_tbl_041(i int);

Succeed.

SQL> create table trigger_tbl_041_1(i int);

Succeed.

SQL> create or replace trigger trg_aft_dml_041 before insert on trigger_tbl_041
  2 declare
  3 i number;
  4 begin
  5    for i in 1...10 loop
  6         insert into trigger_tbl_041_1 values(i);
  7       end loop;
  8 end;
  9 /

Succeed.
Warning:
PL/SQL(GS_PLSQL_DTS.TRG_AFT_DML_041) terminated with compiling errors
[5:14] PLC-00954 upper_bound expected but '.' found


SQL> insert into trigger_tbl_041 values(11);

CT-00944, PL/SQL(GS_PLSQL_DTS.TRG_AFT_DML_041) terminated with compiling errors
[5:14] PLC-00954 upper_bound expected but '.' found

SQL> create or replace trigger trg_aft_dml_041 before insert on trigger_tbl_041
  2 declare
  3 i number;
  4 begin
  5 for i in 1...10 loop
  6     insert into trigger_tbl_041_1 values(i);
  7 end loop;
  8 end;
  9 /

Succeed.
Warning:
PL/SQL(GS_PLSQL_DTS.TRG_AFT_DML_041) terminated with compiling errors
[5:11] PLC-00954 upper_bound expected but '.' found


SQL> drop table if exists plsql_dts_employees;

Succeed.

SQL> create table plsql_dts_employees(employeesno int,ename varchar(10),job varchar(10) ,sal integer);

Succeed.

SQL> insert into plsql_dts_employees values(1,'zhangsan','doctor1',10000),(2,'zhangsan2','doctor2',10010),(123,'zhangsan3','doctor3',10020);

3 rows affected.

SQL> alter table plsql_dts_employees add  hiretime datetime;  

Succeed.

SQL> DECLARE       
  2 type rectype is record(
  3 a int,
  4 b varchar(10),
  5 e varchar(10),
  6 c integer,
  7 d  int
  8 );
  9 var2 rectype;
 10 var1  var2%type; 
 11 TYPE empcurtyp IS REF CURSOR ;  
 12 cursor1  empcurtyp;
 13 BEGIN
 14  var1.b:='record';
 15  dbe_output.print_line('record  is:'||var1.b||' '||var1.a);
 16   open cursor1 for select EMPLOYEESNO,ENAME,job,SAL,HIRETIME  from plsql_dts_employees order by EMPLOYEESNO;
 17   loop
 18   fetch cursor1 into var1;
 19   exit
 20   when cursor1%notfound ;
 21 dbe_output.print_line('record  is:'||var1.b||' '||var1.a||' '||var1.d);
 22   end loop;
 23   close cursor1;
 24 END;
 25 /

record  is:record 
CT-00932, [18:3] PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with execute errors
[18:3] CT-00606, Inconsistent datatypes, expected BINARY_INTEGER - got DATE

SQL> insert into plsql_dts_employees values(1,'test','worker',10000,'2018-08-01');

1 rows affected.

SQL> 
SQL> drop table if exists plsql_dts_employees;

Succeed.

SQL> create table plsql_dts_employees(employeesno int,ename varchar(10),job varchar(10) ,sal integer);

Succeed.

SQL> insert into plsql_dts_employees values(1,'zhangsan','doctor1',10000),(2,'zhangsan2','doctor2',10010),(123,'zhangsan3','doctor3',10020);

3 rows affected.

SQL> alter table plsql_dts_employees add  hiretime datetime;

Succeed.

SQL> select * from plsql_dts_employees;

EMPLOYEESNO  ENAME      JOB        SAL          HIRETIME              
------------ ---------- ---------- ------------ ----------------------
1            zhangsan   doctor1    10000                              
2            zhangsan2  doctor2    10010                              
123          zhangsan3  doctor3    10020                              

3 rows fetched.

SQL> DECLARE
  2 type rectype is record(
  3 a int,
  4 b varchar(10),
  5 e varchar(10),
  6 c integer,
  7 d  int
  8 );
  9 var2 rectype;
 10 var1  var2%type;
 11 TYPE empcurtyp IS REF CURSOR ;
 12 cursor1  empcurtyp;
 13 BEGIN
 14  var1.b:='record';
 15  dbe_output.print_line('record  is:'||var1.b||' '||var1.a);
 16   open cursor1 for select EMPLOYEESNO,ENAME,job,SAL,HIRETIME  from plsql_dts_employees order by EMPLOYEESNO;
 17   loop
 18   fetch cursor1 into var1;
 19   exit
 20   when cursor1%notfound ;
 21   dbe_output.print_line('record  is:'||var1.b||' '||var1.a||' '||var1.d);
 22   end loop;
 23   close cursor1;
 24 END;
 25 /

record  is:record 
CT-00932, [18:3] PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with execute errors
[18:3] CT-00606, Inconsistent datatypes, expected BINARY_INTEGER - got DATE

SQL> insert into plsql_dts_employees values(1,'test','worker',10000,'2018-08-01');

1 rows affected.

SQL> select * from plsql_dts_employees;

EMPLOYEESNO  ENAME      JOB        SAL          HIRETIME              
------------ ---------- ---------- ------------ ----------------------
1            zhangsan   doctor1    10000                              
2            zhangsan2  doctor2    10010                              
123          zhangsan3  doctor3    10020                              
1            test       worker     10000        2018-08-01 00:00:00   

4 rows fetched.

SQL> DECLARE
  2 type rectype is record(
  3 a int,
  4 b varchar(10),
  5 e varchar(10),
  6 c integer,
  7 d  int
  8 );
  9 var2 rectype;
 10 var1  var2%type;
 11 TYPE empcurtyp IS REF CURSOR ;
 12 cursor1  empcurtyp;
 13 BEGIN
 14  var1.b:='record';
 15  dbe_output.print_line('record  is:'||var1.b||' '||var1.a);
 16   open cursor1 for select EMPLOYEESNO,ENAME,job,SAL,HIRETIME  from plsql_dts_employees order by EMPLOYEESNO;
 17   loop
 18   fetch cursor1 into var1;
 19   exit
 20   when cursor1%notfound ;
 21   dbe_output.print_line('record  is:'||var1.b||' '||var1.a||' '||var1.d);
 22   end loop;
 23   close cursor1;
 24 END;
 25 /

record  is:record 
CT-00932, [18:3] PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with execute errors
[18:3] CT-00606, Inconsistent datatypes, expected BINARY_INTEGER - got DATE

SQL> 
SQL> select * from plsql_dts_employees;

EMPLOYEESNO  ENAME      JOB        SAL          HIRETIME              
------------ ---------- ---------- ------------ ----------------------
1            zhangsan   doctor1    10000                              
2            zhangsan2  doctor2    10010                              
123          zhangsan3  doctor3    10020                              
1            test       worker     10000        2018-08-01 00:00:00   

4 rows fetched.

SQL> 
SQL> ------------------argument view
SQL> conn sys/sys@127.0.0.1:1611

connected.

SQL> grant select on sys.SYS_PROC_ARGS to gs_plsql_dts;

Succeed.

SQL> conn gs_plsql_dts/Whf00174302@127.0.0.1:1611

connected.

SQL> select object_name,argument_name from sys.SYS_PROC_ARGS where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> select object_name,argument_name from dba_arguments where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> select object_name,argument_name from all_arguments where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> select object_name,argument_name from user_arguments where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> create or replace function aaa(a int) return sys_refcursor
  2 is
  3 b int;
  4 begin
  5 null;
  6 end;
  7 /

Succeed.

SQL> 
SQL> select object_name,argument_name from sys.SYS_PROC_ARGS where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------
AAA                                                              A                                                               
AAA                                                                                                                              

2 rows fetched.

SQL> select object_name,argument_name from dba_arguments where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------
AAA                                                              A                                                               
AAA                                                                                                                              

2 rows fetched.

SQL> select object_name,argument_name from all_arguments where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------
AAA                                                              A                                                               
AAA                                                                                                                              

2 rows fetched.

SQL> select object_name,argument_name from user_arguments where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------
AAA                                                              A                                                               
AAA                                                                                                                              

2 rows fetched.

SQL> create or replace function aaa(a int) return sys_refcursor
  2 is
  3 b int;
  4 begin
  5 null;
  6 end;
  7 /

Succeed.

SQL> 
SQL> select object_name,argument_name from sys.SYS_PROC_ARGS where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------
AAA                                                              A                                                               
AAA                                                                                                                              

2 rows fetched.

SQL> select object_name,argument_name from dba_arguments where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------
AAA                                                              A                                                               
AAA                                                                                                                              

2 rows fetched.

SQL> select object_name,argument_name from all_arguments where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------
AAA                                                              A                                                               
AAA                                                                                                                              

2 rows fetched.

SQL> select object_name,argument_name from user_arguments where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------
AAA                                                              A                                                               
AAA                                                                                                                              

2 rows fetched.

SQL> drop function aaa;

Succeed.

SQL> select object_name,argument_name from sys.SYS_PROC_ARGS where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> select object_name,argument_name from dba_arguments where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> select object_name,argument_name from all_arguments where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> select object_name,argument_name from user_arguments where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> create or replace procedure aaa(a int)
  2 is
  3 b int;
  4 begin
  5 null;
  6 end;
  7 /

Succeed.

SQL> 
SQL> select object_name,argument_name from sys.SYS_PROC_ARGS where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------
AAA                                                              A                                                               

1 rows fetched.

SQL> select object_name,argument_name from dba_arguments where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------
AAA                                                              A                                                               

1 rows fetched.

SQL> select object_name,argument_name from all_arguments where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------
AAA                                                              A                                                               

1 rows fetched.

SQL> select object_name,argument_name from user_arguments where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------
AAA                                                              A                                                               

1 rows fetched.

SQL> create or replace procedure aaa(a int)
  2 is
  3 b int;
  4 begin
  5 null;
  6 end;
  7 /

Succeed.

SQL> 
SQL> select object_name,argument_name from sys.SYS_PROC_ARGS where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------
AAA                                                              A                                                               

1 rows fetched.

SQL> select object_name,argument_name from dba_arguments where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------
AAA                                                              A                                                               

1 rows fetched.

SQL> select object_name,argument_name from all_arguments where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------
AAA                                                              A                                                               

1 rows fetched.

SQL> select object_name,argument_name from user_arguments where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------
AAA                                                              A                                                               

1 rows fetched.

SQL> drop procedure aaa;

Succeed.

SQL> 
SQL> select object_name,argument_name from sys.SYS_PROC_ARGS where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> select object_name,argument_name from dba_arguments where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> select object_name,argument_name from all_arguments where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> select object_name,argument_name from user_arguments where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> create or replace procedure aaa(a int)
  2 is
  3 b int;
  4 begin
  5 NULL;
  6 end;
  7 /

Succeed.

SQL> rollback;

Succeed.

SQL> select object_name,argument_name from sys.SYS_PROC_ARGS where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------
AAA                                                              A                                                               

1 rows fetched.

SQL> select object_name,argument_name from dba_arguments where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------
AAA                                                              A                                                               

1 rows fetched.

SQL> select object_name,argument_name from all_arguments where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------
AAA                                                              A                                                               

1 rows fetched.

SQL> select object_name,argument_name from user_arguments where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------
AAA                                                              A                                                               

1 rows fetched.

SQL> 
SQL> drop procedure aaa;

Succeed.

SQL> 
SQL> select object_name,argument_name from sys.SYS_PROC_ARGS where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> select object_name,argument_name from dba_arguments where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> select object_name,argument_name from all_arguments where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> select object_name,argument_name from user_arguments where object_name = 'AAA' order by argument_name;

OBJECT_NAME                                                      ARGUMENT_NAME                                                   
---------------------------------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> 
SQL> -----------------------------expect error
SQL> CREATE OR REPLACE PROCEDURE proc_getdatabypage(v_SqlStr IN varchar2,
  2 v_PageSize IN NUMBER,
  3 v_CurrentPage IN NUMBER) as
  4    v_refcur SYS_REFCURSOR;
  5    v_refcur2 SYS_REFCURSOR;
  6    v_FirstRec  NUMBER(10,0);
  7    v_LastRec  NUMBER(10,0);
  8    v_dt  VARCHAR2(10);
  9    SWV_SqlStr varchar2(8000);
 10 BEGIN
 11    begin
 12    v_dt := SUBSTR(CAST(DBE_RANDOM.GET_STRING('U',3) AS VARCHAR2),3,10);
 13    dbe_output.print_line(v_dt);
 14    end;
 15 END;
 16 /

Succeed.
Warning:
PL/SQL(GS_PLSQL_DTS.PROC_GETDATABYPAGE) terminated with compiling errors
[12:64] PLC-00601 Sql syntax error: the column size must be specified
[16:1] PLC-00954 more text expected but EOF found


SQL> -----------------------------DTS2018080608513 
SQL> drop table if exists plsql_dts_emp;

Succeed.

SQL> create table plsql_dts_emp(empno int,ename varchar(10),job varchar(10) ,sal integer);

Succeed.

SQL> insert into plsql_dts_emp values(1,'zhangsan','doctor1',10000),(2,'zhangsan2','doctor2',10000),(123,'zhangsan3','doctor3',10000);

3 rows affected.

SQL> insert into plsql_dts_emp values(1,'zhansi','doctor1',10000),(2,'lisiabc','doctor2',10000),(123,'zhangwu123','doctor3',10000);

3 rows affected.

SQL> insert into plsql_dts_emp values(10,'abc','worker',9000);

1 rows affected.

SQL> insert into plsql_dts_emp values(716,'ZHANGSAN','leader',20000);

1 rows affected.

SQL> drop table if exists plsql_dts_emp2;

Succeed.

SQL> create table plsql_dts_emp2(empno int,ename varchar(10),job varchar(10) ,sal integer);

Succeed.

SQL> insert into plsql_dts_emp2 values(1,'zhangsan','doctor1',10000),(2,'zhangsan2','doctor2',10000),(123,'zhangsan3','doctor3',10000);

3 rows affected.

SQL> 
SQL> create or replace procedure p1(selected char) is 
  2    a plsql_dts_emp%rowtype;
  3    v_refcur1 SYS_REFCURSOR;
  4     v_refcur2 SYS_REFCURSOR;
  5     v_refcur3 SYS_REFCURSOR;
  6  v_refcur4 SYS_REFCURSOR;
  7  v_refcur5 SYS_REFCURSOR;
  8 v_refcur6 SYS_REFCURSOR;
  9 v_refcur7 SYS_REFCURSOR;
 10 begin
 11 case selected
 12 when 'A' then
 13 --�α�󶨵�select���оۼ��������order by�Ӿ�
 14 open v_refcur1 for    select sum(sal) he from plsql_dts_emp where ename like '%zhangsan%' and sal > 9000 order by empno;
 15 dbe_sql.return_cursor(v_refcur1);
 16 --�α�󶨵�select����ϵͳ��ͼ
 17 open v_refcur2 for  select EMPNO,ENAME,JOB,SAL,NAME from plsql_dts_emp,SYS_USERS where plsql_dts_emp.ename=user$.NAME and  plsql_dts_emp.ename like '%ZHANGSAN%' and plsql_dts_emp.sal > 9000 order by empno;
 18 dbe_sql.return_cursor(v_refcur2);
 19 when 'B' then 
 20 --�α�󶨵�select����union���where�Ӿ�
 21 open v_refcur3 for select * from plsql_dts_emp union select * from plsql_dts_emp2  where  ename like '%ZHANGSAN%' and sal > 9000 order by empno;
 22 dbe_sql.return_cursor(v_refcur3);
 23  open v_refcur4 for select * from plsql_dts_emp union select * from plsql_dts_emp2;
 24  dbe_sql.return_cursor(v_refcur4);
 25 when others then 
 26  open v_refcur5 for select * from plsql_dts_emp where exists (select * from plsql_dts_emp2 where plsql_dts_emp2.ename=emp.ename);
 27   dbe_sql.return_cursor(v_refcur5);
 28 end case;
 29 end;
 30 /

Succeed.
Warning:
PL/SQL(GS_PLSQL_DTS.P1) terminated with compiling errors
[17:72] PLC-00843 The table or view GS_PLSQL_DTS.SYS_USERS does not exist.
[25:13] PLC-00922 PL/SQL: illegal line(indentifier others is reserved in the exception body)
[28:5] PLC-00954 ';' expected but case found


SQL> ----------------------------
SQL> drop table plsql_dts_employees;

Succeed.

SQL> create table plsql_dts_employees(employeesno int,ename varchar(10),job varchar(10) ,sal integer);

Succeed.

SQL> insert into plsql_dts_employees values(1,'zhangsan','doctor1',10000);

1 rows affected.

SQL> insert into plsql_dts_employees values(2,'zhangsan2','doctor2',10010);

1 rows affected.

SQL> insert into plsql_dts_employees values(123,'zhangsan3','doctor3',10020);

1 rows affected.

SQL> alter table plsql_dts_employees add  hiretime date;

Succeed.

SQL> 
SQL> 
SQL> DECLARE
  2   TYPE empcurtyp IS REF CURSOR ;  -- strong type
  3   cursor1  empcurtyp;
  4   syscur_001 sys_refcursor;
  5   a varchar(100);
  6   b  plsql_dts_employees%rowtype;
  7   querystr2 varchar2(1000) := 'select *  from plsql_dts_employees order by ename';
  8   c int;
  9 BEGIN
 10   open cursor1 for select ename  from plsql_dts_employees ;
 11   loop
 12   fetch cursor1 into a;
 13   dbe_output.print_line('a is:'||a);
 14   exit when cursor1%notfound;
 15   end loop;
 16   close cursor1;  
 17   open cursor1 for querystr2;
 18   loop
 19     fetch cursor1 into b;
 20    dbe_output.print_line('b is:'||b.ename||''||b.sal);
 21    if cursor1%notfound  then
 22       goto end_loop;
 23    end if;
 24   end loop;
 25   <<end_loop>>  --label
 26   close cursor1;
 27 END;
 28 /

a is:zhangsan
a is:zhangsan2
a is:zhangsan3
a is:zhangsan3
b is:zhangsan10000
b is:zhangsan210010
b is:zhangsan310020
b is:zhangsan310020

PL/SQL procedure successfully completed.

SQL> ---------------------expected error
SQL> create or replace procedure proc_CreatePortDataView as
  2    v_refcur SYS_REFCURSOR;
  3    v_iTBLCnt  INT;
  4    v_vchTempText  VARCHAR2(1024);
  5 BEGIN
  6    v_iTBLCnt := 0;
  7 
  8    v_vchTempText := 'create or replace view view_PortData  as ';
  9    v_vchTempText := v_vchTempText || ' select *  from plsql_dts_employees ';
 10    v_iTBLCnt := v_iTBLCnt + 1;
 11    
 12    IF  (v_iTBLCnt > 0) then
 13       open v_refcur for v_vchTempText;
 14       dbe_sql.return_cursor(v_refcur);
 15    end if;
 16 END;
 17 /

Succeed.

SQL> 
SQL> call proc_CreatePortDataView();

CT-00932, [1:2] PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with execute errors
[13:7] PL/SQL(GS_PLSQL_DTS.PROC_CREATEPORTDATAVIEW) terminated with execute errors
[13:7] CT-00922, PL/SQL: illegal line(sys_refcursor must open a legal SELECT statement)

SQL> ----------------------
SQL> drop table if exists PMS_TEMPLATE_INDICATOR;

Succeed.

SQL> create table PMS_TEMPLATE_INDICATOR 
  2 (
  3    MONITOR_TMPL_ID INT not null,
  4    PMS_RES_TYPE_ID INT not null,
  5    INDICATOR_GRP_ID INT not null,
  6    INDICATOR_ID INT not null,
  7    IS_NE_PERSISTENT INT,
  8    CONSTRAINT PK_PMS_TEMPLATE_INDICATOR PRIMARY KEY(PMS_RES_TYPE_ID,MONITOR_TMPL_ID,INDICATOR_GRP_ID,INDICATOR_ID)   
  9 );

Succeed.

SQL> 
SQL> create index PMS_TEMPLATE_INDICATOR_N1 
  2 on PMS_TEMPLATE_INDICATOR
  3 (MONITOR_TMPL_ID, 
  4 INDICATOR_ID);

Succeed.

SQL> 
SQL> drop table if exists PMS_COLLECTION;

Succeed.

SQL> create table PMS_COLLECTION 
  2 (
  3    INDICATOR_GRP_ID INT not null,
  4    RES_ID VARCHAR(252) not null,
  5    COLLECTION_TYPE INT not null,
  6    PERIOD_MINUTES INT not null,
  7    RES_NAME VARCHAR(255),
  8    NE_ID INT,
  9    MONITOR_TMPL_ID INT,
 10    PROCESS_ID INT not null,
 11    COLLECTOR_PROCHANDLE INT,
 12    MIB_INDEX VARCHAR(512),
 13    START_TIME DATETIME,
 14    END_TIME DATETIME,
 15    MONITOR_STATUS INT,
 16    SCHEDULE_ID INT,
 17    TDT_MAIN_TYPE_ID INT,
 18    TDT_SUB_TYPE_ID INT,
 19    IS_NE_LEVEL INT   DEFAULT  0,
 20    CONSTRAINT PK_PMS_COLLECTION PRIMARY KEY(INDICATOR_GRP_ID,RES_ID,PERIOD_MINUTES,COLLECTION_TYPE,PROCESS_ID)   
 21 );

Succeed.

SQL> 
SQL> create index PMS_COLLECTION_N1 
  2 on PMS_COLLECTION
  3 (COLLECTOR_PROCHANDLE);

Succeed.

SQL> 
SQL> drop table if exists PMS_MONITOR_INSTANCE;

Succeed.

SQL> create table PMS_MONITOR_INSTANCE 
  2 (
  3    MONITOR_INST_ID INT not null,
  4    MONITOR_TMPL_ID INT,
  5    RES_ID VARCHAR(255),
  6    NE_ID INT,
  7    INSTANCE_TYPE INT,
  8    PERIOD_MINUTES INT,
  9    START_TIME DATETIME,
 10    END_TIME DATETIME,
 11    MONITOR_STATUS INT,
 12    SCHEDULE_ID INT,
 13    IS_MEMBER INT,
 14    CLIENT_TYPE INT   DEFAULT  0,
 15    PERIOD_TYPE INT,
 16    PMS_RES_TYPE_ID INT not null,
 17    IS_NE_LEVEL INT   DEFAULT  0,
 18    IS_AUTO SMALLINT   DEFAULT  0,
 19    CREATE_TIME DATETIME,
 20    LATEST_START_TIME DATETIME,
 21    INSTANCE_NAME VARCHAR(300),
 22    TREND_STATUS INT not null  DEFAULT  -1,
 23    VAR_COLUMN_1 VARCHAR(500),
 24    IS_AGG_INST SMALLINT not null  DEFAULT  0,
 25    IS_NPMS_INSTANCE SMALLINT not null  DEFAULT  0,
 26    CONSTRAINT PK_PMS_MONITOR_INSTANCE PRIMARY KEY(MONITOR_INST_ID)   
 27 );

Succeed.

SQL> create index PMS_MONITOR_INSTANCE_N1 
  2 on PMS_MONITOR_INSTANCE
  3 (NE_ID);

Succeed.

SQL> create index PMS_MONITOR_INSTANCE_N2 
  2 on PMS_MONITOR_INSTANCE
  3 (MONITOR_TMPL_ID);

Succeed.

SQL> create index PMS_MONITOR_INSTANCE_N3 
  2 on PMS_MONITOR_INSTANCE
  3 (RES_ID);

Succeed.

SQL> 
SQL> drop table if exists TDT_RES_TYPE_MEMBER;

Succeed.

SQL> create table TDT_RES_TYPE_MEMBER(MEMBER_ID int, PARENT_ID int);

Succeed.

SQL> drop table if exists PMS_TEMPLATE_MEMBER;

Succeed.

SQL> create table PMS_TEMPLATE_MEMBER(MEMBER_ID int, PARENT_ID int);

Succeed.

SQL> 
SQL> 
SQL> CREATE OR REPLACE PROCEDURE p_EquivalentRecordValue (v_b_iscomposite_res_type BOOLEAN, v_en_access_query_type INT, v_ul_res_type_id INT, v_b_u2k_flag BOOLEAN)
  2 as
  3     v_nNumberOfIndicators INT;
  4     v_nNumberOfCollections INT;
  5     v_dEquivalentRecordValue FLOAT;
  6     v_dFinalERValue FLOAT;
  7     v_nProcessID INT;
  8     v_nMemberID INT;
  9     v_nZero INT;
 10     v_nPeriod INT;
 11     v_dtmpERValue FLOAT;
 12     v_dDifERValue FLOAT;
 13     HAS_DATA INT DEFAULT 0;
 14     SWV_CurNum INT DEFAULT 0;
 15     c_get_indicator_collection_simple sys_refcursor;
 16 	c_get_indicator_collection_access_bulk sys_refcursor;
 17 	c_get_indicator_collection_access_snmp sys_refcursor;
 18 	c_get_indicator_collection_composite sys_refcursor;
 19 BEGIN 
 20     v_nNumberOfIndicators := 0;
 21     v_nNumberOfCollections := 0;
 22     v_dEquivalentRecordValue := 0.0;
 23     v_dFinalERValue := 0.0;
 24     v_nProcessID := 0;
 25     v_nMemberID := 0;
 26     v_nZero := 0;
 27     v_nPeriod := 0;
 28 
 29 	/*------------------------------------------- Read and calculate the raw records -------------------------------------------*/
 30     IF (v_b_iscomposite_res_type <> 0) THEN
 31         open c_get_indicator_collection_simple FOR
 32         SELECT COUNT(DISTINCT TBL_COLLECTION_INDICATOR.INDICATOR_ID), COUNT(DISTINCT TBL_INST_INFO.RES_ID), TBL_COLLECTION_INDICATOR.PROCESS_ID, TBL_COLLECTION_INDICATOR.PMS_RES_TYPE_ID, TBL_COLLECTION_INDICATOR.PERIOD_MINUTES
 33         FROM
 34             (
 35                 SELECT a.INDICATOR_GRP_ID, b.INDICATOR_ID,a.RES_ID,a.MONITOR_TMPL_ID,a.PROCESS_ID,b.PMS_RES_TYPE_ID,a.PERIOD_MINUTES
 36                 FROM  PMS_TEMPLATE_INDICATOR b, PMS_COLLECTION a
 37                 WHERE  b.PMS_RES_TYPE_ID
 38                 IN (
 39                         SELECT MEMBER_ID
 40                         FROM TDT_RES_TYPE_MEMBER
 41                         WHERE PARENT_ID = v_ul_res_type_id
 42                    )
 43                 AND a.MONITOR_STATUS = 1
 44                 AND a.COLLECTION_TYPE = 0
 45                 AND a.INDICATOR_GRP_ID = b.INDICATOR_GRP_ID
 46                 AND a.MONITOR_TMPL_ID = b.MONITOR_TMPL_ID
 47             ) TBL_COLLECTION_INDICATOR,
 48             (
 49                 SELECT RES_ID
 50                 FROM PMS_MONITOR_INSTANCE
 51                 WHERE IS_MEMBER = 1 AND MONITOR_TMPL_ID
 52                 IN (
 53                         SELECT MEMBER_ID
 54                         FROM PMS_TEMPLATE_MEMBER
 55                         WHERE PARENT_ID
 56                         IN (
 57                                 SELECT DISTINCT MONITOR_TMPL_ID
 58                                 FROM PMS_MONITOR_INSTANCE
 59                                 WHERE PMS_RES_TYPE_ID = v_ul_res_type_id
 60                           )
 61                   )
 62             ) TBL_INST_INFO
 63         WHERE TBL_COLLECTION_INDICATOR.RES_ID = TBL_INST_INFO.RES_ID
 64         GROUP BY TBL_COLLECTION_INDICATOR.INDICATOR_GRP_ID, TBL_COLLECTION_INDICATOR.MONITOR_TMPL_ID, TBL_COLLECTION_INDICATOR.PROCESS_ID, TBL_COLLECTION_INDICATOR.PMS_RES_TYPE_ID, TBL_COLLECTION_INDICATOR.PERIOD_MINUTES;
 65 	end if;
 66 END;
 67 /

Succeed.

SQL> 
SQL> drop table if exists t;

Succeed.

SQL> create table t (
  2     id   int,
  3     des varchar(32),
  4     pid  int
  5 );                                                        

Succeed.

SQL> create or replace procedure f_c(id_ IN OUT int, desc_ varchar, pid_ int, level_ int)
  2 IS
  3     l_pid int;
  4 begin
  5     l_pid   := pid_;
  6 
  7     if level_ - 1 < 0 then
  8         return;   
  9     end if;
 10 
 11     insert into t values (id_, desc_, l_pid);
 12     l_pid  := id_;
 13     id_ := id_ + 1;   
 14 
 15     for i in 0..3 loop  
 16         f_c(id_, desc_ || chr(65 + i), l_pid, level_ - 1);
 17     end loop;
 18 end;
 19 /

Succeed.

SQL> 
SQL> declare
  2     id int := 1;
  3 begin
  4     f_c(id, '', NULL, 3); 
  5 end;
  6 /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> 
SQL> -- DTS2018081305809
SQL> create or replace function my_current_timestamp() return timestamp
  2 IS
  3 timestamp_para timestamp;
  4 begin
  5      timestamp_para :=to_timestamp('2018-07-26 12:00:01.12112','YYYY-MM-DD HH:MI:SS.ff6');
  6      return timestamp_para;
  7 end;
  8 /

Succeed.

SQL> select my_current_timestamp(),substring (my_current_timestamp() from 1 for 4) year;

MY_CURRENT_TIMESTAMP()           YEAR                                            
-------------------------------- ------------------------------------------------
2018-07-26 12:00:01.121120       2018                                            

1 rows fetched.

SQL> select my_current_timestamp(),substring (my_current_timestamp() from 6 for 5) month_day;

MY_CURRENT_TIMESTAMP()           MONTH_DAY                                       
-------------------------------- ------------------------------------------------
2018-07-26 12:00:01.121120       07-26                                           

1 rows fetched.

SQL> select my_current_timestamp(),substring (my_current_timestamp() from 12 ) time;

MY_CURRENT_TIMESTAMP()           TIME                                            
-------------------------------- ------------------------------------------------
2018-07-26 12:00:01.121120       12:00:01.121120                                 

1 rows fetched.

SQL> 
SQL> 
SQL> create or replace function pfa_func return timestamp
  2 IS
  3 ts_var timestamp;
  4 begin
  5 	ts_var := systimestamp;
  6 	return ts_var;
  7 end;
  8 /

Succeed.

SQL> 
SQL> drop table if exists PFA_TBL2;

Succeed.

SQL> create table PFA_TBL2 as select pfa_func() y from dual;

Succeed.

SQL> desc PFA_TBL2

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
Y                                            TIMESTAMP(6)                        

SQL> 
SQL> 
SQL> create or replace function pfa_func return number
  2 IS
  3 ts_var timestamp;
  4 begin
  5 	ts_var := systimestamp;
  6 	return '123123.333';
  7 end;
  8 /

Succeed.

SQL> 
SQL> drop table if exists PFA_TBL2;

Succeed.

SQL> create table PFA_TBL2 as select pfa_func() y from dual;

Succeed.

SQL> desc PFA_TBL2

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
Y                                            NUMBER                              

SQL> 
SQL> 
SQL> create or replace function pfa_func return char
  2 IS
  3 ts_var timestamp;
  4 begin
  5 	ts_var := systimestamp;
  6 	return '123123.333';
  7 end;
  8 /

Succeed.

SQL> 
SQL> drop table if exists PFA_TBL2;

Succeed.

SQL> create table PFA_TBL2 as select pfa_func() y from dual;

Succeed.

SQL> desc PFA_TBL2

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
Y                                            CHAR(8000 BYTE)                     

SQL> 
SQL> 
SQL> create or replace function pfa_func return varchar
  2 IS
  3 ts_var timestamp;
  4 begin
  5 	ts_var := systimestamp;
  6 	return '123123.333';
  7 end;
  8 /

Succeed.

SQL> 
SQL> drop table if exists PFA_TBL2;

Succeed.

SQL> create table PFA_TBL2 as select pfa_func() y from dual;

Succeed.

SQL> desc PFA_TBL2

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
Y                                            VARCHAR(8000 BYTE)                  

SQL> 
SQL> 
SQL> create or replace function pfa_func return varchar
  2 IS
  3 char_var varchar(32760);
  4 begin
  5 	char_var := '1234567890-=qwertyuiop[]\asdfghjkl;zxcvbnm,./{}|?<>~`_+QWERTYUIOPASDFGHJKLZXCVBNM1234567890-=qwertyuiop[]\asdfghjkl;zxcvbnm,./{}|?<>~`_+QWERTYUIOPASDFGHJKLZXCVBNM1234567890-=qwertyuiop[]\asdfghjkl;zxcvbnm,./{}|?<>~`_+QWERTYUIOPASDFGHJKLZXCVBNM1234567890-=qwertyuiop[]\asdfghjkl;zxcvbnm,./{}|?<>~`_+QWERTYUIOPASDFGHJKLZXCVBNM1234567890-=qwertyuiop[]\asdfghjkl;zxcvbnm,./{}|?<>~`_+QWERTYUIOPASDFGHJKLZXCVBNM1234567890-=qwertyuiop[]\asdfghjkl;zxcvbnm,./{}|?<>~`_+QWERTYUIOPASDFGHJKLZXCVBNM1234567890-=qwertyuiop[]\asdfghjkl;zxcvbnm,./{}|?<>~`_+QWERTYUIOPASDFGHJKLZXCVBNM1234567890-=qwertyuiop[]\asdfghjkl;zxcvbnm,./{}|?<>~`_+QWERTYUIOPASDFGHJKLZXCVBNM1234567890-=qwertyuiop[]\asdfghjkl;zxcvbnm,./{}|?<>~`_+QWERTYUIOPASDFGHJKLZXCVBNM1234567890-=qwertyuiop[]\asdfghjkl;zxcvbnm,./{}|?<>~`_+QWERTYUIOPASDFGHJKLZXCVBNM1234567890-=qwertyuiop[]\asdfghjkl;zxcvbnm,./{}|?<>~`_+QWERTYUIOPASDFGHJKLZXCVBNM1234567890-=qwertyuiop[]\asdfghjkl;zxcvbnm,./{}|?<>~`_+QWERTYUIOPASDFGHJKLZXCVBNM1234567890-=qwertyuiop[]\asdfghjkl;zxcvbnm,./{}|?<>~`_+QWERTYUIOPASDFGHJKLZXCVBNM1234567890-=qwertyuiop[]\asdfghjkl;zxcvbnm,./{}|?<>~`_+QWERTYUIOPASDFGHJKLZXCVBNM1234567890-=qwertyuiop[]\asdfghjkl;zxcvbnm,./{}|?<>~`_+QWERTYUIOPASDFGHJKLZXCVBNM1234567890-=qwertyuiop[]\asdfghjkl;zxcvbnm,./{}|?<>~`_+QWERTYUIOPASDFGHJKLZXCVBNM';
  6 	char_var := char_var || char_var;
  7 	char_var := char_var || char_var;
  8 	char_var := char_var || char_var;
  9 	-- length(char_var) = 10368
 10 	return char_var;
 11 end;
 12 /

Succeed.

SQL> 
SQL> drop table if exists PFA_TBL2;

Succeed.

SQL> -- overlength error
SQL> create table PFA_TBL2 as select pfa_func() y from dual;

CT-01346, The column "Y" length exceeded the maximum, (actual: 10368, maximum: 8000).
SQL> desc PFA_TBL2

CT-00843, [1:15]The table or view GS_PLSQL_DTS.PFA_TBL2 does not exist.

SQL> 
SQL> 
SQL> create or replace function pfa_func return raw
  2 IS
  3 ts_var timestamp;
  4 begin
  5 	ts_var := systimestamp;
  6 	return '123123333';
  7 end;
  8 /

Succeed.

SQL> 
SQL> drop table if exists PFA_TBL2;

Succeed.

SQL> create table PFA_TBL2 as select pfa_func() y from dual;

Succeed.

SQL> desc PFA_TBL2

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
Y                                            RAW(8000)                           

SQL> 
SQL> 
SQL> create or replace function pfa_func return clob
  2 IS
  3 ts_var timestamp;
  4 begin
  5 	ts_var := systimestamp;
  6 	return '123123333';
  7 end;
  8 /

Succeed.

SQL> 
SQL> drop table if exists PFA_TBL2;

Succeed.

SQL> create table PFA_TBL2 as select pfa_func() y from dual;

Succeed.

SQL> desc PFA_TBL2

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
Y                                            CLOB                                

SQL> 
SQL> 
SQL> create or replace function pfa_func return interval year to month
  2 IS
  3 ts_var timestamp;
  4 begin
  5 	ts_var := systimestamp;
  6 	return numtoyminterval(12.33, 'YEAR');
  7 end;
  8 /

Succeed.

SQL> 
SQL> drop table if exists PFA_TBL2;

Succeed.

SQL> create table PFA_TBL2 as select pfa_func() y from dual;

Succeed.

SQL> desc PFA_TBL2

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
Y                                            INTERVAL YEAR(4) TO MONTH           

SQL> select * from pfa_tbl2;

Y         
----------
+0012-04  

1 rows fetched.

SQL> 
SQL> create or replace function pfa_func return interval day to second
  2 IS
  3 ts_var timestamp;
  4 begin
  5 	ts_var := systimestamp;
  6 	return numtodsinterval(12.333333, 'DAY');
  7 end;
  8 /

Succeed.

SQL> 
SQL> drop table if exists PFA_TBL2;

Succeed.

SQL> create table PFA_TBL2 as select pfa_func() y from dual;

Succeed.

SQL> desc PFA_TBL2

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
Y                                            INTERVAL DAY(7) TO SECOND(6)        

SQL> select * from pfa_tbl2;

Y                       
------------------------
+0000012 07:59:59.971200

1 rows fetched.

SQL> 
SQL> ----------------------------------------
SQL> create user plsql_dts_whf identified by Whf00174302;

Succeed.

SQL> create user plsql_dts_mcdb identified by Whf00174302;

Succeed.

SQL> 
SQL> grant dba to plsql_dts_whf;

Succeed.

SQL> grant dba to plsql_dts_mcdb;

Succeed.

SQL> 
SQL> conn plsql_dts_whf/Whf00174302@127.0.0.1:1611

connected.

SQL>  drop table if exists tt;

Succeed.

SQL>  create table tt ( a int);

Succeed.

SQL>  insert into tt values(1),(2);

2 rows affected.

SQL>  commit;

Succeed.

SQL> 
SQL>  create or replace procedure p1 as
  2  b tt%rowtype;
  3  begin
  4  select * into b from tt limit 1;
  5  delete from tt;
  6  dbe_output.print_line(b);
  7  null
  8  end;
  9  /

Succeed.
Warning:
PL/SQL(PLSQL_DTS_WHF.P1) terminated with compiling errors
[8:2] PLC-00601 Sql syntax error: ; expected
[9:2] PLC-00954 more text expected but EOF found


SQL> 
SQL> conn plsql_dts_mcdb/Whf00174302@127.0.0.1:1611

connected.

SQL>  create or replace procedure p2 as
  2  begin
  3  plsql_dts_whf.p1();
  4  end;
  5  /

Succeed.
Warning:
PL/SQL(PLSQL_DTS_MCDB.P2) terminated with compiling errors
[3:2] PLC-00944 PL/SQL(PLSQL_DTS_WHF.P1) terminated with compiling errors
[8:2] PLC-00601 Sql syntax error: ; expected
[9:2] PLC-00954 more text expected but EOF found



SQL> 
SQL> conn gs_plsql_dts/Whf00174302@127.0.0.1:1611

connected.

SQL> 
SQL>  begin
  2  plsql_dts_mcdb.p2();
  3  end;
  4  /

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[2:2] PLC-00944 PL/SQL(PLSQL_DTS_MCDB.P2) terminated with compiling errors
[3:2] PLC-00944 PL/SQL(PLSQL_DTS_WHF.P1) terminated with compiling errors
[8:2] PLC-00601 Sql syntax error: ; expected
[9:2] PLC-00954 more text expected but EOF found



SQL> ---------------test error 
SQL> declare
  2    cv=cv SYS_REFCURSOR;                                                        
  3    v_ename  plsql_dts_emp_test.ename%type;                                               
  4 BEGIN                                                                          
  5         open cv=cv for select ename from plsql_dts_emp_test where empno=1 order by ename;
  6         loop                                                                   
  7         fetch cv into v_ename;                                                 
  8         exit when cv%notfound;                                                 
  9         dbe_output.print_line('ename is '||v_ename);                            
 10         end loop;                                                              
 11         close cv;                                                              
 12 end;                                                                           
 13 /                                                                              

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[2:6] PLC-00601 Sql syntax error: datatype expected, but got '=cv'

SQL> 
SQL> declare
  2    cv SYS_REFCURSOR;
  3    v_ename  plsql_dts_emp_test.ename%type;
  4 BEGIN
  5         open cv for select ename from plsql_dts_emp_test where empno=1 order by ename;
  6         loop
  7         fetch cv into v_ename;
  8         exit when cv%notfound;
  9         dbe_output.print_line('ename is '||v_ename);
 10         end loop;
 11         close cv;
 12 end;
 13 /

ename is zhangsan
ename is zhansi

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2    cv%cv  SYS_REFCURSOR;
  3    v_ename  plsql_dts_emp_test.ename%type;
  4 BEGIN
  5         open cv%cv for select ename from plsql_dts_emp_test where empno=1 order by ename;
  6         loop
  7         fetch cv%cv into v_ename;
  8         exit when cv%notfound;
  9         dbe_output.print_line('ename is '||v_ename);
 10         end loop;
 11         close cv;
 12 end;
 13 / 

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[2:6] PLC-00601 Sql syntax error: datatype expected, but got '%cv'

SQL> 
SQL> --Example 4-14 CONTINUE WHEN Statement in Basic LOOP Statement
SQL> DECLARE
  2   x NUMBER := 0;
  3 BEGIN
  4   LOOP -- After CONTINUE statement, control resumes here
  5     dbe_output.print_line ('Inside loop:  x = ' || TO_CHAR(x));
  6     x := x + 1;
  7     CONTINUE WHEN x < 3;
  8     dbe_output.print_line
  9       ('Inside loop, after CONTINUE:  x = ' || TO_CHAR(x));
 10     EXIT WHEN x = 5;
 11   END LOOP;
 12   dbe_output.print_line (' After loop:  x = ' || TO_CHAR(x));
 13 END;
 14 /

Inside loop:  x = 0
Inside loop:  x = 1
Inside loop:  x = 2
Inside loop, after CONTINUE:  x = 3
Inside loop:  x = 3
Inside loop, after CONTINUE:  x = 4
Inside loop:  x = 4
Inside loop, after CONTINUE:  x = 5
 After loop:  x = 5

PL/SQL procedure successfully completed.

SQL> ---DTS2018083003267 
SQL> drop table if exists plsql_dts_test;

Succeed.

SQL> create or replace procedure plsql_dts_test 
  2 is
  3 cursor plsql_dts_test_xxx;
  4 begin
  5 plsql_dts_test_xxx is select 1 from dual;
  6 open plsql_dts_test_xxx;
  7 close plsql_dts_test_xxx;
  8 return;
  9 end;
 10 /

Succeed.
Warning:
PL/SQL(GS_PLSQL_DTS.PLSQL_DTS_TEST) terminated with compiling errors
[5:20] PLC-00954 ';' or ':=' expected but is found
[3:8] PLC-00957 The declaration of the variable PLSQL_DTS_TEST_XXX was incomplete.


SQL> 
SQL> create or replace procedure plsql_dts_test is
  2 cursor plsql_dts_test_xxx
  3 begin
  4 open plsql_dts_test_xxx(1,2);
  5 close plsql_dts_test_xxx;
  6 return;
  7 end;
  8 /

Succeed.
Warning:
PL/SQL(GS_PLSQL_DTS.PLSQL_DTS_TEST) terminated with compiling errors
[3:1] PLC-00601 Sql syntax error: ; expected


SQL> 
SQL> create or replace procedure plsql_dts_test is
  2 cursor plsql_dts_test_xxx;
  3 begin
  4 open plsql_dts_test_xxx(1,2);
  5 close plsql_dts_test_xxx;
  6 return;
  7 end;
  8 /

Succeed.
Warning:
PL/SQL(GS_PLSQL_DTS.PLSQL_DTS_TEST) terminated with compiling errors
[4:1] PLC-00916 PL/SQL:syntax error(open cursor have no args definition)


SQL> 
SQL> create or replace procedure plsql_dts_test is
  2 cursor plsql_dts_test_xxx;
  3 begin
  4 open plsql_dts_test_xxx;
  5 close plsql_dts_test_xxx;
  6 return;
  7 end;
  8 /

Succeed.
Warning:
PL/SQL(GS_PLSQL_DTS.PLSQL_DTS_TEST) terminated with compiling errors
[2:8] PLC-00957 The declaration of the variable PLSQL_DTS_TEST_XXX was incomplete.


SQL> 
SQL> drop procedure plsql_dts_test;

Succeed.

SQL> ---DTS2018083005780
SQL> create or replace procedure plsql_dts_loop_test is
  2 i int;
  3 begine
  4 i:=0;
  5 loop
  6  i:=i+1;
  7 end loop;
  8 end plsql_dts_loop_test;
  9 /

Succeed.
Warning:
PL/SQL(GS_PLSQL_DTS.PLSQL_DTS_LOOP_TEST) terminated with compiling errors
[4:1] PLC-00601 Sql syntax error: datatype expected, but got 'i'


SQL> 
SQL> create or replace procedure plsql_dts_loop_test is
  2 i int;
  3 begine
  4 loop
  5  i:=i+1;
  6 end loop;
  7 end plsql_dts_loop_test;
  8 /

Succeed.
Warning:
PL/SQL(GS_PLSQL_DTS.PLSQL_DTS_LOOP_TEST) terminated with compiling errors
[4:1] PLC-00601 Sql syntax error: datatype expected, but got 'loop'


SQL> 
SQL> --DTS2018082905466 
SQL> declare
  2     i int;
  3 begin
  4     i := prior 1;
  5 end;
  6 /

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[4:7] PLC-00922 PL/SQL: illegal line(function or pseudo-column 'PRIOR' may be used inside a SQL statement)

SQL> 
SQL> --begin : DTS2018083005171 
SQL> drop table if exists plsql_dts_storage_row_link_range_tbl_000;

Succeed.

SQL> create table plsql_dts_storage_row_link_range_tbl_000(c_id int,c_d_id bigint NOT NULL,c_w_id tinyint unsigned NOT NULL,c_first varchar(16) NOT NULL,c_middle char(2),c_last varchar(16) NOT NULL,c_street_1 varchar(20) NOT NULL,c_street_2 varchar(20),c_city varchar(20) NOT NULL,c_state char(2) NOT NULL,c_zip char(9) NOT NULL,c_phone char(16) NOT NULL,c_since timestamp,c_credit char(2) NOT NULL,c_credit_lim numeric(12,2),c_discount numeric(4,4),c_balance numeric(12,2),c_ytd_payment real NOT NULL,c_payment_cnt number NOT NULL,c_delivery_cnt bool NOT NULL,c_end date NOT NULL,c_data1 varchar(8000),c_data2 varchar(8000),c_data3 varchar(8000),c_data4 varchar(8000),c_data5 varchar(8000),c_data6 varchar(8000),c_data7 varchar(8000),c_data8 varchar(8000),c_data9 varchar(4000),c_data10 varchar(4000),c_clob clob,c_text blob);

Succeed.

SQL> CREATE or replace procedure plsql_dts_storage_row_link_range_proc_000(startnum int,endall int) is
  2 i INT :=1;
  3 j varchar(10);
  4 BEGIN
  5   FOR i IN startnum..endall LOOP
  6     select cast(i as varchar(10)) into j from dual;
  7     insert into plsql_dts_storage_row_link_range_tbl_000 select i,i,i,'iscmRDs'||j,'OE','BARBar'||j,'bkilifcrRGF'||j,'pmbwovhSDGj'||j,'dyfrDa'||j,'uq','4801'||j,'940215'||j,sysdate,'GC',50000.0,0.4361328,-10.0,10.0,1,1,sysdate,lpad('QVBRfSCC3484942ZCSfjvCF',4000,'QVLDBURhlhfrc484ZCSfjF'),lpad('QVBUflcHOQNvmgfvdPFZSF',4000,'QVLDfscHOQgfvmPFZDSF'),lpad('QVBUflcHOQNvmgfvdPFZSF',4000,'QVLDfscHOQgfvmPFZDSF'),lpad('QVBUflcHOQNvmgfvdPFZSF',4000,'QVLDfscHOQgfvmPFZDSF'),lpad('QVBUflcHOQNvmgfvdPFZSF',4000,'QVLDfscHOQgfvmPFZDSF'),lpad('QVBUflcHOQNvmgfvdPFZSF',4000,'QVLDfscHOQgfvmPFZDSF'),lpad('QVBUflcHOQNvmgfvdPFZSF',4000,'QVLDfscHOQgfvmPFZDSF'),lpad('QVBUflcHOQNvmgfvdPFZSF',3000,'QVLDfscHOQgfvmPFZDSF'),lpad('QVBUflcHOQNvmgfvdPFZSF',3000,'QVLDfscHOQgfvmPFZDSF'),lpad('12314315487569809',3000,'1435764ABC7890abcdef'),lpad('QVBUflcHOQNvmgfvdPFZSF',4000,'QVLDfscHOQgfvmPFZDSF'),lpad('12314315487569809',4000,'1435764ABC7890abcdef') from dual;
  8   END LOOP;
  9 END;
 10 /

Succeed.

SQL> call plsql_dts_storage_row_link_range_proc_000(1,100);

PL/SQL procedure successfully completed.

SQL> commit;

Succeed.

SQL> 
SQL> drop table if exists plsql_dts_storage_row_link_range_trg_tbl_010;

Succeed.

SQL> create table plsql_dts_storage_row_link_range_trg_tbl_010(c_id int,c_d_id bigint NOT NULL,c_w_id tinyint unsigned NOT NULL,c_first varchar(16 char) NOT NULL,c_middle char(2),c_last varchar(16) NOT NULL,c_street_1 varchar(20) NOT NULL,c_street_2 varchar(20),c_city varchar(20) NOT NULL,c_state char(2) NOT NULL,c_zip char(9) NOT NULL,c_phone char(16) NOT NULL,c_since timestamp,c_credit char(2) NOT NULL,c_credit_lim numeric(12,2),c_discount numeric(4,4),c_balance numeric(12,2),c_ytd_payment real NOT NULL,c_payment_cnt number NOT NULL,c_delivery_cnt bool NOT NULL,c_end date NOT NULL,c_data1 varchar(8000 byte),c_data2 varchar(8000),c_data3 varchar(8000),c_data4 varchar(8000),c_data5 varchar(8000),c_data6 varchar(8000),c_data7 varchar(8000),c_data8 varchar(8000),c_data9 varchar(4000),c_data10 varchar(4000),c_clob clob,c_text blob) partition by range(c_id,c_first) (partition PART_1 values less than (21,'is21'),partition PART_2 values less than (41,'is41'),partition PART_3 values less than (61,'is61'),partition PART_4 values less than (81,'is81'),partition PART_5 values less than (maxvalue,maxvalue));

Succeed.

SQL> insert into plsql_dts_storage_row_link_range_trg_tbl_010 select * from plsql_dts_storage_row_link_range_tbl_000;

100 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> drop table if exists plsql_dts_storage_row_link_range_trg_tbl_010_1;

Succeed.

SQL> create table plsql_dts_storage_row_link_range_trg_tbl_010_1(c_id int,c_d_id bigint NOT NULL,c_w_id tinyint unsigned NOT NULL,c_first varchar(16 char) NOT NULL,c_middle char(2),c_last varchar(16) NOT NULL,c_street_1 varchar(20) NOT NULL,c_street_2 varchar(20),c_city varchar(20) NOT NULL,c_state char(2) NOT NULL,c_zip char(9) NOT NULL,c_phone char(16) NOT NULL,c_since timestamp,c_credit char(2) NOT NULL,c_credit_lim numeric(12,2),c_discount numeric(4,4),c_balance numeric(12,2),c_ytd_payment real NOT NULL,c_payment_cnt number NOT NULL,c_delivery_cnt bool NOT NULL,c_end date NOT NULL,c_data1 varchar(8000 byte),c_data2 varchar(8000),c_data3 varchar(8000),c_data4 varchar(8000),c_data5 varchar(8000),c_data6 varchar(8000),c_data7 varchar(8000),c_data8 varchar(8000),c_data9 varchar(4000),c_data10 varchar(4000),c_clob clob,c_text blob) partition by range(c_id,c_first) (partition PART_1 values less than (21,'is21'),partition PART_2 values less than (41,'is41'),partition PART_3 values less than (61,'is61'),partition PART_4 values less than (81,'is81'),partition PART_5 values less than (maxvalue,maxvalue));

Succeed.

SQL> insert into plsql_dts_storage_row_link_range_trg_tbl_010_1 select * from plsql_dts_storage_row_link_range_tbl_000;

100 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> create or replace trigger plsql_dts_storage_row_link_range_trg_010 before update on plsql_dts_storage_row_link_range_trg_tbl_010
  2 begin
  3   update plsql_dts_storage_row_link_range_trg_tbl_010_1 set c_d_id=c_d_id+1,c_w_id=c_w_id+1,c_since=sysdate,c_first=c_first||'b',c_data1=c_data1||'aaaaa',c_data2=c_data2||'aaaaa',c_data3=c_data3||'aaaaa',c_data4=c_data4||'aaaaa',c_data5=c_data5||'aaaaa',c_data6=c_data6||'aaaaa',c_data7=c_data7||'aaaaa',c_data8=c_data8||'aaaaa';
  4   dbe_output.print_line('Hello 1!');
  5 END;
  6 /

Succeed.

SQL> 
SQL> create or replace trigger plsql_dts_storage_row_link_range_trg_010_1 after update on plsql_dts_storage_row_link_range_trg_tbl_010
  2 begin
  3   update plsql_dts_storage_row_link_range_trg_tbl_010_1 set c_d_id=c_d_id+1,c_w_id=c_w_id+1,c_since=sysdate,c_first=c_first||'b',c_data1=c_data1||'aaaaa',c_data2=c_data2||'aaaaa',c_data3=c_data3||'aaaaa',c_data4=c_data4||'aaaaa',c_data5=c_data5||'aaaaa',c_data6=c_data6||'aaaaa',c_data7=c_data7||'aaaaa',c_data8=c_data8||'aaaaa';
  4   dbe_output.print_line('Hello 2!');
  5 END;
  6 /

Succeed.

SQL> 
SQL> --line connection -> normal line
SQL> update plsql_dts_storage_row_link_range_trg_tbl_010 set c_d_id=c_d_id+1,c_w_id=c_w_id+1,c_since=sysdate,c_first=c_first||'aa',c_data1='aaaaaaaaaaaa',c_data2='bbbbbbbbbb',c_data3='cccccccccc',c_data4='dddddddddd',c_data5='eeeeeeeeee',c_data6='ffffffffff',c_data7='gggggggggg',c_data8='aaaaaaaaaa',c_text='aaaaaaaaaa',c_clob='1111111111' where mod(c_id,2)=0;

Hello 1!
Hello 2!

50 rows affected.

SQL> --end : DTS2018083005171 
SQL> 
SQL> --DTS2018082903212 
SQL> drop table if exists zsharding_tbl;

Succeed.

SQL> create table zsharding_tbl(
  2 c_id int, c_int int, c_integer integer, c_bool bool, c_boolean boolean, c_bigint bigint,
  3 c_real real, c_double double,
  4 c_decimal decimal(38), c_number number(38), c_numeric numeric(38),
  5 c_char char(50) default null, c_varchar varchar(20), c_varchar2 varchar2(4000),
  6 c_date date, c_datetime datetime, c_timestamp timestamp,c_float float default null
  7 );

Succeed.

SQL> INSERT INTO zsharding_tbl VALUES ( 20, 0, 10, 1, 0, -1088618496, 500000, 1000, 9, 5, 8, 'a', 'def', '2003-02-28', TO_DATE('2002-03-18', 'YYYY-MM-DD'), TO_DATE('2003-11-25', 'YYYY-MM-DD'), TO_TIMESTAMP('2004-08-19 21:38:09', 'YYYY-MM-DD HH24:Mi:SS') ,-1.79E+308);

1 rows affected.

SQL> INSERT INTO zsharding_tbl VALUES ( 21, 30000, 20000, 0, 1, 30000, 294453248, 0, 2, -110231552, 9, 'ghi', '2004-05-24', 'kbvumx', TO_DATE('2010-08-08', 'YYYY-MM-DD'), TO_DATE('1995-08-08', 'YYYY-MM-DD'), TO_TIMESTAMP('2018-08-08 08:08:08', 'YYYY-MM-DD HH24:Mi:SS'),1.79E+308 );

1 rows affected.

SQL> INSERT INTO zsharding_tbl VALUES ( 22, 12, 20000, 1, 1, 0, 1, 10, 3000, 13, 0, 'ekb', 'eekbvumxm', 'd', TO_DATE('1995-08-08', 'YYYY-MM-DD'), TO_DATE('2009-11-25', 'YYYY-MM-DD'), TO_TIMESTAMP('1885-08-08 08:08:08', 'YYYY-MM-DD HH24:Mi:SS') ,'');

1 rows affected.

SQL> INSERT INTO zsharding_tbl VALUES ( 23, -1294729216, -1349124096, 1, 1, 1421737984, 10, 20000, 2, 3000, 3000, 'b', '%b%', '2004-06-20 20:20:31', TO_DATE('1880-08-08', 'YYYY-MM-DD'), TO_DATE('2009-11-08', 'YYYY-MM-DD'), TO_TIMESTAMP('2002-05-28 01:05:16', 'YYYY-MM-DD HH24:Mi:SS'),9999999999.123456789 );

1 rows affected.

SQL> INSERT INTO zsharding_tbl VALUES ( 24, -1485242368, -480182272, 1, 0, 3000, 1000, 0, 12, 11, 1000, '2005-09-02', 'q', '2001-08-18 14:31:12', TO_DATE('2002-05-09', 'YYYY-MM-DD'), TO_DATE('2005-08-06', 'YYYY-MM-DD'), TO_TIMESTAMP('2012-08-08 08:08:08', 'YYYY-MM-DD HH24:Mi:SS'),'' );

1 rows affected.

SQL> INSERT INTO zsharding_tbl VALUES ( 25, 1000, 0, 1, 0, 4, 20000, 3000, -1371799552, -1394540544, 3, 'def', 'abc', '%b%', TO_DATE('2009-02-10', 'YYYY-MM-DD'), TO_DATE('2001-05-14', 'YYYY-MM-DD'), TO_TIMESTAMP('2001-02-18 14:25:33', 'YYYY-MM-DD HH24:Mi:SS'),''  );

1 rows affected.

SQL> INSERT INTO zsharding_tbl VALUES ( 26, 1, 10, 1, 0, 1971322880, 11, 30000, 0, 1088159744, 9, 'abc', '_a_%', 'abe', TO_DATE('2002-12-07', 'YYYY-MM-DD'), TO_DATE('2000-07-02', 'YYYY-MM-DD'), TO_TIMESTAMP('2000-01-01 01:01:01', 'YYYY-MM-DD HH24:Mi:SS') ,'' );

1 rows affected.

SQL> INSERT INTO zsharding_tbl VALUES ( 27, 1199702016, 10, 0, 1, 500000, -1063911424, 12, 0, 11, 5, 'abcdef', 'a', 'c', TO_DATE('2009-04-08', 'YYYY-MM-DD'), TO_DATE('2010-08-08', 'YYYY-MM-DD'), TO_TIMESTAMP('1880-08-08 08:08:08', 'YYYY-MM-DD HH24:Mi:SS') ,'' );

1 rows affected.

SQL> INSERT INTO zsharding_tbl VALUES ( 28, 5, 30000, 1, 1, 14, 500000, 5, 292421632, 5, 13, 'c', 'mab', 'b', TO_DATE('2006-02-08', 'YYYY-MM-DD'), TO_DATE('2000-08-08', 'YYYY-MM-DD'), TO_TIMESTAMP('2011-08-08 08:08:08', 'YYYY-MM-DD HH24:Mi:SS'),''  );

1 rows affected.

SQL> INSERT INTO zsharding_tbl VALUES ( 29, 1000, 500000, 1, 0, 1221525504, 20000, 2077491200, 13, 12, 40000, '', '2003-07-06 21:08:14', '2004-05-15', TO_DATE('2000-04-20', 'YYYY-MM-DD'), TO_DATE('2008-01-02', 'YYYY-MM-DD'), TO_TIMESTAMP('2011-08-08 08:08:08', 'YYYY-MM-DD HH24:Mi:SS') ,'' );

1 rows affected.

SQL> INSERT INTO zsharding_tbl VALUES ( 30, 1000, 500000, 1, 0, 1221525504, 20000, 2077491200, 13, 12, 40000, 'abcdefgaaaaaaaaa', '2003-07-06 21:08:14', '2004-05-15', TO_DATE('2000-04-20', 'YYYY-MM-DD'), TO_DATE('2008-01-02', 'YYYY-MM-DD'), TO_TIMESTAMP('2011-08-08 08:08:08', 'YYYY-MM-DD HH24:Mi:SS'),''  );

1 rows affected.

SQL> INSERT INTO zsharding_tbl VALUES ( 31, 1000, 500000, 1, 0, 1221525504, 20000, 2077491200, 13, 12, 40000, null, '2003-07-06 21:08:14', '2004-05-15', TO_DATE('2000-04-20', 'YYYY-MM-DD'), TO_DATE('2008-01-02', 'YYYY-MM-DD'), TO_TIMESTAMP('2011-08-08 08:08:08', 'YYYY-MM-DD HH24:Mi:SS') ,'' );

1 rows affected.

SQL> create or replace procedure sp_zsharding_tbl 
  2 as
  3 v_Temp_1 NUMBER(10, 0);
  4 begin
  5 select count(*)  into v_Temp_1 from (SELECT c_id,c_varchar FROM zsharding_tbl where c_varchar = any (select c_varchar from zsharding_tbl where c_date in (select c_date from zsharding_tbl where exists(select c_bool from zsharding_tbl)))  group by c_id,c_varchar union
  6 SELECT c_id,c_varchar FROM zsharding_tbl where c_varchar = any (select c_varchar from zsharding_tbl where c_date in (select c_date from zsharding_tbl where exists(select c_bool from zsharding_tbl))) group by c_id,c_varchar order by c_id desc);
  7 end ;
  8 /

Succeed.

SQL> call sp_zsharding_tbl;

PL/SQL procedure successfully completed.

SQL> --DTS2018083001179 
SQL> drop user if exists plsql_dts_nebula cascade;

Succeed.

SQL> create user plsql_dts_nebula identified by Cantian_234;

Succeed.

SQL> create table plsql_dts_nebula.hash_tbl_005(c_first varchar2(20)) partition by hash(c_first) (partition part_1,partition part_2,partition part_3);

Succeed.

SQL> declare
  2 pname varchar2(20);
  3 count_num int;
  4 v_first varchar2(50);
  5 v_sql varchar2(500);
  6 hashcursor sys_refcursor;
  7 cursor hash_cursor is SELECT PARTITION_NAME FROM DBA_TAB_PARTITIONS WHERE TABLE_NAME =upper('hash_tbl_005') order by PARTITION_NAME;
  8 begin
  9    open hash_cursor;
 10    fetch hash_cursor into pname;
 11    while hash_cursor%found loop
 12    execute immediate 'select c_first from plsql_dts_nebula.hash_tbl_005 partition('||pname||') where rownum=1 order by c_first' into v_first;
 13    dbe_output.print_line(pname ||' c_first is '||v_first);
 14    v_sql :='update plsql_dts_nebula.hash_tbl_005 set c_first='''||v_first||''' where c_first in (select c_first from plsql_dts_nebula.hash_tbl_005 partition('||pname||'))';
 15    execute immediate v_sql;
 16    v_sql :='select distinct c_first from plsql_dts_nebula.hash_tbl_005 partition('||pname||')';
 17    open hashcursor for v_sql;
 18    dbe_sql.return_cursor(hashcursor);
 19    fetch hash_cursor into pname;
 20    end loop;
 21    close hash_cursor;
 22  end;
 23 /

CT-00932, [12:4] PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with execute errors
[12:4] CT-00906, In PL/SQL, running SELECT INTO or EXECUTE IMMEDIATE INTO to grant values to variables had no data found.

SQL> --DTS2018082909668 
SQL> drop table if exists plsql_dts_tab_001 ;

Succeed.

SQL> create table plsql_dts_tab_001 (f1 int, f2 int);

Succeed.

SQL> insert into plsql_dts_tab_001 (select 1, 1 from dual);

1 rows affected.

SQL> insert into plsql_dts_tab_001  select 1, 1 from dual;

1 rows affected.

SQL> select * from plsql_dts_tab_001;

F1           F2          
------------ ------------
1            1           
1            1           

2 rows fetched.

SQL> declare
  2   sqlstr varchar(1024);
  3   begin
  4   sqlstr := 'insert into plsql_dts_tab_001 (select 1, 1 from dual)';
  5   execute immediate sqlstr;
  6 end;
  7 /

PL/SQL procedure successfully completed.

SQL> begin insert into plsql_dts_tab_001 (select 1, 1 from dual); end;
  2 /

PL/SQL procedure successfully completed.

SQL> --DTS2018082404475 
SQL> drop table if exists plsql_dts_emp;

Succeed.

SQL> create table plsql_dts_emp(empno int,ename varchar(10),job varchar(10) ,sal integer);

Succeed.

SQL> insert into plsql_dts_emp values(1,'zhangsan','doctor1',10000),(2,'zhangsan2','doctor2',10000),(123,'zhangsan3','doctor3',10000);

3 rows affected.

SQL> declare
  2 a plsql_dts_emp%rowtype;
  3 cursor mycursor return plsql_dts_emp%rowtype;
  4 cursor mycursor return plsql_dts_emp%rowtype  is  select * from plsql_dts_emp;
  5 begin
  6 open mycursor;
  7 loop
  8 if  mycursor%isopen  then  dbe_output.print_line('open');fetch mycursor into a;
  9 end if;
 10 exit
 11 when  mycursor%notfound;
 12 dbe_output.print_line('a is emp:'||a.ename);
 13 dbe_output.print_line(mycursor%rowcount);
 14 end loop;
 15 end;
 16 /

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[3:17] PLC-00958 Unsupported feature
[3:24] PLC-00601 Sql syntax error: ; expected

SQL> declare
  2 cursor mycursor(job_real varchar(10) default 'doctor1',max_sal number default 9000) is  select ename from plsql_dts_emp where job=job_real and sal> max_sal  order by sal;
  3 c_empno varchar(10);
  4 begin
  5 open mycursor;
  6 fetch mycursor into c_empno;
  7 if  mycursor%found  then
  8 dbe_output.print_line('c_empno is emp:'||c_empno);
  9 dbe_output.print_line(mycursor%rowcount);
 10 end if;
 11 close mycursor;
 12 open mycursor('doctor2',8000);
 13 fetch mycursor into c_empno;
 14 dbe_output.print_line('doctor2 c_empno is emp:'||c_empno);
 15 dbe_output.print_line(mycursor%rowcount);
 16 close mycursor;
 17 end;
 18 /

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[2:33] PLC-00954 := or default or another arg or end of args expected but BRACKET symbol '(' found

SQL> --DTS2018082902927
SQL> drop table if exists plsql_dts_employees;

Succeed.

SQL> create table plsql_dts_employees(employeesno int,ename varchar(10),job varchar(10) ,sal integer);

Succeed.

SQL> insert into plsql_dts_employees values(1,'zhangsan','doctor1',10000);

1 rows affected.

SQL> insert into plsql_dts_employees values(2,'zhangsan2','doctor2',10010);

1 rows affected.

SQL> insert into plsql_dts_employees values(123,'zhangsan3','AD_PRES',10020);

1 rows affected.

SQL> alter table plsql_dts_employees add  hiretime datetime;

Succeed.

SQL> DECLARE
  2   TYPE RecordTyp IS RECORD (
  3     last plsql_dts_employees.ename%TYPE,
  4     id   plsql_dts_employees.employeesno%TYPE
  5   );
  6   rec1 RecordTyp;
  7 BEGIN
  8   SELECT ename, employeesno INTO rec1
  9   FROM plsql_dts_employees
 10   WHERE job = 'AD_PRES';
 11 
 12   dbe_output.print_line ('Employee #' || rec1.id || ' = ' || rec1.last);
 13 END;
 14 /

Employee #123 = zhangsan3

PL/SQL procedure successfully completed.

SQL> -------
SQL> drop table if exists t_test_zenith_t1;

Succeed.

SQL> create table t_test_zenith_t1(id int primary key, name varchar2(100), sqltext varchar2(1000));

Succeed.

SQL> declare 
  2     i integer;
  3 begin
  4     for i in 1 .. 100 loop
  5         insert into t_test_zenith_t1 values(i, i || 'abcdefg', lpad(' ', 1000, ' '));  
  6     end loop;
  7     commit;
  8 end;
  9 /

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2     str_name varchar2(100);
  3     b_time   timestamp;    
  4     interval_local interval day to second;
  5     result   varchar2(20);
  6 begin
  7     b_time := systimestamp;
  8     for i in 1 .. 10 loop
  9         select name into str_name from t_test_zenith_t1 where id = i;
 10     end loop;
 11     interval_local := systimestamp - b_time;
 12     result := cast(interval_local as varchar(20));    
 13     if interval_local < '0 0:0:1' then
 14         dbe_output.print_line('OK');
 15     else
 16         dbe_output.print_line('FAIL');
 17     end if;
 18 end;
 19 /

OK

PL/SQL procedure successfully completed.

SQL> 
SQL> drop user plsql_dts_whf cascade;

Succeed.

SQL> drop user plsql_dts_mcdb cascade;

Succeed.

SQL> 
SQL> --DTS2018082702743: 
SQL> --(1)test the eof cursor cannot be used by return result 
SQL> --(2)return result should fetch data from the cursor alone with the last pos.
SQL> drop table if exists plsql_dts_emp1;

Succeed.

SQL> create table plsql_dts_emp1(employeesno int,ename varchar(10),job varchar(10) ,sal integer);

Succeed.

SQL> insert into plsql_dts_emp1 values(1,'zhangsan','doctor1',10000);

1 rows affected.

SQL> insert into plsql_dts_emp1 values(2,'zhangsan2','doctor2',10010);

1 rows affected.

SQL> insert into plsql_dts_emp1 values(123,'zhangsan3','doctor3',10020);

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> --------------------
SQL> --fetch eof,return_result will error
SQL> create or replace procedure plsql_dts_p1 is 
  2 a plsql_dts_emp1%rowtype;
  3 mycursor sys_refcursor;
  4 begin
  5 open mycursor for  select * from plsql_dts_emp1 where ename in('zhangsan','zhangsan2');
  6 fetch mycursor into a;
  7 loop 
  8 exit when mycursor%notfound;
  9 dbe_output.print_line(a.ename||'sal is not 10000');
 10 fetch mycursor into a;
 11 end loop;
 12 dbe_sql.return_cursor(mycursor);
 13 end;
 14 /

Succeed.

SQL> 
SQL> exec plsql_dts_p1;

zhangsansal is not 10000
zhangsan2sal is not 10000
CT-00932, [1:2] PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with execute errors
[12:1] PL/SQL(GS_PLSQL_DTS.PLSQL_DTS_P1) terminated with execute errors
[12:1] PL/SQL(DBE_SQL.RETURN_CURSOR) terminated with execute errors
[12:23] CT-00905, The cursor was invalid.

SQL> 
SQL> 
SQL> create or replace procedure plsql_dts_p2 is 
  2 a plsql_dts_emp1%rowtype;
  3 mycursor sys_refcursor;
  4 begin
  5 open mycursor for  select * from plsql_dts_emp1 where ename in('zhangsan','zhangsan2');
  6 fetch mycursor into a;
  7 dbe_output.print_line(a.ename||':sal is not 10000');
  8 dbe_sql.return_cursor(mycursor);
  9 end;
 10 /

Succeed.

SQL> exec plsql_dts_p2;

zhangsan:sal is not 10000

PL/SQL procedure successfully completed.

ResultSet #1

EMPLOYEESNO  ENAME      JOB        SAL         
------------ ---------- ---------- ------------
2            zhangsan2  doctor2    10010       

1 rows fetched.


SQL> 
SQL> 
SQL> --eof cursor,fetch ok
SQL> create or replace procedure plsql_dts_p3 is 
  2 a plsql_dts_emp1%rowtype;
  3 mycursor sys_refcursor;
  4 begin
  5 open mycursor for  select * from plsql_dts_emp1 where ename in('zhangsan','zhangsan2');
  6 fetch mycursor into a;
  7 loop 
  8 exit when mycursor%notfound;
  9 dbe_output.print_line(a.ename||':sal is not 10000');
 10 fetch mycursor into a;
 11 end loop;
 12 fetch mycursor into a;
 13 end;
 14 /

Succeed.

SQL> 
SQL> exec plsql_dts_p3;

zhangsan:sal is not 10000
zhangsan2:sal is not 10000

PL/SQL procedure successfully completed.

SQL> 
SQL> --null,return_result success
SQL> create or replace procedure plsql_dts_p4 is 
  2 a plsql_dts_emp1%rowtype;
  3 mycursor sys_refcursor;
  4 begin
  5 open mycursor for  select * from plsql_dts_emp1 where ename in('zhangsan','zhangsan2') and 1=2;
  6 dbe_sql.return_cursor(mycursor);
  7 end;
  8 /

Succeed.

SQL> 
SQL> exec plsql_dts_p4;

PL/SQL procedure successfully completed.

ResultSet #1

EMPLOYEESNO  ENAME      JOB        SAL         
------------ ---------- ---------- ------------

0 rows fetched.


SQL> 
SQL> --eof cursor,return_result error
SQL> create or replace procedure plsql_dts_p5 is 
  2 a plsql_dts_emp1%rowtype;
  3 mycursor sys_refcursor;
  4 begin
  5 open mycursor for  select * from plsql_dts_emp1 where ename in('zhangsan','zhangsan2') and 1=2;
  6 fetch mycursor into a;
  7 dbe_sql.return_cursor(mycursor);
  8 end;
  9 /

Succeed.

SQL> 
SQL> exec plsql_dts_p5;

CT-00932, [1:2] PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with execute errors
[7:1] PL/SQL(GS_PLSQL_DTS.PLSQL_DTS_P5) terminated with execute errors
[7:1] PL/SQL(DBE_SQL.RETURN_CURSOR) terminated with execute errors
[7:23] CT-00905, The cursor was invalid.

SQL> --end
SQL> 
SQL> --DTS2018091501413
SQL> create or replace function c10(id text) return int as mm text; begin if id is null then (select id  from a                                                 limit 1); end if;end;
  2 /

Succeed.
Warning:
PL/SQL(GS_PLSQL_DTS.C10) terminated with compiling errors
[1:89] PLC-00934 Keyword(eg.select,update,delete,if,etc) expected but encounter bracket
[1:170] PLC-00920 Undefined symbol IF


SQL> --
SQL> drop table if exists zsharding_tbl_p1;

Succeed.

SQL> create table zsharding_tbl_p1(
  2 c_id int, c_int int, c_integer integer, c_bool bool, c_boolean boolean, c_bigint bigint,
  3 c_real real, c_double double,
  4 c_decimal decimal(38), c_number number(38), c_numeric numeric(38),
  5 c_char char(50) default null, c_varchar varchar(20), c_varchar2 varchar2(4000),
  6 c_date date, c_datetime datetime, c_timestamp timestamp,c_float float default null
  7 );

Succeed.

SQL> CREATE OR REPLACE FUNCTION F1 RETURN BOOL AS A BOOL ;
  2  BEGIN
  3  SELECT C_BOOL INTO A FROM ZSHARDING_TBL_P1 WHERE C_ID = 21;
  4  RETURN A;
  5  END F1;
  6  /

Succeed.

SQL>  DECLARE A BOOL;
  2  BEGIN
  3  SELECT F1()*10 INTO A FROM DUAL;
  4  dbe_output.print_line(A);
  5  END;
  6  /

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[3:14] PLC-01320 Undefined operator: BOOLEAN * BINARY_INTEGER

SQL> 
SQL> set charset gbk

GBK
SQL> drop table if exists FTV_substr_002;

Succeed.

SQL> create table FTV_substr_002(id blob,text clob);

Succeed.

SQL> insert into FTV_substr_002 values('1111','���ҵ�ma');

1 rows affected.

SQL> select DBE_LOB.get_length(id) from FTV_substr_002;

DBE_LOB.GET_LENGTH(ID)
----------------------
2                     

1 rows fetched.

SQL> select DBE_LOB.get_length(text) from FTV_substr_002;

DBE_LOB.GET_LENGTH(TEXT)
------------------------
5                       

1 rows fetched.

SQL> select DBE_LOB.substr(text,3,1) from FTV_substr_002;

DBE_LOB.SUBSTR(TEXT,3,1)                                        
----------------------------------------------------------------
���ҵ�                                                          

1 rows fetched.

SQL> select DBE_LOB.substr(text,3,4) from FTV_substr_002;

DBE_LOB.SUBSTR(TEXT,3,4)                                        
----------------------------------------------------------------
ma                                                              

1 rows fetched.

SQL> select DBE_LOB.substr(text,3,7) from FTV_substr_002;

DBE_LOB.SUBSTR(TEXT,3,7)                                        
----------------------------------------------------------------
                                                                

1 rows fetched.

SQL> select DBE_LOB.substr(text,3,10) from FTV_substr_002;

DBE_LOB.SUBSTR(TEXT,3,10)                                       
----------------------------------------------------------------
                                                                

1 rows fetched.

SQL> select DBE_LOB.substr(text,3,11) from FTV_substr_002;

DBE_LOB.SUBSTR(TEXT,3,11)                                       
----------------------------------------------------------------
                                                                

1 rows fetched.

SQL> select DBE_LOB.substr(id,1,1) from FTV_substr_002;

DBE_LOB.SUBSTR(ID,1,1)                                          
----------------------------------------------------------------
11                                                              

1 rows fetched.

SQL> select DBE_LOB.substr(id,2,1) from FTV_substr_002;

DBE_LOB.SUBSTR(ID,2,1)                                          
----------------------------------------------------------------
1111                                                            

1 rows fetched.

SQL> select DBE_LOB.substr(id,1,2) from FTV_substr_002;

DBE_LOB.SUBSTR(ID,1,2)                                          
----------------------------------------------------------------
11                                                              

1 rows fetched.

SQL> select DBE_LOB.substr(id,1,3) from FTV_substr_002;

DBE_LOB.SUBSTR(ID,1,3)                                          
----------------------------------------------------------------
                                                                

1 rows fetched.

SQL> drop table if exists FTV_substr_002;

Succeed.

SQL> 
SQL> --DTS2018103108873
SQL> set serveroutput on

ON
SQL> 
SQL> BEGIN
  2   THROW_EXCEPTION(-20000.49, 'user dinfe error');
  3 EXCEPTION
  4   WHEN OTHERS THEN
  5     dbe_output.print_line(SQL_ERR_CODE || ': ' || SQL_ERR_MSG);
  6 END;
  7 /

-20000: user dinfe error

PL/SQL procedure successfully completed.

SQL> 
SQL> set serveroutput on

ON
SQL> 
SQL> BEGIN
  2   THROW_EXCEPTION(-20000.5, 'user dinfe error');
  3 EXCEPTION
  4   WHEN OTHERS THEN
  5     dbe_output.print_line(SQL_ERR_CODE || ': ' || SQL_ERR_MSG);
  6 END;
  7 /

-20001: user dinfe error

PL/SQL procedure successfully completed.

SQL> 
SQL> BEGIN
  2   THROW_EXCEPTION('-20000'::number, 'user dinfe error');
  3 EXCEPTION
  4   WHEN OTHERS THEN
  5     dbe_output.print_line(SQL_ERR_CODE || ': ' || SQL_ERR_MSG);
  6 END;
  7 /

-20000: user dinfe error

PL/SQL procedure successfully completed.

SQL> 
SQL> BEGIN
  2   THROW_EXCEPTION('-20000', 'user dinfe error');
  3 EXCEPTION
  4   WHEN OTHERS THEN
  5     dbe_output.print_line(1);
  6     dbe_output.print_line(SQL_ERR_CODE || ': ' || SQL_ERR_MSG);
  7 END;
  8 /

1
-20000: user dinfe error

PL/SQL procedure successfully completed.

SQL> 
SQL> BEGIN
  2   THROW_EXCEPTION('-20000x', 'user dinfe error');
  3 EXCEPTION
  4   WHEN OTHERS THEN
  5     dbe_output.print_line(1);
  6     dbe_output.print_line(SQL_ERR_CODE || ': ' || SQL_ERR_MSG);
  7 END;
  8 /

1
636: Invalid number -- unexpected character

PL/SQL procedure successfully completed.

SQL> 
SQL> BEGIN
  2   THROW_EXCEPTION(TRUE, 'user dinfe error');
  3 EXCEPTION
  4   WHEN OTHERS THEN
  5     dbe_output.print_line(1);
  6     dbe_output.print_line(SQL_ERR_CODE || ': ' || SQL_ERR_MSG);
  7 END;
  8 /

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[2:19] PLC-00614 Parameter error: illegal function argument: integer argument expected - got BOOLEAN

SQL> 
SQL> BEGIN
  2   THROW_EXCEPTION(sysdate, 'user dinfe error');
  3 EXCEPTION
  4   WHEN OTHERS THEN
  5     dbe_output.print_line(1);
  6 END;
  7 /

CT-00944, PL/SQL(GS_PLSQL_DTS.ANONYMOUS BLOCK) terminated with compiling errors
[2:19] PLC-00614 Parameter error: illegal function argument: integer argument expected - got DATE

SQL> 
SQL> 
SQL> --DTS2018092906474 
SQL> DROP TABLE IF EXISTS t_001;

Succeed.

SQL> DROP TABLE IF EXISTS t_002;

Succeed.

SQL> drop view IF EXISTS v_001;

Succeed.

SQL> 
SQL> create table t_001(
  2 id int,
  3 dept_id varchar2(20),
  4 name varchar2(20)
  5 );

Succeed.

SQL> 
SQL> 
SQL> create table t_002(
  2 id int,
  3 name varchar2(20)
  4 );

Succeed.

SQL> 
SQL> insert into t_001 values(1,'01','huawei'),(2,'02','iss'),(3,'02','chain'),(4,'03','huawei');

4 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> create view v_001 as select id ,name from t_001;

Succeed.

SQL> 
SQL> 
SQL> drop table t_001;

Succeed.

SQL> 
SQL> CREATE OR REPLACE PROCEDURE P1(V_ID INT) IS
  2   V_NUM  INT;
  3   V_NAME VARCHAR2(2000);
  4   V_SQL  VARCHAR2(2000);
  5 BEGIN
  6   INSERT INTO t_002
  7   select * from v_001;
  8   COMMIT;
  9 END;
 10 /

Succeed.
Warning:
PL/SQL(GS_PLSQL_DTS.P1) terminated with compiling errors
[7:36] PLC-00843 The table or view GS_PLSQL_DTS.T_001 does not exist.


SQL> --DTS2018101204444
SQL> select 1+2+3+4+5+6+7+8+9+10+1+2+3+4+5+6+7+8 from dual;

1+2+3+4+5+6+7+8+9+10+1+2+3+4+5+6+7+8
------------------------------------
91                                  

1 rows fetched.

SQL> 
SQL> begin
  2   for item in (select * from v$session) loop
  3       null;
  4   end loop;
  5 end;
  6 /

PL/SQL procedure successfully completed.

SQL> 
SQL> --pltext exceed 64K test(create & replace)
SQL> create or replace procedure sp_RANCC_MBTSComPMU_C3 (
  2     v_PlanID in number ,
  3     v_MBTSID in varchar2 ,
  4     v_CMENEID in number ,
  5     v_PhyNEID in number ,
  6     v_SiteId in number  )
  7 as 
  8 begin
  9             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,NEType,ObjId) 
 10                 select v_PlanID, v_CMENEID, 'PMU', 'CMEMODE' || to_char(PN), 'BTSENVALMPORT', 'SW', v_MBTSID, b.CN, b.SRN, b.SN
 11                 , to_char(SW), '0', to_char(SW), '0', 'Switch on Port No.' || to_char(PN), 'G', sys_guid() from t_C_BTSENVALMPORT_C3 a, t_C_BTSBRD_C3 b where a.CMENEID = v_PhyNEID and a.CMENEID = b.CMENEID and a.BTSID = v_SiteId
 12                      and a.BTSID = b.BTSID and a.CN = b.CN and a.SRN = b.SRN
 13                      and a.SN = b.SN and BT = 114;
 14             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,NEType,ObjId) 
 15                 select v_PlanID, v_CMENEID, 'PMU', 'AVOL' || to_char(PN), 'BTSENVALMPORT', 'AVOL', v_MBTSID, b.CN, b.SRN, b.SN
 16                 , to_char(a.AVOL), '0', case 
 17                     when a.SW = 0 then 'NA' else to_char(case a.AVOL when 0 then 1 when 1 then 0 end
 18 ) end
 19 , '1', 'Alarm Voltage on Port No.' || to_char(PN), 'G', sys_guid() from t_C_BTSENVALMPORT_C3 a, t_C_BTSBRD_C3 b where a.CMENEID = v_PhyNEID and a.CMENEID = b.CMENEID and a.BTSID = v_SiteId
 20                      and a.BTSID = b.BTSID and a.CN = b.CN and a.SRN = b.SRN
 21                      and a.SN = b.SN and BT = 114;
 22             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
 23                 select v_PlanID, v_CMENEID, 'PMU', 'CFGFLAG', 'BTSAPMUBP', 'CFGFLAG', v_MBTSID, CN, SRN, SN
 24                 , to_char(CFGFLAG), '1', to_char(CFGFLAG), '1', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId;
 25             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
 26                 select v_PlanID, v_CMENEID, 'PMU', 'LFLG', 'BTSAPMUBP', 'HIGHTEMPLOADPWROFF', v_MBTSID, CN, SRN, SN
 27                 , to_char(HIGHTEMPLOADPWROFF), '170', to_char(case 
 28                     when HIGHTEMPLOADPWROFF = 170 then 0 else 1 end
 29 ), '0', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId;
 30             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
 31                 select v_PlanID, v_CMENEID, 'PMU', 'LTEM', 'BTSAPMUBP', 'TEMPOFHIGHTEMPLOADPWROFF', v_MBTSID, CN, SRN, SN
 32                 , to_char(TEMPOFHIGHTEMPLOADPWROFF), to_char(65), to_char(TEMPOFHIGHTEMPLOADPWROFF), to_char(65), 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and HIGHTEMPLOADPWROFF = 170;
 33             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
 34                 select v_PlanID, v_CMENEID, 'PMU', 'HTSDF', 'BTSAPMUBP', 'HTSDF', v_MBTSID, CN, SRN, SN
 35                 , to_char(HTSDF), '1', to_char(HTSDF), '1', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId;
 36             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
 37                 select v_PlanID, v_CMENEID, 'PMU', 'SDT', 'BTSAPMUBP', 'SDT', v_MBTSID, CN, SRN, SN
 38                 , to_char(SDT), to_char(53), to_char(SDT), to_char(53), 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and HTSDF = 1;
 39             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId) 
 40                 select v_PlanID, v_CMENEID, 'PMU', 'BT1_DISABLE', 'BTSAPMUBP', 'SAAF', v_MBTSID, CN, SRN, SN
 41                 , to_char(case 
 42                     when (bitand((case 
 43                     when SAAF is NULL then 0 else SAAF end
 44 ), 1)) = 0 then 0 else 1 end
 45 ), case 
 46                     when PTYPE in  (2, 3, 5) then '0' else '1' end
 47 , to_char(case 
 48                     when (bitand((case 
 49                     when SAAF is NULL then 0 else SAAF end
 50 ), 1)) = 0 then 0 else 1 end
 51 ), case 
 52                     when PTYPE in  (2, 3, 5) then '0' else '1' end
 53 , 'Special Analog Alarm Flag(Battery Temperature Sensor 1 Disabled)', '1', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and ALMENABLE = 1;
 54             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId) 
 55                 select v_PlanID, v_CMENEID, 'PMU', 'AH_DISABLE', 'BTSAPMUBP', 'SAAF', v_MBTSID, CN, SRN, SN
 56                 , to_char(case 
 57                     when (bitand((case 
 58                     when SAAF is NULL then 0 else SAAF end
 59 ), 2)) = 0 then 0 else 1 end
 60 ), case 
 61                     when PTYPE in  (7) then '0' else '1' end
 62 , to_char(case 
 63                     when (bitand((case 
 64                     when SAAF is NULL then 0 else SAAF end
 65 ), 2)) = 0 then 0 else 1 end
 66 ), case 
 67                     when PTYPE in  (7) then '0' else '1' end
 68 , 'Special Analog Alarm Flag(Cabinet Humidity Sensor Disabled)', '2', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and ALMENABLE = 1;
 69             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId) 
 70                 select v_PlanID, v_CMENEID, 'PMU', 'AT1_DISABLE', 'BTSAPMUBP', 'SAAF', v_MBTSID, CN, SRN, SN
 71                 , to_char(case 
 72                     when (bitand((case 
 73                     when SAAF is NULL then 0 else SAAF end
 74 ), 4)) = 0 then 0 else 1 end
 75 ), case 
 76                     when PTYPE in  (0, 1, 7) then '0' else '1' end
 77 , to_char(case 
 78                     when (bitand((case 
 79                     when SAAF is NULL then 0 else SAAF end
 80 ), 4)) = 0 then 0 else 1 end
 81 ), case 
 82                     when PTYPE in  (0, 1, 7) then '0' else '1' end
 83 , 'Special Analog Alarm Flag(Cabinet Temperature Sensor 1 Disabled)', '4', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and ALMENABLE = 1;
 84             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId) 
 85                 select v_PlanID, v_CMENEID, 'PMU', 'AT2_DISABLE', 'BTSAPMUBP', 'SAAF', v_MBTSID, CN, SRN, SN
 86                 , to_char(case 
 87                     when (bitand((case 
 88                     when SAAF is NULL then 0 else SAAF end
 89 ), 8)) = 0 then 0 else 1 end
 90 ), '1', to_char(case 
 91                     when (bitand((case 
 92                     when SAAF is NULL then 0 else SAAF end
 93 ), 8)) = 0 then 0 else 1 end
 94 ), '1', 'Special Analog Alarm Flag(Cabinet Temperature Sensor 2 Disabled)', '8', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and ALMENABLE = 1;
 95             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId) 
 96                 select v_PlanID, v_CMENEID, 'PMU', 'BT2_DISABLE', 'BTSAPMUBP', 'SAAF', v_MBTSID, CN, SRN, SN
 97                 , to_char(case 
 98                     when (bitand((case 
 99                     when SAAF is NULL then 0 else SAAF end
100 ), 16)) = 0 then 0 else 1 end
101 ), '1', to_char(case 
102                     when (bitand((case 
103                     when SAAF is NULL then 0 else SAAF end
104 ), 16)) = 0 then 0 else 1 end
105 ), '1', 'Special Analog Alarm Flag(Battery Temperature Sensor 2 Disabled)', to_char(16), 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and ALMENABLE = 1;
106             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId) 
107                 select v_PlanID, v_CMENEID, 'PMU', 'WS_DISABLE', 'BTSAPMUBP', 'SBAF', v_MBTSID, CN, SRN, SN
108                 , to_char(case 
109                     when (bitand((case 
110                     when SBAF is NULL then 0 else SBAF end
111 ), 1)) = 0 then 0 else 1 end
112 ), case 
113                     when PTYPE in  (7) then '0' else '1' end
114 , to_char(case 
115                     when (bitand((case 
116                     when SBAF is NULL then 0 else SBAF end
117 ), 1)) = 0 then 0 else 1 end
118 ), case 
119                     when PTYPE in  (7) then '0' else '1' end
120 , 'Special Boolean Alarm Flag(Water-Immersed Sensor Disabled)', '1', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and ALMENABLE = 1;
121             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId) 
122                 select v_PlanID, v_CMENEID, 'PMU', 'SS_DISABLE', 'BTSAPMUBP', 'SBAF', v_MBTSID, CN, SRN, SN
123                 , to_char(case 
124                     when (bitand((case 
125                     when SBAF is NULL then 0 else SBAF end
126 ), 2)) = 0 then 0 else 1 end
127 ), case 
128                     when PTYPE in  (7) then '0' else '1' end
129 , to_char(case 
130                     when (bitand((case 
131                     when SBAF is NULL then 0 else SBAF end
132 ), 2)) = 0 then 0 else 1 end
133 ), case 
134                     when PTYPE in  (7) then '0' else '1' end
135 , 'Special Boolean Alarm Flag(Smog Sensor Disabled)', '2', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and ALMENABLE = 1;
136             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId) 
137                 select v_PlanID, v_CMENEID, 'PMU', 'GS_DISABLE', 'BTSAPMUBP', 'SBAF', v_MBTSID, CN, SRN, SN
138                 , to_char(case 
139                     when (bitand((case 
140                     when SBAF is NULL then 0 else SBAF end
141 ), 4)) = 0 then 0 else 1 end
142 ), case 
143                     when PTYPE in  (0, 1, 2, 7) then '0' else '1' end
144 , to_char(case 
145                     when (bitand((case 
146                     when SBAF is NULL then 0 else SBAF end
147 ), 4)) = 0 then 0 else 1 end
148 ), case 
149                     when PTYPE in  (0, 1, 2, 7) then '0' else '1' end
150 , 'Special Boolean Alarm Flag(Gating Sensor Disabled)', '4', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and ALMENABLE = 1;
151             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
152                 select v_PlanID, v_CMENEID, 'PMU', 'PTYPE', 'BTSAPMUBP', 'PTYPE', v_MBTSID, CN, SRN, SN
153                 , to_char(PTYPE), '2', to_char(PTYPE), '2', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId;
154             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
155                 select v_PlanID, v_CMENEID, 'PMU', 'BTYPE', 'BTSAPMUBP', 'BTYPE', v_MBTSID, CN, SRN, SN
156                 , to_char(BTYPE), '255', to_char(BTYPE), '255', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and BE = 1;
157             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
158                 select v_PlanID, v_CMENEID, 'PMU', 'BCLC', 'BTSAPMUBP', 'BCLC', v_MBTSID, CN, SRN, SN
159                 , to_char(BCLC), to_char(15), to_char(BCLC), to_char(15), 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and BE = 1;
160             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
161                 select v_PlanID, v_CMENEID, 'PMU', 'BC1', 'BTSAPMUBP', 'BC', v_MBTSID, CN, SRN, SN
162                 , to_char(BC), to_char(36), to_char(BC), to_char(36), 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and BE = 1;
163             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
164                 select v_PlanID, v_CMENEID, 'PMU', 'BN', 'BTSAPMUBP', 'BN', v_MBTSID, CN, SRN, SN
165                 , to_char(BN), '1', to_char(BN), '1', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and BE = 1
166                      and BTYPE = 2;
167             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
168                 select v_PlanID, v_CMENEID, 'PMU', 'LSDV', 'BTSAPMUBP', 'LSDV', v_MBTSID, CN, SRN, SN
169                 , to_char(LSDV), '440', to_char(LSDV), '440', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and HPVFLAG = 1;
170             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
171                 select v_PlanID, v_CMENEID, 'PMU', 'BCV', 'BTSAPMUBP', 'BCV', v_MBTSID, CN, SRN, SN
172                 , to_char(BCV), '565', to_char(BCV), '565', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and HPVFLAG = 1;
173             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
174                 select v_PlanID, v_CMENEID, 'PMU', 'FCV', 'BTSAPMUBP', 'FCV', v_MBTSID, CN, SRN, SN
175                 , to_char(FCV), '535', to_char(FCV), '535', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and HPVFLAG = 1;
176             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
177                 select v_PlanID, v_CMENEID, 'PMU', 'LSDF', 'BTSAPMUBP', 'LSDF', v_MBTSID, CN, SRN, SN
178                 , to_char(LSDF), '0', to_char(LSDF), '0', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and HPVFLAG = 1;
179             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
180                 select v_PlanID, v_CMENEID, 'PMU', 'LVSDF', 'BTSAPMUBP', 'LVSDF', v_MBTSID, CN, SRN, SN
181                 , to_char(LVSDF), '1', to_char(LVSDF), '1', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and HPVFLAG = 1;
182             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
183                 select v_PlanID, v_CMENEID, 'PMU', 'SDV', 'BTSAPMUBP', 'SDV', v_MBTSID, CN, SRN, SN
184                 , to_char(SDV), '430', to_char(SDV), '430', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and HPVFLAG = 1;
185             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
186                 select v_PlanID, v_CMENEID, 'PMU', 'LOWTEMPLOADPWROFF', 'BTSAPMUBP', 'LOWTEMPLOADPWROFF', v_MBTSID, CN, SRN, SN
187                 , to_char(LOWTEMPLOADPWROFF), to_char(85), to_char(LOWTEMPLOADPWROFF), to_char(85), 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and HPVFLAG = 1;
188             
189             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId,RelatedField) 
190                 select v_PlanID, v_CMENEID, 'PMU', 'BT1_DISABLE', 'BTSAPMUBP', 'SAAF', v_MBTSID, CN, SRN, SN
191                 , to_char(case 
192                     when (bitand((case 
193                     when SAAF is NULL then 0 else SAAF end
194 ), 1)) = 0 then 0 else 1 end
195 ), case 
196                     when PTYPE in  (2, 3, 5) then '0' else '1' end
197 , to_char(case 
198                     when (bitand((case 
199                     when SAAF is NULL then 0 else SAAF end
200 ), 1)) = 0 then 0 else 1 end
201 ), case 
202                     when PTYPE in  (2, 3, 5) then '0' else '1' end
203 , 'Special Analog Alarm Flag(Battery Temperature Sensor 1 Disabled)', '1', 'G', sys_guid(), 'ALMENABLE = 1' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId
204                      and ALMENABLE = 1;
205             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId,RelatedField) 
206                 select v_PlanID, v_CMENEID, 'PMU', 'AH_DISABLE', 'BTSAPMUBP', 'SAAF', v_MBTSID, CN, SRN, SN
207                 , to_char(case 
208                     when (bitand((case 
209                     when SAAF is NULL then 0 else SAAF end
210 ), 2)) = 0 then 0 else 1 end
211 ), case 
212                     when PTYPE in  (7) then '0' else '1' end
213 , to_char(case 
214                     when (bitand((case 
215                     when SAAF is NULL then 0 else SAAF end
216 ), 2)) = 0 then 0 else 1 end
217 ), case 
218                     when PTYPE in  (7) then '0' else '1' end
219 , 'Special Analog Alarm Flag(Cabinet Humidity Sensor Disabled)', '2', 'G', sys_guid(), 'ALMENABLE = 1' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId
220                      and ALMENABLE = 1;
221             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId,RelatedField) 
222                 select v_PlanID, v_CMENEID, 'PMU', 'AT1_DISABLE', 'BTSAPMUBP', 'SAAF', v_MBTSID, CN, SRN, SN
223                 , to_char(case 
224                     when (bitand((case 
225                     when SAAF is NULL then 0 else SAAF end
226 ), 4)) = 0 then 0 else 1 end
227 ), case 
228                     when PTYPE in  (0, 1, 7) then '0' else '1' end
229 , to_char(case 
230                     when (bitand((case 
231                     when SAAF is NULL then 0 else SAAF end
232 ), 4)) = 0 then 0 else 1 end
233 ), case 
234                     when PTYPE in  (0, 1, 7) then '0' else '1' end
235 , 'Special Analog Alarm Flag(Cabinet Temperature Sensor 1 Disabled)', '4', 'G', sys_guid(), 'ALMENABLE = 1' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId
236                      and ALMENABLE = 1;
237             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId,RelatedField) 
238                 select v_PlanID, v_CMENEID, 'PMU', 'AT2_DISABLE', 'BTSAPMUBP', 'SAAF', v_MBTSID, CN, SRN, SN
239                 , to_char(case 
240                     when (bitand((case 
241                     when SAAF is NULL then 0 else SAAF end
242 ), 8)) = 0 then 0 else 1 end
243 ), '1', to_char(case 
244                     when (bitand((case 
245                     when SAAF is NULL then 0 else SAAF end
246 ), 8)) = 0 then 0 else 1 end
247 ), '1', 'Special Analog Alarm Flag(Cabinet Temperature Sensor 2 Disabled)', '8', 'G', sys_guid(), 'ALMENABLE = 1' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId
248                      and ALMENABLE = 1;
249             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId,RelatedField) 
250                 select v_PlanID, v_CMENEID, 'PMU', 'BT2_DISABLE', 'BTSAPMUBP', 'SAAF', v_MBTSID, CN, SRN, SN
251                 , to_char(case 
252                     when (bitand((case 
253                     when SAAF is NULL then 0 else SAAF end
254 ), 16)) = 0 then 0 else 1 end
255 ), '1', to_char(case 
256                     when (bitand((case 
257                     when SAAF is NULL then 0 else SAAF end
258 ), 16)) = 0 then 0 else 1 end
259 ), '1', 'Special Analog Alarm Flag(Battery Temperature Sensor 2 Disabled)', to_char(16), 'G', sys_guid(), 'ALMENABLE = 1' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId
260                      and ALMENABLE = 1;
261             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId,RelatedField) 
262                 select v_PlanID, v_CMENEID, 'PMU', 'WS_DISABLE', 'BTSAPMUBP', 'SBAF', v_MBTSID, CN, SRN, SN
263                 , to_char(case 
264                     when (bitand((case 
265                     when SBAF is NULL then 0 else SBAF end
266 ), 1)) = 0 then 0 else 1 end
267 ), case 
268                     when PTYPE in  (7) then '0' else '1' end
269 , to_char(case 
270                     when (bitand((case 
271                     when SBAF is NULL then 0 else SBAF end
272 ), 1)) = 0 then 0 else 1 end
273 ), case 
274                     when PTYPE in  (7) then '0' else '1' end
275 , 'Special Boolean Alarm Flag(Water-Immersed Sensor Disabled)', '1', 'G', sys_guid(), 'ALMENABLE = 1' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId
276                      and ALMENABLE = 1;
277             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId,RelatedField) 
278                 select v_PlanID, v_CMENEID, 'PMU', 'SS_DISABLE', 'BTSAPMUBP', 'SBAF', v_MBTSID, CN, SRN, SN
279                 , to_char(case 
280                     when (bitand((case 
281                     when SBAF is NULL then 0 else SBAF end
282 ), 2)) = 0 then 0 else 1 end
283 ), case 
284                     when PTYPE in  (7) then '0' else '1' end
285 , to_char(case 
286                     when (bitand((case 
287                     when SBAF is NULL then 0 else SBAF end
288 ), 2)) = 0 then 0 else 1 end
289 ), case 
290                     when PTYPE in  (7) then '0' else '1' end
291 , 'Special Boolean Alarm Flag(Smog Sensor Disabled)', '2', 'G', sys_guid(), 'ALMENABLE = 1' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId
292                      and ALMENABLE = 1;
293             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId,RelatedField) 
294                 select v_PlanID, v_CMENEID, 'PMU', 'GS_DISABLE', 'BTSAPMUBP', 'SBAF', v_MBTSID, CN, SRN, SN
295                 , to_char(case 
296                     when (bitand((case 
297                     when SBAF is NULL then 0 else SBAF end
298 ), 4)) = 0 then 0 else 1 end
299 ), case 
300                     when PTYPE in  (0, 1, 2, 7) then '0' else '1' end
301 , to_char(case 
302                     when (bitand((case 
303                     when SBAF is NULL then 0 else SBAF end
304 ), 4)) = 0 then 0 else 1 end
305 ), case 
306                     when PTYPE in  (0, 1, 2, 7) then '0' else '1' end
307 , 'Special Boolean Alarm Flag(Gating Sensor Disabled)', '4', 'G', sys_guid(), 'ALMENABLE = 1' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId
308                      and ALMENABLE = 1;
309             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
310                 select v_PlanID, v_CMENEID, 'PMU', 'PTYPE', 'BTSAPMUBP', 'PTYPE', v_MBTSID, CN, SRN, SN
311                 , to_char(PTYPE), '2', to_char(PTYPE), '2', 'G', sys_guid() from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
312             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
313                 select v_PlanID, v_CMENEID, 'PMU', 'BTYPE', 'BTSAPMUBP', 'BTYPE', v_MBTSID, CN, SRN, SN
314                 ,  nvl(to_char(BTYPE), '255'), '255', case 
315                     when BE = 0 then '255' else to_char(BTYPE) end
316 , '255', 'G', sys_guid(), 'BE = 1,BCLC = case when BTYPE = 2 then null else nvl(BCLC,15) end, BC = case when BTYPE = 2 then null else nvl(BC,36) end' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
317             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
318                 select v_PlanID, v_CMENEID, 'PMU', 'BCLC', 'BTSAPMUBP', 'BCLC', v_MBTSID, CN, SRN, SN
319                 , to_char(BCLC), to_char(15), case 
320                     when  (BE = 0 or BTYPE = 255 ) then 'NA' else to_char(BCLC) end
321 , to_char(15), 'G', sys_guid(), 'BE = 1,BTYPE = nvl(BTYPE,255), BC = nvl(BC,36)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
322             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
323                 select v_PlanID, v_CMENEID, 'PMU', 'BC1', 'BTSAPMUBP', 'BC', v_MBTSID, CN, SRN, SN
324                 , to_char(BC), to_char(36), case 
325                     when  (BE = 0 or BTYPE = 255 ) then 'NA' else to_char(BC) end
326 , to_char(36), 'G', sys_guid(), 'BE = 1,BTYPE = nvl(BTYPE,255),BCLC = nvl(BCLC,15)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
327             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
328                 select v_PlanID, v_CMENEID, 'PMU', 'BN', 'BTSAPMUBP', 'BN', v_MBTSID, CN, SRN, SN
329                 , to_char(BN), '1', case 
330                     when  (BE = 0 or BTYPE in  (255, 0, 1) ) then 'NA' else to_char(BN) end
331 , '1', 'G', sys_guid(), 'BE = 1' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
332             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
333                 select v_PlanID, v_CMENEID, 'PMU', 'LSDV', 'BTSAPMUBP', 'LSDV', v_MBTSID, CN, SRN, SN
334                 , to_char(to_number(LSDV)), '440', case 
335                     when HPVFLAG = 0 or LSDF = 0 then 'NA' else to_char(to_number(LSDV)) end
336 , '440', 'G', sys_guid(), 'HPVFLAG = 1,BCV=nvl(BCV,565) ,FCV =nvl(FCV,535) ,LSDF=nvl(LSDF,0),LVSDF=nvl(LVSDF,1), SDV= nvl(SDV,430), LOWTEMPLOADPWROFF=nvl(LOWTEMPLOADPWROFF,85),TEMPOFLOWTEMPLOADPWROFF=nvl(TEMPOFLOWTEMPLOADPWROFF,-100),ACVUTHD=nvl(ACVUTHD,280),ACVLTHD=nvl(ACVLTHD,180),DCVUTHD=nvl(DCVUTHD,580),DCVLTHD=nvl(DCVLTHD,450)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
337             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
338                 select v_PlanID, v_CMENEID, 'PMU', 'BCV', 'BTSAPMUBP', 'BCV', v_MBTSID, CN, SRN, SN
339                 , to_char(to_number(BCV)), '565', case 
340                     when HPVFLAG = 0 then 'NA' else to_char(to_number(BCV)) end
341 , '565', 'G', sys_guid(), 'HPVFLAG = 1,LSDV = nvl(LSDV,440) ,FCV =nvl(FCV,535) ,LSDF=nvl(LSDF,0),LVSDF=nvl(LVSDF,1), SDV= nvl(SDV,430), LOWTEMPLOADPWROFF=nvl(LOWTEMPLOADPWROFF,85),TEMPOFLOWTEMPLOADPWROFF=nvl(TEMPOFLOWTEMPLOADPWROFF,-100),ACVUTHD=nvl(ACVUTHD,280),ACVLTHD=nvl(ACVLTHD,180),DCVUTHD=nvl(DCVUTHD,580),DCVLTHD=nvl(DCVLTHD,450)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
342             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
343                 select v_PlanID, v_CMENEID, 'PMU', 'FCV', 'BTSAPMUBP', 'FCV', v_MBTSID, CN, SRN, SN
344                 , to_char(to_number(FCV)), '535', case 
345                     when HPVFLAG = 0 then 'NA' else to_char(to_number(FCV)) end
346 , '535', 'G', sys_guid(), 'HPVFLAG = 1,LSDV = nvl(LSDV,440) ,BCV=nvl(BCV,565) ,LSDF=nvl(LSDF,0),LVSDF=nvl(LVSDF,1), SDV= nvl(SDV,430), LOWTEMPLOADPWROFF=nvl(LOWTEMPLOADPWROFF,85),TEMPOFLOWTEMPLOADPWROFF=nvl(TEMPOFLOWTEMPLOADPWROFF,-100),ACVUTHD=nvl(ACVUTHD,280),ACVLTHD=nvl(ACVLTHD,180),DCVUTHD=nvl(DCVUTHD,580),DCVLTHD=nvl(DCVLTHD,450)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
347             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
348                 select v_PlanID, v_CMENEID, 'PMU', 'LSDF', 'BTSAPMUBP', 'LSDF', v_MBTSID, CN, SRN, SN
349                 , to_char(LSDF), '0', case 
350                     when HPVFLAG = 0 then 'NA' else to_char(LSDF) end
351 , '0', 'G', sys_guid(), 'HPVFLAG = 1,LSDV = nvl(LSDV,440) ,BCV=nvl(BCV,565) ,FCV =nvl(FCV,535) ,LVSDF=nvl(LVSDF,1), SDV= nvl(SDV,430), LOWTEMPLOADPWROFF=nvl(LOWTEMPLOADPWROFF,85),TEMPOFLOWTEMPLOADPWROFF=nvl(TEMPOFLOWTEMPLOADPWROFF,-100),ACVUTHD=nvl(ACVUTHD,280),ACVLTHD=nvl(ACVLTHD,180),DCVUTHD=nvl(DCVUTHD,580),DCVLTHD=nvl(DCVLTHD,450)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
352             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
353                 select v_PlanID, v_CMENEID, 'PMU', 'LVSDF', 'BTSAPMUBP', 'LVSDF', v_MBTSID, CN, SRN, SN
354                 , to_char(LVSDF), '1', case 
355                     when HPVFLAG = 0 then 'NA' else to_char(LVSDF) end
356 , '1', 'G', sys_guid(), 'HPVFLAG = 1,LSDV = nvl(LSDV,440) ,BCV=nvl(BCV,565) ,FCV =nvl(FCV,535) ,LSDF=nvl(LSDF,0), SDV= nvl(SDV,430), LOWTEMPLOADPWROFF=nvl(LOWTEMPLOADPWROFF,85),TEMPOFLOWTEMPLOADPWROFF=nvl(TEMPOFLOWTEMPLOADPWROFF,-100),ACVUTHD=nvl(ACVUTHD,280),ACVLTHD=nvl(ACVLTHD,180),DCVUTHD=nvl(DCVUTHD,580),DCVLTHD=nvl(DCVLTHD,450)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
357             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
358                 select v_PlanID, v_CMENEID, 'PMU', 'SDV', 'BTSAPMUBP', 'SDV', v_MBTSID, CN, SRN, SN
359                 , to_char(SDV), '430', case 
360                     when HPVFLAG = 0 or LVSDF = 0 then 'NA' else to_char(SDV) end
361 , '430', 'G', sys_guid(), 'HPVFLAG = 1,LSDV = nvl(LSDV,440) ,BCV=nvl(BCV,565) ,FCV =nvl(FCV,535) ,LSDF=nvl(LSDF,0),LVSDF=nvl(LVSDF,1), LOWTEMPLOADPWROFF=nvl(LOWTEMPLOADPWROFF,85),TEMPOFLOWTEMPLOADPWROFF=nvl(TEMPOFLOWTEMPLOADPWROFF,-100),ACVUTHD=nvl(ACVUTHD,280),ACVLTHD=nvl(ACVLTHD,180),DCVUTHD=nvl(DCVUTHD,580),DCVLTHD=nvl(DCVLTHD,450)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
362             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
363                 select v_PlanID, v_CMENEID, 'PMU', 'LOWTEMPLOADPWROFF', 'BTSAPMUBP', 'LOWTEMPLOADPWROFF', v_MBTSID, CN, SRN, SN
364                 , to_char(LOWTEMPLOADPWROFF), to_char(85), case 
365                     when HPVFLAG = 0 then 'NA' else to_char(LOWTEMPLOADPWROFF) end
366 , to_char(85), 'G', sys_guid(), 'HPVFLAG = 1,LSDV = nvl(LSDV,440) ,BCV=nvl(BCV,565) ,FCV =nvl(FCV,535) ,LSDF=nvl(LSDF,0),LVSDF=nvl(LVSDF,1), SDV= nvl(SDV,430), TEMPOFLOWTEMPLOADPWROFF=nvl(TEMPOFLOWTEMPLOADPWROFF,-100),ACVUTHD=nvl(ACVUTHD,280),ACVLTHD=nvl(ACVLTHD,180),DCVUTHD=nvl(DCVUTHD,580),DCVLTHD=nvl(DCVLTHD,450)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
367             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
368                 select v_PlanID, v_CMENEID, 'PMU', 'TEMPOFLOWTEMPLOADPWROFF', 'BTSAPMUBP', 'TEMPOFLOWTEMPLOADPWROFF', v_MBTSID, CN, SRN, SN
369                 , to_char(TEMPOFLOWTEMPLOADPWROFF), '-100', case 
370                     when HPVFLAG = 0 then 'NA' else to_char(TEMPOFLOWTEMPLOADPWROFF) end
371 , '-100', 'G', sys_guid(), 'HPVFLAG = 1,LSDV = nvl(LSDV,440) ,BCV=nvl(BCV,565) ,FCV =nvl(FCV,535) ,LSDF=nvl(LSDF,0),LVSDF=nvl(LVSDF,1), SDV= nvl(SDV,430), LOWTEMPLOADPWROFF=nvl(LOWTEMPLOADPWROFF,85),ACVUTHD=nvl(ACVUTHD,280),ACVLTHD=nvl(ACVLTHD,180),DCVUTHD=nvl(DCVUTHD,580),DCVLTHD=nvl(DCVLTHD,450)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
372             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
373                 select v_PlanID, v_CMENEID, 'PMU', 'ACVUTHD', 'BTSAPMUBP', 'ACVUTHD', v_MBTSID, CN, SRN, SN
374                 , to_char(ACVUTHD), '280', case 
375                     when HPVFLAG = 0 then 'NA' else to_char(ACVUTHD) end
376 , '280', 'G', sys_guid(), 'HPVFLAG = 1,LSDV = nvl(LSDV,440) ,BCV=nvl(BCV,565) ,FCV =nvl(FCV,535) ,LSDF=nvl(LSDF,0),LVSDF=nvl(LVSDF,1), SDV= nvl(SDV,430), LOWTEMPLOADPWROFF=nvl(LOWTEMPLOADPWROFF,85),TEMPOFLOWTEMPLOADPWROFF=nvl(TEMPOFLOWTEMPLOADPWROFF,-100),ACVLTHD=nvl(ACVLTHD,180),DCVUTHD=nvl(DCVUTHD,580),DCVLTHD=nvl(DCVLTHD,450)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
377             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
378                 select v_PlanID, v_CMENEID, 'PMU', 'ACVLTHD', 'BTSAPMUBP', 'ACVLTHD', v_MBTSID, CN, SRN, SN
379                 , to_char(ACVLTHD), '180', case 
380                     when HPVFLAG = 0 then 'NA' else to_char(ACVLTHD) end
381 , '180', 'G', sys_guid(), 'HPVFLAG = 1,LSDV = nvl(LSDV,440) ,BCV=nvl(BCV,565) ,FCV =nvl(FCV,535) ,LSDF=nvl(LSDF,0),LVSDF=nvl(LVSDF,1), SDV= nvl(SDV,430), LOWTEMPLOADPWROFF=nvl(LOWTEMPLOADPWROFF,85),TEMPOFLOWTEMPLOADPWROFF=nvl(TEMPOFLOWTEMPLOADPWROFF,-100),ACVUTHD=nvl(ACVUTHD,280),DCVUTHD=nvl(DCVUTHD,580),DCVLTHD=nvl(DCVLTHD,450)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
382             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
383                 select v_PlanID, v_CMENEID, 'PMU', 'DCVUTHD', 'BTSAPMUBP', 'DCVUTHD', v_MBTSID, CN, SRN, SN
384                 , to_char(to_number(DCVUTHD)), '580', case 
385                     when HPVFLAG = 0 then 'NA' else to_char(to_number(DCVUTHD)) end
386 , '580', 'G', sys_guid(), 'HPVFLAG = 1,LSDV = nvl(LSDV,440) ,BCV=nvl(BCV,565) ,FCV =nvl(FCV,535) ,LSDF=nvl(LSDF,0),LVSDF=nvl(LVSDF,1), SDV= nvl(SDV,430), LOWTEMPLOADPWROFF=nvl(LOWTEMPLOADPWROFF,85),TEMPOFLOWTEMPLOADPWROFF=nvl(TEMPOFLOWTEMPLOADPWROFF,-100),ACVUTHD=nvl(ACVUTHD,280),ACVLTHD=nvl(ACVLTHD,180),DCVLTHD=nvl(DCVLTHD,450)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
387             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
388                 select v_PlanID, v_CMENEID, 'PMU', 'DCVLTHD', 'BTSAPMUBP', 'DCVLTHD', v_MBTSID, CN, SRN, SN
389                 , to_char(to_number(DCVLTHD)), '450', case 
390                     when HPVFLAG = 0 then 'NA' else to_char(to_number(DCVLTHD)) end
391 , '450', 'G', sys_guid(), 'HPVFLAG = 1, LSDV = nvl(LSDV,440), BCV=nvl(BCV,565) ,FCV =nvl(FCV,535), LSDF=nvl(LSDF,0), LVSDF=nvl(LVSDF,1), SDV= nvl(SDV,430), LOWTEMPLOADPWROFF=nvl(LOWTEMPLOADPWROFF,85), TEMPOFLOWTEMPLOADPWROFF=nvl(TEMPOFLOWTEMPLOADPWROFF,-100), ACVUTHD=nvl(ACVUTHD,280), ACVLTHD=nvl(ACVLTHD,180), DCVUTHD=nvl(DCVUTHD,580)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
392             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
393                 select v_PlanID, v_CMENEID, 'PMU', 'TUL', 'BTSAPMUBP', 'CELLTEMP1THRESHOLDH', v_MBTSID, CN, SRN, SN
394                 , to_char(CELLTEMP1THRESHOLDH), '800', case 
395                     when CELLTEMPCOMPENABLED = 0 then 'NA' else to_char(CELLTEMP1THRESHOLDH) end
396 , '800', 'G', sys_guid(), 'CELLTEMPCOMPENABLED = 1,CELLTEMP1THRESHOLDL = nvl(CELLTEMP1THRESHOLDL,-200),TUTHD=nvl(TUTHD,50),TLTHD =nvl(TLTHD ,-19),TCC= nvl(TCC,80),BASETEMPERATURE=nvl(BASETEMPERATURE,170)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
397             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
398                 select v_PlanID, v_CMENEID, 'PMU', 'TLL', 'BTSAPMUBP', 'CELLTEMP1THRESHOLDL', v_MBTSID, CN, SRN, SN
399                 , to_char(CELLTEMP1THRESHOLDL), '-200', case 
400                     when CELLTEMPCOMPENABLED = 0 then 'NA' else to_char(CELLTEMP1THRESHOLDL) end
401 , '-200', 'G', sys_guid(), 'CELLTEMPCOMPENABLED = 1,CELLTEMP1THRESHOLDH =nvl(CELLTEMP1THRESHOLDH,800),TUTHD=nvl(TUTHD,50),TLTHD =nvl(TLTHD ,-19),TCC= nvl(TCC,80),BASETEMPERATURE=nvl(BASETEMPERATURE,170)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
402             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
403                 select v_PlanID, v_CMENEID, 'PMU', 'TUTHD', 'BTSAPMUBP', 'TUTHD', v_MBTSID, CN, SRN, SN
404                 , to_char(TUTHD), to_char(55), case 
405                     when CELLTEMPCOMPENABLED = 0 then 'NA' else to_char(TUTHD) end
406 , to_char(55), 'G', sys_guid(), 'CELLTEMPCOMPENABLED = 1,CELLTEMP1THRESHOLDH =nvl(CELLTEMP1THRESHOLDH,800),CELLTEMP1THRESHOLDL = nvl(CELLTEMP1THRESHOLDL,-200),TLTHD =nvl(TLTHD ,-19),TCC= nvl(TCC,80),BASETEMPERATURE=nvl(BASETEMPERATURE,170)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
407             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
408                 select v_PlanID, v_CMENEID, 'PMU', 'TLTHD', 'BTSAPMUBP', 'TLTHD', v_MBTSID, CN, SRN, SN
409                 , to_char(TLTHD), '-19', case 
410                     when CELLTEMPCOMPENABLED = 0 then 'NA' else to_char(TLTHD) end
411 , '-19', 'G', sys_guid(), 'CELLTEMPCOMPENABLED = 1,CELLTEMP1THRESHOLDH =nvl(CELLTEMP1THRESHOLDH,800),CELLTEMP1THRESHOLDL = nvl(CELLTEMP1THRESHOLDL,-200),TUTHD=nvl(TUTHD,50),TCC= nvl(TCC,80),BASETEMPERATURE=nvl(BASETEMPERATURE,170)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
412             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
413                 select v_PlanID, v_CMENEID, 'PMU', 'TCC', 'BTSAPMUBP', 'TCC', v_MBTSID, CN, SRN, SN
414                 , to_char(TCC), to_char(80), case 
415                     when CELLTEMPCOMPENABLED = 0 then 'NA' else to_char(TCC) end
416 , to_char(80), 'G', sys_guid(), 'CELLTEMPCOMPENABLED = 1,CELLTEMP1THRESHOLDH =nvl(CELLTEMP1THRESHOLDH,800),CELLTEMP1THRESHOLDL = nvl(CELLTEMP1THRESHOLDL,-200),TUTHD=nvl(TUTHD,50),TLTHD =nvl(TLTHD ,-19),BASETEMPERATURE=nvl(BASETEMPERATURE,170)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
417             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
418                 select v_PlanID, v_CMENEID, 'PMU', 'BASETEMPERATURE', 'BTSAPMUBP', 'BASETEMPERATURE', v_MBTSID, CN, SRN, SN
419                 , to_char(BASETEMPERATURE), '170', case 
420                     when CELLTEMPCOMPENABLED = 0 then 'NA' else to_char(BASETEMPERATURE) end
421 , '170', 'G', sys_guid(), 'CELLTEMPCOMPENABLED = 1' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
422             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
423                 select v_PlanID, v_CMENEID, 'PMU', 'AHUTHD', 'BTSAPMUBP', 'HUMALAMRTHRESHOLDH', v_MBTSID, CN, SRN, SN
424                 , to_char(HUMALAMRTHRESHOLDH), '800', case 
425                     when SETHUMPARAENABLED = 0 then 'NA' else to_char(HUMALAMRTHRESHOLDH) end
426 , '800', 'G', sys_guid(), 'SETHUMPARAENABLED = 1,HUMALAMRTHRESHOLDL = nvl(HUMALAMRTHRESHOLDL,100)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
427             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
428                 select v_PlanID, v_CMENEID, 'PMU', 'AHLTHD', 'BTSAPMUBP', 'HUMALAMRTHRESHOLDL', v_MBTSID, CN, SRN, SN
429                 , to_char(HUMALAMRTHRESHOLDL), '100', case 
430                     when SETHUMPARAENABLED = 0 then 'NA' else to_char(HUMALAMRTHRESHOLDL) end
431 , '100', 'G', sys_guid(), 'SETHUMPARAENABLED = 1,HUMALAMRTHRESHOLDH = nvl(HUMALAMRTHRESHOLDH,800)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
432             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
433                 select v_PlanID, v_CMENEID, 'PMU', 'ATUTHD', 'BTSAPMUBP', 'TEMPALARMTHRESHOLDH', v_MBTSID, CN, SRN, SN
434                 , to_char(TEMPALARMTHRESHOLDH), '500', case 
435                     when SETENVPARAENABLED = 0 then 'NA' else to_char(TEMPALARMTHRESHOLDH) end
436 , '500', 'G', sys_guid(), 'SETENVPARAENABLED = 1,TEMPALARMTHRESHOLDL = nvl(TEMPALARMTHRESHOLDL , 0)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
437             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
438                 select v_PlanID, v_CMENEID, 'PMU', 'ATLTHD', 'BTSAPMUBP', 'TEMPALARMTHRESHOLDL', v_MBTSID, CN, SRN, SN
439                 , to_char(TEMPALARMTHRESHOLDL), '0', case 
440                     when SETENVPARAENABLED = 0 then 'NA' else to_char(TEMPALARMTHRESHOLDL) end
441 , '0', 'G', sys_guid(), 'SETENVPARAENABLED = 1,TEMPALARMTHRESHOLDH = nvl(TEMPALARMTHRESHOLDH,500)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
442             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
443                 select v_PlanID, v_CMENEID, 'PMU', 'SETDIESELENGINEENABLED', 'BTSAPMUBP', 'SETDIESELENGINEENABLED', v_MBTSID, CN, SRN, SN
444                 , to_char(SETDIESELENGINEENABLED), '0', to_char(SETDIESELENGINEENABLED), '0', 'G', sys_guid(), 'ICF = nvl(ICF,0), POWER = nvl(POWER,125), BATTERYDISCHARGEDEPTH = nvl(BATTERYDISCHARGEDEPTH,50)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
445             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
446                 select v_PlanID, v_CMENEID, 'PMU', 'ICF', 'BTSAPMUBP', 'ICF', v_MBTSID, CN, SRN, SN
447                 , to_char(ICF), '0', case 
448                     when SETDIESELENGINEENABLED = 0 then 'NA' else to_char(ICF) end
449 , '0', 'G', sys_guid(), 'POWER = nvl(POWER,125),BATTERYDISCHARGEDEPTH = nvl(BATTERYDISCHARGEDEPTH,50)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
450             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
451                 select v_PlanID, v_CMENEID, 'PMU', 'POWER', 'BTSAPMUBP', 'POWER', v_MBTSID, CN, SRN, SN
452                 , to_char(to_number(POWER)), '125', case 
453                     when SETDIESELENGINEENABLED = 0 then 'NA' else to_char(to_number(POWER)) end
454 , '125', 'G', sys_guid(), 'ICF = nvl(ICF,0),BATTERYDISCHARGEDEPTH = nvl(BATTERYDISCHARGEDEPTH,50)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
455             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
456                 select v_PlanID, v_CMENEID, 'PMU', 'BATTERYDISCHARGEDEPTH', 'BTSAPMUBP', 'BATTERYDISCHARGEDEPTH', v_MBTSID, CN, SRN, SN
457                 , to_char(BATTERYDISCHARGEDEPTH), to_char(55), case 
458                     when SETDIESELENGINEENABLED = 0 then 'NA' else to_char(BATTERYDISCHARGEDEPTH) end
459 , to_char(55), 'G', sys_guid(), 'ICF = nvl(ICF,0),POWER = nvl(POWER,125)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
460             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
461                 select v_PlanID, v_CMENEID, 'PMU', 'BCD', 'BTSAPMUBP', 'BCD', v_MBTSID, CN, SRN, SN
462                 , to_char(BCD), to_char(60), to_char(BCD), to_char(60), 'G', sys_guid() from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
463             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
464                 select v_PlanID, v_CMENEID, 'PMU', 'DSCHGT0', 'BTSAPMUBP', 'DSCHGT0', v_MBTSID, CN, SRN, SN
465                 , to_char(DSCHGT0), '1200', case 
466                     when BTPC = 0 or BTPC is null then 'NA' else to_char(DSCHGT0) end
467 , '1200', 'G', sys_guid(), 'BTPC = 1,DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2),DDSTM=nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
468             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
469                 select v_PlanID, v_CMENEID, 'PMU', 'DSCHGT1', 'BTSAPMUBP', 'DSCHGT1', v_MBTSID, CN, SRN, SN
470                 , to_char(DSCHGT1), '600', case 
471                     when BTPC = 0 or BTPC is null then 'NA' else to_char(DSCHGT1) end
472 , '600', 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2),DDSTM=nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
473             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
474                 select v_PlanID, v_CMENEID, 'PMU', 'DSCHGT2', 'BTSAPMUBP', 'DSCHGT2', v_MBTSID, CN, SRN, SN
475                 , to_char(DSCHGT2), '300', case 
476                     when BTPC = 0 or BTPC is null then 'NA' else to_char(DSCHGT2) end
477 , '300', 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2),DDSTM=nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
478             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
479                 select v_PlanID, v_CMENEID, 'PMU', 'DSCHGT3', 'BTSAPMUBP', 'DSCHGT3', v_MBTSID, CN, SRN, SN
480                 , to_char(DSCHGT3), '150', case 
481                     when BTPC = 0 or BTPC is null then 'NA' else to_char(DSCHGT3) end
482 , '150', 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2),DDSTM=nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
483             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
484                 select v_PlanID, v_CMENEID, 'PMU', 'DSCHGT4', 'BTSAPMUBP', 'DSCHGT4', v_MBTSID, CN, SRN, SN
485                 , to_char(DSCHGT4), '100', case 
486                     when BTPC = 0 or BTPC is null then 'NA' else to_char(DSCHGT4) end
487 , '100', 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2),DDSTM=nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
488             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
489                 select v_PlanID, v_CMENEID, 'PMU', 'DSCHGT5', 'BTSAPMUBP', 'DSCHGT5', v_MBTSID, CN, SRN, SN
490                 , to_char(DSCHGT5), to_char(70), case 
491                     when BTPC = 0 or BTPC is null then 'NA' else to_char(DSCHGT5) end
492 , to_char(70), 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2),DDSTM=nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
493             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
494                 select v_PlanID, v_CMENEID, 'PMU', 'DSCHGT6', 'BTSAPMUBP', 'DSCHGT6', v_MBTSID, CN, SRN, SN
495                 , to_char(DSCHGT6), to_char(50), case 
496                     when BTPC = 0 or BTPC is null then 'NA' else to_char(DSCHGT6) end
497 , to_char(50), 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2),DDSTM=nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
498             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
499                 select v_PlanID, v_CMENEID, 'PMU', 'DSCHGT7', 'BTSAPMUBP', 'DSCHGT7', v_MBTSID, CN, SRN, SN
500                 , to_char(DSCHGT7), to_char(40), case 
501                     when BTPC = 0 or BTPC is null then 'NA' else to_char(DSCHGT7) end
502 , to_char(40), 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2),DDSTM=nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
503             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
504                 select v_PlanID, v_CMENEID, 'PMU', 'DSCHGT8', 'BTSAPMUBP', 'DSCHGT8', v_MBTSID, CN, SRN, SN
505                 , to_char(DSCHGT8), to_char(30), case 
506                     when BTPC = 0 or BTPC is null then 'NA' else to_char(DSCHGT8) end
507 , to_char(30), 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2),DDSTM=nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
508             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
509                 select v_PlanID, v_CMENEID, 'PMU', 'DSCHGT9', 'BTSAPMUBP', 'DSCHGT9', v_MBTSID, CN, SRN, SN
510                 , to_char(DSCHGT9), to_char(25), case 
511                     when BTPC = 0 or BTPC is null then 'NA' else to_char(DSCHGT9) end
512 , to_char(25), 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2),DDSTM=nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
513             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
514                 select v_PlanID, v_CMENEID, 'PMU', 'EFF', 'BTSAPMUBP', 'EFF', v_MBTSID, CN, SRN, SN
515                 , to_char(EFF), to_char(80), case 
516                     when BTPC = 0 or BTPC is null then 'NA' else to_char(EFF) end
517 , to_char(80), 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2),DDSTM=nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
518             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
519                 select v_PlanID, v_CMENEID, 'PMU', 'ENDV', 'BTSAPMUBP', 'ENDV', v_MBTSID, CN, SRN, SN
520                 , to_char(ENDV), '190', case 
521                     when BTPC = 0 or BTPC is null then 'NA' else to_char(ENDV) end
522 , '190', 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2),DDSTM=nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
523             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
524                 select v_PlanID, v_CMENEID, 'PMU', 'BATNUM', 'BTSAPMUBP', 'BATNUM', v_MBTSID, CN, SRN, SN
525                 , to_char(BATNUM), to_char(24), case 
526                     when BTPC = 0 or BTPC is null then 'NA' else to_char(BATNUM) end
527 , to_char(24), 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2),DDSTM = nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
528             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
529                 select v_PlanID, v_CMENEID, 'PMU', 'DSTML', 'BTSAPMUBP', 'DSTML', v_MBTSID, CN, SRN, SN
530                 , to_char(DSTML), to_char(10), case 
531                     when BTPC = 0 or BTPC is null then 'NA' else to_char(DSTML) end
532 , to_char(10), 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2),DDSTM = nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
533             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
534                 select v_PlanID, v_CMENEID, 'PMU', 'SDSEV', 'BTSAPMUBP', 'SDSEV', v_MBTSID, CN, SRN, SN
535                 , to_char(SDSEV), '450', case 
536                     when BTPC = 0 or BTPC is null then 'NA' else to_char(SDSEV) end
537 , '450', 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2), DDSTM = nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
538             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
539                 select v_PlanID, v_CMENEID, 'PMU', 'SDSTML', 'BTSAPMUBP', 'SDSTML', v_MBTSID, CN, SRN, SN
540                 , to_char(SDSTML), to_char(60), case 
541                     when BTPC = 0 or BTPC is null then 'NA' else to_char(SDSTML) end
542 , to_char(60), 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),ATMODE=nvl(ATMODE,2),DDSTM = nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
543             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
544                 select v_PlanID, v_CMENEID, 'PMU', 'ATMODE', 'BTSAPMUBP', 'ATMODE', v_MBTSID, CN, SRN, SN
545                 , to_char(ATMODE), '2', case 
546                     when BTPC = 0 or BTPC is null then 'NA' else to_char(ATMODE) end
547 , '2', 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),TDSTM =nvl(TDSTM,120),DDSTM=nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
548             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
549                 select v_PlanID, v_CMENEID, 'PMU', 'TDSTM', 'BTSAPMUBP', 'TDSTM', v_MBTSID, CN, SRN, SN
550                 , to_char(TDSTM), case 
551                     when ATMODE in  (1, 3) then '120' else '100' end
552 , case 
553                     when  (BTPC = 0 or BTPC is null or ATMODE in  (0, 2) ) then 'NA' else to_char(TDSTM) end
554 , case 
555                     when ATMODE in  (1, 3) then '120' else '100' end
556 , 'G', sys_guid(), 'BTPC = 1 ,DSCHGT0 =nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF = nvl(EFF,80),ENDV = nvl(ENDV,190),BATNUM = nvl(BATNUM,24),DSTML = nvl(DSTML,10),SDSEV = nvl(SDSEV,450),SDSTML = nvl(SDSTML,60),ATMODE = nvl(ATMODE,2),DDSTM = nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
557             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
558                 select v_PlanID, v_CMENEID, 'PMU', 'DDSTM', 'BTSAPMUBP', 'DDSTM', v_MBTSID, CN, SRN, SN
559                 , to_char(DDSTM), to_char(14), to_char(DDSTM), to_char(14), 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
560         end;
561 end;
562 /

Succeed.
Warning:
PL/SQL(GS_PLSQL_DTS.SP_RANCC_MBTSCOMPMU_C3) terminated with compiling errors
[9:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[14:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[22:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[25:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[30:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[33:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[36:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[39:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[54:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[69:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[84:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[95:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[106:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[121:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[136:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[151:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[154:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[157:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[160:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[163:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[167:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[170:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.


SQL> 
SQL> create or replace procedure sp_RANCC_MBTSComPMU_C3 (
  2     v_PlanID in number ,
  3     v_MBTSID in varchar2 ,
  4     v_CMENEID in number ,
  5     v_PhyNEID in number ,
  6     v_SiteId in number  )
  7 as 
  8 begin
  9             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,NEType,ObjId) 
 10                 select v_PlanID, v_CMENEID, 'PMU', 'CMEMODE' || to_char(PN), 'BTSENVALMPORT', 'SW', v_MBTSID, b.CN, b.SRN, b.SN
 11                 , to_char(SW), '0', to_char(SW), '0', 'Switch on Port No.' || to_char(PN), 'G', sys_guid() from t_C_BTSENVALMPORT_C3 a, t_C_BTSBRD_C3 b where a.CMENEID = v_PhyNEID and a.CMENEID = b.CMENEID and a.BTSID = v_SiteId
 12                      and a.BTSID = b.BTSID and a.CN = b.CN and a.SRN = b.SRN
 13                      and a.SN = b.SN and BT = 114;
 14             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,NEType,ObjId) 
 15                 select v_PlanID, v_CMENEID, 'PMU', 'AVOL' || to_char(PN), 'BTSENVALMPORT', 'AVOL', v_MBTSID, b.CN, b.SRN, b.SN
 16                 , to_char(a.AVOL), '0', case 
 17                     when a.SW = 0 then 'NA' else to_char(case a.AVOL when 0 then 1 when 1 then 0 end
 18 ) end
 19 , '1', 'Alarm Voltage on Port No.' || to_char(PN), 'G', sys_guid() from t_C_BTSENVALMPORT_C3 a, t_C_BTSBRD_C3 b where a.CMENEID = v_PhyNEID and a.CMENEID = b.CMENEID and a.BTSID = v_SiteId
 20                      and a.BTSID = b.BTSID and a.CN = b.CN and a.SRN = b.SRN
 21                      and a.SN = b.SN and BT = 114;
 22             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
 23                 select v_PlanID, v_CMENEID, 'PMU', 'CFGFLAG', 'BTSAPMUBP', 'CFGFLAG', v_MBTSID, CN, SRN, SN
 24                 , to_char(CFGFLAG), '1', to_char(CFGFLAG), '1', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId;
 25             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
 26                 select v_PlanID, v_CMENEID, 'PMU', 'LFLG', 'BTSAPMUBP', 'HIGHTEMPLOADPWROFF', v_MBTSID, CN, SRN, SN
 27                 , to_char(HIGHTEMPLOADPWROFF), '170', to_char(case 
 28                     when HIGHTEMPLOADPWROFF = 170 then 0 else 1 end
 29 ), '0', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId;
 30             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
 31                 select v_PlanID, v_CMENEID, 'PMU', 'LTEM', 'BTSAPMUBP', 'TEMPOFHIGHTEMPLOADPWROFF', v_MBTSID, CN, SRN, SN
 32                 , to_char(TEMPOFHIGHTEMPLOADPWROFF), to_char(65), to_char(TEMPOFHIGHTEMPLOADPWROFF), to_char(65), 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and HIGHTEMPLOADPWROFF = 170;
 33             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
 34                 select v_PlanID, v_CMENEID, 'PMU', 'HTSDF', 'BTSAPMUBP', 'HTSDF', v_MBTSID, CN, SRN, SN
 35                 , to_char(HTSDF), '1', to_char(HTSDF), '1', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId;
 36             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
 37                 select v_PlanID, v_CMENEID, 'PMU', 'SDT', 'BTSAPMUBP', 'SDT', v_MBTSID, CN, SRN, SN
 38                 , to_char(SDT), to_char(53), to_char(SDT), to_char(53), 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and HTSDF = 1;
 39             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId) 
 40                 select v_PlanID, v_CMENEID, 'PMU', 'BT1_DISABLE', 'BTSAPMUBP', 'SAAF', v_MBTSID, CN, SRN, SN
 41                 , to_char(case 
 42                     when (bitand((case 
 43                     when SAAF is NULL then 0 else SAAF end
 44 ), 1)) = 0 then 0 else 1 end
 45 ), case 
 46                     when PTYPE in  (2, 3, 5) then '0' else '1' end
 47 , to_char(case 
 48                     when (bitand((case 
 49                     when SAAF is NULL then 0 else SAAF end
 50 ), 1)) = 0 then 0 else 1 end
 51 ), case 
 52                     when PTYPE in  (2, 3, 5) then '0' else '1' end
 53 , 'Special Analog Alarm Flag(Battery Temperature Sensor 1 Disabled)', '1', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and ALMENABLE = 1;
 54             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId) 
 55                 select v_PlanID, v_CMENEID, 'PMU', 'AH_DISABLE', 'BTSAPMUBP', 'SAAF', v_MBTSID, CN, SRN, SN
 56                 , to_char(case 
 57                     when (bitand((case 
 58                     when SAAF is NULL then 0 else SAAF end
 59 ), 2)) = 0 then 0 else 1 end
 60 ), case 
 61                     when PTYPE in  (7) then '0' else '1' end
 62 , to_char(case 
 63                     when (bitand((case 
 64                     when SAAF is NULL then 0 else SAAF end
 65 ), 2)) = 0 then 0 else 1 end
 66 ), case 
 67                     when PTYPE in  (7) then '0' else '1' end
 68 , 'Special Analog Alarm Flag(Cabinet Humidity Sensor Disabled)', '2', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and ALMENABLE = 1;
 69             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId) 
 70                 select v_PlanID, v_CMENEID, 'PMU', 'AT1_DISABLE', 'BTSAPMUBP', 'SAAF', v_MBTSID, CN, SRN, SN
 71                 , to_char(case 
 72                     when (bitand((case 
 73                     when SAAF is NULL then 0 else SAAF end
 74 ), 4)) = 0 then 0 else 1 end
 75 ), case 
 76                     when PTYPE in  (0, 1, 7) then '0' else '1' end
 77 , to_char(case 
 78                     when (bitand((case 
 79                     when SAAF is NULL then 0 else SAAF end
 80 ), 4)) = 0 then 0 else 1 end
 81 ), case 
 82                     when PTYPE in  (0, 1, 7) then '0' else '1' end
 83 , 'Special Analog Alarm Flag(Cabinet Temperature Sensor 1 Disabled)', '4', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and ALMENABLE = 1;
 84             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId) 
 85                 select v_PlanID, v_CMENEID, 'PMU', 'AT2_DISABLE', 'BTSAPMUBP', 'SAAF', v_MBTSID, CN, SRN, SN
 86                 , to_char(case 
 87                     when (bitand((case 
 88                     when SAAF is NULL then 0 else SAAF end
 89 ), 8)) = 0 then 0 else 1 end
 90 ), '1', to_char(case 
 91                     when (bitand((case 
 92                     when SAAF is NULL then 0 else SAAF end
 93 ), 8)) = 0 then 0 else 1 end
 94 ), '1', 'Special Analog Alarm Flag(Cabinet Temperature Sensor 2 Disabled)', '8', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and ALMENABLE = 1;
 95             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId) 
 96                 select v_PlanID, v_CMENEID, 'PMU', 'BT2_DISABLE', 'BTSAPMUBP', 'SAAF', v_MBTSID, CN, SRN, SN
 97                 , to_char(case 
 98                     when (bitand((case 
 99                     when SAAF is NULL then 0 else SAAF end
100 ), 16)) = 0 then 0 else 1 end
101 ), '1', to_char(case 
102                     when (bitand((case 
103                     when SAAF is NULL then 0 else SAAF end
104 ), 16)) = 0 then 0 else 1 end
105 ), '1', 'Special Analog Alarm Flag(Battery Temperature Sensor 2 Disabled)', to_char(16), 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and ALMENABLE = 1;
106             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId) 
107                 select v_PlanID, v_CMENEID, 'PMU', 'WS_DISABLE', 'BTSAPMUBP', 'SBAF', v_MBTSID, CN, SRN, SN
108                 , to_char(case 
109                     when (bitand((case 
110                     when SBAF is NULL then 0 else SBAF end
111 ), 1)) = 0 then 0 else 1 end
112 ), case 
113                     when PTYPE in  (7) then '0' else '1' end
114 , to_char(case 
115                     when (bitand((case 
116                     when SBAF is NULL then 0 else SBAF end
117 ), 1)) = 0 then 0 else 1 end
118 ), case 
119                     when PTYPE in  (7) then '0' else '1' end
120 , 'Special Boolean Alarm Flag(Water-Immersed Sensor Disabled)', '1', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and ALMENABLE = 1;
121             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId) 
122                 select v_PlanID, v_CMENEID, 'PMU', 'SS_DISABLE', 'BTSAPMUBP', 'SBAF', v_MBTSID, CN, SRN, SN
123                 , to_char(case 
124                     when (bitand((case 
125                     when SBAF is NULL then 0 else SBAF end
126 ), 2)) = 0 then 0 else 1 end
127 ), case 
128                     when PTYPE in  (7) then '0' else '1' end
129 , to_char(case 
130                     when (bitand((case 
131                     when SBAF is NULL then 0 else SBAF end
132 ), 2)) = 0 then 0 else 1 end
133 ), case 
134                     when PTYPE in  (7) then '0' else '1' end
135 , 'Special Boolean Alarm Flag(Smog Sensor Disabled)', '2', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and ALMENABLE = 1;
136             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId) 
137                 select v_PlanID, v_CMENEID, 'PMU', 'GS_DISABLE', 'BTSAPMUBP', 'SBAF', v_MBTSID, CN, SRN, SN
138                 , to_char(case 
139                     when (bitand((case 
140                     when SBAF is NULL then 0 else SBAF end
141 ), 4)) = 0 then 0 else 1 end
142 ), case 
143                     when PTYPE in  (0, 1, 2, 7) then '0' else '1' end
144 , to_char(case 
145                     when (bitand((case 
146                     when SBAF is NULL then 0 else SBAF end
147 ), 4)) = 0 then 0 else 1 end
148 ), case 
149                     when PTYPE in  (0, 1, 2, 7) then '0' else '1' end
150 , 'Special Boolean Alarm Flag(Gating Sensor Disabled)', '4', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and ALMENABLE = 1;
151             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
152                 select v_PlanID, v_CMENEID, 'PMU', 'PTYPE', 'BTSAPMUBP', 'PTYPE', v_MBTSID, CN, SRN, SN
153                 , to_char(PTYPE), '2', to_char(PTYPE), '2', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId;
154             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
155                 select v_PlanID, v_CMENEID, 'PMU', 'BTYPE', 'BTSAPMUBP', 'BTYPE', v_MBTSID, CN, SRN, SN
156                 , to_char(BTYPE), '255', to_char(BTYPE), '255', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and BE = 1;
157             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
158                 select v_PlanID, v_CMENEID, 'PMU', 'BCLC', 'BTSAPMUBP', 'BCLC', v_MBTSID, CN, SRN, SN
159                 , to_char(BCLC), to_char(15), to_char(BCLC), to_char(15), 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and BE = 1;
160             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
161                 select v_PlanID, v_CMENEID, 'PMU', 'BC1', 'BTSAPMUBP', 'BC', v_MBTSID, CN, SRN, SN
162                 , to_char(BC), to_char(36), to_char(BC), to_char(36), 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and BE = 1;
163             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
164                 select v_PlanID, v_CMENEID, 'PMU', 'BN', 'BTSAPMUBP', 'BN', v_MBTSID, CN, SRN, SN
165                 , to_char(BN), '1', to_char(BN), '1', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and BE = 1
166                      and BTYPE = 2;
167             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
168                 select v_PlanID, v_CMENEID, 'PMU', 'LSDV', 'BTSAPMUBP', 'LSDV', v_MBTSID, CN, SRN, SN
169                 , to_char(LSDV), '440', to_char(LSDV), '440', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and HPVFLAG = 1;
170             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
171                 select v_PlanID, v_CMENEID, 'PMU', 'BCV', 'BTSAPMUBP', 'BCV', v_MBTSID, CN, SRN, SN
172                 , to_char(BCV), '565', to_char(BCV), '565', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and HPVFLAG = 1;
173             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
174                 select v_PlanID, v_CMENEID, 'PMU', 'FCV', 'BTSAPMUBP', 'FCV', v_MBTSID, CN, SRN, SN
175                 , to_char(FCV), '535', to_char(FCV), '535', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and HPVFLAG = 1;
176             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
177                 select v_PlanID, v_CMENEID, 'PMU', 'LSDF', 'BTSAPMUBP', 'LSDF', v_MBTSID, CN, SRN, SN
178                 , to_char(LSDF), '0', to_char(LSDF), '0', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and HPVFLAG = 1;
179             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
180                 select v_PlanID, v_CMENEID, 'PMU', 'LVSDF', 'BTSAPMUBP', 'LVSDF', v_MBTSID, CN, SRN, SN
181                 , to_char(LVSDF), '1', to_char(LVSDF), '1', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and HPVFLAG = 1;
182             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
183                 select v_PlanID, v_CMENEID, 'PMU', 'SDV', 'BTSAPMUBP', 'SDV', v_MBTSID, CN, SRN, SN
184                 , to_char(SDV), '430', to_char(SDV), '430', 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and HPVFLAG = 1;
185             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
186                 select v_PlanID, v_CMENEID, 'PMU', 'LOWTEMPLOADPWROFF', 'BTSAPMUBP', 'LOWTEMPLOADPWROFF', v_MBTSID, CN, SRN, SN
187                 , to_char(LOWTEMPLOADPWROFF), to_char(85), to_char(LOWTEMPLOADPWROFF), to_char(85), 'G', sys_guid() from t_C_BTSAPMUBP_C3 where CMENEID = v_PhyNEID and BTSID = v_SiteId and HPVFLAG = 1;
188             
189             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId,RelatedField) 
190                 select v_PlanID, v_CMENEID, 'PMU', 'BT1_DISABLE', 'BTSAPMUBP', 'SAAF', v_MBTSID, CN, SRN, SN
191                 , to_char(case 
192                     when (bitand((case 
193                     when SAAF is NULL then 0 else SAAF end
194 ), 1)) = 0 then 0 else 1 end
195 ), case 
196                     when PTYPE in  (2, 3, 5) then '0' else '1' end
197 , to_char(case 
198                     when (bitand((case 
199                     when SAAF is NULL then 0 else SAAF end
200 ), 1)) = 0 then 0 else 1 end
201 ), case 
202                     when PTYPE in  (2, 3, 5) then '0' else '1' end
203 , 'Special Analog Alarm Flag(Battery Temperature Sensor 1 Disabled)', '1', 'G', sys_guid(), 'ALMENABLE = 1' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId
204                      and ALMENABLE = 1;
205             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId,RelatedField) 
206                 select v_PlanID, v_CMENEID, 'PMU', 'AH_DISABLE', 'BTSAPMUBP', 'SAAF', v_MBTSID, CN, SRN, SN
207                 , to_char(case 
208                     when (bitand((case 
209                     when SAAF is NULL then 0 else SAAF end
210 ), 2)) = 0 then 0 else 1 end
211 ), case 
212                     when PTYPE in  (7) then '0' else '1' end
213 , to_char(case 
214                     when (bitand((case 
215                     when SAAF is NULL then 0 else SAAF end
216 ), 2)) = 0 then 0 else 1 end
217 ), case 
218                     when PTYPE in  (7) then '0' else '1' end
219 , 'Special Analog Alarm Flag(Cabinet Humidity Sensor Disabled)', '2', 'G', sys_guid(), 'ALMENABLE = 1' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId
220                      and ALMENABLE = 1;
221             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId,RelatedField) 
222                 select v_PlanID, v_CMENEID, 'PMU', 'AT1_DISABLE', 'BTSAPMUBP', 'SAAF', v_MBTSID, CN, SRN, SN
223                 , to_char(case 
224                     when (bitand((case 
225                     when SAAF is NULL then 0 else SAAF end
226 ), 4)) = 0 then 0 else 1 end
227 ), case 
228                     when PTYPE in  (0, 1, 7) then '0' else '1' end
229 , to_char(case 
230                     when (bitand((case 
231                     when SAAF is NULL then 0 else SAAF end
232 ), 4)) = 0 then 0 else 1 end
233 ), case 
234                     when PTYPE in  (0, 1, 7) then '0' else '1' end
235 , 'Special Analog Alarm Flag(Cabinet Temperature Sensor 1 Disabled)', '4', 'G', sys_guid(), 'ALMENABLE = 1' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId
236                      and ALMENABLE = 1;
237             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId,RelatedField) 
238                 select v_PlanID, v_CMENEID, 'PMU', 'AT2_DISABLE', 'BTSAPMUBP', 'SAAF', v_MBTSID, CN, SRN, SN
239                 , to_char(case 
240                     when (bitand((case 
241                     when SAAF is NULL then 0 else SAAF end
242 ), 8)) = 0 then 0 else 1 end
243 ), '1', to_char(case 
244                     when (bitand((case 
245                     when SAAF is NULL then 0 else SAAF end
246 ), 8)) = 0 then 0 else 1 end
247 ), '1', 'Special Analog Alarm Flag(Cabinet Temperature Sensor 2 Disabled)', '8', 'G', sys_guid(), 'ALMENABLE = 1' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId
248                      and ALMENABLE = 1;
249             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId,RelatedField) 
250                 select v_PlanID, v_CMENEID, 'PMU', 'BT2_DISABLE', 'BTSAPMUBP', 'SAAF', v_MBTSID, CN, SRN, SN
251                 , to_char(case 
252                     when (bitand((case 
253                     when SAAF is NULL then 0 else SAAF end
254 ), 16)) = 0 then 0 else 1 end
255 ), '1', to_char(case 
256                     when (bitand((case 
257                     when SAAF is NULL then 0 else SAAF end
258 ), 16)) = 0 then 0 else 1 end
259 ), '1', 'Special Analog Alarm Flag(Battery Temperature Sensor 2 Disabled)', to_char(16), 'G', sys_guid(), 'ALMENABLE = 1' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId
260                      and ALMENABLE = 1;
261             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId,RelatedField) 
262                 select v_PlanID, v_CMENEID, 'PMU', 'WS_DISABLE', 'BTSAPMUBP', 'SBAF', v_MBTSID, CN, SRN, SN
263                 , to_char(case 
264                     when (bitand((case 
265                     when SBAF is NULL then 0 else SBAF end
266 ), 1)) = 0 then 0 else 1 end
267 ), case 
268                     when PTYPE in  (7) then '0' else '1' end
269 , to_char(case 
270                     when (bitand((case 
271                     when SBAF is NULL then 0 else SBAF end
272 ), 1)) = 0 then 0 else 1 end
273 ), case 
274                     when PTYPE in  (7) then '0' else '1' end
275 , 'Special Boolean Alarm Flag(Water-Immersed Sensor Disabled)', '1', 'G', sys_guid(), 'ALMENABLE = 1' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId
276                      and ALMENABLE = 1;
277             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId,RelatedField) 
278                 select v_PlanID, v_CMENEID, 'PMU', 'SS_DISABLE', 'BTSAPMUBP', 'SBAF', v_MBTSID, CN, SRN, SN
279                 , to_char(case 
280                     when (bitand((case 
281                     when SBAF is NULL then 0 else SBAF end
282 ), 2)) = 0 then 0 else 1 end
283 ), case 
284                     when PTYPE in  (7) then '0' else '1' end
285 , to_char(case 
286                     when (bitand((case 
287                     when SBAF is NULL then 0 else SBAF end
288 ), 2)) = 0 then 0 else 1 end
289 ), case 
290                     when PTYPE in  (7) then '0' else '1' end
291 , 'Special Boolean Alarm Flag(Smog Sensor Disabled)', '2', 'G', sys_guid(), 'ALMENABLE = 1' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId
292                      and ALMENABLE = 1;
293             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,FieldDesc,ProcForFix,NEType,ObjId,RelatedField) 
294                 select v_PlanID, v_CMENEID, 'PMU', 'GS_DISABLE', 'BTSAPMUBP', 'SBAF', v_MBTSID, CN, SRN, SN
295                 , to_char(case 
296                     when (bitand((case 
297                     when SBAF is NULL then 0 else SBAF end
298 ), 4)) = 0 then 0 else 1 end
299 ), case 
300                     when PTYPE in  (0, 1, 2, 7) then '0' else '1' end
301 , to_char(case 
302                     when (bitand((case 
303                     when SBAF is NULL then 0 else SBAF end
304 ), 4)) = 0 then 0 else 1 end
305 ), case 
306                     when PTYPE in  (0, 1, 2, 7) then '0' else '1' end
307 , 'Special Boolean Alarm Flag(Gating Sensor Disabled)', '4', 'G', sys_guid(), 'ALMENABLE = 1' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId
308                      and ALMENABLE = 1;
309             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
310                 select v_PlanID, v_CMENEID, 'PMU', 'PTYPE', 'BTSAPMUBP', 'PTYPE', v_MBTSID, CN, SRN, SN
311                 , to_char(PTYPE), '2', to_char(PTYPE), '2', 'G', sys_guid() from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
312             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
313                 select v_PlanID, v_CMENEID, 'PMU', 'BTYPE', 'BTSAPMUBP', 'BTYPE', v_MBTSID, CN, SRN, SN
314                 ,  nvl(to_char(BTYPE), '255'), '255', case 
315                     when BE = 0 then '255' else to_char(BTYPE) end
316 , '255', 'G', sys_guid(), 'BE = 1,BCLC = case when BTYPE = 2 then null else nvl(BCLC,15) end, BC = case when BTYPE = 2 then null else nvl(BC,36) end' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
317             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
318                 select v_PlanID, v_CMENEID, 'PMU', 'BCLC', 'BTSAPMUBP', 'BCLC', v_MBTSID, CN, SRN, SN
319                 , to_char(BCLC), to_char(15), case 
320                     when  (BE = 0 or BTYPE = 255 ) then 'NA' else to_char(BCLC) end
321 , to_char(15), 'G', sys_guid(), 'BE = 1,BTYPE = nvl(BTYPE,255), BC = nvl(BC,36)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
322             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
323                 select v_PlanID, v_CMENEID, 'PMU', 'BC1', 'BTSAPMUBP', 'BC', v_MBTSID, CN, SRN, SN
324                 , to_char(BC), to_char(36), case 
325                     when  (BE = 0 or BTYPE = 255 ) then 'NA' else to_char(BC) end
326 , to_char(36), 'G', sys_guid(), 'BE = 1,BTYPE = nvl(BTYPE,255),BCLC = nvl(BCLC,15)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
327             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
328                 select v_PlanID, v_CMENEID, 'PMU', 'BN', 'BTSAPMUBP', 'BN', v_MBTSID, CN, SRN, SN
329                 , to_char(BN), '1', case 
330                     when  (BE = 0 or BTYPE in  (255, 0, 1) ) then 'NA' else to_char(BN) end
331 , '1', 'G', sys_guid(), 'BE = 1' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
332             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
333                 select v_PlanID, v_CMENEID, 'PMU', 'LSDV', 'BTSAPMUBP', 'LSDV', v_MBTSID, CN, SRN, SN
334                 , to_char(to_number(LSDV)), '440', case 
335                     when HPVFLAG = 0 or LSDF = 0 then 'NA' else to_char(to_number(LSDV)) end
336 , '440', 'G', sys_guid(), 'HPVFLAG = 1,BCV=nvl(BCV,565) ,FCV =nvl(FCV,535) ,LSDF=nvl(LSDF,0),LVSDF=nvl(LVSDF,1), SDV= nvl(SDV,430), LOWTEMPLOADPWROFF=nvl(LOWTEMPLOADPWROFF,85),TEMPOFLOWTEMPLOADPWROFF=nvl(TEMPOFLOWTEMPLOADPWROFF,-100),ACVUTHD=nvl(ACVUTHD,280),ACVLTHD=nvl(ACVLTHD,180),DCVUTHD=nvl(DCVUTHD,580),DCVLTHD=nvl(DCVLTHD,450)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
337             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
338                 select v_PlanID, v_CMENEID, 'PMU', 'BCV', 'BTSAPMUBP', 'BCV', v_MBTSID, CN, SRN, SN
339                 , to_char(to_number(BCV)), '565', case 
340                     when HPVFLAG = 0 then 'NA' else to_char(to_number(BCV)) end
341 , '565', 'G', sys_guid(), 'HPVFLAG = 1,LSDV = nvl(LSDV,440) ,FCV =nvl(FCV,535) ,LSDF=nvl(LSDF,0),LVSDF=nvl(LVSDF,1), SDV= nvl(SDV,430), LOWTEMPLOADPWROFF=nvl(LOWTEMPLOADPWROFF,85),TEMPOFLOWTEMPLOADPWROFF=nvl(TEMPOFLOWTEMPLOADPWROFF,-100),ACVUTHD=nvl(ACVUTHD,280),ACVLTHD=nvl(ACVLTHD,180),DCVUTHD=nvl(DCVUTHD,580),DCVLTHD=nvl(DCVLTHD,450)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
342             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
343                 select v_PlanID, v_CMENEID, 'PMU', 'FCV', 'BTSAPMUBP', 'FCV', v_MBTSID, CN, SRN, SN
344                 , to_char(to_number(FCV)), '535', case 
345                     when HPVFLAG = 0 then 'NA' else to_char(to_number(FCV)) end
346 , '535', 'G', sys_guid(), 'HPVFLAG = 1,LSDV = nvl(LSDV,440) ,BCV=nvl(BCV,565) ,LSDF=nvl(LSDF,0),LVSDF=nvl(LVSDF,1), SDV= nvl(SDV,430), LOWTEMPLOADPWROFF=nvl(LOWTEMPLOADPWROFF,85),TEMPOFLOWTEMPLOADPWROFF=nvl(TEMPOFLOWTEMPLOADPWROFF,-100),ACVUTHD=nvl(ACVUTHD,280),ACVLTHD=nvl(ACVLTHD,180),DCVUTHD=nvl(DCVUTHD,580),DCVLTHD=nvl(DCVLTHD,450)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
347             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
348                 select v_PlanID, v_CMENEID, 'PMU', 'LSDF', 'BTSAPMUBP', 'LSDF', v_MBTSID, CN, SRN, SN
349                 , to_char(LSDF), '0', case 
350                     when HPVFLAG = 0 then 'NA' else to_char(LSDF) end
351 , '0', 'G', sys_guid(), 'HPVFLAG = 1,LSDV = nvl(LSDV,440) ,BCV=nvl(BCV,565) ,FCV =nvl(FCV,535) ,LVSDF=nvl(LVSDF,1), SDV= nvl(SDV,430), LOWTEMPLOADPWROFF=nvl(LOWTEMPLOADPWROFF,85),TEMPOFLOWTEMPLOADPWROFF=nvl(TEMPOFLOWTEMPLOADPWROFF,-100),ACVUTHD=nvl(ACVUTHD,280),ACVLTHD=nvl(ACVLTHD,180),DCVUTHD=nvl(DCVUTHD,580),DCVLTHD=nvl(DCVLTHD,450)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
352             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
353                 select v_PlanID, v_CMENEID, 'PMU', 'LVSDF', 'BTSAPMUBP', 'LVSDF', v_MBTSID, CN, SRN, SN
354                 , to_char(LVSDF), '1', case 
355                     when HPVFLAG = 0 then 'NA' else to_char(LVSDF) end
356 , '1', 'G', sys_guid(), 'HPVFLAG = 1,LSDV = nvl(LSDV,440) ,BCV=nvl(BCV,565) ,FCV =nvl(FCV,535) ,LSDF=nvl(LSDF,0), SDV= nvl(SDV,430), LOWTEMPLOADPWROFF=nvl(LOWTEMPLOADPWROFF,85),TEMPOFLOWTEMPLOADPWROFF=nvl(TEMPOFLOWTEMPLOADPWROFF,-100),ACVUTHD=nvl(ACVUTHD,280),ACVLTHD=nvl(ACVLTHD,180),DCVUTHD=nvl(DCVUTHD,580),DCVLTHD=nvl(DCVLTHD,450)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
357             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
358                 select v_PlanID, v_CMENEID, 'PMU', 'SDV', 'BTSAPMUBP', 'SDV', v_MBTSID, CN, SRN, SN
359                 , to_char(SDV), '430', case 
360                     when HPVFLAG = 0 or LVSDF = 0 then 'NA' else to_char(SDV) end
361 , '430', 'G', sys_guid(), 'HPVFLAG = 1,LSDV = nvl(LSDV,440) ,BCV=nvl(BCV,565) ,FCV =nvl(FCV,535) ,LSDF=nvl(LSDF,0),LVSDF=nvl(LVSDF,1), LOWTEMPLOADPWROFF=nvl(LOWTEMPLOADPWROFF,85),TEMPOFLOWTEMPLOADPWROFF=nvl(TEMPOFLOWTEMPLOADPWROFF,-100),ACVUTHD=nvl(ACVUTHD,280),ACVLTHD=nvl(ACVLTHD,180),DCVUTHD=nvl(DCVUTHD,580),DCVLTHD=nvl(DCVLTHD,450)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
362             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
363                 select v_PlanID, v_CMENEID, 'PMU', 'LOWTEMPLOADPWROFF', 'BTSAPMUBP', 'LOWTEMPLOADPWROFF', v_MBTSID, CN, SRN, SN
364                 , to_char(LOWTEMPLOADPWROFF), to_char(85), case 
365                     when HPVFLAG = 0 then 'NA' else to_char(LOWTEMPLOADPWROFF) end
366 , to_char(85), 'G', sys_guid(), 'HPVFLAG = 1,LSDV = nvl(LSDV,440) ,BCV=nvl(BCV,565) ,FCV =nvl(FCV,535) ,LSDF=nvl(LSDF,0),LVSDF=nvl(LVSDF,1), SDV= nvl(SDV,430), TEMPOFLOWTEMPLOADPWROFF=nvl(TEMPOFLOWTEMPLOADPWROFF,-100),ACVUTHD=nvl(ACVUTHD,280),ACVLTHD=nvl(ACVLTHD,180),DCVUTHD=nvl(DCVUTHD,580),DCVLTHD=nvl(DCVLTHD,450)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
367             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
368                 select v_PlanID, v_CMENEID, 'PMU', 'TEMPOFLOWTEMPLOADPWROFF', 'BTSAPMUBP', 'TEMPOFLOWTEMPLOADPWROFF', v_MBTSID, CN, SRN, SN
369                 , to_char(TEMPOFLOWTEMPLOADPWROFF), '-100', case 
370                     when HPVFLAG = 0 then 'NA' else to_char(TEMPOFLOWTEMPLOADPWROFF) end
371 , '-100', 'G', sys_guid(), 'HPVFLAG = 1,LSDV = nvl(LSDV,440) ,BCV=nvl(BCV,565) ,FCV =nvl(FCV,535) ,LSDF=nvl(LSDF,0),LVSDF=nvl(LVSDF,1), SDV= nvl(SDV,430), LOWTEMPLOADPWROFF=nvl(LOWTEMPLOADPWROFF,85),ACVUTHD=nvl(ACVUTHD,280),ACVLTHD=nvl(ACVLTHD,180),DCVUTHD=nvl(DCVUTHD,580),DCVLTHD=nvl(DCVLTHD,450)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
372             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
373                 select v_PlanID, v_CMENEID, 'PMU', 'ACVUTHD', 'BTSAPMUBP', 'ACVUTHD', v_MBTSID, CN, SRN, SN
374                 , to_char(ACVUTHD), '280', case 
375                     when HPVFLAG = 0 then 'NA' else to_char(ACVUTHD) end
376 , '280', 'G', sys_guid(), 'HPVFLAG = 1,LSDV = nvl(LSDV,440) ,BCV=nvl(BCV,565) ,FCV =nvl(FCV,535) ,LSDF=nvl(LSDF,0),LVSDF=nvl(LVSDF,1), SDV= nvl(SDV,430), LOWTEMPLOADPWROFF=nvl(LOWTEMPLOADPWROFF,85),TEMPOFLOWTEMPLOADPWROFF=nvl(TEMPOFLOWTEMPLOADPWROFF,-100),ACVLTHD=nvl(ACVLTHD,180),DCVUTHD=nvl(DCVUTHD,580),DCVLTHD=nvl(DCVLTHD,450)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
377             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
378                 select v_PlanID, v_CMENEID, 'PMU', 'ACVLTHD', 'BTSAPMUBP', 'ACVLTHD', v_MBTSID, CN, SRN, SN
379                 , to_char(ACVLTHD), '180', case 
380                     when HPVFLAG = 0 then 'NA' else to_char(ACVLTHD) end
381 , '180', 'G', sys_guid(), 'HPVFLAG = 1,LSDV = nvl(LSDV,440) ,BCV=nvl(BCV,565) ,FCV =nvl(FCV,535) ,LSDF=nvl(LSDF,0),LVSDF=nvl(LVSDF,1), SDV= nvl(SDV,430), LOWTEMPLOADPWROFF=nvl(LOWTEMPLOADPWROFF,85),TEMPOFLOWTEMPLOADPWROFF=nvl(TEMPOFLOWTEMPLOADPWROFF,-100),ACVUTHD=nvl(ACVUTHD,280),DCVUTHD=nvl(DCVUTHD,580),DCVLTHD=nvl(DCVLTHD,450)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
382             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
383                 select v_PlanID, v_CMENEID, 'PMU', 'DCVUTHD', 'BTSAPMUBP', 'DCVUTHD', v_MBTSID, CN, SRN, SN
384                 , to_char(to_number(DCVUTHD)), '580', case 
385                     when HPVFLAG = 0 then 'NA' else to_char(to_number(DCVUTHD)) end
386 , '580', 'G', sys_guid(), 'HPVFLAG = 1,LSDV = nvl(LSDV,440) ,BCV=nvl(BCV,565) ,FCV =nvl(FCV,535) ,LSDF=nvl(LSDF,0),LVSDF=nvl(LVSDF,1), SDV= nvl(SDV,430), LOWTEMPLOADPWROFF=nvl(LOWTEMPLOADPWROFF,85),TEMPOFLOWTEMPLOADPWROFF=nvl(TEMPOFLOWTEMPLOADPWROFF,-100),ACVUTHD=nvl(ACVUTHD,280),ACVLTHD=nvl(ACVLTHD,180),DCVLTHD=nvl(DCVLTHD,450)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
387             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
388                 select v_PlanID, v_CMENEID, 'PMU', 'DCVLTHD', 'BTSAPMUBP', 'DCVLTHD', v_MBTSID, CN, SRN, SN
389                 , to_char(to_number(DCVLTHD)), '450', case 
390                     when HPVFLAG = 0 then 'NA' else to_char(to_number(DCVLTHD)) end
391 , '450', 'G', sys_guid(), 'HPVFLAG = 1, LSDV = nvl(LSDV,440), BCV=nvl(BCV,565) ,FCV =nvl(FCV,535), LSDF=nvl(LSDF,0), LVSDF=nvl(LVSDF,1), SDV= nvl(SDV,430), LOWTEMPLOADPWROFF=nvl(LOWTEMPLOADPWROFF,85), TEMPOFLOWTEMPLOADPWROFF=nvl(TEMPOFLOWTEMPLOADPWROFF,-100), ACVUTHD=nvl(ACVUTHD,280), ACVLTHD=nvl(ACVLTHD,180), DCVUTHD=nvl(DCVUTHD,580)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
392             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
393                 select v_PlanID, v_CMENEID, 'PMU', 'TUL', 'BTSAPMUBP', 'CELLTEMP1THRESHOLDH', v_MBTSID, CN, SRN, SN
394                 , to_char(CELLTEMP1THRESHOLDH), '800', case 
395                     when CELLTEMPCOMPENABLED = 0 then 'NA' else to_char(CELLTEMP1THRESHOLDH) end
396 , '800', 'G', sys_guid(), 'CELLTEMPCOMPENABLED = 1,CELLTEMP1THRESHOLDL = nvl(CELLTEMP1THRESHOLDL,-200),TUTHD=nvl(TUTHD,50),TLTHD =nvl(TLTHD ,-19),TCC= nvl(TCC,80),BASETEMPERATURE=nvl(BASETEMPERATURE,170)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
397             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
398                 select v_PlanID, v_CMENEID, 'PMU', 'TLL', 'BTSAPMUBP', 'CELLTEMP1THRESHOLDL', v_MBTSID, CN, SRN, SN
399                 , to_char(CELLTEMP1THRESHOLDL), '-200', case 
400                     when CELLTEMPCOMPENABLED = 0 then 'NA' else to_char(CELLTEMP1THRESHOLDL) end
401 , '-200', 'G', sys_guid(), 'CELLTEMPCOMPENABLED = 1,CELLTEMP1THRESHOLDH =nvl(CELLTEMP1THRESHOLDH,800),TUTHD=nvl(TUTHD,50),TLTHD =nvl(TLTHD ,-19),TCC= nvl(TCC,80),BASETEMPERATURE=nvl(BASETEMPERATURE,170)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
402             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
403                 select v_PlanID, v_CMENEID, 'PMU', 'TUTHD', 'BTSAPMUBP', 'TUTHD', v_MBTSID, CN, SRN, SN
404                 , to_char(TUTHD), to_char(55), case 
405                     when CELLTEMPCOMPENABLED = 0 then 'NA' else to_char(TUTHD) end
406 , to_char(55), 'G', sys_guid(), 'CELLTEMPCOMPENABLED = 1,CELLTEMP1THRESHOLDH =nvl(CELLTEMP1THRESHOLDH,800),CELLTEMP1THRESHOLDL = nvl(CELLTEMP1THRESHOLDL,-200),TLTHD =nvl(TLTHD ,-19),TCC= nvl(TCC,80),BASETEMPERATURE=nvl(BASETEMPERATURE,170)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
407             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
408                 select v_PlanID, v_CMENEID, 'PMU', 'TLTHD', 'BTSAPMUBP', 'TLTHD', v_MBTSID, CN, SRN, SN
409                 , to_char(TLTHD), '-19', case 
410                     when CELLTEMPCOMPENABLED = 0 then 'NA' else to_char(TLTHD) end
411 , '-19', 'G', sys_guid(), 'CELLTEMPCOMPENABLED = 1,CELLTEMP1THRESHOLDH =nvl(CELLTEMP1THRESHOLDH,800),CELLTEMP1THRESHOLDL = nvl(CELLTEMP1THRESHOLDL,-200),TUTHD=nvl(TUTHD,50),TCC= nvl(TCC,80),BASETEMPERATURE=nvl(BASETEMPERATURE,170)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
412             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
413                 select v_PlanID, v_CMENEID, 'PMU', 'TCC', 'BTSAPMUBP', 'TCC', v_MBTSID, CN, SRN, SN
414                 , to_char(TCC), to_char(80), case 
415                     when CELLTEMPCOMPENABLED = 0 then 'NA' else to_char(TCC) end
416 , to_char(80), 'G', sys_guid(), 'CELLTEMPCOMPENABLED = 1,CELLTEMP1THRESHOLDH =nvl(CELLTEMP1THRESHOLDH,800),CELLTEMP1THRESHOLDL = nvl(CELLTEMP1THRESHOLDL,-200),TUTHD=nvl(TUTHD,50),TLTHD =nvl(TLTHD ,-19),BASETEMPERATURE=nvl(BASETEMPERATURE,170)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
417             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
418                 select v_PlanID, v_CMENEID, 'PMU', 'BASETEMPERATURE', 'BTSAPMUBP', 'BASETEMPERATURE', v_MBTSID, CN, SRN, SN
419                 , to_char(BASETEMPERATURE), '170', case 
420                     when CELLTEMPCOMPENABLED = 0 then 'NA' else to_char(BASETEMPERATURE) end
421 , '170', 'G', sys_guid(), 'CELLTEMPCOMPENABLED = 1' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
422             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
423                 select v_PlanID, v_CMENEID, 'PMU', 'AHUTHD', 'BTSAPMUBP', 'HUMALAMRTHRESHOLDH', v_MBTSID, CN, SRN, SN
424                 , to_char(HUMALAMRTHRESHOLDH), '800', case 
425                     when SETHUMPARAENABLED = 0 then 'NA' else to_char(HUMALAMRTHRESHOLDH) end
426 , '800', 'G', sys_guid(), 'SETHUMPARAENABLED = 1,HUMALAMRTHRESHOLDL = nvl(HUMALAMRTHRESHOLDL,100)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
427             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
428                 select v_PlanID, v_CMENEID, 'PMU', 'AHLTHD', 'BTSAPMUBP', 'HUMALAMRTHRESHOLDL', v_MBTSID, CN, SRN, SN
429                 , to_char(HUMALAMRTHRESHOLDL), '100', case 
430                     when SETHUMPARAENABLED = 0 then 'NA' else to_char(HUMALAMRTHRESHOLDL) end
431 , '100', 'G', sys_guid(), 'SETHUMPARAENABLED = 1,HUMALAMRTHRESHOLDH = nvl(HUMALAMRTHRESHOLDH,800)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
432             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
433                 select v_PlanID, v_CMENEID, 'PMU', 'ATUTHD', 'BTSAPMUBP', 'TEMPALARMTHRESHOLDH', v_MBTSID, CN, SRN, SN
434                 , to_char(TEMPALARMTHRESHOLDH), '500', case 
435                     when SETENVPARAENABLED = 0 then 'NA' else to_char(TEMPALARMTHRESHOLDH) end
436 , '500', 'G', sys_guid(), 'SETENVPARAENABLED = 1,TEMPALARMTHRESHOLDL = nvl(TEMPALARMTHRESHOLDL , 0)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
437             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
438                 select v_PlanID, v_CMENEID, 'PMU', 'ATLTHD', 'BTSAPMUBP', 'TEMPALARMTHRESHOLDL', v_MBTSID, CN, SRN, SN
439                 , to_char(TEMPALARMTHRESHOLDL), '0', case 
440                     when SETENVPARAENABLED = 0 then 'NA' else to_char(TEMPALARMTHRESHOLDL) end
441 , '0', 'G', sys_guid(), 'SETENVPARAENABLED = 1,TEMPALARMTHRESHOLDH = nvl(TEMPALARMTHRESHOLDH,500)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
442             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
443                 select v_PlanID, v_CMENEID, 'PMU', 'SETDIESELENGINEENABLED', 'BTSAPMUBP', 'SETDIESELENGINEENABLED', v_MBTSID, CN, SRN, SN
444                 , to_char(SETDIESELENGINEENABLED), '0', to_char(SETDIESELENGINEENABLED), '0', 'G', sys_guid(), 'ICF = nvl(ICF,0), POWER = nvl(POWER,125), BATTERYDISCHARGEDEPTH = nvl(BATTERYDISCHARGEDEPTH,50)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
445             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
446                 select v_PlanID, v_CMENEID, 'PMU', 'ICF', 'BTSAPMUBP', 'ICF', v_MBTSID, CN, SRN, SN
447                 , to_char(ICF), '0', case 
448                     when SETDIESELENGINEENABLED = 0 then 'NA' else to_char(ICF) end
449 , '0', 'G', sys_guid(), 'POWER = nvl(POWER,125),BATTERYDISCHARGEDEPTH = nvl(BATTERYDISCHARGEDEPTH,50)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
450             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
451                 select v_PlanID, v_CMENEID, 'PMU', 'POWER', 'BTSAPMUBP', 'POWER', v_MBTSID, CN, SRN, SN
452                 , to_char(to_number(POWER)), '125', case 
453                     when SETDIESELENGINEENABLED = 0 then 'NA' else to_char(to_number(POWER)) end
454 , '125', 'G', sys_guid(), 'ICF = nvl(ICF,0),BATTERYDISCHARGEDEPTH = nvl(BATTERYDISCHARGEDEPTH,50)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
455             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
456                 select v_PlanID, v_CMENEID, 'PMU', 'BATTERYDISCHARGEDEPTH', 'BTSAPMUBP', 'BATTERYDISCHARGEDEPTH', v_MBTSID, CN, SRN, SN
457                 , to_char(BATTERYDISCHARGEDEPTH), to_char(55), case 
458                     when SETDIESELENGINEENABLED = 0 then 'NA' else to_char(BATTERYDISCHARGEDEPTH) end
459 , to_char(55), 'G', sys_guid(), 'ICF = nvl(ICF,0),POWER = nvl(POWER,125)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
460             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId) 
461                 select v_PlanID, v_CMENEID, 'PMU', 'BCD', 'BTSAPMUBP', 'BCD', v_MBTSID, CN, SRN, SN
462                 , to_char(BCD), to_char(60), to_char(BCD), to_char(60), 'G', sys_guid() from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
463             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
464                 select v_PlanID, v_CMENEID, 'PMU', 'DSCHGT0', 'BTSAPMUBP', 'DSCHGT0', v_MBTSID, CN, SRN, SN
465                 , to_char(DSCHGT0), '1200', case 
466                     when BTPC = 0 or BTPC is null then 'NA' else to_char(DSCHGT0) end
467 , '1200', 'G', sys_guid(), 'BTPC = 1,DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2),DDSTM=nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
468             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
469                 select v_PlanID, v_CMENEID, 'PMU', 'DSCHGT1', 'BTSAPMUBP', 'DSCHGT1', v_MBTSID, CN, SRN, SN
470                 , to_char(DSCHGT1), '600', case 
471                     when BTPC = 0 or BTPC is null then 'NA' else to_char(DSCHGT1) end
472 , '600', 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2),DDSTM=nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
473             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
474                 select v_PlanID, v_CMENEID, 'PMU', 'DSCHGT2', 'BTSAPMUBP', 'DSCHGT2', v_MBTSID, CN, SRN, SN
475                 , to_char(DSCHGT2), '300', case 
476                     when BTPC = 0 or BTPC is null then 'NA' else to_char(DSCHGT2) end
477 , '300', 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2),DDSTM=nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
478             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
479                 select v_PlanID, v_CMENEID, 'PMU', 'DSCHGT3', 'BTSAPMUBP', 'DSCHGT3', v_MBTSID, CN, SRN, SN
480                 , to_char(DSCHGT3), '150', case 
481                     when BTPC = 0 or BTPC is null then 'NA' else to_char(DSCHGT3) end
482 , '150', 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2),DDSTM=nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
483             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
484                 select v_PlanID, v_CMENEID, 'PMU', 'DSCHGT4', 'BTSAPMUBP', 'DSCHGT4', v_MBTSID, CN, SRN, SN
485                 , to_char(DSCHGT4), '100', case 
486                     when BTPC = 0 or BTPC is null then 'NA' else to_char(DSCHGT4) end
487 , '100', 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2),DDSTM=nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
488             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
489                 select v_PlanID, v_CMENEID, 'PMU', 'DSCHGT5', 'BTSAPMUBP', 'DSCHGT5', v_MBTSID, CN, SRN, SN
490                 , to_char(DSCHGT5), to_char(70), case 
491                     when BTPC = 0 or BTPC is null then 'NA' else to_char(DSCHGT5) end
492 , to_char(70), 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2),DDSTM=nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
493             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
494                 select v_PlanID, v_CMENEID, 'PMU', 'DSCHGT6', 'BTSAPMUBP', 'DSCHGT6', v_MBTSID, CN, SRN, SN
495                 , to_char(DSCHGT6), to_char(50), case 
496                     when BTPC = 0 or BTPC is null then 'NA' else to_char(DSCHGT6) end
497 , to_char(50), 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2),DDSTM=nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
498             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
499                 select v_PlanID, v_CMENEID, 'PMU', 'DSCHGT7', 'BTSAPMUBP', 'DSCHGT7', v_MBTSID, CN, SRN, SN
500                 , to_char(DSCHGT7), to_char(40), case 
501                     when BTPC = 0 or BTPC is null then 'NA' else to_char(DSCHGT7) end
502 , to_char(40), 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2),DDSTM=nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
503             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
504                 select v_PlanID, v_CMENEID, 'PMU', 'DSCHGT8', 'BTSAPMUBP', 'DSCHGT8', v_MBTSID, CN, SRN, SN
505                 , to_char(DSCHGT8), to_char(30), case 
506                     when BTPC = 0 or BTPC is null then 'NA' else to_char(DSCHGT8) end
507 , to_char(30), 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2),DDSTM=nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
508             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
509                 select v_PlanID, v_CMENEID, 'PMU', 'DSCHGT9', 'BTSAPMUBP', 'DSCHGT9', v_MBTSID, CN, SRN, SN
510                 , to_char(DSCHGT9), to_char(25), case 
511                     when BTPC = 0 or BTPC is null then 'NA' else to_char(DSCHGT9) end
512 , to_char(25), 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2),DDSTM=nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
513             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
514                 select v_PlanID, v_CMENEID, 'PMU', 'EFF', 'BTSAPMUBP', 'EFF', v_MBTSID, CN, SRN, SN
515                 , to_char(EFF), to_char(80), case 
516                     when BTPC = 0 or BTPC is null then 'NA' else to_char(EFF) end
517 , to_char(80), 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2),DDSTM=nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
518             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
519                 select v_PlanID, v_CMENEID, 'PMU', 'ENDV', 'BTSAPMUBP', 'ENDV', v_MBTSID, CN, SRN, SN
520                 , to_char(ENDV), '190', case 
521                     when BTPC = 0 or BTPC is null then 'NA' else to_char(ENDV) end
522 , '190', 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2),DDSTM=nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
523             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
524                 select v_PlanID, v_CMENEID, 'PMU', 'BATNUM', 'BTSAPMUBP', 'BATNUM', v_MBTSID, CN, SRN, SN
525                 , to_char(BATNUM), to_char(24), case 
526                     when BTPC = 0 or BTPC is null then 'NA' else to_char(BATNUM) end
527 , to_char(24), 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2),DDSTM = nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
528             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
529                 select v_PlanID, v_CMENEID, 'PMU', 'DSTML', 'BTSAPMUBP', 'DSTML', v_MBTSID, CN, SRN, SN
530                 , to_char(DSTML), to_char(10), case 
531                     when BTPC = 0 or BTPC is null then 'NA' else to_char(DSTML) end
532 , to_char(10), 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2),DDSTM = nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
533             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
534                 select v_PlanID, v_CMENEID, 'PMU', 'SDSEV', 'BTSAPMUBP', 'SDSEV', v_MBTSID, CN, SRN, SN
535                 , to_char(SDSEV), '450', case 
536                     when BTPC = 0 or BTPC is null then 'NA' else to_char(SDSEV) end
537 , '450', 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2), DDSTM = nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
538             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
539                 select v_PlanID, v_CMENEID, 'PMU', 'SDSTML', 'BTSAPMUBP', 'SDSTML', v_MBTSID, CN, SRN, SN
540                 , to_char(SDSTML), to_char(60), case 
541                     when BTPC = 0 or BTPC is null then 'NA' else to_char(SDSTML) end
542 , to_char(60), 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),ATMODE=nvl(ATMODE,2),DDSTM = nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
543             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
544                 select v_PlanID, v_CMENEID, 'PMU', 'ATMODE', 'BTSAPMUBP', 'ATMODE', v_MBTSID, CN, SRN, SN
545                 , to_char(ATMODE), '2', case 
546                     when BTPC = 0 or BTPC is null then 'NA' else to_char(ATMODE) end
547 , '2', 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),TDSTM =nvl(TDSTM,120),DDSTM=nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
548             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
549                 select v_PlanID, v_CMENEID, 'PMU', 'TDSTM', 'BTSAPMUBP', 'TDSTM', v_MBTSID, CN, SRN, SN
550                 , to_char(TDSTM), case 
551                     when ATMODE in  (1, 3) then '120' else '100' end
552 , case 
553                     when  (BTPC = 0 or BTPC is null or ATMODE in  (0, 2) ) then 'NA' else to_char(TDSTM) end
554 , case 
555                     when ATMODE in  (1, 3) then '120' else '100' end
556 , 'G', sys_guid(), 'BTPC = 1 ,DSCHGT0 =nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF = nvl(EFF,80),ENDV = nvl(ENDV,190),BATNUM = nvl(BATNUM,24),DSTML = nvl(DSTML,10),SDSEV = nvl(SDSEV,450),SDSTML = nvl(SDSTML,60),ATMODE = nvl(ATMODE,2),DDSTM = nvl(DDSTM,14)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
557             insert into t_RANCC_MBTSComParaTemp (PlanID,CMENEID,Moc,MocParameter,MocName,TableField,MBTSID,CN,SRN,SN,FieldValue,DefaultValue,cFieldValue,cDefauleValue,NEType,ObjId,RelatedField) 
558                 select v_PlanID, v_CMENEID, 'PMU', 'DDSTM', 'BTSAPMUBP', 'DDSTM', v_MBTSID, CN, SRN, SN
559                 , to_char(DDSTM), to_char(14), to_char(DDSTM), to_char(14), 'G', sys_guid(), 'BTPC = 1,DSCHGT0 = nvl(DSCHGT0,1200),DSCHGT1 = nvl(DSCHGT1,600),DSCHGT2 = nvl(DSCHGT2,300),DSCHGT3 = nvl(DSCHGT3,150),DSCHGT4 = nvl(DSCHGT4,100),DSCHGT5 = nvl(DSCHGT5,70),DSCHGT6 = nvl(DSCHGT6,50),DSCHGT7 = nvl(DSCHGT7,40),DSCHGT8 = nvl(DSCHGT8,30),DSCHGT9 = nvl(DSCHGT9,25),EFF=nvl(EFF,80),ENDV=nvl(ENDV,190),BATNUM=nvl(BATNUM,24),DSTML=nvl(DSTML,10),SDSEV=nvl(SDSEV,450),SDSTML=nvl(SDSTML,60),ATMODE=nvl(ATMODE,2)' from t_P_BTSAPMUBP_C3 where PlanID = v_PlanID and CMENEID = v_PhyNEID and BTSID = v_SiteId;
560         end;
561 end;
562 /

Succeed.
Warning:
PL/SQL(GS_PLSQL_DTS.SP_RANCC_MBTSCOMPMU_C3) terminated with compiling errors
[9:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[14:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[22:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[25:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[30:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[33:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[36:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[39:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[54:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[69:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[84:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[95:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[106:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[121:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[136:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[151:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[154:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[157:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[160:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[163:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[167:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.
[170:25] PLC-00843 The table or view GS_PLSQL_DTS.T_RANCC_MBTSCOMPARATEMP does not exist.


SQL> 
SQL> create or replace function FUNC_NEST_TRANSFER_005(V_ID5 INT) return int is
  2   V_num5 int;
  3 begin
  4   dbe_output.print_line('FUNC_NEST_TRANSFER_005 begin');
  5   V_num5:=V_ID5+1;
  6   dbe_output.print_line('FUNC_NEST_TRANSFER_005 end');
  7   return(V_num5);
  8 end FUNC_NEST_TRANSFER_005;
  9 /

Succeed.

SQL> 
SQL> create or replace function FUNC_NEST_TRANSFER_004(V_ID4 INT) return int is
  2   V_num4 int;
  3   V_num4_1 int;
  4 begin
  5   dbe_output.print_line('FUNC_NEST_TRANSFER_004 begin');
  6   V_num4:=V_ID4+1;
  7   select FUNC_NEST_TRANSFER_005(V_num4) into V_num4_1 from dual;
  8   dbe_output.print_line('FUNC_NEST_TRANSFER_004 end');
  9   return(V_num4_1);
 10 end FUNC_NEST_TRANSFER_004;
 11 /

Succeed.

SQL> 
SQL> create or replace function FUNC_NEST_TRANSFER_003(V_ID3 INT) return int is
  2   V_num3 int;
  3   V_num3_1 int;
  4 begin
  5   dbe_output.print_line('FUNC_NEST_TRANSFER_003 begin');
  6   V_num3:=V_ID3+1;
  7   select FUNC_NEST_TRANSFER_004(V_num3) into V_num3_1 from dual;
  8   dbe_output.print_line('FUNC_NEST_TRANSFER_003 end');  
  9   return(V_num3_1);
 10 end FUNC_NEST_TRANSFER_003;
 11 /

Succeed.

SQL> 
SQL> select FUNC_NEST_TRANSFER_003(3) from dual;

FUNC_NEST_TRANSFER_003(3)
-------------------------
6                        

1 rows fetched.

FUNC_NEST_TRANSFER_003 begin
FUNC_NEST_TRANSFER_004 begin
FUNC_NEST_TRANSFER_005 begin
FUNC_NEST_TRANSFER_005 end
FUNC_NEST_TRANSFER_004 end
FUNC_NEST_TRANSFER_003 end

SQL> 
SQL> drop function if exists FUNC_NEST_TRANSFER_003;

Succeed.

SQL> drop function if exists FUNC_NEST_TRANSFER_004;

Succeed.

SQL> drop function if exists FUNC_NEST_TRANSFER_005;

Succeed.

SQL> 
SQL> --statement level consistency test--
SQL> drop table if exists dbe_test_t1;

Succeed.

SQL> create table dbe_test_t1(f1 int);

Succeed.

SQL> insert into dbe_test_t1 (f1) values(1);

1 rows affected.

SQL> insert into dbe_test_t1 (f1) values(2);

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> CREATE OR REPLACE PROCEDURE dbe_test_proc AS
  2   rc1 sys_refcursor;
  3 BEGIN 
  4   update dbe_test_t1 set f1 = -1 where f1 = 1;
  5   delete from dbe_test_t1 where f1 = 2;
  6   OPEN rc1 FOR SELECT * FROM dbe_test_t1; 
  7   dbe_sql.return_cursor(rc1);
  8   commit;
  9 END;
 10 /

Succeed.

SQL> 
SQL> exec dbe_test_proc();

PL/SQL procedure successfully completed.

ResultSet #1

F1          
------------
-1          

1 rows fetched.


SQL> 
SQL> drop procedure dbe_test_proc;

Succeed.

SQL> drop table dbe_test_t1;

Succeed.

SQL> 
SQL> conn sys/sys@127.0.0.1:1611

connected.

SQL> SELECT NAME, LENGTH(SOURCE) FROM SYS_PROCS WHERE NAME='SP_RANCC_MBTSCOMPMU_C3';

NAME                                                             LENGTH(SOURCE)      
---------------------------------------------------------------- --------------------
SP_RANCC_MBTSCOMPMU_C3                                           66227               

1 rows fetched.

SQL> drop user if exists plsql_dts_nebula cascade;

Succeed.

SQL> drop user gs_plsql_dts cascade;

Succeed.

SQL> 
SQL> --test char expr length
SQL> drop table if exists test_char_006;

Succeed.

SQL> create table test_char_006 (name char(8000));

Succeed.

SQL> 
SQL> --expect success
SQL> DECLARE
  2   V_C varchar2(8000);
  3 BEGIN
  4   FOR I IN 1 .. 800 LOOP
  5     V_C := V_C || 'xxxxxxxxxx';
  6   END LOOP;
  7   EXECUTE IMMEDIATE 'insert into test_char_006 values('''|| V_C ||''')';
  8 END;
  9 /

PL/SQL procedure successfully completed.

SQL> --end
SQL> 
SQL> conn sys/sys@127.0.0.1:1611

connected.

SQL> create user gs_plsql_dts_trigger_0107 identified by Lh00420062;

Succeed.

SQL> grant dba to gs_plsql_dts_trigger_0107;

Succeed.

SQL> conn gs_plsql_dts_trigger_0107/Lh00420062@127.0.0.1:1611

connected.

SQL> drop table if exists tab_1;

Succeed.

SQL> drop table if exists tab_2;

Succeed.

SQL> 
SQL> create table tab_1 
  2 (
  3 c_int int,
  4 c_number number,
  5 c_varchar varchar(4000)
  6 );

Succeed.

SQL> insert into tab_1 values
  2 (1,1.25,'abcd');

1 rows affected.

SQL> 
SQL> create table tab_2 
  2 (
  3 c_int int,
  4 c_number number,
  5 c_varchar varchar(4000)
  6 );

Succeed.

SQL> 
SQL> insert into tab_2 values
  2 (1,1.12345,'aaa');

1 rows affected.

SQL> 
SQL> create or replace trigger trigger_1
  2 before insert on tab_2 
  3 declare 
  4 begin
  5   update tab_1 set c_number= 2019;
  6   dbe_output.print_line('here execute 1');
  7   update tab_2 set c_varchar= '454654';
  8   dbe_output.print_line('here execute 2');
  9 end;
 10 /

Succeed.

SQL> 
SQL> CREATE OR REPLACE PROCEDURE proc_1
  2 IS
  3 a int :=1;
  4 BEGIN  
  5   insert into tab_2 values(11,1.12345,'aaa');
  6 END;
  7 /

Succeed.

SQL> 
SQL> CREATE OR REPLACE PROCEDURE  proc_4
  2 IS
  3 b_temp int :=1;
  4 sql1 varchar(600);
  5 BEGIN  
  6  for i in 1..2
  7   loop
  8     proc_1();
  9     sql1 :='analyze table tab_1 COMPUTE STATISTICS';
 10     execute immediate sql1;
 11  end loop;
 12 END;
 13 /

Succeed.

SQL> 
SQL> call proc_4();

here execute 1
here execute 2
here execute 1
here execute 2

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> 
SQL> --begin
SQL> drop table if exists test_rrs;

Succeed.

SQL> create table test_rrs(a int, b int);

Succeed.

SQL> 
SQL> --expect success
SQL> declare 
  2    v_refcur1 SYS_REFCURSOR;
  3    a   int := 1;
  4 begin
  5 open v_refcur1 for   select a, count(*) from test_rrs group by a;
  6 dbe_sql.return_cursor(v_refcur1); 
  7 end;
  8 /

PL/SQL procedure successfully completed.

ResultSet #1

:1           COUNT(*)            
------------ --------------------

0 rows fetched.


SQL> --expect success
SQL> declare 
  2    type xxx is record(a int);
  3    v1 xxx;
  4    v_refcur1 SYS_REFCURSOR;
  5 begin
  6 v1.a := 1;
  7 open v_refcur1 for   select v1.a, count(*) from test_rrs group by v1.a;
  8 dbe_sql.return_cursor(v_refcur1); 
  9 end;
 10 /

PL/SQL procedure successfully completed.

ResultSet #1

:1           COUNT(*)            
------------ --------------------

0 rows fetched.


SQL> --end
SQL> 
SQL> create table whlp_t1(a int);

Succeed.

SQL> insert into whlp_t1 values(1);

1 rows affected.

SQL> insert into whlp_t1 values(2);

1 rows affected.

SQL> insert into whlp_t1 values(3);

1 rows affected.

SQL> commit;

Succeed.

SQL> set serveroutput on;

ON
SQL> 
SQL> declare
  2 cursor c1 is select * from whlp_t1;
  3 begin
  4         open  c1;
  5         dbe_output.print_line('rowcount= '||c1%rowcount);
  6         close c1;
  7 end;
  8 /

rowcount= 

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2 a whlp_t1%rowtype;
  3 begin
  4    for item in (select * from whlp_t1)
  5    loop
  6        dbe_output.print_line('SQL%rowcount is '||sql%rowcount);
  7    end loop;
  8 end;
  9 /

SQL%rowcount is 
SQL%rowcount is 
SQL%rowcount is 

PL/SQL procedure successfully completed.

SQL> 
SQL> conn sys/sys@127.0.0.1:1611

connected.

SQL> drop user if exists gs_plsql_dts_trigger_0107 cascade;

Succeed.

SQL> 
SQL> --test return value memory
SQL> --begin
SQL> create or replace function quotedStr (
  2     v_inStr in varchar2  )
  3 return varchar2 
  4 is
  5     v_transferredStr varchar2(2246) ;
  6 begin
  7     v_transferredStr := replace(v_inStr, '''', '''''');
  8     return  ltrim('''') || v_transferredStr || '''';
  9 end;
 10 /

Succeed.

SQL> 
SQL> alter system set COVERAGE_ENABLE = TRUE;

Succeed.

SQL> select quotedStr('829a057a-ab29-439e-bc68-ac85395cdaff');

QUOTEDSTR('829A057A-AB29-439E-BC68-AC85395CDAFF')               
----------------------------------------------------------------
'829a057a-ab29-439e-bc68-ac85395cdaff'                          

1 rows fetched.

SQL> 
SQL> alter system set COVERAGE_ENABLE = FALSE;

Succeed.

SQL> select quotedStr('829a057a-ab29-439e-bc68-ac85395cdaff');

QUOTEDSTR('829A057A-AB29-439E-BC68-AC85395CDAFF')               
----------------------------------------------------------------
'829a057a-ab29-439e-bc68-ac85395cdaff'                          

1 rows fetched.

SQL> 
SQL> drop function if exists quotedStr;

Succeed.

SQL> --end
SQL> 
SQL> --test case :recursive call(1)
SQL> create or replace procedure recursive_p2(a int)
  2 as
  3 c int;
  4 str varchar2(256);
  5 begin
  6 	dbe_output.print_line('recursive_p2');
  7 	str := 'begin recursive_p1(1); end;';
  8   execute immediate str;
  9 end;
 10 /

Succeed.

SQL> 
SQL> create or replace procedure recursive_p1(a int)
  2 as
  3 c int := 1;
  4 d int := 2;
  5 begin
  6 	dbe_output.print_line('recursive_p1');
  7   recursive_p2(a);
  8 end;
  9 /

Succeed.

SQL> 
SQL> exec recursive_p1(6);

recursive_p1
recursive_p2
recursive_p1
recursive_p2
recursive_p1
recursive_p2
recursive_p1
recursive_p2
recursive_p1
recursive_p2
recursive_p1
recursive_p2
recursive_p1
recursive_p2
recursive_p1
recursive_p2
recursive_p1
recursive_p2
recursive_p1
recursive_p2
recursive_p1
recursive_p2
recursive_p1
recursive_p2
recursive_p1
recursive_p2
recursive_p1
recursive_p2
recursive_p1
recursive_p2
recursive_p1
recursive_p2
recursive_p1
recursive_p2
recursive_p1
recursive_p2
recursive_p1
recursive_p2
recursive_p1
recursive_p2
recursive_p1
recursive_p2
recursive_p1
recursive_p2
recursive_p1
recursive_p2
recursive_p1
recursive_p2
recursive_p1
recursive_p2
recursive_p1
recursive_p2
recursive_p1
recursive_p2
recursive_p1
recursive_p2
recursive_p1
recursive_p2
CT-00932, [7:3] PL/SQL(SYS.RECURSIVE_P1) terminated with execute errors
[8:3] PL/SQL(SYS.RECURSIVE_P2) terminated with execute errors
[1:7] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[7:3] PL/SQL(SYS.RECURSIVE_P1) terminated with execute errors
[8:3] PL/SQL(SYS.RECURSIVE_P2) terminated with execute errors
[1:7] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[7:3] PL/SQL(SYS.RECURSIVE_P1) terminated with execute errors
[8:3] PL/SQL(SYS.RECURSIVE_P2) terminated with execute errors
[1:7] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[7:3] PL/SQL(SYS.RECURSIVE_P1) terminated with execute errors
[8:3] PL/SQL(SYS.RECURSIVE_P2) terminated with execute errors
[1:7] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[7:3] PL/SQL(SYS.RECURSIVE_P1) terminated with execute errors
[8:3] PL/SQL(SYS.RECURSIVE_P2) terminated with execute errors
[1:7] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[7:3] PL/SQL(SYS.RECURSIVE_P1) terminated with execute errors
[8:3] PL/SQL(SYS.RECURSIVE_P2) terminated with execute errors
[1:7] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[7:3] PL/SQL(SYS.RECURSIVE_P1) terminated with execute errors
[8:3] PL/SQL(SYS.RECURSIVE_P2) terminated with execute errors
[1:7] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[7:3] PL/SQL(SYS.RECURSIVE_P1) terminated with execute errors
[8:3] PL/SQL(SYS.RECURSIVE_P2) terminated with execute errors
[1:7] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[7:3] PL/SQL(SYS.RECURSIVE_P1) terminated with execute errors
[8:3] PL/SQL(SYS.RECURSIVE_P2) terminated with execute errors
[1:7] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[7:3] PL/SQL(SYS.RECURSIVE_P1) terminated with execute errors
[8:3] PL/SQL(SYS.RECURSIVE_P2) terminated with execute errors
[1:7] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[6:2] PL/SQL(SYS.RECURSIVE_P1) terminated with execute errors
[6:2] PL/SQL(DBE_OUTPUT.PRINT_LINE) terminated with execute errors
CT-00104, Session stack over
SQL> --end
SQL> 
SQL> --test case :recursive call(2)
SQL> create or replace procedure recursive_self_p(a int)
  2 as
  3 c int := 1;
  4 d int := 2;
  5 begin
  6 	dbe_output.print_line(a);
  7 	c := a-1;
  8 	if c > 0 then
  9   recursive_self_p(c);
 10   end if;
 11 end;
 12 /

Succeed.

SQL> 
SQL> exec recursive_self_p(6);

6
5
4
3
2
1

PL/SQL procedure successfully completed.

SQL> --end
SQL> 
SQL> --DTS2019062013489
SQL> drop table if exists t_groupoperationlog;

Succeed.

SQL> create table t_groupoperationlog
  2 (
  3 logid NUMBER(20) not null,
  4 logtime DATE not null,
  5 operationtype NUMBER(2) not null,
  6 phonenumber VARCHAR2(24) not null,
  7 groupid NUMBER(20),
  8 externalCallGrpID VARCHAR2(40),
  9 membernumber VARCHAR2(24),
 10 transactionid varchar2(30)
 11 );

Succeed.

SQL> create or replace function f_log_di_groupoperationlog
  2 ( i_operationtype in t_groupoperationlog.operationtype%type,
  3 i_phonenumber in t_groupoperationlog.phonenumber%type,
  4 i_groupid in t_groupoperationlog.groupid%type,
  5 i_externalcallgrpid in t_groupoperationlog.externalcallgrpid%type,
  6 i_membernumber in t_groupoperationlog.membernumber%type,
  7 str_transactionid in varchar2,
  8 i_result out integer
  9 )
 10 return integer as
 11 begin
 12 null; 
 13 end;
 14 /

Succeed.

SQL> drop table t_groupoperationlog;

Succeed.

SQL> 
SQL> drop table if exists JOBMATCH_MAIN;

Succeed.

SQL> create table JOBMATCH_MAIN(DUTY_POSITION int, PERFORMANCE int);

Succeed.

SQL> 
SQL> CREATE OR REPLACE FUNCTION hbh_01(BATCH_ID IN VARCHAR2,
  2 M_ID IN VARCHAR2,
  3 MATCH_RESULT IN VARCHAR2) RETURN VARCHAR IS
  4 RESULT VARCHAR2(2000);
  5 P_PERFORMANCE JOBMATCH_MAIN.PERFORMANCE%TYPE;
  6 P_DUTY_POSITION JOBMATCH_MAIN.DUTY_POSITION%TYPE;
  7 
  8 BEGIN
  9 RETURN(rtrim(RESULT, '$'));
 10 END ;
 11 /

Succeed.

SQL> 
SQL> drop table JOBMATCH_MAIN;

Succeed.

SQL> --end
SQL> 
SQL> --DTS2019110701401
SQL> drop table if exists TEST_1401;

Succeed.

SQL> CREATE TABLE TEST_1401(
  2   T12 CHAR(400),
  3   T13 CHAR(100),
  4   T22 CHAR(10)
  5 );

Succeed.

SQL> INSERT INTO TEST_1401 VALUES('1','abade','true');

1 rows affected.

SQL> INSERT INTO TEST_1401 VALUES('dbce','prode','true');

1 rows affected.

SQL> commit;

Succeed.

SQL> CREATE OR REPLACE PROCEDURE PROC_IN_OUT_PARAM_001(
  2 P1 IN CHAR,
  3 P2 OUT VARCHAR
  4 )
  5 AS
  6 BEGIN
  7 SELECT T13 INTO P2 FROM TEST_1401 WHERE T12=P1;
  8 dbe_output.print_line(P2);
  9 EXCEPTION
 10 WHEN NO_DATA_FOUND THEN dbe_output.print_line('NO_DATA_FOUND');
 11 END;
 12 /

Succeed.

SQL> DECLARE
  2 V_P2 CHAR(100);
  3 BEGIN
  4 PROC_IN_OUT_PARAM_001('dbce',V_P2);
  5 dbe_output.print_line(V_P2);
  6 END;
  7 /

prode                                                                                               
prode                                                                                               

PL/SQL procedure successfully completed.

SQL> CREATE OR REPLACE PROCEDURE PROC_IN_OUT_PARAM_002(
  2 P1 IN CHAR,
  3 P2 OUT VARCHAR
  4 )
  5 AS
  6 BEGIN
  7 SELECT T13 INTO P2 FROM TEST_1401 WHERE T12=P1;
  8 dbe_output.print_line(P2);
  9 EXCEPTION
 10 WHEN NO_DATA_FOUND THEN dbe_output.print_line('NO_DATA_FOUND');
 11 END;
 12 /

Succeed.

SQL> DECLARE
  2 V_P2 CHAR(100);
  3 BEGIN
  4 PROC_IN_OUT_PARAM_002(1,V_P2);
  5 dbe_output.print_line(V_P2);
  6 END;
  7 /

abade                                                                                               
abade                                                                                               

PL/SQL procedure successfully completed.

SQL> drop table TEST_1401;

Succeed.

SQL> drop PROCEDURE PROC_IN_OUT_PARAM_001;

Succeed.

SQL> drop PROCEDURE PROC_IN_OUT_PARAM_002;

Succeed.

SQL> --end
SQL> 
SQL> --DTS2019110614000
SQL> drop table if exists emp;

Succeed.

SQL> create table emp(empno int,ename varchar(10),job varchar(10) ,sal integer);

Succeed.

SQL> insert into emp values(1,'zhangsan','doctor1',10000),(2,'zhangsan2','doctor2',10000),(123,'zhangsan3','doctor3',10000);

3 rows affected.

SQL> create or  replace procedure procedure3(a int) is
  2 cursor mycursor is select * from emp where empno != 123 and sal=10000;
  3 b emp%rowtype;
  4 mysyscur  sys_refcursor;
  5 strSQL1 varchar(1000);
  6 strSQL2 varchar(1000);
  7 begin
  8 strSQL1 := 'select * from emp  where  sal <> 10000';
  9 strSQL2 := '';
 10  if a <= 10 then
 11    for i in mycursor
 12    loop
 13     dbe_output.print_line(i.ename||' is not 10000');
 14    end loop;
 15  elsif a >10 and a <100 then
 16   open mysyscur for  strSQL1;
 17   fetch mysyscur into  b;
 18   dbe_output.print_line(b.ename||' a > 10 and a < 100');
 19   close mysyscur;
 20  else
 21   open mysyscur for strSQL2;
 22   dbe_output.print_line('else a > 10 and a < 100');
 23  end if;
 24 end;
 25 /

Succeed.

SQL> call procedure3 ('abc');

CT-00932, [1:2] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[1:14] CT-00636, Invalid number -- unexpected character

SQL> drop procedure procedure3;

Succeed.

SQL> 
SQL> DECLARE
  2   type test_type_limit is varray(20) of int;
  3 	var_C test_type_limit := test_type_limit(123, 234, 345);
  4 BEGIN
  5 	dbe_output.print_line(var_C(4));
  6 END;
  7 /

CT-00932, [5:2] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[5:2] PL/SQL(DBE_OUTPUT.PRINT_LINE) terminated with execute errors
CT-00912, Subscript beyond count

SQL> 
SQL> CREATE OR REPLACE PROCEDURE PRO1(C_BOOL BOOL, C_DATETIME DATETIME) IS A_CHAR VARCHAR(40);
  2  C_TIME DATE;
  3  E_BOOL BOOL;
  4  BEGIN
  5  C_TIME := UNIX_TIMESTAMP(C_DATETIME) ;
  6   E_BOOL := NOT C_BOOL;
  7  END PRO1;
  8 /

Succeed.
Warning:
PL/SQL(SYS.PRO1) terminated with compiling errors
[5:12] PLC-00606 Inconsistent datatypes, expected DATE - got BINARY_BIGINT


SQL> BEGIN
  2     PRO1('1',CAST(CAST('2007-09-23' AS DATETIME) AS DATETIME));
  3 END;
  4 /

CT-00944, PL/SQL(SYS.ANONYMOUS BLOCK) terminated with compiling errors
[2:5] PLC-00944 PL/SQL(SYS.PRO1) terminated with compiling errors
[5:12] PLC-00606 Inconsistent datatypes, expected DATE - got BINARY_BIGINT


SQL> DROP PROCEDURE PRO1;

Succeed.

SQL> 
SQL> --DTS2019111300893
SQL> create or replace type v_type_t_17 force is object(id int,name varchar(3))not final;
  2 /

Succeed.

SQL> create or replace type  v_type_t_017 under v_type_t_17(a number,b int) final;
  2 /

Succeed.

SQL> drop table if exists AW_T_1;

Succeed.

SQL> create table AW_T_1(id int,name varchar(3),a number,b int);

Succeed.

SQL> insert into AW_T_1 values (4,'fd',4,8);

1 rows affected.

SQL> create or replace procedure proc_t_1 is
  2 sec_del v_type_t_017:=v_type_t_017(null,null,null,null);
  3 begin
  4 select * into sec_del.id,sec_del.name,sec_del.a,sec_del.b from AW_T_1;
  5 dbe_output.print_line(sec_del.id||' '||sec_del.name||' '||sec_del.a||' '||sec_del.b);
  6 end;
  7 /

Succeed.

SQL> call proc_t_1();

4 fd 4 8

PL/SQL procedure successfully completed.

SQL> drop procedure proc_t_1;

Succeed.

SQL> drop table AW_T_1;

Succeed.

SQL> drop type v_type_t_017;

Succeed.

SQL> drop type v_type_t_17;

Succeed.

SQL> 
SQL> --DTS2019111300691
SQL> create or replace type my_type1 is object (id number, name varchar2(32));
  2  /

Succeed.

SQL> create or replace type my_type2 is table of my_type1;
  2  /

Succeed.

SQL> create or replace type varray09 force is varray(4) of varchar(100);
  2 /

Succeed.

SQL> CREATE OR REPLACE TYPE varray9 force is varray(4) of varchar(100);
  2 /

Succeed.

SQL> create table test_pack_table(id number, name varchar2(32));

Succeed.

SQL> 
SQL> insert into test_pack_table values(1,'happy');

1 rows affected.

SQL> insert into test_pack_table values(2,'like');

1 rows affected.

SQL> insert into test_pack_table values(3,'love');

1 rows affected.

SQL> 
SQL> CREATE OR REPLACE PACKAGE pack_coll_09
  2 IS
  3 FUNCTION pack_funcl_09(xxx my_type2) return my_type2;
  4 procedure pack_procl_09(ap varray09,bp out varray9);
  5 END pack_coll_09;
  6 /

Succeed.

SQL> CREATE OR REPLACE PACKAGE body pack_coll_09
  2 IS
  3 FUNCTION pack_funcl_09(xxx my_type2) return my_type2 is
  4 tab9 my_type2;
  5 n int;
  6 begin
  7 tab9 :=my_type2();
  8 n:=0;
  9 for r in (select id,name from test_pack_table)
 10      loop
 11         tab9.extend;
 12         n := n + 1;
 13        tab9(n) := my_type1(r.id, r.name);
 14      end loop;
 15 return tab9;
 16 end;
 17 procedure pack_procl_09 (ap varray09,bp out varray9) is
 18 c int;
 19 begin
 20 c :=1;
 21 end;
 22 END pack_coll_09;
 23 /

Succeed.

SQL> 
SQL> drop table test_pack_table;

Succeed.

SQL> drop type my_type1 force;

Succeed.

SQL> drop type my_type2 force;

Succeed.

SQL> drop type varray09 force;

Succeed.

SQL> drop type varray9 force;

Succeed.

SQL> drop PACKAGE pack_coll_09;

Succeed.

SQL> 
SQL> --DTS2020030546475
SQL> Declare
  2 t int;
  3 BEGIN
  4 t:=0;
  5 FOR i IN ((t))..3 LOOP
  6 DBE_OUTPUT.PRINT_LINE('here:' || i);
  7 END LOOP;
  8 END;
  9 /

here:0
here:1
here:2
here:3

PL/SQL procedure successfully completed.

SQL> 
SQL> Declare
  2 t int;
  3 BEGIN
  4 t:=0;
  5 FOR i IN (t + 1)..3 LOOP
  6 DBE_OUTPUT.PRINT_LINE('here:' || i);
  7 END LOOP;
  8 END;
  9 /

here:1
here:2
here:3

PL/SQL procedure successfully completed.

SQL> 
SQL> Declare
  2 a int;
  3 b int;
  4 c int;
  5 begin
  6 a:=14;
  7 b:=7;
  8 c:=a
  9 / b;
 10 DBE_OUTPUT.PRINT_LINE(c);
 11 end;
 12 /

2

PL/SQL procedure successfully completed.

SQL> 
SQL> Declare
  2 a int;
  3 b int;
  4 c int;
  5 begin
  6 a:=14;
  7 b:=7;
  8 c:=a/
  9 b;
 10 DBE_OUTPUT.PRINT_LINE(c);
 11 end;
 12 /

2

PL/SQL procedure successfully completed.

SQL> 
SQL> --DTS2020033007668 end judgement
SQL> drop function if exists F1;

Succeed.

SQL> CREATE OR REPLACE FUNCTION F1 RETURN char IS
  2 A char(100) ;
  3 B NUMERIC(6,4);
  4 BEGIN
  5 B := 20.2345;
  6 SELECT B INTO A FROM dual;
  7 RETURN A;
  8 ENDT; 
  9   /

Succeed.
Warning:
PL/SQL(SYS.F1) terminated with compiling errors
[8:1] PLC-00828 procedure SYS.ENDT does not exist
[9:3] PLC-00954 more text expected but EOF found


SQL> 
SQL> CREATE OR REPLACE FUNCTION F1 RETURN char AS
  2 A char(100) ;
  3 B NUMERIC(6,4);
  4 BEGIN
  5 B := 20.2345;
  6 SELECT B INTO A FROM dual;
  7 RETURN A;
  8 END;
  9 //
 10 fafd
 11 fsdf
 12 /

Succeed.
Warning:
PL/SQL(SYS.F1) terminated with compiling errors
[9:1] PLC-00954 EOF expected but more text found


SQL> 
SQL> CREATE OR REPLACE FUNCTION F1 RETURN char AS
  2 A char(100) ;
  3 B NUMERIC(6,4);
  4 BEGIN
  5 B := 20.2345;
  6 SELECT B INTO A FROM dual;
  7 RETURN A;
  8 END;
  9 ///
 10 fafd
 11 fsdf
 12 /

Succeed.
Warning:
PL/SQL(SYS.F1) terminated with compiling errors
[9:1] PLC-00954 EOF expected but more text found


SQL> drop function if exists F1;

Succeed.

SQL> 
SQL> declare
  2 var int;
  3 begin
  4 var := 
  5 /*fd
  6 saf*/1;
  7 end;
  8 /

PL/SQL procedure successfully completed.

SQL> 
SQL> set serveroutput on;

ON
SQL> declare
  2 var int;
  3 a int := 2;
  4 begin
  5 var := a; /*ss*/
  6 DBE_OUTPUT.PRINT_LINE(var);
  7 end;
  8 ///
  9 /

CT-00944, PL/SQL(SYS.ANONYMOUS BLOCK) terminated with compiling errors
[8:1] PLC-00954 EOF expected but more text found

SQL> 
SQL> begin
  2 DBE_OUTPUT.PRINT_LINE('ok');
  3 end;
  4 /;
  5 /

CT-00944, PL/SQL(SYS.ANONYMOUS BLOCK) terminated with compiling errors
[4:1] PLC-00954 EOF expected but more text found

SQL> 
SQL> begin
  2 DBE_OUTPUT.PRINT_LINE('ok');
  3 end;
  4 ;/
  5 /

CT-00944, PL/SQL(SYS.ANONYMOUS BLOCK) terminated with compiling errors
[4:1] PLC-00954 '/' expected but ; found

SQL> 
SQL> begin
  2 DBE_OUTPUT.PRINT_LINE('ok');
  3 end;
  4 /*ss
  5 */
  6 /

ok

PL/SQL procedure successfully completed.

SQL> 
SQL> begin
  2 DBE_OUTPUT.PRINT_LINE('ok');
  3 end;
  4 /*ss
  5 *//
  6 /

CT-00944, PL/SQL(SYS.ANONYMOUS BLOCK) terminated with compiling errors
[5:3] PLC-00954 EOF expected but more text found

SQL> 
SQL> create or replace type type_end is table of int;/
  2 /

Succeed.
Warning:
PL/SQL(SYS.TYPE_END) terminated with compiling errors
[1:49] PLC-00954 EOF expected but more text found


SQL> drop type if exists type_end;

Succeed.

SQL> 
SQL> begin
  2 null;
  3 end;
  4 /--aa
  5 /

CT-00944, PL/SQL(SYS.ANONYMOUS BLOCK) terminated with compiling errors
[4:1] PLC-00954 EOF expected but more text found

SQL> 
SQL> begin
  2 null;
  3 end;
  4 /*ss*/ /
  5   /

CT-00944, PL/SQL(SYS.ANONYMOUS BLOCK) terminated with compiling errors
[4:8] PLC-00954 EOF expected but more text found

SQL> 
SQL> begin
  2 null;
  3 end;
  4 	/

PL/SQL procedure successfully completed.

SQL> 
SQL> begin
  2 null;
  3 end;
  4 /*
  5 
  6 */
  7 /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> set serveroutput off;

OFF
SQL> 


