

SQL> drop table if exists std_temp_t1;

Succeed.

SQL> create global temporary table std_temp_t1(field_name varchar(4000), avg_value float, count_value int)
  2 on commit delete rows;

Succeed.

SQL> 
SQL> drop table if exists std_temp_t2;

Succeed.

SQL> create global temporary table std_temp_t2(field_name varchar(4000), sum_value float)
  2 on commit delete rows;

Succeed.

SQL> 
SQL> create or replace procedure std(std_expr in varchar, table_name in varchar, where_cond in varchar, group_field_name in varchar, std_ref out sys_refcursor)
  2 as 
  3     sql         varchar(4000);
  4     p_avg       float;
  5     p_sum       float;
  6     p_count     int;
  7 
  8 Begin
  9 
 10     if group_field_name is null then
 11         
 12         sql := 'select avg(' || std_expr || '),count(*) from ' || table_name;
 13         if where_cond is not null then
 14             sql := sql || ' where ' || where_cond;
 15         end if;
 16         execute immediate sql into p_avg, p_count;
 17     
 18         if p_count = 0 then
 19             open std_ref for select null from dual;
 20             return;
 21         end if;
 22         
 23         sql := 'select sum(power(' || std_expr || ' - ' || p_avg || ',2)) from ' || table_name;
 24         if where_cond is not null then
 25             sql := sql || ' where ' || where_cond;
 26         end if;
 27         execute immediate sql into p_sum;
 28         
 29         sql := 'select sqrt(' || p_sum || '/' || p_count || ') as std from dual';
 30         open std_ref for sql;
 31         
 32     else
 33     
 34         delete from std_temp_t1;
 35         delete from std_temp_t2;
 36         
 37         sql := 'insert into std_temp_t1(field_name, avg_value, count_value) select ' || group_field_name || ',avg(' || std_expr || '),count(*) from ' || table_name;
 38         if where_cond is not null then
 39             sql := sql || ' where ' || where_cond;
 40         end if;
 41         sql := sql || ' group by ' || group_field_name;
 42         execute immediate sql;
 43         
 44         sql := 'insert into std_temp_t2(field_name, sum_value) select ' || group_field_name || ',sum(power(a.' || std_expr || ' - b.avg_value, 2)) from ' || table_name || ' a ' ||
 45                'join std_temp_t1 b on a.' || group_field_name || '=b.field_name';
 46         if where_cond is not null then
 47             sql := sql || ' where ' || where_cond;
 48         end if;
 49         sql := sql || ' group by a.' || group_field_name;
 50         execute immediate sql;
 51         
 52         sql := 'select a.field_name as ' || group_field_name || ', sqrt(b.sum_value / a.count_value) as std from std_temp_t1 a join std_temp_t2 b on a.field_name=b.field_name order by '|| group_field_name ;
 53         open std_ref for sql;
 54 
 55     end if;
 56 
 57 end;
 58 /

Succeed.

SQL> 
SQL> 
SQL> 
SQL> create or replace procedure stdev(std_expr in varchar, table_name in varchar, where_cond in varchar, group_field_name in varchar, std_ref out sys_refcursor)
  2 as 
  3     sql         varchar(4000);
  4     p_avg       float;
  5     p_sum       float;
  6     p_count     int;
  7 
  8 Begin
  9 
 10     if group_field_name is null then
 11         
 12         sql := 'select avg(' || std_expr || '),count(*) from ' || table_name;
 13         if where_cond is not null then
 14             sql := sql || ' where ' || where_cond;
 15         end if;
 16         execute immediate sql into p_avg, p_count;
 17     
 18         if p_count < 2 then
 19             open std_ref for select null from dual;
 20             return;
 21         end if;
 22         
 23         sql := 'select sum(power(' || std_expr || ' - ' || p_avg || ',2)) from ' || table_name;
 24         if where_cond is not null then
 25             sql := sql || ' where ' || where_cond;
 26         end if;
 27         execute immediate sql into p_sum;
 28         
 29         sql := 'select sqrt(' || p_sum || '/(' || p_count || '-1)) as std from dual';
 30         open std_ref for sql;
 31         
 32     else
 33     
 34         delete from std_temp_t1;
 35         delete from std_temp_t2;
 36         
 37         sql := 'insert into std_temp_t1(field_name, avg_value, count_value) select ' || group_field_name || ',avg(' || std_expr || '),count(*) from ' || table_name;
 38         if where_cond is not null then
 39             sql := sql || ' where ' || where_cond;
 40         end if;
 41         sql := sql || ' group by ' || group_field_name;
 42         execute immediate sql;
 43         
 44         select count(*) into p_count from std_temp_t1;
 45         if p_count = 1 then
 46             sql := 'select field_name as ' || group_field_name || ', null as std from std_temp_t1';
 47             open std_ref for sql;
 48             return;
 49         end if;
 50         
 51         sql := 'insert into std_temp_t2(field_name, sum_value) select ' || group_field_name || ',sum(power(a.' || std_expr || ' - b.avg_value, 2)) from ' || table_name || ' a ' ||
 52                'join std_temp_t1 b on a.' || group_field_name || '=b.field_name';
 53         if where_cond is not null then
 54             sql := sql || ' where ' || where_cond;
 55         end if;
 56         sql := sql || ' group by a.' || group_field_name;
 57         execute immediate sql;
 58         
 59         sql := 'select a.field_name as ' || group_field_name || ', sqrt(b.sum_value / (a.count_value-1)) as std from std_temp_t1 a join std_temp_t2 b on a.field_name=b.field_name order by '|| group_field_name;
 60         open std_ref for sql;
 61 
 62     end if;
 63 
 64 end;
 65 /

Succeed.

SQL> 
SQL> 
SQL> drop table if exists std_test1;

Succeed.

SQL> create table std_test1(aa int, bb int);

Succeed.

SQL> insert into std_test1 values(1,5),(1,6),(1,9),(1,10),(1,5),(2,5),(2,4),(2,9);

8 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> drop table if exists std_test2;

Succeed.

SQL> create table std_test2(aa int, bb int);

Succeed.

SQL> insert into std_test2 values(5,5);

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> drop table if exists std_test3;

Succeed.

SQL> create table std_test3(aa int, bb int);

Succeed.

SQL> 
SQL> 
SQL> 
SQL> set serveroutput on;

ON
SQL> 
SQL> drop table if exists my_std_t;

Succeed.

SQL> create table my_std_t(aa varchar(100), std float);

Succeed.

SQL> drop table if exists my_std_t2;

Succeed.

SQL> create table my_std_t2(std float);

Succeed.

SQL> 
SQL> 
SQL> declare
  2     std_ref    sys_refcursor;
  3     my_std     my_std_t%ROWTYPE;
  4 begin
  5     std('bb','std_test1','aa>0', 'aa', std_ref);
  6     loop
  7         fetch std_ref into my_std;
  8         exit when std_ref%NOTFOUND;
  9         dbe_output.print_line('value= ' || my_std.aa || ' , ' || my_std.std);
 10     end loop;
 11     close std_ref;
 12 end;
 13 /

value= 1 , 2.0976176963403
value= 2 , 2.16024689946929

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> declare
  2     std_ref    sys_refcursor;
  3     my_std     my_std_t%ROWTYPE;
  4 begin
  5     std('bb','std_test1',null, 'aa', std_ref);
  6     loop
  7         fetch std_ref into my_std;
  8         exit when std_ref%NOTFOUND;
  9         dbe_output.print_line('value= ' || my_std.aa || ' , ' || my_std.std);
 10     end loop;
 11     close std_ref;
 12 end;
 13 /

value= 1 , 2.0976176963403
value= 2 , 2.16024689946929

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> declare
  2     std_ref    sys_refcursor;
  3     my_std     my_std_t2%ROWTYPE;
  4 begin
  5     std('bb','std_test1','aa>0', null, std_ref);
  6     loop
  7         fetch std_ref into my_std;
  8         exit when std_ref%NOTFOUND;
  9         dbe_output.print_line('value= ' ||  my_std.std);
 10     end loop;
 11     close std_ref;
 12 end;
 13 /

value= 2.17586189819115

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> declare
  2     std_ref    sys_refcursor;
  3     my_std     my_std_t2%ROWTYPE;
  4 begin
  5     std('bb','std_test1',null, null, std_ref);
  6     loop
  7         fetch std_ref into my_std;
  8         exit when std_ref%NOTFOUND;
  9         dbe_output.print_line('value= ' ||  my_std.std);
 10     end loop;
 11     close std_ref;
 12 end;
 13 /

value= 2.17586189819115

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2     std_ref    sys_refcursor;
  3     my_std     my_std_t%ROWTYPE;
  4 begin
  5     std('bb','std_test2',null, 'aa', std_ref);
  6     loop
  7         fetch std_ref into my_std;
  8         exit when std_ref%NOTFOUND;
  9         dbe_output.print_line('value= ' || my_std.aa || ' , ' || my_std.std);
 10     end loop;
 11     close std_ref;
 12 end;
 13 /

value= 5 , 0

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> declare
  2     std_ref    sys_refcursor;
  3     my_std     my_std_t2%ROWTYPE;
  4 begin
  5     std('bb','std_test2',null, null, std_ref);
  6     loop
  7         fetch std_ref into my_std;
  8         exit when std_ref%NOTFOUND;
  9         dbe_output.print_line('value= ' || my_std.std);
 10     end loop;
 11     close std_ref;
 12 end;
 13 /

value= 0

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> declare
  2     std_ref    sys_refcursor;
  3     my_std     my_std_t%ROWTYPE;
  4 begin
  5     std('bb','std_test3',null, 'aa', std_ref);
  6     loop
  7         fetch std_ref into my_std;
  8         exit when std_ref%NOTFOUND;
  9         dbe_output.print_line('value= ' || my_std.aa || ' , ' || my_std.std);
 10     end loop;
 11     close std_ref;
 12 end;
 13 /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> declare
  2     std_ref    sys_refcursor;
  3     my_std     my_std_t2%ROWTYPE;
  4 begin
  5     std('bb','std_test3',null, null, std_ref);
  6     loop
  7         fetch std_ref into my_std;
  8         exit when std_ref%NOTFOUND;
  9         dbe_output.print_line('value= ' || my_std.std);
 10     end loop;
 11     close std_ref;
 12 end;
 13 /

value= 

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> declare
  2     std_ref    sys_refcursor;
  3     my_std     my_std_t%ROWTYPE;
  4 begin
  5     stdev('bb','std_test1','aa>0', 'aa', std_ref);
  6     loop
  7         fetch std_ref into my_std;
  8         exit when std_ref%NOTFOUND;
  9         dbe_output.print_line('value= ' || my_std.aa || ' , ' || my_std.std);
 10     end loop;
 11     close std_ref;
 12 end;
 13 /

value= 1 , 2.34520787991171
value= 2 , 2.64575131106459

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> declare
  2     std_ref    sys_refcursor;
  3     my_std     my_std_t%ROWTYPE;
  4 begin
  5     stdev('bb','std_test1',null, 'aa', std_ref);
  6     loop
  7         fetch std_ref into my_std;
  8         exit when std_ref%NOTFOUND;
  9         dbe_output.print_line('value= ' || my_std.aa || ' , ' || my_std.std);
 10     end loop;
 11     close std_ref;
 12 end;
 13 /

value= 1 , 2.34520787991171
value= 2 , 2.64575131106459

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> declare
  2     std_ref    sys_refcursor;
  3     my_std     my_std_t2%ROWTYPE;
  4 begin
  5     stdev('bb','std_test1','aa>0', null, std_ref);
  6     loop
  7         fetch std_ref into my_std;
  8         exit when std_ref%NOTFOUND;
  9         dbe_output.print_line('value= ' ||  my_std.std);
 10     end loop;
 11     close std_ref;
 12 end;
 13 /

value= 2.32609421256197

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> declare
  2     std_ref    sys_refcursor;
  3     my_std     my_std_t2%ROWTYPE;
  4 begin
  5     stdev('bb','std_test1',null, null, std_ref);
  6     loop
  7         fetch std_ref into my_std;
  8         exit when std_ref%NOTFOUND;
  9         dbe_output.print_line('value= ' ||  my_std.std);
 10     end loop;
 11     close std_ref;
 12 end;
 13 /

value= 2.32609421256197

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2     std_ref    sys_refcursor;
  3     my_std     my_std_t%ROWTYPE;
  4 begin
  5     stdev('bb','std_test2',null, 'aa', std_ref);
  6     loop
  7         fetch std_ref into my_std;
  8         exit when std_ref%NOTFOUND;
  9         dbe_output.print_line('value= ' || my_std.aa || ' , ' || my_std.std);
 10     end loop;
 11     close std_ref;
 12 end;
 13 /

value= 5 , 

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> declare
  2     std_ref    sys_refcursor;
  3     my_std     my_std_t2%ROWTYPE;
  4 begin
  5     stdev('bb','std_test2',null, null, std_ref);
  6     loop
  7         fetch std_ref into my_std;
  8         exit when std_ref%NOTFOUND;
  9         dbe_output.print_line('value= ' || my_std.std);
 10     end loop;
 11     close std_ref;
 12 end;
 13 /

value= 

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2     std_ref    sys_refcursor;
  3     my_std     my_std_t%ROWTYPE;
  4 begin
  5     stdev('bb','std_test3',null, 'aa', std_ref);
  6     loop
  7         fetch std_ref into my_std;
  8         exit when std_ref%NOTFOUND;
  9         dbe_output.print_line('value= ' || my_std.aa || ' , ' || my_std.std);
 10     end loop;
 11     close std_ref;
 12 end;
 13 /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> declare
  2     std_ref    sys_refcursor;
  3     my_std     my_std_t2%ROWTYPE;
  4 begin
  5     stdev('bb','std_test3',null, null, std_ref);
  6     loop
  7         fetch std_ref into my_std;
  8         exit when std_ref%NOTFOUND;
  9         dbe_output.print_line('value= ' || my_std.std);
 10     end loop;
 11     close std_ref;
 12 end;
 13 /

value= 

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> 
SQL> 
SQL> 
SQL> drop table if exists T_APP;

Succeed.

SQL> create table T_APP(SCR_VA_TW varchar(100), SCR_VA_AA int, APP_NBR varchar(100), SCENE_COD varchar(10), CAS_EYDT_TIM varchar(38));

Succeed.

SQL> insert into T_APP values('scr1', 5, 'nbr1', 'B602D', '2018-08-30 00:00:00');

1 rows affected.

SQL> insert into T_APP values('scr1', 6, 'nbr2', 'AG19D', '2018-08-30 00:00:01');

1 rows affected.

SQL> insert into T_APP values('scr1', 7, 'nbr3', 'G122N', '2018-08-30 00:00:02');

1 rows affected.

SQL> insert into T_APP values('scr1', 9, 'nbr4', 'N022C', '2018-08-30 00:00:03');

1 rows affected.

SQL> insert into T_APP values('scr1', 5, 'nbr5', 'I032N', '2018-08-30 00:00:04');

1 rows affected.

SQL> insert into T_APP values('scr2', 5, 'nbr1', 'F042F', '2018-08-30 00:00:00');

1 rows affected.

SQL> insert into T_APP values('scr2', 6, 'nbr2', 'F042F', '2018-08-30 00:00:01');

1 rows affected.

SQL> insert into T_APP values('scr2', 7, 'nbr3', 'F042F', '2018-08-30 00:00:02');

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> declare
  2     std_ref    sys_refcursor;
  3     my_std     my_std_t%ROWTYPE;
  4 begin
  5     stdev('SCR_VA_AA','T_APP','APP_NBR in (select APP_NBR from T_APP where SCENE_COD in (''B602D'',''AG19D'',''G122N'',''N022C'',''I032N'',''F042F'')) and CAS_EYDT_TIM between ''2018-08-30 00:00:00'' and  ''2018-08-30 00:15:00''', 'SCR_VA_TW', std_ref);
  6     loop
  7         fetch std_ref into my_std;
  8         exit when std_ref%NOTFOUND;
  9         dbe_output.print_line('value= ' || my_std.aa || ',' || my_std.std);
 10     end loop;
 11     close std_ref;
 12 end;
 13 /

value= scr1,1.67332005306815
value= scr2,1

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> 
SQL> 
SQL> 
SQL> 


