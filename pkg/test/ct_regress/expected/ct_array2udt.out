

SQL> drop user if exists gs_array2udt cascade;

Succeed.

SQL> create user gs_array2udt identified by Cantian_234;

Succeed.

SQL> grant dba to gs_array2udt;

Succeed.

SQL> grant all privileges to gs_array2udt;

Succeed.

SQL> conn gs_array2udt/Cantian_234@127.0.0.1:1611

connected.

SQL> set serveroutput on;

ON
SQL> --expect wrong
SQL> declare
  2 type myarray is varray(3) of int;
  3 arr myarray;
  4 begin
  5 select * bulk collect into arr from table(cast(array[1,2,3] as myarray));
  6 end;
  7 /

CT-00944, PL/SQL(GS_ARRAY2UDT.ANONYMOUS BLOCK) terminated with compiling errors
[5:1] PLC-00241 The argument 2 should be type global collection

SQL> --expect wrong
SQL> declare
  2 type myarray is varray(3) of int;
  3 arr myarray;
  4 begin
  5 arr := cast(array[1,2,3,4] as myarray);
  6 end;
  7 /

CT-00932, [5:1] PL/SQL(GS_ARRAY2UDT.ANONYMOUS BLOCK) terminated with execute errors
[5:8] PL/SQL(PUBLIC.CAST) terminated with execute errors
[5:8] CT-00916, PL/SQL:syntax error(Can not convert from array(len = 4) to varray(max len = 3))

SQL> 
SQL> --expect wrong
SQL> declare
  2 type myarray is varray(3) of date;
  3 arr myarray;
  4 begin
  5 arr := cast(array[1,2,3] as myarray);
  6 for i in 1..arr.count loop
  7     dbe_output.print_line(arr(i));
  8 end loop;
  9 end;
 10 /

CT-00944, PL/SQL(GS_ARRAY2UDT.ANONYMOUS BLOCK) terminated with compiling errors
[5:13] PLC-00916 PL/SQL:syntax error(Can not convert from array(element type = BINARY_INTEGER) to collection(element type = DATE))

SQL> 
SQL> --array.count=0
SQL> create or replace type myarray is varray(3) of int;
  2 /

Succeed.

SQL> 
SQL> select * from table(cast(array[] as myarray));

COLUMN_VALUE
------------

0 rows fetched.

SQL> 
SQL> declare
  2 arr myarray;
  3 begin
  4 arr := cast(array[] as myarray);
  5 dbe_output.print_line(arr.count);
  6 end;
  7 /

0

PL/SQL procedure successfully completed.

SQL> 
SQL> create or replace function get_udt_array_count(arr myarray) return int
  2 is
  3 begin
  4 return arr.count;
  5 end;
  6 /

Succeed.

SQL> 
SQL> create or replace type myarray is varray(3) of int;
  2 /

Succeed.

SQL> --directly call udt method of the result of udf, wrong
SQL> create or replace function create_udt_array() return myarray
  2 is
  3 arr myarray := myarray(1,2,3);
  4 begin
  5 return arr;
  6 end;
  7 /

Succeed.

SQL> select create_udt_array().count from dual; --expect wrong 

CT-00601, [1:26]Sql syntax error: the word "." is not correct
SQL> select get_udt_array_count(create_udt_array()) from dual; --expect 3

GET_UDT_ARRAY_COUNT(CREATE_UDT_ARRAY())
---------------------------------------
3                                      

1 rows fetched.

SQL> 
SQL> -- array=zero
SQL> drop table if exists t_pgarr_null;

Succeed.

SQL> create table t_pgarr_null(id int,arr int[]);

Succeed.

SQL> insert into t_pgarr_null values(1,array[1,2,3]), (2,'{2,3,4}'::int[]),(3, null);

3 rows affected.

SQL> select (cast(arr as myarray)).count from t_pgarr_null; --expect wrong

CT-00601, [1:30]Sql syntax error: the word "." is not correct
SQL> select get_udt_array_count(cast(arr as myarray)) from t_pgarr_null; --expect wrong

CT-00932, [3:1] PL/SQL(GS_ARRAY2UDT.GET_UDT_ARRAY_COUNT) terminated with execute errors
[4:8] CT-00901, The referenced object type was not initialized.

SQL> select get_udt_array_count(cast(arr as myarray)) from t_pgarr_null where arr is not null order by id; 

GET_UDT_ARRAY_COUNT(CAST(ARR AS MYARRAY))
-----------------------------------------
3                                        
3                                        

2 rows fetched.

SQL> 
SQL> --basic example, local global
SQL> declare
  2 type myarray is varray(3) of int;
  3 arr myarray;
  4 begin
  5 --assign cast result to a udt var directly(int)
  6 arr := cast(array[1,2,3] as myarray);
  7 for i in 1..arr.count loop
  8     dbe_output.print_line(arr(i));
  9 end loop;
 10 arr := cast('{1,2,3}'::int[] as myarray);
 11 for i in 1..arr.count loop
 12     dbe_output.print_line(arr(i));
 13 end loop;
 14 end;
 15 /

1
2
3
1
2
3

PL/SQL procedure successfully completed.

SQL> declare
  2 type myarray is varray(3) of varchar(10);
  3 arr myarray;
  4 begin
  5 --assign cast result to a udt var directly(string)
  6 arr := cast(array['liu','hang','hello'] as myarray);
  7 for i in 1..arr.count loop
  8     dbe_output.print_line(arr(i));
  9 end loop;
 10 arr := cast('{"liu","hang","world"}'::varchar(10)[] as myarray);
 11 for i in 1..arr.count loop
 12     dbe_output.print_line(arr(i));
 13 end loop;
 14 end;
 15 /

liu
hang
hello
liu
hang
world

PL/SQL procedure successfully completed.

SQL> 
SQL> --test string truncation
SQL> declare
  2 type myarray is varray(3) of varchar(2);
  3 arr myarray;
  4 begin
  5 arr := cast(array['liu','hang','hello'] as myarray);
  6 for i in 1..arr.count loop
  7     dbe_output.print_line(arr(i));
  8 end loop;
  9 arr := cast('{"liu","hang","world"}'::varchar(10)[] as myarray);
 10 for i in 1..arr.count loop
 11     dbe_output.print_line(arr(i));
 12 end loop;
 13 end;
 14 /

li
ha
he
li
ha
wo

PL/SQL procedure successfully completed.

SQL> 
SQL> --basic table func
SQL> create or replace type myarray is varray(3) of int;
  2 /

Succeed.

SQL> select * from table(cast(array[1,2,3] as myarray));

COLUMN_VALUE
------------
1           
2           
3           

3 rows fetched.

SQL> select * from table(cast('{1,2,3}'::int[] as myarray));

COLUMN_VALUE
------------
1           
2           
3           

3 rows fetched.

SQL> create or replace type myarray is varray(3) of varchar(10);
  2 /

Succeed.

SQL> select * from table(cast(array['abc','def','hij'] as myarray));

COLUMN_VALUE
------------
abc         
def         
hij         

3 rows fetched.

SQL> select * from table(cast('{"abc","def","hij"}'::varchar(10)[] as myarray));

COLUMN_VALUE
------------
abc         
def         
hij         

3 rows fetched.

SQL> 
SQL> 
SQL> --example for NCE-E
SQL> create or replace type myarray is table of varchar(128);
  2 /

Succeed.

SQL> create or replace function string_to_array(str_input varchar, c varchar) return myarray
  2 is
  3 res myarray :=myarray();
  4 pos int :=1;
  5 pos_right int :=0;
  6 tmp varchar(128); 
  7 res_c int :=1;
  8 begin
  9 loop
 10 pos_right := instr(str_input,c,pos);
 11 exit when pos_right = 0;
 12 tmp := substr(str_input,pos,pos_right-pos);
 13 --dbe_output.print_line(tmp);
 14 res.extend(1);
 15 res(res_c) := tmp;
 16 res_c := res_c+1;
 17 pos := pos_right+1;
 18 end loop;
 19 res.extend(1);
 20 res(res_c) := substr(str_input,pos);
 21 return res;
 22 end;
 23 /

Succeed.

SQL> 
SQL> select * from table(cast(string_to_array('123;345;456',';') as myarray));

COLUMN_VALUE                                                    
----------------------------------------------------------------
123                                                             
345                                                             
456                                                             

3 rows fetched.

SQL> 
SQL> create or replace function array_to_string(arr myarray, c varchar) return varchar
  2 is
  3 res varchar(1000);
  4 arr_c int := arr.count;
  5 begin
  6 --dbe_output.print_line('The lenght of input array: '||arr_c);
  7 for i in 1..arr_c-1 loop
  8 res :=res||arr(i)||c;
  9 end loop;
 10 res :=res||arr(arr_c);
 11 return res;
 12 end;
 13 /

Succeed.

SQL> --input const array
SQL> select array_to_string(cast(array['abc','def','hij'] as myarray),';') from dual;

ARRAY_TO_STRING(CAST(ARRAY['ABC','DEF','HIJ'] AS MYARRAY),';')  
----------------------------------------------------------------
abc;def;hij                                                     

1 rows fetched.

SQL> select array_to_string(cast('{"abc","def","hij"}'::varchar(10)[] as myarray),';') from dual;

ARRAY_TO_STRING(CAST('{"ABC","DEF","HIJ"}'::VARCHAR(10)[] AS MYA
----------------------------------------------------------------
abc;def;hij                                                     

1 rows fetched.

SQL> 
SQL> --input column from table
SQL> drop table if exists t_pg_arr_string;

Succeed.

SQL> create table t_pg_arr_string(id int,arr varchar(100)[]);

Succeed.

SQL> insert into t_pg_arr_string values(1,array['abc','def','hij']),(2,array['hij','def','aaa']);

2 rows affected.

SQL> select array_to_string(cast(arr as myarray),';') from t_pg_arr_string;

ARRAY_TO_STRING(CAST(ARR AS MYARRAY),';')                       
----------------------------------------------------------------
abc;def;hij                                                     
hij;def;aaa                                                     

2 rows fetched.

SQL> 
SQL> --UNNEST function, instead of
SQL> select * from t_pg_arr_string t1 where 'abc' in (select * from table(cast(t1.arr as myarray)));

ID           ARR                                                             
------------ ----------------------------------------------------------------
1            {abc,def,hij}                                                   

1 rows fetched.

SQL> select * from t_pg_arr_string where 'abc' in (select * from table(cast(arr as myarray)));

ID           ARR                                                             
------------ ----------------------------------------------------------------
1            {abc,def,hij}                                                   

1 rows fetched.

SQL> 
SQL> create or replace function sort_array(arr myarray) return myarray
  2 is
  3 res myarray := myarray();
  4 begin
  5     select distinct * bulk collect into res from (
  6     select * from table(cast(arr as myarray))) order by 1;
  7 return res;
  8 end;
  9 /

Succeed.

SQL> select array_to_string(sort_array(cast(array['bbb','ccc','aaa','bbb'] as myarray)),';') from dual;

ARRAY_TO_STRING(SORT_ARRAY(CAST(ARRAY['BBB','CCC','AAA','BBB'] A
----------------------------------------------------------------
aaa;bbb;ccc                                                     

1 rows fetched.

SQL> 
SQL> create or replace function sort_string(str_input varchar, c varchar) return varchar
  2 is 
  3 arr myarray := myarray();
  4 begin
  5 select distinct * bulk collect into arr from (
  6 select * from table(cast(string_to_array(str_input,c) as myarray))) order by 1;
  7 return array_to_string(arr,c);
  8 end;
  9 /

Succeed.

SQL> select sort_string('def;abc;efg',';') from dual;

SORT_STRING('DEF;ABC;EFG',';')                                  
----------------------------------------------------------------
abc;def;efg                                                     

1 rows fetched.

SQL> 
SQL> create or replace function equal_any(var varchar, arr myarray) return boolean
  2 is
  3 begin
  4 for i in 1..arr.count loop
  5 if(arr(i)=var) then 
  6     return true;
  7 end if;
  8 end loop;
  9 return false;
 10 end;
 11 /

Succeed.

SQL> 
SQL> select 1 from dual where equal_any('abc',cast(array['abcd','def','hij'] as myarray));

1           
------------

0 rows fetched.

SQL> select 1 from dual where equal_any('abcd',cast(array['abcd','def','hij'] as myarray));

1           
------------
1           

1 rows fetched.

SQL> select 1 from dual where not equal_any('abc',cast(array['abcd','def','hij'] as myarray));

1           
------------
1           

1 rows fetched.

SQL> select 1 from dual where not equal_any('abcd',cast(array['abcd','def','hij'] as myarray));

1           
------------

0 rows fetched.

SQL> 
SQL> --ultimate goal in NCE-E cicrumstance
SQL> select sort_string(array_to_string(cast(arr as myarray),';'),';') from t_pg_arr_string order by id;

SORT_STRING(ARRAY_TO_STRING(CAST(ARR AS MYARRAY),';'),';')      
----------------------------------------------------------------
abc;def;hij                                                     
aaa;def;hij                                                     

2 rows fetched.

SQL> insert into t_pg_arr_string values(3,array['abcd','def','hij']),(4,array['hij','def','ab']),(5,array['hhh','def','abc']);

3 rows affected.

SQL> select * from t_pg_arr_string order by id;

ID           ARR                                                             
------------ ----------------------------------------------------------------
1            {abc,def,hij}                                                   
2            {hij,def,aaa}                                                   
3            {abcd,def,hij}                                                  
4            {hij,def,ab}                                                    
5            {hhh,def,abc}                                                   

5 rows fetched.

SQL> --way 1
SQL> select id, sort_string(array_to_string(cast(arr as myarray),';'),';') from t_pg_arr_string 
SQL>         where 'abc' in (select * from table(cast(arr as myarray)))
  2         order by id;

ID           SORT_STRING(ARRAY_TO_STRING(CAST(ARR AS MYARRAY),';'),';')      
------------ ----------------------------------------------------------------
1            abc;def;hij                                                     
5            abc;def;hhh                                                     

2 rows fetched.

SQL> --way 2
SQL> select id, array_to_string(sort_array(cast(arr as myarray)),';') from t_pg_arr_string 
SQL>         where 'abc' in (select * from table(cast(arr as myarray)))
  2         order by id;

ID           ARRAY_TO_STRING(SORT_ARRAY(CAST(ARR AS MYARRAY)),';')           
------------ ----------------------------------------------------------------
1            abc;def;hij                                                     
5            abc;def;hhh                                                     

2 rows fetched.

SQL> --way 3
SQL> select id, sort_string(array_to_string(cast(arr as myarray),';'),';') from t_pg_arr_string 
SQL>         where equal_any('abc', cast(arr as myarray))
  2         order by id;

ID           SORT_STRING(ARRAY_TO_STRING(CAST(ARR AS MYARRAY),';'),';')      
------------ ----------------------------------------------------------------
1            abc;def;hij                                                     
5            abc;def;hhh                                                     

2 rows fetched.

SQL> --way 4
SQL> select id, array_to_string(sort_array(cast(arr as myarray)),';') from t_pg_arr_string 
SQL>         where equal_any('abc', cast(arr as myarray))
  2         order by id;

ID           ARRAY_TO_STRING(SORT_ARRAY(CAST(ARR AS MYARRAY)),';')           
------------ ----------------------------------------------------------------
1            abc;def;hij                                                     
5            abc;def;hhh                                                     

2 rows fetched.

SQL> 
SQL> --modify by DTS
SQL> create table t1(a number(10,1)[]);

Succeed.

SQL> insert into t1 values(array[1,2,3]);

1 rows affected.

SQL> insert into t1 values(array[1.1,2.2,3.3]);

1 rows affected.

SQL> select * from t1;

A                                                               
----------------------------------------------------------------
{1,2,3}                                                         
{1.1,2.2,3.3}                                                   

2 rows fetched.

SQL> create type myarr is table of number(10,1);
  2 /

Succeed.

SQL> select * from table(cast(array[1,2,3] as myarr));

COLUMN_VALUE                            
----------------------------------------
1                                       
2                                       
3                                       

3 rows fetched.

SQL> select * from table(cast(array[1.1,2.2,3.3] as myarr));

COLUMN_VALUE                            
----------------------------------------
1.1                                     
2.2                                     
3.3                                     

3 rows fetched.

SQL> 
SQL> create or replace function array2_to_string(arr myarr, c varchar) return varchar
  2 is
  3 res varchar(1000);
  4 arr_c int := arr.count;
  5 begin
  6 for i in 1..arr_c-1 loop
  7 res :=res||arr(i)||c;
  8 end loop;
  9 res :=res||arr(arr_c);
 10 return res;
 11 end;
 12 /

Succeed.

SQL> select array2_to_string(cast(a as myarr),';') from t1;

ARRAY2_TO_STRING(CAST(A AS MYARR),';')                          
----------------------------------------------------------------
1;2;3                                                           
1.1;2.2;3.3                                                     

2 rows fetched.

SQL> 
SQL> --DTS, during exec should check value from param, otherwise it will core
SQL> create or replace type a_type is varray(100) of varchar(100);
  2 /

Succeed.

SQL> create or replace type b_type is varray(100) of number;
  2 /

Succeed.

SQL> create table t_pg_arr_string(id int[]);

CT-01301, GS_ARRAY2UDT.T_PG_ARR_STRING already exists
SQL> declare
  2  a int;
  3  b b_type;
  4 begin
  5  select *  bulk collect into b from  table(cast(a as a_type));
  6 end;
  7 /

CT-00932, [5:2] PL/SQL(GS_ARRAY2UDT.ANONYMOUS BLOCK) terminated with execute errors
[5:2] CT-00606, Inconsistent datatypes, expected COLLECTION - got BINARY_INTEGER

SQL> declare
  2  a t_pg_arr_string.id%type;
  3  b b_type;
  4 begin
  5  select *  bulk collect into b from  table(cast(a as a_type));
  6 end;
  7 /

CT-00932, [5:2] PL/SQL(GS_ARRAY2UDT.ANONYMOUS BLOCK) terminated with execute errors
[5:2] CT-00606, Inconsistent datatypes, expected COLLECTION - got BINARY_INTEGER

SQL> declare
  2  a int[];
  3  b b_type;
  4 begin
  5  select *  bulk collect into b from  table(cast(a as a_type));
  6 end;
  7 /

CT-00932, [5:2] PL/SQL(GS_ARRAY2UDT.ANONYMOUS BLOCK) terminated with execute errors
[5:2] CT-00606, Inconsistent datatypes, expected COLLECTION - got BINARY_INTEGER

SQL> declare
  2  a int[] := array[1,2,3];
  3  b b_type;
  4 begin
  5  select * bulk collect into b from  table(cast(a as a_type));
  6  dbe_output.print_line(b(1));
  7 end;
  8 /

1

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> 
SQL> conn sys/Huawei@123@127.0.0.1:1611

connected.

SQL> drop user if exists gs_array2udt cascade;
Succeed.




