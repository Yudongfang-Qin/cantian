

SQL> drop table if exists t_aggr_1;

Succeed.

SQL> create table t_aggr_1(f0 int, f1 bigint, f2 double, f3 number(20,10), f4 date, f5 timestamp, f6 char(100), f7 varchar(100), f8 binary(100), f9 clob, f10 blob);

Succeed.

SQL> 
SQL> select count(f0), sum(f0), max(f0), min(f0), avg(f0) from t_aggr_1;

COUNT(F0)            SUM(F0)              MAX(F0)      MIN(F0)      AVG(F0)                                 
-------------------- -------------------- ------------ ------------ ----------------------------------------
0                                                                                                           

1 rows fetched.

SQL> 
SQL> -- DTS2019012410194
SQL> select max(f0) + ROWID from t_aggr_1;

CT-00609, Expression not in group list
SQL> select max(f0) - (min(f0) % ROWID) from t_aggr_1;

CT-00609, Expression not in group list
SQL> 
SQL> -- int/bigint/real/decimal/date/timestamp
SQL> insert into t_aggr_1(f0) values(10);

1 rows affected.

SQL> insert into t_aggr_1(f0) values(null);

1 rows affected.

SQL> insert into t_aggr_1(f0) values(5);

1 rows affected.

SQL> insert into t_aggr_1(f0) values(15);

1 rows affected.

SQL> select count(f0) from t_aggr_1;

COUNT(F0)           
--------------------
3                   

1 rows fetched.

SQL> select sum(f0) from t_aggr_1;

SUM(F0)             
--------------------
30                  

1 rows fetched.

SQL> select max(f0) from t_aggr_1;

MAX(F0)     
------------
15          

1 rows fetched.

SQL> select min(f0) from t_aggr_1;

MIN(F0)     
------------
5           

1 rows fetched.

SQL> select avg(f0) from t_aggr_1;

AVG(F0)                                 
----------------------------------------
10                                      

1 rows fetched.

SQL> select approx_count_distinct(f0) from t_aggr_1;

APPROX_COUNT_DISTINCT(F0)
-------------------------
3                        

1 rows fetched.

SQL> delete from t_aggr_1;

4 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> insert into t_aggr_1(f1) values(2147483648);

1 rows affected.

SQL> insert into t_aggr_1(f1) values(null);

1 rows affected.

SQL> insert into t_aggr_1(f1) values(2147483650);

1 rows affected.

SQL> insert into t_aggr_1(f1) values(2147483649);

1 rows affected.

SQL> select count(f1) from t_aggr_1;

COUNT(F1)           
--------------------
3                   

1 rows fetched.

SQL> select sum(f1) from t_aggr_1;

SUM(F1)                                 
----------------------------------------
6442450947                              

1 rows fetched.

SQL> select max(f1) from t_aggr_1;

MAX(F1)             
--------------------
2147483650          

1 rows fetched.

SQL> select min(f1) from t_aggr_1;

MIN(F1)             
--------------------
2147483648          

1 rows fetched.

SQL> select avg(f1) from t_aggr_1;

AVG(F1)                                 
----------------------------------------
2147483649                              

1 rows fetched.

SQL> select approx_count_distinct(f1) from t_aggr_1;

APPROX_COUNT_DISTINCT(F1)
-------------------------
3                        

1 rows fetched.

SQL> delete from t_aggr_1;

4 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> insert into t_aggr_1(f2) values(12334.997);

1 rows affected.

SQL> insert into t_aggr_1(f2) values(null);

1 rows affected.

SQL> insert into t_aggr_1(f2) values(12334.999);

1 rows affected.

SQL> insert into t_aggr_1(f2) values(12334.998);

1 rows affected.

SQL> select count(f2) from t_aggr_1;

COUNT(F2)           
--------------------
3                   

1 rows fetched.

SQL> select sum(f2) from t_aggr_1;

SUM(F2)             
--------------------
37004.994           

1 rows fetched.

SQL> select max(f2) from t_aggr_1;

MAX(F2)             
--------------------
12334.999           

1 rows fetched.

SQL> select min(f2) from t_aggr_1;

MIN(F2)             
--------------------
12334.997           

1 rows fetched.

SQL> select avg(f2) from t_aggr_1;

AVG(F2)             
--------------------
12334.998           

1 rows fetched.

SQL> select approx_count_distinct(f2) from t_aggr_1;

APPROX_COUNT_DISTINCT(F2)
-------------------------
3                        

1 rows fetched.

SQL> delete from t_aggr_1;

4 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> insert into t_aggr_1(f3) values(9912334.997);

1 rows affected.

SQL> insert into t_aggr_1(f3) values(null);

1 rows affected.

SQL> insert into t_aggr_1(f3) values(9912334.999);

1 rows affected.

SQL> insert into t_aggr_1(f3) values(9912334.998);

1 rows affected.

SQL> select count(f3) from t_aggr_1;

COUNT(F3)           
--------------------
3                   

1 rows fetched.

SQL> select sum(f3) from t_aggr_1;

SUM(F3)                                 
----------------------------------------
29737004.994                            

1 rows fetched.

SQL> select max(f3) from t_aggr_1;

MAX(F3)                                 
----------------------------------------
9912334.999                             

1 rows fetched.

SQL> select min(f3) from t_aggr_1;

MIN(F3)                                 
----------------------------------------
9912334.997                             

1 rows fetched.

SQL> select avg(f3) from t_aggr_1;

AVG(F3)                                 
----------------------------------------
9912334.998                             

1 rows fetched.

SQL> select approx_count_distinct(f3) from t_aggr_1;

APPROX_COUNT_DISTINCT(F3)
-------------------------
3                        

1 rows fetched.

SQL> delete from t_aggr_1;

4 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> insert into t_aggr_1(f4) values('2018-02-23 13:18:23');

1 rows affected.

SQL> insert into t_aggr_1(f4) values(null);

1 rows affected.

SQL> insert into t_aggr_1(f4) values('2018-02-23 13:18:25');

1 rows affected.

SQL> insert into t_aggr_1(f4) values('2018-02-23 13:18:24');

1 rows affected.

SQL> select count(f4) from t_aggr_1;

COUNT(F4)           
--------------------
3                   

1 rows fetched.

SQL> select max(f4) from t_aggr_1;

MAX(F4)               
----------------------
2018-02-23 13:18:25   

1 rows fetched.

SQL> select min(f4) from t_aggr_1;

MIN(F4)               
----------------------
2018-02-23 13:18:23   

1 rows fetched.

SQL> select approx_count_distinct(f4) from t_aggr_1;

APPROX_COUNT_DISTINCT(F4)
-------------------------
3                        

1 rows fetched.

SQL> delete from t_aggr_1;

4 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> insert into t_aggr_1(f5) values('2018-02-23 13:18:23.345');

1 rows affected.

SQL> insert into t_aggr_1(f5) values(null);

1 rows affected.

SQL> insert into t_aggr_1(f5) values('2018-02-23 13:18:23.347');

1 rows affected.

SQL> insert into t_aggr_1(f5) values('2018-02-23 13:18:23.346');

1 rows affected.

SQL> select count(f5) from t_aggr_1;

COUNT(F5)           
--------------------
3                   

1 rows fetched.

SQL> select max(f5) from t_aggr_1;

MAX(F5)                         
--------------------------------
2018-02-23 13:18:23.347000      

1 rows fetched.

SQL> select min(f5) from t_aggr_1;

MIN(F5)                         
--------------------------------
2018-02-23 13:18:23.345000      

1 rows fetched.

SQL> select approx_count_distinct(f5) from t_aggr_1;

APPROX_COUNT_DISTINCT(F5)
-------------------------
3                        

1 rows fetched.

SQL> delete from t_aggr_1;

4 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> -- string
SQL> insert into t_aggr_1(f6) values('2018-02-23 13:18:23.345');

1 rows affected.

SQL> insert into t_aggr_1(f6) values(null);

1 rows affected.

SQL> insert into t_aggr_1(f6) values('2018-02-23 13:18:23.347');

1 rows affected.

SQL> insert into t_aggr_1(f6) values('2018-02-23 13:18:23.346');

1 rows affected.

SQL> select count(f6) from t_aggr_1;

COUNT(F6)           
--------------------
3                   

1 rows fetched.

SQL> select max(f6) from t_aggr_1;

MAX(F6)                                                         
----------------------------------------------------------------
2018-02-23 13:18:23.347                                                                             

1 rows fetched.

SQL> select min(f6) from t_aggr_1;

MIN(F6)                                                         
----------------------------------------------------------------
2018-02-23 13:18:23.345                                                                             

1 rows fetched.

SQL> select approx_count_distinct(f6) from t_aggr_1;

APPROX_COUNT_DISTINCT(F6)
-------------------------
3                        

1 rows fetched.

SQL> delete from t_aggr_1;

4 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> insert into t_aggr_1(f7) values('2018-02-23 13:18:23.345');

1 rows affected.

SQL> insert into t_aggr_1(f7) values(null);

1 rows affected.

SQL> insert into t_aggr_1(f7) values('2018-02-23 13:18:23.347');

1 rows affected.

SQL> insert into t_aggr_1(f7) values('2018-02-23 13:18:23.346');

1 rows affected.

SQL> select count(f7) from t_aggr_1;

COUNT(F7)           
--------------------
3                   

1 rows fetched.

SQL> select max(f7) from t_aggr_1;

MAX(F7)                                                         
----------------------------------------------------------------
2018-02-23 13:18:23.347                                         

1 rows fetched.

SQL> select min(f7) from t_aggr_1;

MIN(F7)                                                         
----------------------------------------------------------------
2018-02-23 13:18:23.345                                         

1 rows fetched.

SQL> select approx_count_distinct(f7) from t_aggr_1;

APPROX_COUNT_DISTINCT(F7)
-------------------------
3                        

1 rows fetched.

SQL> delete from t_aggr_1;

4 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> -- binary
SQL> insert into t_aggr_1(f8, f9, f10) values('1D', '222', '3133');

1 rows affected.

SQL> insert into t_aggr_1(f8, f9, f10) values('1F', '222', '3323');

1 rows affected.

SQL> insert into t_aggr_1(f8, f9, f10) values('1E', '222', '3333');

1 rows affected.

SQL> select count(f8) from t_aggr_1;

COUNT(F8)           
--------------------
3                   

1 rows fetched.

SQL> select max(f8) from t_aggr_1;

MAX(F8)                                                         
----------------------------------------------------------------
1F                                                              

1 rows fetched.

SQL> select min(f8) from t_aggr_1;

MIN(F8)                                                         
----------------------------------------------------------------
1D                                                              

1 rows fetched.

SQL> select approx_count_distinct(f8) from t_aggr_1;

APPROX_COUNT_DISTINCT(F8)
-------------------------
3                        

1 rows fetched.

SQL> 
SQL> -- clob/blob
SQL> select max(f9) from t_aggr_1;

MAX(F9)                                                         
----------------------------------------------------------------
222                                                             

1 rows fetched.

SQL> select max(f10) from t_aggr_1;

MAX(F10)                                                        
----------------------------------------------------------------
3333                                                            

1 rows fetched.

SQL> select approx_count_distinct(f9),approx_count_distinct(f10) from t_aggr_1;

APPROX_COUNT_DISTINCT(F9) APPROX_COUNT_DISTINCT(F10)
------------------------- --------------------------
1                         3                         

1 rows fetched.

SQL> delete from t_aggr_1;

3 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> --test recursive agg
SQL> insert into t_aggr_1(f0) values(10);

1 rows affected.

SQL> insert into t_aggr_1(f0) values(6);

1 rows affected.

SQL> insert into t_aggr_1(f0) values(5);

1 rows affected.

SQL> insert into t_aggr_1(f0) values(15);

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> SELECT AVG((CASE WHEN (f0 > 5) THEN f0 ELSE (2000) END)) Average_Salary FROM t_aggr_1 e;

AVERAGE_SALARY                          
----------------------------------------
507.75                                  

1 rows fetched.

SQL> SELECT AVG((CASE WHEN (f0 > 5 AND f0 < 20) THEN (f0) ELSE (2000) END)) Average_Salary FROM t_aggr_1 e;

AVERAGE_SALARY                          
----------------------------------------
507.75                                  

1 rows fetched.

SQL> SELECT AVG((CASE WHEN (f0 > 5 or f0 < 4) THEN (f0) ELSE (2000) END)) Average_Salary FROM t_aggr_1 e;

AVERAGE_SALARY                          
----------------------------------------
507.75                                  

1 rows fetched.

SQL> 
SQL> select avg(min(f0)) from t_aggr_1;

CT-01317, [1:12]Unexpected aggregation 'MIN'
SQL> select avg(min(f0) + 3) from t_aggr_1;

CT-01317, [1:12]Unexpected aggregation 'MIN'
SQL> select avg(min(f0) - 3) from t_aggr_1;

CT-01317, [1:12]Unexpected aggregation 'MIN'
SQL> SELECT AVG((CASE WHEN (min(f0) > 5) THEN f0 ELSE (2000) END)) Average_Salary FROM t_aggr_1 e;

CT-01317, [1:24]Unexpected aggregation 'MIN'
SQL> SELECT AVG((CASE WHEN (f0 > 5 AND f0 < 20) THEN (max(f0)) ELSE (2000) END)) Average_Salary FROM t_aggr_1 e;

CT-01317, [1:50]Unexpected aggregation 'MAX'
SQL> SELECT AVG((CASE WHEN (f0 > 5 or least(21,max(f0),20) < 4) THEN (f0) ELSE (2000) END)) Average_Salary FROM t_aggr_1 e;

CT-01317, [1:43]Unexpected aggregation 'MAX'
SQL> SELECT AVG((CASE WHEN (f0 > 5 or least(21,max(f0),20) < 4) THEN (least(21,max(f0),20)) ELSE (2000) END)) Average_Salary FROM t_aggr_1 e;

CT-01317, [1:43]Unexpected aggregation 'MAX'
SQL> drop table t_aggr_1;

Succeed.

SQL> --DTS2019111506888
SQL> drop table if exists t_sql_cacel_002;

Succeed.

SQL> create table t_sql_cacel_002(id int not null,c_int int,c_vchar varchar(55) not null,c_vchar2 varchar(55) not null,c_blob blob not null,c_date date)
  2 PARTITION BY HASH(id,c_vchar)
  3 (
  4 PARTITION p1,
  5 PARTITION p2,
  6 PARTITION p3
  7 );

Succeed.

SQL>
SQL> insert into t_sql_cacel_002 values(1,100,'abc123',lpad('123abc',50,'abc'),lpad('11100011',50,'1100'),to_timestamp(to_char('1800-01-01 10:51:47'),'yyyy-mm-dd hh24:mi:ss'));

1 rows affected.

SQL> insert into t_sql_cacel_002 values(2,100,'abc123',lpad('123abc',50,'abc'),lpad('11100011',50,'1100'),to_timestamp(to_char('1800-01-01 10:51:47'),'yyyy-mm-dd hh24:mi:ss'));

1 rows affected.

SQL> insert into t_sql_cacel_002 values(3,200,'abc123',lpad('123abc',50,'abc'),lpad('11100011',50,'1100'),to_timestamp(to_char('1800-01-01 10:51:47'),'yyyy-mm-dd hh24:mi:ss'));

1 rows affected.

SQL> commit;

Succeed.

SQL> SELECT count(*) from (select * from (select c_vchar,c_int from t_sql_cacel_002 t2) t1 PIVOT(MAX((select length(c_vchar)))  FOR c_vchar IN ('abc1233' c1,'abc12333' c2))) t0;

COUNT(*)
--------------------
2

1 rows fetched.

SQL> SELECT count(*) from (select * from (select c_vchar,c_int from t_sql_cacel_002 t2) t1 PIVOT(MAX((select length(c_vchar)))  FOR c_vchar IN ('abc1233' c1,'abc12333' c2))) t0;

COUNT(*)
--------------------
2

1 rows fetched.

SQL> SELECT count(*) from (select * from (select c_vchar,c_int from t_sql_cacel_002 t2) t1 PIVOT(MAX((select length(c_vchar)))  FOR c_vchar IN ('abc1233' c1,'abc12333' c2))) t0;

COUNT(*)
--------------------
2

1 rows fetched.

SQL> SELECT count(*) from (select * from (select c_vchar,c_int from t_sql_cacel_002 t2) t1 PIVOT(MAX((select length(c_vchar)))  FOR c_vchar IN ('abc1233' c1,'abc12333' c2))) t0;

COUNT(*)
--------------------
2

1 rows fetched.

SQL> SELECT count(*) from (select * from (select c_vchar,c_int from t_sql_cacel_002 t2) t1 PIVOT(MAX((select length(c_vchar)))  FOR c_vchar IN ('abc1233' c1,'abc12333' c2))) t0;

COUNT(*)
--------------------
2

1 rows fetched.

SQL> drop table t_sql_cacel_002;

Succeed.

SQL>
SQL> -- DTS2018022304251
SQL> drop table if exists RQG_SELECT_DIS_TBL;

Succeed.

SQL> CREATE TABLE RQG_SELECT_DIS_TBL(C_INTEGER INTEGER, C_BIGINT BIGINT, C_DOUBLE DOUBLE, C_NUMBER NUMBER, C_CHAR CHAR(100), C_VARCHAR VARCHAR(2000), C_VARCHAR2 VARCHAR(2000), C_TIMESTAMP TIMESTAMP, C_TEXT TEXT, C_BOOL BOOL); 

Succeed.

SQL> 
SQL> create unique index index_001 on RQG_SELECT_DIS_TBL(c_integer);

Succeed.

SQL> create index index_002 on RQG_SELECT_DIS_TBL(c_integer,c_bigint,c_double,c_char); 

Succeed.

SQL> create index index_003 on RQG_SELECT_DIS_TBL(c_char,c_timestamp);

Succeed.

SQL> create index index_004 on RQG_SELECT_DIS_TBL(c_integer,c_char,c_timestamp,c_bool);

Succeed.

SQL> INSERT INTO RQG_SELECT_DIS_TBL VALUES( 1, NULL, NULL, NULL, -474021888, NULL, NULL, NULL, 'mpdxvhqvf', NULL);

1 rows affected.

SQL> INSERT INTO RQG_SELECT_DIS_TBL VALUES( 3, NULL, NULL, NULL, 1488257024, 43244354354354, NULL, to_timestamp('2007-02-01 19:11:52', 'yyyy-mm-dd hh24:mi:ss'), NULL, NULL);

1 rows affected.

SQL> INSERT INTO RQG_SELECT_DIS_TBL VALUES( 4, NULL, 4214806301265362944, NULL, 257818624, 243243534, 6564645654646, to_timestamp('2008-05-18 05:43:36', 'yyyy-mm-dd hh24:mi:ss'), 'qif', TRUE);

1 rows affected.

SQL> INSERT INTO RQG_SELECT_DIS_TBL VALUES( 5, NULL, NULL, NULL, NULL, 1321324234, 756756757575, NULL, 'hqifmpdx', TRUE);

1 rows affected.

SQL> INSERT INTO RQG_SELECT_DIS_TBL VALUES( 7, NULL, -1844786997361639424, NULL, NULL, 564654646554, 4555555555555544, NULL, '=+', TRUE);

1 rows affected.

SQL> INSERT INTO RQG_SELECT_DIS_TBL VALUES( 8, NULL, NULL, NULL, 434044928, NULL, 54354353, NULL, 't', NULL);

1 rows affected.

SQL> INSERT INTO RQG_SELECT_DIS_TBL VALUES( 10, NULL, NULL, NULL, -654311424, 324324, 65464645464, NULL, NULL, NULL);

1 rows affected.

SQL> INSERT INTO RQG_SELECT_DIS_TBL VALUES( 12, 303431680, -2225059690897735680, NULL, 2024996864, 435453543, 342434324, to_timestamp('2004-02-21 08:56:50', 'yyyy-mm-dd hh24:mi:ss'), 't', FALSE);

1 rows affected.

SQL> INSERT INTO RQG_SELECT_DIS_TBL VALUES( 14, NULL, -8050184333924761600, NULL, -322109440, 432424324, NULL, NULL, '~', FALSE);

1 rows affected.

SQL> INSERT INTO RQG_SELECT_DIS_TBL VALUES( 16, NULL, -3823556083637551104, NULL, NULL, 34534534535, NULL, to_timestamp('2000-12-21 15:20:30', 'yyyy-mm-dd hh24:mi:ss'), 'ghimtialj', NULL);

1 rows affected.

SQL> INSERT INTO RQG_SELECT_DIS_TBL VALUES( 17, NULL, NULL, NULL, NULL, 6546464, 643543543, NULL, '; ', NULL);

1 rows affected.

SQL> INSERT INTO RQG_SELECT_DIS_TBL VALUES( 20, -1960706048, NULL, NULL, 1235812352, NULL, 345344443, NULL, 'sblvgs', NULL);

1 rows affected.

SQL> INSERT INTO RQG_SELECT_DIS_TBL VALUES( 21, 109969408, NULL, NULL, -1079181312, NULL, NULL, to_timestamp('2007-07-16 04:44:07', 'yyyy-mm-dd hh24:mi:ss'), 'lsblvgsgh', TRUE);

1 rows affected.

SQL> 
SQL> select distinct sum(c_varchar) from RQG_SELECT_DIS_TBL;

SUM(C_VARCHAR)                          
----------------------------------------
43845982851866                          

1 rows fetched.

SQL> select distinct sum(c_varchar::number(38, -2)) from RQG_SELECT_DIS_TBL;

SUM(C_VARCHAR::NUMBER(38, -2))          
----------------------------------------
43845982851800                          

1 rows fetched.

SQL> select distinct sum(c_varchar::number(38, -6)) from RQG_SELECT_DIS_TBL;

SUM(C_VARCHAR::NUMBER(38, -6))          
----------------------------------------
43845982000000                          

1 rows fetched.

SQL> select distinct sum(c_varchar::number(38, -5)) from RQG_SELECT_DIS_TBL;

SUM(C_VARCHAR::NUMBER(38, -5))          
----------------------------------------
43845982700000                          

1 rows fetched.

SQL> select distinct sum(c_varchar::int) from RQG_SELECT_DIS_TBL;

CT-00659, [1:30]INTEGER out of range
SQL> select distinct sum(c_varchar::bigint) from RQG_SELECT_DIS_TBL;

SUM(C_VARCHAR::BIGINT)                  
----------------------------------------
43845982851866                          

1 rows fetched.

SQL> select distinct sum(c_varchar::date) from RQG_SELECT_DIS_TBL;

CT-00606, [1:17]Inconsistent datatypes, expected NUMERIC - got DATE
SQL> select distinct sum(c_varchar::timestamp) from RQG_SELECT_DIS_TBL;

CT-00606, [1:17]Inconsistent datatypes, expected NUMERIC - got TIMESTAMP
SQL> select distinct sum(c_varchar::binary(100)) from RQG_SELECT_DIS_TBL;

CT-00606, [1:17]Inconsistent datatypes, expected NUMERIC - got BINARY
SQL> select distinct sum(c_varchar::bool) from RQG_SELECT_DIS_TBL;

CT-00606, [1:17]Inconsistent datatypes, expected NUMERIC - got BOOLEAN
SQL> 
SQL> --tests for group_concat
SQL> 
SQL> --group_index
SQL> DROP TABLE IF EXISTS foo_index; 

Succeed.

SQL> DROP INDEX IF EXISTS idx_foo ON foo_index;

CT-00843, The table or view SYS.FOO_INDEX does not exist.
SQL> CREATE TABLE foo_index (col1 INTEGER NOT NULL, col2 VARCHAR(32));

Succeed.

SQL> CREATE INDEX idx_foo ON foo_index(col1);

Succeed.

SQL> 
SQL> INSERT INTO foo_index VALUES (1, 'aaa');

1 rows affected.

SQL> INSERT INTO foo_index VALUES (2, 'b');

1 rows affected.

SQL> INSERT INTO foo_index VALUES (3, 'cc');

1 rows affected.

SQL> INSERT INTO foo_index VALUES (4, 'ddd');

1 rows affected.

SQL> INSERT INTO foo_index VALUES (5, 'eeee');

1 rows affected.

SQL> INSERT INTO foo_index VALUES (6, 'fffff');

1 rows affected.

SQL> INSERT INTO foo_index VALUES (7, 'cbd');

1 rows affected.

SQL> INSERT INTO foo_index VALUES (8, 'b');

1 rows affected.

SQL> INSERT INTO foo_index VALUES (9, 'zzzzzz');

1 rows affected.

SQL> INSERT INTO foo_index VALUES (10, 'dddd');

1 rows affected.

SQL> INSERT INTO foo_index VALUES (11, 'xyz');

1 rows affected.

SQL> INSERT INTO foo_index VALUES (12, 'f'); 

1 rows affected.

SQL> INSERT INTO foo_index VALUES (4, 'ddd');

1 rows affected.

SQL> INSERT INTO foo_index VALUES (6, 'fffff');

1 rows affected.

SQL> INSERT INTO foo_index VALUES (7, 'cbd');

1 rows affected.

SQL> INSERT INTO foo_index VALUES (9, 'zzzzzz');

1 rows affected.

SQL> INSERT INTO foo_index VALUES (12, 'f');

1 rows affected.

SQL> INSERT INTO foo_index VALUES (1, 'aaa');

1 rows affected.

SQL> INSERT INTO foo_index VALUES (3, 'cc');

1 rows affected.

SQL> INSERT INTO foo_index VALUES (7, 'cbd');

1 rows affected.

SQL> 
SQL> SELECT col1, GROUP_CONCAT(col2) AS ncol2 FROM foo_index GROUP BY col1 order by 1;

COL1         NCOL2                                                           
------------ ----------------------------------------------------------------
1            aaa,aaa                                                         
2            b                                                               
3            cc,cc                                                           
4            ddd,ddd                                                         
5            eeee                                                            
6            fffff,fffff                                                     
7            cbd,cbd,cbd                                                     
8            b                                                               
9            zzzzzz,zzzzzz                                                   
10           dddd                                                            
11           xyz                                                             
12           f,f                                                             

12 rows fetched.

SQL> SELECT col1, GROUP_CONCAT(col1, col2) AS ncol2 FROM foo_index GROUP BY col1 order by 1;

COL1         NCOL2                                                           
------------ ----------------------------------------------------------------
1            1aaa,1aaa                                                       
2            2b                                                              
3            3cc,3cc                                                         
4            4ddd,4ddd                                                       
5            5eeee                                                           
6            6fffff,6fffff                                                   
7            7cbd,7cbd,7cbd                                                  
8            8b                                                              
9            9zzzzzz,9zzzzzz                                                 
10           10dddd                                                          
11           11xyz                                                           
12           12f,12f                                                         

12 rows fetched.

SQL> SELECT col1, TRIM(GROUP_CONCAT(col1, col2 SEPARATOR '|')) AS ncol2 FROM foo_index GROUP BY col1 order by 1;

COL1         NCOL2                                                           
------------ ----------------------------------------------------------------
1            1aaa|1aaa                                                       
2            2b                                                              
3            3cc|3cc                                                         
4            4ddd|4ddd                                                       
5            5eeee                                                           
6            6fffff|6fffff                                                   
7            7cbd|7cbd|7cbd                                                  
8            8b                                                              
9            9zzzzzz|9zzzzzz                                                 
10           10dddd                                                          
11           11xyz                                                           
12           12f|12f                                                         

12 rows fetched.

SQL> 
SQL> SELECT col1, GROUP_CONCAT(col1, col2 SEPARATOR '|') AS ncol2 FROM foo_index GROUP BY col1 ORDER BY ncol2 DESC, col1;

COL1         NCOL2                                                           
------------ ----------------------------------------------------------------
9            9zzzzzz|9zzzzzz                                                 
8            8b                                                              
7            7cbd|7cbd|7cbd                                                  
6            6fffff|6fffff                                                   
5            5eeee                                                           
4            4ddd|4ddd                                                       
3            3cc|3cc                                                         
2            2b                                                              
1            1aaa|1aaa                                                       
12           12f|12f                                                         
11           11xyz                                                           
10           10dddd                                                          

12 rows fetched.

SQL> 
SQL> SELECT col1, GROUP_CONCAT(col2 ORDER BY 0.5) FROM foo_index GROUP BY col1 order by 1;

CT-00601, [1:41]Sql syntax error: unknown column '0' in order clause
SQL> SELECT col1, GROUP_CONCAT(col2 ORDER BY col2) FROM foo_index GROUP BY col1 order by 1;

COL1         GROUP_CONCAT(COL2 ORDER BY COL2)                                
------------ ----------------------------------------------------------------
1            aaa,aaa                                                         
2            b                                                               
3            cc,cc                                                           
4            ddd,ddd                                                         
5            eeee                                                            
6            fffff,fffff                                                     
7            cbd,cbd,cbd                                                     
8            b                                                               
9            zzzzzz,zzzzzz                                                   
10           dddd                                                            
11           xyz                                                             
12           f,f                                                             

12 rows fetched.

SQL> SELECT col1, GROUP_CONCAT(col2 ORDER BY 1) FROM foo_index GROUP BY col1 order by 1;

COL1         GROUP_CONCAT(COL2 ORDER BY 1)                                   
------------ ----------------------------------------------------------------
1            aaa,aaa                                                         
2            b                                                               
3            cc,cc                                                           
4            ddd,ddd                                                         
5            eeee                                                            
6            fffff,fffff                                                     
7            cbd,cbd,cbd                                                     
8            b                                                               
9            zzzzzz,zzzzzz                                                   
10           dddd                                                            
11           xyz                                                             
12           f,f                                                             

12 rows fetched.

SQL> SELECT col1, GROUP_CONCAT(col2,1,2 ORDER BY 0.5) FROM foo_index GROUP BY col1 order by 1;

CT-00601, [1:45]Sql syntax error: unknown column '0' in order clause
SQL> SELECT col1, GROUP_CONCAT(col2,1,2 ORDER BY 2) FROM foo_index GROUP BY col1 order by 1;

COL1         GROUP_CONCAT(COL2,1,2 ORDER BY 2)                               
------------ ----------------------------------------------------------------
1            aaa12,aaa12                                                     
2            b12                                                             
3            cc12,cc12                                                       
4            ddd12,ddd12                                                     
5            eeee12                                                          
6            fffff12,fffff12                                                 
7            cbd12,cbd12,cbd12                                               
8            b12                                                             
9            zzzzzz12,zzzzzz12                                               
10           dddd12                                                          
11           xyz12                                                           
12           f12,f12                                                         

12 rows fetched.

SQL> SELECT col1, GROUP_CONCAT(1,2 ORDER BY 1) FROM foo_index GROUP BY col1 order by 1;

COL1         GROUP_CONCAT(1,2 ORDER BY 1)                                    
------------ ----------------------------------------------------------------
1            12,12                                                           
2            12                                                              
3            12,12                                                           
4            12,12                                                           
5            12                                                              
6            12,12                                                           
7            12,12,12                                                        
8            12                                                              
9            12,12                                                           
10           12                                                              
11           12                                                              
12           12,12                                                           

12 rows fetched.

SQL>
SQL> SELECT col1, GROUP_CONCAT(col1, col2 SEQUENCE '|') AS ncol2 FROM foo_index GROUP BY col1; --syntax error

CT-00601, [1:38]Sql syntax error: ',' expected but SEQUENCE found
SQL> SELECT col1, GROUP_CONCAT(col1, SEPARATOR '|') AS ncol2 FROM foo_index GROUP BY col1; --syntax error

CT-00601, [1:43]Sql syntax error: ',' expected but '|' found
SQL> SELECT col1, GROUP_CONCAT(col1, col2 SEPARATOR) AS ncol2 FROM foo_index GROUP BY col1; --syntax error 

CT-00601, [1:47]Sql syntax error: invalid expression
SQL> SELECT col1, GROUP_CONCAT(col1, col2 SEPARATOR '|') AS ncol2 FROM foo_index;  --syntax error

CT-00609, Expression not in group list
SQL> SELECT GROUP_CONCAT(col1, col2 SEPARATOR NULL) AS ncol2 FROM foo_index; --syntax error

CT-00601, [1:42]Sql syntax error: separator specified in GROUP_CONCAT must be a const or a binding paramter
SQL> SELECT GROUP_CONCAT(col1, col2 SEPARATOR col2) AS ncol2 FROM foo_index; --syntax error

CT-00601, [1:42]Sql syntax error: separator specified in GROUP_CONCAT must be a const or a binding paramter
SQL> SELECT GROUP_CONCAT(col1, col2 SEPARATOR col1) AS ncol2 FROM foo_index; --syntax error

CT-00601, [1:42]Sql syntax error: separator specified in GROUP_CONCAT must be a const or a binding paramter
SQL> 
SQL> DROP TABLE foo_index; 

Succeed.

SQL> DROP INDEX idx_foo ON foo_index;

CT-00843, The table or view SYS.FOO_INDEX does not exist.
SQL> 
SQL> --DTS2018062904810
SQL> DROP TABLE if exists OSS_FUNCTION_LIST_001;

Succeed.

SQL> CREATE TABLE OSS_FUNCTION_LIST_001(C_INT INT ,C_INTEGER INTEGER NOT NULL ,C_BIGINT BIGINT,C_NUMBER NUMBER DEFAULT 0.2332,C_NUMBER1 NUMBER(12,2),C_NUMBER2 NUMBER(12,6),C_DOUBLE DOUBLE,C_DECIMAL DECIMAL,C_DECIMAL1 DECIMAL(8,2),C_DECIMAL2 DECIMAL(8,4),C_REAL REAL,C_CHAR CHAR(4000),C_VARCHAR VARCHAR(4000),C_VARCHAR2 VARCHAR2(4000),C_VARCHAR1 VARCHAR(100),C_CHAR1 CHAR(100),C_NUMERIC NUMERIC,C_DATETIME DATETIME,C_DATE DATE,C_TIMESTAMP TIMESTAMP,C_TIMESTAMP1 TIMESTAMP(6),C_BOOL BOOL) ;

Succeed.

SQL> create unique index  indx_t1 on OSS_FUNCTION_LIST_001 (c_int);

Succeed.

SQL> create index indx_t2 on OSS_FUNCTION_LIST_001 (c_int,C_DATETIME,C_TIMESTAMP);

Succeed.

SQL> 
SQL> INSERT INTO OSS_FUNCTION_LIST_001 VALUES(12,58812,546223079,1234567.89,12345.6789,12.3456789,1234.56,2345.67,12345.6789,12.3456789,12.33,'dbcd','abcde','1999-01-01','ab','adc',123.45,'2017-05-12 10:15:52','2005-08-08','2000-01-01 15:12:21.11','2000-08-01 15:12:21.32',true);

1 rows affected.

SQL> INSERT INTO OSS_FUNCTION_LIST_001 VALUES(13,58813,546223078,1234567.78,12345.5678,12.2345678,1234.67,2345.78,12345.5678,12.2345678,12.44,'dbce','abcdf','abcdeg','ac','ade',123.46,'2017-05-12 11:15:52','2012-08-08','2000-02-01 15:22:21.11','2012-02-01 15:12:11.32',false);

1 rows affected.

SQL> INSERT INTO OSS_FUNCTION_LIST_001 VALUES(14,58814,546223077,1234567.67,12345.4567,12.1234567,1234.78,2345.89,12345.4567,12.1234567,12.55,'dbcf','abcdg','2010-02-28','ad','adf',123.47,'2017-05-12 10:16:52','2002-08-11','2000-03-01 15:42:21.11','2008-08-12 15:13:21.32',true);

1 rows affected.

SQL> INSERT INTO OSS_FUNCTION_LIST_001 VALUES(15,58814,546223077,1234567.67,12345.4567,12.1234567,1234.78,2345.89,12345.4567,12.1234567,12.55,'dbcf','abcdg','abcdeh','ad','adf',123.47,'2016-02-29 10:16:52','2002-08-11','2000-03-01 15:42:21.11','2008-08-12 15:13:21.32',true);

1 rows affected.

SQL> INSERT INTO OSS_FUNCTION_LIST_001 VALUES(16,58814,546223077,1234567.67,12345.4567,12.1234567,1234.78,2345.89,12345.4567,12.1234567,12.55,'dbcf','abcdg','abcdeh','ad','adf',123.47,'2012-10-31 10:16:52','2002-08-11','2000-03-01 15:42:21.11','2008-08-12 15:13:21.32',true);

1 rows affected.

SQL> 
SQL> COMMIT;

Succeed.

SQL> 
SQL> select c_bigint,count(group_concat(c_bigint)) from   OSS_FUNCTION_LIST_001 group by c_bigint;

CT-01317, [1:23]Unexpected aggregation 'GROUP_CONCAT'
SQL> SELECT count(sum(c_bigint)) from OSS_FUNCTION_LIST_001;

CT-01317, [1:14]Unexpected aggregation 'SUM'
SQL> 
SQL> DROP TABLE OSS_FUNCTION_LIST_001;

Succeed.

SQL> DROP TABLE if exists t1;

Succeed.

SQL> create table t1(a int,  b int);

Succeed.

SQL> create index idx_t1_1 on t1(a);

Succeed.

SQL> insert into t1 values(1,1);

1 rows affected.

SQL> insert into t1 values(2,1);

1 rows affected.

SQL> insert into t1 values(3,1);

1 rows affected.

SQL> insert into t1 values(4,1);

1 rows affected.

SQL> select max(a) +1 from t1 where a >=1;

MAX(A) +1           
--------------------
5                   

1 rows fetched.

SQL> select min(a) +1 from t1 where a >=1;

MIN(A) +1           
--------------------
2                   

1 rows fetched.

SQL> DROP TABLE if exists t1;

Succeed.

SQL> 
SQL> CREATE TABLE t1(f1 CHAR(200));

Succeed.

SQL> insert into t1 values('30');

1 rows affected.

SQL> COMMIT;

Succeed.

SQL> 
SQL> select 
  2  case when cast(f1 as int)<20 then '20'
  3  when cast(f1 as int)>=20 and cast(f1 as int) < 25 then '[20,25)'
  4  when cast(f1 as int)>=25 and cast(f1 as int) < 30 then '[25,30)'
  5  when cast(f1 as int)>=30 and cast(f1 as int) < 35 then '[30,35)'
  6  when cast(f1 as int)>=35 and cast(f1 as int) < 40 then '[35,40)'
  7  when cast(f1 as int)>=40 and cast(f1 as int) < 45 then '[40,45)'
  8  when cast(f1 as int)>=45 and cast(f1 as int) < 50 then '[45,50)'
  9  when cast(f1 as int)>=50 and cast(f1 as int) < 55 then '[50,55)'
 10  when cast(f1 as int)>=55 and cast(f1 as int) < 60 then '[55,60)'
 11  when cast(f1 as int)>=60 then '60' end
 12  from T1
 13  group by
 14  case when cast(f1 as int)<20 then '20'
 15  when cast(f1 as int)>=20 and cast(f1 as int) < 25 then '[20,25)'
 16  when cast(f1 as int)>=25 and cast(f1 as int) < 30 then '[25,30)'
 17  when cast(f1 as int)>=30 and cast(f1 as int) < 35 then '[30,35)'
 18  when cast(f1 as int)>=35 and cast(f1 as int) < 40 then '[35,40)'
 19  when cast(f1 as int)>=40 and cast(f1 as int) < 45 then '[40,45)'
 20  when cast(f1 as int)>=45 and cast(f1 as int) < 50 then '[45,50)'
 21  when cast(f1 as int)>=50 and cast(f1 as int) < 55 then '[50,55)'
 22  when cast(f1 as int)>=55 and cast(f1 as int) < 60 then '[55,60)'
 23  when cast(f1 as int)>=60 then '60' end;

CASE WHEN CAST(F1 AS INT)<20 THEN '20'
WHEN CAST(F1 AS INT)>=20 
----------------------------------------------------------------
[30,35)                                                         

1 rows fetched.

SQL> 
SQL> UPDATE T1 SET F1 = '00000020180830';

1 rows affected.

SQL> ALTER SESSION SET NLS_DATE_FORMAT='YYYYMMDD';

Succeed.

SQL> 
SQL> select 
  2  case when timestampdiff(year,cast(substring(F1,7,8) as date),sysdate)<20 then '20'
  3  when timestampdiff(year,cast(substring(F1,7,8) as date),sysdate)>=20 and timestampdiff(year,cast(substring(F1,7,8) as date),sysdate) < 25 then '[20,25)'
  4  when timestampdiff(year,cast(substring(F1,7,8) as date),sysdate)>=25 and timestampdiff(year,cast(substring(F1,7,8) as date),sysdate) < 30 then '[25,30)'
  5  when timestampdiff(year,cast(substring(F1,7,8) as date),sysdate)>=30 and timestampdiff(year,cast(substring(F1,7,8) as date),sysdate) < 35 then '[30,35)'
  6  when timestampdiff(year,cast(substring(F1,7,8) as date),sysdate)>=35 and timestampdiff(year,cast(substring(F1,7,8) as date),sysdate) < 40 then '[35,40)'
  7  when timestampdiff(year,cast(substring(F1,7,8) as date),sysdate)>=40 and timestampdiff(year,cast(substring(F1,7,8) as date),sysdate) < 45 then '[40,45)'
  8  when timestampdiff(year,cast(substring(F1,7,8) as date),sysdate)>=45 and timestampdiff(year,cast(substring(F1,7,8) as date),sysdate) < 50 then '[45,50)'
  9  when timestampdiff(year,cast(substring(F1,7,8) as date),sysdate)>=50 and timestampdiff(year,cast(substring(F1,7,8) as date),sysdate) < 55 then '[50,55)'
 10  when timestampdiff(year,cast(substring(F1,7,8) as date),sysdate)>=55 and timestampdiff(year,cast(substring(F1,7,8) as date),sysdate) < 60 then '[55,60)'
 11  when timestampdiff(year,cast(substring(F1,7,8) as date),sysdate)>=60 then '60' end
 12  from T1
 13  group by
 14  case when timestampdiff(year,cast(substring(F1,7,8) as date),sysdate)<20 then '20'
 15  when timestampdiff(year,cast(substring(F1,7,8) as date),sysdate)>=20 and timestampdiff(year,cast(substring(F1,7,8) as date),sysdate) < 25 then '[20,25)'
 16  when timestampdiff(year,cast(substring(F1,7,8) as date),sysdate)>=25 and timestampdiff(year,cast(substring(F1,7,8) as date),sysdate) < 30 then '[25,30)'
 17  when timestampdiff(year,cast(substring(F1,7,8) as date),sysdate)>=30 and timestampdiff(year,cast(substring(F1,7,8) as date),sysdate) < 35 then '[30,35)'
 18  when timestampdiff(year,cast(substring(F1,7,8) as date),sysdate)>=35 and timestampdiff(year,cast(substring(F1,7,8) as date),sysdate) < 40 then '[35,40)'
 19  when timestampdiff(year,cast(substring(F1,7,8) as date),sysdate)>=40 and timestampdiff(year,cast(substring(F1,7,8) as date),sysdate) < 45 then '[40,45)'
 20  when timestampdiff(year,cast(substring(F1,7,8) as date),sysdate)>=45 and timestampdiff(year,cast(substring(F1,7,8) as date),sysdate) < 50 then '[45,50)'
 21  when timestampdiff(year,cast(substring(F1,7,8) as date),sysdate)>=50 and timestampdiff(year,cast(substring(F1,7,8) as date),sysdate) < 55 then '[50,55)'
 22  when timestampdiff(year,cast(substring(F1,7,8) as date),sysdate)>=55 and timestampdiff(year,cast(substring(F1,7,8) as date),sysdate) < 60 then '[55,60)'
 23  when timestampdiff(year,cast(substring(F1,7,8) as date),sysdate)>=60 then '60' end;

CASE WHEN TIMESTAMPDIFF(YEAR,CAST(SUBSTRING(F1,7,8) AS DATE),SYS
----------------------------------------------------------------
20                                                              

1 rows fetched.

SQL> 
SQL> ALTER SESSION SET NLS_DATE_FORMAT='YYYY-MM-DD HH24:MI:SS';

Succeed.

SQL> DROP TABLE if exists t1;

Succeed.

SQL> 
SQL> drop table if exists t_subselect_dept;

Succeed.

SQL> create table t_subselect_dept(
  2 deptno int primary key,
  3 dname varchar(30) UNIQUE,
  4 loc varchar(30),
  5 mgr varchar(30)
  6 );

Succeed.

SQL> drop table if exists t_subselect_emp;

Succeed.

SQL> create table t_subselect_emp(
  2 empno int primary key,
  3 ename varchar(30) not null,
  4 job varchar(30),
  5 mgr varchar(30),
  6 hiredate int,
  7 sal int not null,
  8 comm int check(comm<10000),
  9 deptno int
 10 );

Succeed.

SQL> insert into t_subselect_dept values(1, '技术部1' ,'南泥湾','Steve1');

1 rows affected.

SQL> insert into t_subselect_dept values(2, 'SALES1' ,'深圳市','宋祖英1');

1 rows affected.

SQL> insert into t_subselect_dept values(3, '事业部1' ,'北京市','宋祖英1');

1 rows affected.

SQL> insert into t_subselect_dept values(4, '服务部1' ,'延安','刘备备1');

1 rows affected.

SQL> insert into t_subselect_dept values(5, '生产部1' ,'南京市','刘备备1');

1 rows affected.

SQL> insert into t_subselect_dept values(6, '宣传部1' ,'上海市','刘备备1');

1 rows affected.

SQL> insert into t_subselect_dept values(7, '打杂部1' ,'广州市','刘备备1');

1 rows affected.

SQL> insert into t_subselect_dept values(8, '司令部1' ,'重庆市','曹操操1');

1 rows affected.

SQL> insert into t_subselect_dept values(9, '卫生部1' ,'长沙市','无1');

1 rows affected.

SQL> insert into t_subselect_dept values(10, '文化部1' ,'武冈市','无1');

1 rows affected.

SQL> insert into t_subselect_dept values(11, '娱乐部1' ,'纽约','无1');

1 rows affected.

SQL> insert into t_subselect_dept values(12, '管理部1' ,'伦敦','无1');

1 rows affected.

SQL> insert into t_subselect_dept values(13, '行政部1' ,'天津市','无1');

1 rows affected.

SQL> insert into t_subselect_emp values(1, '关羽羽', 'CLERK' ,'刘备备1', 20011109, 2000, 1000, 3);

1 rows affected.

SQL> insert into t_subselect_emp values(2, 'SMITH', 'CLERK' ,'刘备备1', 20120101, 2000, 800, 6);

1 rows affected.

SQL> insert into t_subselect_emp values(3, '刘备备', 'MANAGER' ,'宋祖英1', 20080808, 9000, 4000, 3);

1 rows affected.

SQL> insert into t_subselect_emp values(4, 'TOM', 'ENGINEER' ,'Steve1', 20050612, 3000, 1000, 1);

1 rows affected.

SQL> insert into t_subselect_emp values(5, 'Steve', 'MANAGER' ,'宋祖英1', 20110323, 80000, 9000, 1);

1 rows affected.

SQL> insert into t_subselect_emp values(6, '张飞飞', 'CLERK' ,'刘备备1', 20101010, 2000, 1000, 7);

1 rows affected.

SQL> insert into t_subselect_emp values(7, 'SCOTT', 'CLERK' ,'刘备备1', 20071204, 2000, 1000, 3);

1 rows affected.

SQL> insert into t_subselect_emp values(8, '宋祖英', 'Boss' ,'无1', 20060603, 2000, 1000, 8);

1 rows affected.

SQL> insert into t_subselect_emp values(9, '曹仁人', 'SALESMAN' ,'曹操操1', 20120130, 2000, 1000, 2);

1 rows affected.

SQL> insert into t_subselect_emp values(10, '曹操操', 'MANAGER' ,'宋祖英1',20090815, 2000, 1000, 2);

1 rows affected.

SQL> insert into t_subselect_emp values(11, '酱油哥', 'HAPI' ,'毛泽东1',20090215, 500, 1, 2);

1 rows affected.

SQL> insert into t_subselect_emp values(12, 'FISTH', 'CLERK' ,'刘备备1', 20120101, 2000, 800, 6);

1 rows affected.

SQL> insert into t_subselect_emp values(13, '张三三', 'MANAGER' ,'宋祖英1', 20080808, 9000, 4000, 3);

1 rows affected.

SQL> insert into t_subselect_emp values(14, '李苗苗', 'ENGINEER' ,'Steve1', 20050612, 3000, 1000, 1);

1 rows affected.

SQL> insert into t_subselect_emp values(15, '王舒数', 'MANAGER' ,'宋祖英1', 20110323, 80000, 9000, 1);

1 rows affected.

SQL> insert into t_subselect_emp values(16, '谢谢', 'CLERK' ,'刘备备1', 20101010, 2000, 1000, 3);

1 rows affected.

SQL> insert into t_subselect_emp values(17, '王欣欣', 'CLERK' ,'刘备备1', 20071204, 2000, 1000, 5);

1 rows affected.

SQL> insert into t_subselect_emp values(18, '李唐', 'Boss' ,'无1', 20060603, 2000, 1000, 8);

1 rows affected.

SQL> insert into t_subselect_emp values(19, '曹仁人', 'SALESMAN' ,'曹操操1', 20120130, 2000, 1000, 2);

1 rows affected.

SQL> insert into t_subselect_emp values(20, '陈星', 'MANAGER' ,'宋祖英1',20090815, 2000, 1000, 2);

1 rows affected.

SQL> insert into t_subselect_emp values(21, '君君', 'HAPI' ,'毛泽东1',20090215, 500, 1, 2);

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> select
  2   a.deptno,
  3   b.ename ,
  4   a.loc   ,
  5   b.job   ,
  6   b.sal
  7 from
  8   t_subselect_dept a
  9   inner join
 10     t_subselect_emp b
 11     on
 12       a.deptno=b.deptno
 13 where
 14   ascii(concat(b.sal,'1')) =
 15   (
 16     select
 17       ascii(GROUP_CONCAT(c.sal))
 18     from
 19       t_subselect_emp c
 20     where
 21       a.deptno   =c.deptno
 22       and a.mgr  =c.mgr
 23       and c.sal >=2000
 24   )
 25 order by
 26   a.deptno,
 27   b.ename ,
 28   a.loc   ,
 29   b.job   ,
 30   b.sal
 31 ;

DEPTNO       ENAME                          LOC                            JOB                            SAL         
------------ ------------------------------ ------------------------------ ------------------------------ ------------
1            TOM                            南泥湾                      ENGINEER                       3000        
1            李苗苗                      南泥湾                      ENGINEER                       3000        
2            曹仁人                      深圳市                      SALESMAN                       2000        
2            曹仁人                      深圳市                      SALESMAN                       2000        
2            曹操操                      深圳市                      MANAGER                        2000        
2            陈星                         深圳市                      MANAGER                        2000        
3            刘备备                      北京市                      MANAGER                        9000        
3            张三三                      北京市                      MANAGER                        9000        
5            王欣欣                      南京市                      CLERK                          2000        
6            FISTH                          上海市                      CLERK                          2000        
6            SMITH                          上海市                      CLERK                          2000        
7            张飞飞                      广州市                      CLERK                          2000        

12 rows fetched.

SQL> 
SQL> select distinct
  2   a.deptno,
  3   b.ename ,
  4   a.loc   ,
  5   b.job   ,
  6   b.sal
  7 from
  8   t_subselect_dept a
  9   inner join
 10     t_subselect_emp b
 11     on
 12       a.deptno=b.deptno
 13 where
 14   ascii(concat(b.sal,'1')) =
 15   (
 16     select
 17       ascii(GROUP_CONCAT(c.sal))
 18     from
 19       t_subselect_emp c
 20     where
 21       a.deptno   =c.deptno
 22       and a.mgr  =c.mgr
 23       and c.sal >=2000
 24   )
 25 order by
 26   a.deptno,
 27   b.ename ,
 28   a.loc   ,
 29   b.job   ,
 30   b.sal
 31 ;

DEPTNO       ENAME                          LOC                            JOB                            SAL         
------------ ------------------------------ ------------------------------ ------------------------------ ------------
1            TOM                            南泥湾                      ENGINEER                       3000        
1            李苗苗                      南泥湾                      ENGINEER                       3000        
2            曹仁人                      深圳市                      SALESMAN                       2000        
2            曹操操                      深圳市                      MANAGER                        2000        
2            陈星                         深圳市                      MANAGER                        2000        
3            刘备备                      北京市                      MANAGER                        9000        
3            张三三                      北京市                      MANAGER                        9000        
5            王欣欣                      南京市                      CLERK                          2000        
6            FISTH                          上海市                      CLERK                          2000        
6            SMITH                          上海市                      CLERK                          2000        
7            张飞飞                      广州市                      CLERK                          2000        

11 rows fetched.

SQL> 
SQL> select 
  2   a.deptno,
  3   b.ename ,
  4   a.loc   ,
  5   b.job   ,
  6   b.sal
  7 from
  8   t_subselect_dept a
  9   inner join
 10     t_subselect_emp b
 11     on
 12       a.deptno=b.deptno
 13 where
 14   ascii(concat(b.sal,'1')) =
 15   (
 16     select
 17       ascii(GROUP_CONCAT(c.sal))
 18     from
 19       t_subselect_emp c
 20     where
 21       a.deptno   =c.deptno
 22       and a.mgr  =c.mgr
 23       and c.sal >=2000000
 24   )
 25 order by
 26   a.deptno,
 27   b.ename ,
 28   a.loc   ,
 29   b.job   ,
 30   b.sal
 31 ;

DEPTNO       ENAME                          LOC                            JOB                            SAL         
------------ ------------------------------ ------------------------------ ------------------------------ ------------

0 rows fetched.

SQL> 
SQL> select distinct
  2   a.deptno,
  3   a.dname ,
  4   a.loc   ,
  5   b.job   ,
  6   b.sal
  7 from
  8   t_subselect_dept a,
  9   t_subselect_emp  b
 10 where
 11   concat(b.comm,'') <>
 12   (
 13     select
 14       concat(1,GROUP_CONCAT(c.comm))
 15     from
 16       t_subselect_emp c
 17     where
 18       a.deptno=c.deptno
 19   )
 20   and concat(b.sal,'1') !=
 21   (
 22     select
 23       GROUP_CONCAT(c.sal)
 24     from
 25       t_subselect_emp c
 26     where
 27       a.deptno=c.deptno
 28   )
 29 order by
 30   a.deptno,
 31   a.dname ,
 32   a.loc   ,
 33   b.job   ,
 34   b.sal
 35 ;

DEPTNO       DNAME                          LOC                            JOB                            SAL         
------------ ------------------------------ ------------------------------ ------------------------------ ------------
1            技术部1                     南泥湾                      Boss                           2000        
1            技术部1                     南泥湾                      CLERK                          2000        
1            技术部1                     南泥湾                      ENGINEER                       3000        
1            技术部1                     南泥湾                      HAPI                           500         
1            技术部1                     南泥湾                      MANAGER                        2000        
1            技术部1                     南泥湾                      MANAGER                        9000        
1            技术部1                     南泥湾                      MANAGER                        80000       
1            技术部1                     南泥湾                      SALESMAN                       2000        
2            SALES1                         深圳市                      Boss                           2000        
2            SALES1                         深圳市                      CLERK                          2000        
2            SALES1                         深圳市                      ENGINEER                       3000        
2            SALES1                         深圳市                      HAPI                           500         
2            SALES1                         深圳市                      MANAGER                        2000        
2            SALES1                         深圳市                      MANAGER                        9000        
2            SALES1                         深圳市                      MANAGER                        80000       
2            SALES1                         深圳市                      SALESMAN                       2000        
3            事业部1                     北京市                      Boss                           2000        
3            事业部1                     北京市                      CLERK                          2000        
3            事业部1                     北京市                      ENGINEER                       3000        
3            事业部1                     北京市                      HAPI                           500         
3            事业部1                     北京市                      MANAGER                        2000        
3            事业部1                     北京市                      MANAGER                        9000        
3            事业部1                     北京市                      MANAGER                        80000       
3            事业部1                     北京市                      SALESMAN                       2000        
5            生产部1                     南京市                      Boss                           2000        
5            生产部1                     南京市                      CLERK                          2000        
5            生产部1                     南京市                      ENGINEER                       3000        
5            生产部1                     南京市                      HAPI                           500         
5            生产部1                     南京市                      MANAGER                        2000        
5            生产部1                     南京市                      MANAGER                        9000        
5            生产部1                     南京市                      MANAGER                        80000       
5            生产部1                     南京市                      SALESMAN                       2000        
6            宣传部1                     上海市                      Boss                           2000        
6            宣传部1                     上海市                      CLERK                          2000        
6            宣传部1                     上海市                      ENGINEER                       3000        
6            宣传部1                     上海市                      HAPI                           500         
6            宣传部1                     上海市                      MANAGER                        2000        
6            宣传部1                     上海市                      MANAGER                        9000        
6            宣传部1                     上海市                      MANAGER                        80000       
6            宣传部1                     上海市                      SALESMAN                       2000        
7            打杂部1                     广州市                      Boss                           2000        
7            打杂部1                     广州市                      CLERK                          2000        
7            打杂部1                     广州市                      ENGINEER                       3000        
7            打杂部1                     广州市                      HAPI                           500         
7            打杂部1                     广州市                      MANAGER                        2000        
7            打杂部1                     广州市                      MANAGER                        9000        
7            打杂部1                     广州市                      MANAGER                        80000       
7            打杂部1                     广州市                      SALESMAN                       2000        
8            司令部1                     重庆市                      Boss                           2000        
8            司令部1                     重庆市                      CLERK                          2000        
8            司令部1                     重庆市                      ENGINEER                       3000        
8            司令部1                     重庆市                      HAPI                           500         
8            司令部1                     重庆市                      MANAGER                        2000        
8            司令部1                     重庆市                      MANAGER                        9000        
8            司令部1                     重庆市                      MANAGER                        80000       
8            司令部1                     重庆市                      SALESMAN                       2000        

56 rows fetched.

SQL> 
SQL> select distinct
  2   a.deptno,
  3   a.dname ,
  4   a.loc   ,
  5   b.job   ,
  6   b.sal
  7 from
  8   t_subselect_dept a,
  9   t_subselect_emp  b
 10 where
 11   concat(b.comm,'') <>
 12   (
 13     select
 14       GROUP_CONCAT(concat(1,c.comm))
 15     from
 16       t_subselect_emp c
 17     where
 18       a.deptno=c.deptno
 19   )
 20   and concat(b.sal,'1') !=
 21   (
 22     select
 23       GROUP_CONCAT(c.sal)
 24     from
 25       t_subselect_emp c
 26     where
 27       a.deptno=c.deptno
 28   )
 29 order by
 30   a.deptno,
 31   a.dname ,
 32   a.loc   ,
 33   b.job   ,
 34   b.sal
 35 ;

DEPTNO       DNAME                          LOC                            JOB                            SAL         
------------ ------------------------------ ------------------------------ ------------------------------ ------------
1            技术部1                     南泥湾                      Boss                           2000        
1            技术部1                     南泥湾                      CLERK                          2000        
1            技术部1                     南泥湾                      ENGINEER                       3000        
1            技术部1                     南泥湾                      HAPI                           500         
1            技术部1                     南泥湾                      MANAGER                        2000        
1            技术部1                     南泥湾                      MANAGER                        9000        
1            技术部1                     南泥湾                      MANAGER                        80000       
1            技术部1                     南泥湾                      SALESMAN                       2000        
2            SALES1                         深圳市                      Boss                           2000        
2            SALES1                         深圳市                      CLERK                          2000        
2            SALES1                         深圳市                      ENGINEER                       3000        
2            SALES1                         深圳市                      HAPI                           500         
2            SALES1                         深圳市                      MANAGER                        2000        
2            SALES1                         深圳市                      MANAGER                        9000        
2            SALES1                         深圳市                      MANAGER                        80000       
2            SALES1                         深圳市                      SALESMAN                       2000        
3            事业部1                     北京市                      Boss                           2000        
3            事业部1                     北京市                      CLERK                          2000        
3            事业部1                     北京市                      ENGINEER                       3000        
3            事业部1                     北京市                      HAPI                           500         
3            事业部1                     北京市                      MANAGER                        2000        
3            事业部1                     北京市                      MANAGER                        9000        
3            事业部1                     北京市                      MANAGER                        80000       
3            事业部1                     北京市                      SALESMAN                       2000        
5            生产部1                     南京市                      Boss                           2000        
5            生产部1                     南京市                      CLERK                          2000        
5            生产部1                     南京市                      ENGINEER                       3000        
5            生产部1                     南京市                      HAPI                           500         
5            生产部1                     南京市                      MANAGER                        2000        
5            生产部1                     南京市                      MANAGER                        9000        
5            生产部1                     南京市                      MANAGER                        80000       
5            生产部1                     南京市                      SALESMAN                       2000        
6            宣传部1                     上海市                      Boss                           2000        
6            宣传部1                     上海市                      CLERK                          2000        
6            宣传部1                     上海市                      ENGINEER                       3000        
6            宣传部1                     上海市                      HAPI                           500         
6            宣传部1                     上海市                      MANAGER                        2000        
6            宣传部1                     上海市                      MANAGER                        9000        
6            宣传部1                     上海市                      MANAGER                        80000       
6            宣传部1                     上海市                      SALESMAN                       2000        
7            打杂部1                     广州市                      Boss                           2000        
7            打杂部1                     广州市                      CLERK                          2000        
7            打杂部1                     广州市                      ENGINEER                       3000        
7            打杂部1                     广州市                      HAPI                           500         
7            打杂部1                     广州市                      MANAGER                        2000        
7            打杂部1                     广州市                      MANAGER                        9000        
7            打杂部1                     广州市                      MANAGER                        80000       
7            打杂部1                     广州市                      SALESMAN                       2000        
8            司令部1                     重庆市                      Boss                           2000        
8            司令部1                     重庆市                      CLERK                          2000        
8            司令部1                     重庆市                      ENGINEER                       3000        
8            司令部1                     重庆市                      HAPI                           500         
8            司令部1                     重庆市                      MANAGER                        2000        
8            司令部1                     重庆市                      MANAGER                        9000        
8            司令部1                     重庆市                      MANAGER                        80000       
8            司令部1                     重庆市                      SALESMAN                       2000        

56 rows fetched.

SQL> 
SQL> drop table if exists t2;

Succeed.

SQL> create table t2(a int, b int, c int);

Succeed.

SQL> insert into t2 values(1,2,3);

1 rows affected.

SQL> insert into t2 values(2,2,2);

1 rows affected.

SQL> insert into t2 values(2,2,2);

1 rows affected.

SQL> insert into t2 values(3,2,2);

1 rows affected.

SQL> commit;

Succeed.

SQL> select b,c,case when c > (select avg(t.b) from t2) then 1 else 0 end as d from t2 t group by c,b order by 1;

CT-00601, [1:38]Sql syntax error: Aggregate function does not support father child Association.
SQL> drop table if exists t2;

Succeed.

SQL> 
SQL> --DTS2019012211799
SQL> drop table if exists avg_test;

Succeed.

SQL> create table avg_test(a int, b varchar(30));

Succeed.

SQL> insert into avg_test values(1123213, 'aaa');  

1 rows affected.

SQL> insert into avg_test values(2123213, 'baa');  

1 rows affected.

SQL> insert into avg_test values(3123213, 'caa');  

1 rows affected.

SQL> insert into avg_test values(4123213, 'daa');  

1 rows affected.

SQL> insert into avg_test values(5123213, 'eaa');    

1 rows affected.

SQL> insert into avg_test values(6123213, 'faa');  

1 rows affected.

SQL> insert into avg_test values(7123213, 'gaa');  

1 rows affected.

SQL> insert into avg_test values(8123213, 'haa');  

1 rows affected.

SQL> insert into avg_test values(9123213, 'iaa');  

1 rows affected.

SQL> insert into avg_test values(1123213, 'jaa'); 

1 rows affected.

SQL> insert into avg_test values(2123213, 'kaa');  

1 rows affected.

SQL> insert into avg_test values(3123213, 'laa');  

1 rows affected.

SQL> insert into avg_test values(4123213, 'maa');  

1 rows affected.

SQL> insert into avg_test values(5123213, 'naa');  

1 rows affected.

SQL> insert into avg_test values(6123213, 'oaa'); 

1 rows affected.

SQL> insert into avg_test values(7123213, 'paa');  

1 rows affected.

SQL> insert into avg_test values(8123213, 'qaa');  

1 rows affected.

SQL> insert into avg_test values(9123213, 'raa');  

1 rows affected.

SQL> insert into avg_test values(1123213, 'saa');  

1 rows affected.

SQL> insert into avg_test values(2123213, 'taa'); 

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> select avg(distinct(substr(a, 1, 1))) from avg_test;  

AVG(DISTINCT(SUBSTR(A, 1, 1)))          
----------------------------------------
5                                       

1 rows fetched.

SQL> select avg(distinct(substr(a, 2, 1))) from avg_test;

AVG(DISTINCT(SUBSTR(A, 2, 1)))          
----------------------------------------
1                                       

1 rows fetched.

SQL> select avg(distinct(substr(a, 3, 1))) from avg_test;

AVG(DISTINCT(SUBSTR(A, 3, 1)))          
----------------------------------------
2                                       

1 rows fetched.

SQL> select avg(distinct(substr(a, 5, 1))) from avg_test;

AVG(DISTINCT(SUBSTR(A, 5, 1)))          
----------------------------------------
2                                       

1 rows fetched.

SQL> 
SQL> 
SQL> drop table gs_test_aggr_mae_rmse;

CT-00843, The table or view SYS.GS_TEST_AGGR_MAE_RMSE does not exist.
SQL> 
SQL> --median
SQL> drop table if exists ct_regress_aggr_median;

Succeed.

SQL> create table ct_regress_aggr_median(id int not null, value_int int, value_decimal decimal(20,3), value_real real, value_varchar varchar(20), value_date date, value_bool boolean);

Succeed.

SQL> insert into ct_regress_aggr_median values(1, 0, 13132457.124, 13213478.57, '55647', '2018-05-05', false);

1 rows affected.

SQL> insert into ct_regress_aggr_median values(1, 1, 11546797.115, 15645482.11, '59875', '2018-06-01', false);

1 rows affected.

SQL> insert into ct_regress_aggr_median values(1, 1, 12745778.669, 16879447.56, '88654', '2018-06-02', false);

1 rows affected.

SQL> insert into ct_regress_aggr_median values(1, 5, 16797824.667, 11357945.96, '16797', '2018-06-03', false);

1 rows affected.

SQL> insert into ct_regress_aggr_median values(1, 3, 11647974.477, 11346794.12, '23467', '2018-06-03', false);

1 rows affected.

SQL> insert into ct_regress_aggr_median values(1, 3, 13464797.922, 16467467.22, '44642', '2018-05-03', false);

1 rows affected.

SQL> insert into ct_regress_aggr_median values(1, 8, 13464797.922, 15467467.22, '45642', '2018-05-03', true);

1 rows affected.

SQL> insert into ct_regress_aggr_median values(1, 4, 13434597.922, 16467117.11, '43842', '2018-05-04', true);

1 rows affected.

SQL> insert into ct_regress_aggr_median values(1, 9, 15464797.332, 14457667.61, '94542', '2018-05-05', false);

1 rows affected.

SQL> insert into ct_regress_aggr_median values(1, 9, 18433697.922, 11000001.00, '34642', '2018-05-03', false);

1 rows affected.

SQL> insert into ct_regress_aggr_median values(1, 6, 13456797.922, 16467467.22, '44642', '2018-05-07', true);

1 rows affected.

SQL> insert into ct_regress_aggr_median values(1, 6, 12558921.356, 13336467.89, '73895', '2018-05-08', true);

1 rows affected.

SQL> insert into ct_regress_aggr_median values(1, -1, 15376127.16, 19467567.92, '62254', '2018-05-09', false);

1 rows affected.

SQL> insert into ct_regress_aggr_median values(2, 9, 18632479.253, 13368921.62, '19525', '2018-05-10', true);

1 rows affected.

SQL> insert into ct_regress_aggr_median values(2, -9, 16589451.25, 13578944.00, '56987', '2019-06-04', true);

1 rows affected.

SQL> insert into ct_regress_aggr_median values(2, 2, 16657974.999, 46487348.46, '55672', '2018-09-09', false);

1 rows affected.

SQL> insert into ct_regress_aggr_median values(2, 6, 17985711.321, 1792364.767, '33568', '2018-10-10', false);

1 rows affected.

SQL> insert into ct_regress_aggr_median values(2, -1, 13132457.124, 13213478.57, '55647', '2018-05-05', true);

1 rows affected.

SQL> insert into ct_regress_aggr_median values(2, 7, 13132457.124, 13213478.57, '55647', '2018-05-05', false);

1 rows affected.

SQL> 
SQL> --const
SQL> select median(NULL) from ct_regress_aggr_median;

CT-00606, [1:8]Inconsistent datatypes, expected NUMERIC - got VARCHAR
SQL> select median(-1.79E+308) from ct_regress_aggr_median;

MEDIAN(-1.79E+308)  
--------------------
-1.79e+308          

1 rows fetched.

SQL> 
SQL> --column odd
SQL> select median(value_int) from ct_regress_aggr_median;

MEDIAN(VALUE_INT)                       
----------------------------------------
4                                       

1 rows fetched.

SQL> select median(value_decimal) from ct_regress_aggr_median;

MEDIAN(VALUE_DECIMAL)                   
----------------------------------------
13464797.922                            

1 rows fetched.

SQL> select median(value_real) from ct_regress_aggr_median;

MEDIAN(VALUE_REAL)  
--------------------
13578944            

1 rows fetched.

SQL> select median(value_varchar) from ct_regress_aggr_median;

CT-00606, [1:8]Inconsistent datatypes, expected NUMERIC - got VARCHAR
SQL> select median(value_date) from ct_regress_aggr_median;

MEDIAN(VALUE_DATE)    
----------------------
2018-05-08 00:00:00   

1 rows fetched.

SQL> select median(value_bool) from ct_regress_aggr_median;

CT-00606, [1:8]Inconsistent datatypes, expected NUMERIC - got BOOLEAN
SQL> --column even
SQL> select median(value_int) from ct_regress_aggr_median where id = 2;

MEDIAN(VALUE_INT)                       
----------------------------------------
4                                       

1 rows fetched.

SQL> select median(value_decimal) from ct_regress_aggr_median where id = 2;

MEDIAN(VALUE_DECIMAL)                   
----------------------------------------
16623713.1245                           

1 rows fetched.

SQL> select median(value_real) from ct_regress_aggr_median where id = 2;

MEDIAN(VALUE_REAL)  
--------------------
13291200.095        

1 rows fetched.

SQL> select median(value_varchar) from ct_regress_aggr_median where id = 2;

CT-00606, [1:8]Inconsistent datatypes, expected NUMERIC - got VARCHAR
SQL> select median(value_date) from ct_regress_aggr_median where id = 2;

MEDIAN(VALUE_DATE)    
----------------------
2018-07-10 00:00:00   

1 rows fetched.

SQL> select median(value_bool) from ct_regress_aggr_median where id = 2;

CT-00606, [1:8]Inconsistent datatypes, expected NUMERIC - got BOOLEAN
SQL> 
SQL> --expression
SQL> select median(2147483647 + 2147483647) from ct_regress_aggr_median;

MEDIAN(2147483647 + 2147483647)         
----------------------------------------
4294967294                              

1 rows fetched.

SQL> select median(value_int + 2147483647) from ct_regress_aggr_median;

MEDIAN(VALUE_INT + 2147483647)          
----------------------------------------
2147483651                              

1 rows fetched.

SQL> select median(value_decimal + 2147483647) from ct_regress_aggr_median;

MEDIAN(VALUE_DECIMAL + 2147483647)      
----------------------------------------
2160948444.922                          

1 rows fetched.

SQL> select median(value_real + 2147483647) from ct_regress_aggr_median;

MEDIAN(VALUE_REAL + 2147483647)
-------------------------------
2161062591                     

1 rows fetched.

SQL> select median(value_varchar + 2147483647) from ct_regress_aggr_median;

MEDIAN(VALUE_VARCHAR + 2147483647)      
----------------------------------------
2147539294                              

1 rows fetched.

SQL> select median(value_varchar + value_int) from ct_regress_aggr_median;

MEDIAN(VALUE_VARCHAR + VALUE_INT)       
----------------------------------------
55646                                   

1 rows fetched.

SQL> select median(value_varchar + value_decimal) from ct_regress_aggr_median;

MEDIAN(VALUE_VARCHAR + VALUE_DECIMAL)   
----------------------------------------
13509439.922                            

1 rows fetched.

SQL> select median(value_varchar + value_real) from ct_regress_aggr_median;

MEDIAN(VALUE_VARCHAR + VALUE_REAL)      
----------------------------------------
13635931                                

1 rows fetched.

SQL> select median(value_varchar + value_varchar) from ct_regress_aggr_median;

MEDIAN(VALUE_VARCHAR + VALUE_VARCHAR)   
----------------------------------------
111294                                  

1 rows fetched.

SQL> select median(value_real + value_varchar) from ct_regress_aggr_median;

MEDIAN(VALUE_REAL + VALUE_VARCHAR)      
----------------------------------------
13635931                                

1 rows fetched.

SQL> select median(value_real + value_real) from ct_regress_aggr_median;

MEDIAN(VALUE_REAL + VALUE_REAL)
-------------------------------
27157888                       

1 rows fetched.

SQL> select median(value_real + value_decimal) from ct_regress_aggr_median;

MEDIAN(VALUE_REAL + VALUE_DECIMAL)      
----------------------------------------
29433698.922                            

1 rows fetched.

SQL> select median(value_real + value_int) from ct_regress_aggr_median;

MEDIAN(VALUE_REAL + VALUE_INT)
------------------------------
13578935                      

1 rows fetched.

SQL> select median(value_decimal + value_int) from ct_regress_aggr_median;

MEDIAN(VALUE_DECIMAL + VALUE_INT)       
----------------------------------------
13464800.922                            

1 rows fetched.

SQL> select median(value_decimal + value_decimal) from ct_regress_aggr_median;

MEDIAN(VALUE_DECIMAL + VALUE_DECIMAL)   
----------------------------------------
26929595.844                            

1 rows fetched.

SQL> select median(value_decimal + value_real) from ct_regress_aggr_median;

MEDIAN(VALUE_DECIMAL + VALUE_REAL)      
----------------------------------------
29433698.922                            

1 rows fetched.

SQL> select median(value_decimal + value_varchar) from ct_regress_aggr_median;

MEDIAN(VALUE_DECIMAL + VALUE_VARCHAR)   
----------------------------------------
13509439.922                            

1 rows fetched.

SQL> select median(value_int + value_varchar) from ct_regress_aggr_median;

MEDIAN(VALUE_INT + VALUE_VARCHAR)       
----------------------------------------
55646                                   

1 rows fetched.

SQL> select median(value_int + value_real) from ct_regress_aggr_median;

MEDIAN(VALUE_INT + VALUE_REAL)
------------------------------
13578935                      

1 rows fetched.

SQL> select median(value_int + value_decimal) from ct_regress_aggr_median;

MEDIAN(VALUE_INT + VALUE_DECIMAL)       
----------------------------------------
13464800.922                            

1 rows fetched.

SQL> select median(value_int + value_int) from ct_regress_aggr_median;

MEDIAN(VALUE_INT + VALUE_INT)           
----------------------------------------
8                                       

1 rows fetched.

SQL> 
SQL> --subquery
SQL> select median(value_int) from (select a.value_int from ct_regress_aggr_median a join ct_regress_aggr_median b);

MEDIAN(VALUE_INT)                       
----------------------------------------
4                                       

1 rows fetched.

SQL> 
SQL> --recursive aggr
SQL> select median(avg(value_int)) from ct_regress_aggr_median;

CT-01317, [1:15]Unexpected aggregation 'AVG'
SQL> 
SQL> --functions
SQL> select median(abs(value_int)) from ct_regress_aggr_median;

MEDIAN(ABS(VALUE_INT))                  
----------------------------------------
5                                       

1 rows fetched.

SQL> select median(floor(value_int)) from ct_regress_aggr_median;

MEDIAN(FLOOR(VALUE_INT))                
----------------------------------------
4                                       

1 rows fetched.

SQL> select median(abs(value_decimal)) from ct_regress_aggr_median;

MEDIAN(ABS(VALUE_DECIMAL))              
----------------------------------------
13464797.922                            

1 rows fetched.

SQL> select median(floor(value_decimal)) from ct_regress_aggr_median;

MEDIAN(FLOOR(VALUE_DECIMAL))            
----------------------------------------
13464797                                

1 rows fetched.

SQL> select median(abs(value_real)) from ct_regress_aggr_median;

MEDIAN(ABS(VALUE_REAL))                 
----------------------------------------
13578944                                

1 rows fetched.

SQL> select median(floor(value_real)) from ct_regress_aggr_median;

MEDIAN(FLOOR(VALUE_REAL))               
----------------------------------------
13578944                                

1 rows fetched.

SQL> select median(abs(value_varchar)) from ct_regress_aggr_median;

MEDIAN(ABS(VALUE_VARCHAR))              
----------------------------------------
55647                                   

1 rows fetched.

SQL> select median(floor(value_varchar)) from ct_regress_aggr_median;

MEDIAN(FLOOR(VALUE_VARCHAR))            
----------------------------------------
55647                                   

1 rows fetched.

SQL> 
SQL> --distinct
SQL> select distinct median(value_int) from ct_regress_aggr_median;

MEDIAN(VALUE_INT)                       
----------------------------------------
4                                       

1 rows fetched.

SQL> select distinct median(value_decimal) from ct_regress_aggr_median;

MEDIAN(VALUE_DECIMAL)                   
----------------------------------------
13464797.922                            

1 rows fetched.

SQL> select distinct median(value_real) from ct_regress_aggr_median;

MEDIAN(VALUE_REAL)  
--------------------
13578944            

1 rows fetched.

SQL> select distinct median(value_varchar) from ct_regress_aggr_median;

CT-00606, [1:17]Inconsistent datatypes, expected NUMERIC - got VARCHAR
SQL> select median(distinct value_int) from ct_regress_aggr_median;

MEDIAN(DISTINCT VALUE_INT)              
----------------------------------------
3.5                                     

1 rows fetched.

SQL> select median(distinct value_decimal) from ct_regress_aggr_median;

MEDIAN(DISTINCT VALUE_DECIMAL)          
----------------------------------------
14420462.541                            

1 rows fetched.

SQL> select median(distinct value_real) from ct_regress_aggr_median;

MEDIAN(DISTINCT VALUE_REAL)
---------------------------
14018305.805               

1 rows fetched.

SQL> select median(distinct value_varchar) from ct_regress_aggr_median;

CT-00606, [1:8]Inconsistent datatypes, expected NUMERIC - got VARCHAR
SQL> 
SQL> --first row is empty
SQL> drop table if exists ct_regress_aggr_median_empty;

Succeed.

SQL> create table ct_regress_aggr_median_empty(id int not null, value_int int);

Succeed.

SQL> select median(value_int) from ct_regress_aggr_median_empty;

MEDIAN(VALUE_INT)                       
----------------------------------------
                                        

1 rows fetched.

SQL> insert into ct_regress_aggr_median_empty(id) values(1);

1 rows affected.

SQL> select median(value_int) from ct_regress_aggr_median_empty;

MEDIAN(VALUE_INT)                       
----------------------------------------
                                        

1 rows fetched.

SQL> insert into ct_regress_aggr_median_empty(id) values(1);

1 rows affected.

SQL> select median(value_int) from ct_regress_aggr_median_empty;

MEDIAN(VALUE_INT)                       
----------------------------------------
                                        

1 rows fetched.

SQL> insert into ct_regress_aggr_median_empty values(2, 1);

1 rows affected.

SQL> select median(value_int) from ct_regress_aggr_median_empty;

MEDIAN(VALUE_INT)                       
----------------------------------------
1                                       

1 rows fetched.

SQL> insert into ct_regress_aggr_median_empty values(2, 2);

1 rows affected.

SQL> select median(value_int) from ct_regress_aggr_median_empty;

MEDIAN(VALUE_INT)                       
----------------------------------------
1.5                                     

1 rows fetched.

SQL> drop table ct_regress_aggr_median_empty;

Succeed.

SQL> 
SQL> --multiple aggrs
SQL> select avg(value_int), median(value_int) from ct_regress_aggr_median;

AVG(VALUE_INT)                           MEDIAN(VALUE_INT)                       
---------------------------------------- ----------------------------------------
3.57894736842105263157894736842105263158 4                                       

1 rows fetched.

SQL> select median(value_int), avg(value_int) from ct_regress_aggr_median;

MEDIAN(VALUE_INT)                        AVG(VALUE_INT)                          
---------------------------------------- ----------------------------------------
4                                        3.57894736842105263157894736842105263158

1 rows fetched.

SQL> select avg(value_int), median(value_int), avg(value_int) from ct_regress_aggr_median;

AVG(VALUE_INT)                           MEDIAN(VALUE_INT)                        AVG(VALUE_INT)                          
---------------------------------------- ---------------------------------------- ----------------------------------------
3.57894736842105263157894736842105263158 4                                        3.57894736842105263157894736842105263158

1 rows fetched.

SQL> select avg(value_int), median(value_int), median(value_int) from ct_regress_aggr_median;

AVG(VALUE_INT)                           MEDIAN(VALUE_INT)                        MEDIAN(VALUE_INT)                       
---------------------------------------- ---------------------------------------- ----------------------------------------
3.57894736842105263157894736842105263158 4                                        4                                       

1 rows fetched.

SQL> select avg(value_int), avg(value_int), median(value_int) from ct_regress_aggr_median;

AVG(VALUE_INT)                           AVG(VALUE_INT)                           MEDIAN(VALUE_INT)                       
---------------------------------------- ---------------------------------------- ----------------------------------------
3.57894736842105263157894736842105263158 3.57894736842105263157894736842105263158 4                                       

1 rows fetched.

SQL> select median(value_int), avg(value_int), median(value_decimal) from ct_regress_aggr_median;

MEDIAN(VALUE_INT)                        AVG(VALUE_INT)                           MEDIAN(VALUE_DECIMAL)                   
---------------------------------------- ---------------------------------------- ----------------------------------------
4                                        3.57894736842105263157894736842105263158 13464797.922                            

1 rows fetched.

SQL> select median(value_int), avg(value_int), avg(value_decimal) from ct_regress_aggr_median;

MEDIAN(VALUE_INT)                        AVG(VALUE_INT)                           AVG(VALUE_DECIMAL)                      
---------------------------------------- ---------------------------------------- ----------------------------------------
4                                        3.57894736842105263157894736842105263158 14613468.3463684210526315789473684210526

1 rows fetched.

SQL> select median(value_int), median(value_decimal), avg(value_decimal) from ct_regress_aggr_median;

MEDIAN(VALUE_INT)                        MEDIAN(VALUE_DECIMAL)                    AVG(VALUE_DECIMAL)                      
---------------------------------------- ---------------------------------------- ----------------------------------------
4                                        13464797.922                             14613468.3463684210526315789473684210526

1 rows fetched.

SQL> select median(value_int), median(value_decimal), median(value_decimal) from ct_regress_aggr_median;

MEDIAN(VALUE_INT)                        MEDIAN(VALUE_DECIMAL)                    MEDIAN(VALUE_DECIMAL)                   
---------------------------------------- ---------------------------------------- ----------------------------------------
4                                        13464797.922                             13464797.922                            

1 rows fetched.

SQL> 
SQL> --index
SQL> create index idx_value on ct_regress_aggr_median(value_int);

Succeed.

SQL> select avg(value_int), median(value_int) from ct_regress_aggr_median;

AVG(VALUE_INT)                           MEDIAN(VALUE_INT)                       
---------------------------------------- ----------------------------------------
3.57894736842105263157894736842105263158 4                                       

1 rows fetched.

SQL> select median(value_int) from ct_regress_aggr_median;

MEDIAN(VALUE_INT)                       
----------------------------------------
4                                       

1 rows fetched.

SQL> select avg(distinct value_int), median(distinct value_int) from ct_regress_aggr_median;

AVG(DISTINCT VALUE_INT)                  MEDIAN(DISTINCT VALUE_INT)              
---------------------------------------- ----------------------------------------
2.91666666666666666666666666666666666667 3.5                                     

1 rows fetched.

SQL> select median(distinct value_int), avg(distinct value_int) from ct_regress_aggr_median;

MEDIAN(DISTINCT VALUE_INT)               AVG(DISTINCT VALUE_INT)                 
---------------------------------------- ----------------------------------------
3.5                                      2.91666666666666666666666666666666666667

1 rows fetched.

SQL> select median(distinct value_int) from ct_regress_aggr_median;

MEDIAN(DISTINCT VALUE_INT)              
----------------------------------------
3.5                                     

1 rows fetched.

SQL> drop index idx_value on ct_regress_aggr_median;

Succeed.

SQL> 
SQL> 
SQL> --group by
SQL> --const
SQL> select median(NULL) from ct_regress_aggr_median group by id order by id;

CT-00606, [1:8]Inconsistent datatypes, expected NUMERIC - got VARCHAR
SQL> select median(-1.79E+308) from ct_regress_aggr_median group by id order by id;

MEDIAN(-1.79E+308)  
--------------------
-1.79e+308          
-1.79e+308          

2 rows fetched.

SQL> 
SQL> --column odd
SQL> select median(value_int) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_INT)                       
----------------------------------------
4                                       
4                                       

2 rows fetched.

SQL> select median(value_decimal) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_DECIMAL)                   
----------------------------------------
13456797.922                            
16623713.1245                           

2 rows fetched.

SQL> select median(value_real) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_REAL)  
--------------------
15467467.22         
13291200.095        

2 rows fetched.

SQL> select median(value_varchar) from ct_regress_aggr_median group by id order by id;

CT-00606, [1:8]Inconsistent datatypes, expected NUMERIC - got VARCHAR
SQL> select median(value_date) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_DATE)    
----------------------
2018-05-07 00:00:00   
2018-07-10 00:00:00   

2 rows fetched.

SQL> select median(value_bool) from ct_regress_aggr_median group by id order by id;

CT-00606, [1:8]Inconsistent datatypes, expected NUMERIC - got BOOLEAN
SQL> --column even
SQL> insert into ct_regress_aggr_median values(3, 5, 16797824.667, 11357945.96, '16797', '2018-06-03', false);

1 rows affected.

SQL> select median(value_int) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_INT)                       
----------------------------------------
4                                       
4                                       
5                                       

3 rows fetched.

SQL> select median(value_decimal) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_DECIMAL)                   
----------------------------------------
13456797.922                            
16623713.1245                           
16797824.667                            

3 rows fetched.

SQL> select median(value_real) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_REAL)  
--------------------
15467467.22         
13291200.095        
11357945.96         

3 rows fetched.

SQL> select median(value_varchar) from ct_regress_aggr_median group by id order by id;

CT-00606, [1:8]Inconsistent datatypes, expected NUMERIC - got VARCHAR
SQL> select median(value_date) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_DATE)    
----------------------
2018-05-07 00:00:00   
2018-07-10 00:00:00   
2018-06-03 00:00:00   

3 rows fetched.

SQL> select median(value_bool) from ct_regress_aggr_median group by id order by id;

CT-00606, [1:8]Inconsistent datatypes, expected NUMERIC - got BOOLEAN
SQL> delete from ct_regress_aggr_median where id = 3;

1 rows affected.

SQL> 
SQL> --expression
SQL> select median(2147483647 + 2147483647) from ct_regress_aggr_median group by id order by id;

MEDIAN(2147483647 + 2147483647)         
----------------------------------------
4294967294                              
4294967294                              

2 rows fetched.

SQL> select median(value_int + 2147483647) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_INT + 2147483647)          
----------------------------------------
2147483651                              
2147483651                              

2 rows fetched.

SQL> select median(value_decimal + 2147483647) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_DECIMAL + 2147483647)      
----------------------------------------
2160940444.922                          
2164107360.1245                         

2 rows fetched.

SQL> select median(value_real + 2147483647) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_REAL + 2147483647)
-------------------------------
2162951114.22                  
2160774847.095                 

2 rows fetched.

SQL> select median(value_varchar + 2147483647) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_VARCHAR + 2147483647)      
----------------------------------------
2147529289                              
2147539294                              

2 rows fetched.

SQL> select median(value_varchar + value_int) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_VARCHAR + VALUE_INT)       
----------------------------------------
45650                                   
55650                                   

2 rows fetched.

SQL> select median(value_varchar + value_decimal) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_VARCHAR + VALUE_DECIMAL)   
----------------------------------------
13501439.922                            
16680042.6245                           

2 rows fetched.

SQL> select median(value_varchar + value_real) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_VARCHAR + VALUE_REAL)      
----------------------------------------
15513109.22                             
13328786.095                            

2 rows fetched.

SQL> select median(value_varchar + value_varchar) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_VARCHAR + VALUE_VARCHAR)   
----------------------------------------
91284                                   
111294                                  

2 rows fetched.

SQL> select median(value_real + value_varchar) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_REAL + VALUE_VARCHAR)      
----------------------------------------
15513109.22                             
13328786.095                            

2 rows fetched.

SQL> select median(value_real + value_real) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_REAL + VALUE_REAL)
-------------------------------
30934934.44                    
26582400.19                    

2 rows fetched.

SQL> select median(value_real + value_decimal) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_REAL + VALUE_DECIMAL)      
----------------------------------------
29433698.922                            
28257165.472                            

2 rows fetched.

SQL> select median(value_real + value_int) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_REAL + VALUE_INT)
------------------------------
15467475.22                   
13291208.095                  

2 rows fetched.

SQL> select median(value_decimal + value_int) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_DECIMAL + VALUE_INT)       
----------------------------------------
13456803.922                            
16623709.6245                           

2 rows fetched.

SQL> select median(value_decimal + value_decimal) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_DECIMAL + VALUE_DECIMAL)   
----------------------------------------
26913595.844                            
33247426.249                            

2 rows fetched.

SQL> select median(value_decimal + value_real) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_DECIMAL + VALUE_REAL)      
----------------------------------------
29433698.922                            
28257165.472                            

2 rows fetched.

SQL> select median(value_decimal + value_varchar) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_DECIMAL + VALUE_VARCHAR)   
----------------------------------------
13501439.922                            
16680042.6245                           

2 rows fetched.

SQL> select median(value_int + value_varchar) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_INT + VALUE_VARCHAR)       
----------------------------------------
45650                                   
55650                                   

2 rows fetched.

SQL> select median(value_int + value_real) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_INT + VALUE_REAL)
------------------------------
15467475.22                   
13291208.095                  

2 rows fetched.

SQL> select median(value_int + value_decimal) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_INT + VALUE_DECIMAL)       
----------------------------------------
13456803.922                            
16623709.6245                           

2 rows fetched.

SQL> select median(value_int + value_int) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_INT + VALUE_INT)           
----------------------------------------
8                                       
8                                       

2 rows fetched.

SQL> 
SQL> --subquery
SQL> select median(value_int) from (select a.value_int from ct_regress_aggr_median a join ct_regress_aggr_median b) group by id order by id;

CT-00601, [1:121]Sql syntax error: invalid column name 'ID'
SQL> 
SQL> --recursive aggr
SQL> select median(avg(value_int)) from ct_regress_aggr_median group by id order by id;

CT-01317, [1:15]Unexpected aggregation 'AVG'
SQL> 
SQL> --functions
SQL> select median(abs(value_int)) from ct_regress_aggr_median group by id order by id;

MEDIAN(ABS(VALUE_INT))                  
----------------------------------------
4                                       
6.5                                     

2 rows fetched.

SQL> select median(floor(value_int)) from ct_regress_aggr_median group by id order by id;

MEDIAN(FLOOR(VALUE_INT))                
----------------------------------------
4                                       
4                                       

2 rows fetched.

SQL> select median(abs(value_decimal)) from ct_regress_aggr_median group by id order by id;

MEDIAN(ABS(VALUE_DECIMAL))              
----------------------------------------
13456797.922                            
16623713.1245                           

2 rows fetched.

SQL> select median(floor(value_decimal)) from ct_regress_aggr_median group by id order by id;

MEDIAN(FLOOR(VALUE_DECIMAL))            
----------------------------------------
13456797                                
16623712.5                              

2 rows fetched.

SQL> select median(abs(value_real)) from ct_regress_aggr_median group by id order by id;

MEDIAN(ABS(VALUE_REAL))                 
----------------------------------------
15467467.22                             
13291200.095                            

2 rows fetched.

SQL> select median(floor(value_real)) from ct_regress_aggr_median group by id order by id;

MEDIAN(FLOOR(VALUE_REAL))               
----------------------------------------
15467467                                
13291199.5                              

2 rows fetched.

SQL> select median(abs(value_varchar)) from ct_regress_aggr_median group by id order by id;

MEDIAN(ABS(VALUE_VARCHAR))              
----------------------------------------
45642                                   
55647                                   

2 rows fetched.

SQL> select median(floor(value_varchar)) from ct_regress_aggr_median group by id order by id;

MEDIAN(FLOOR(VALUE_VARCHAR))            
----------------------------------------
45642                                   
55647                                   

2 rows fetched.

SQL> 
SQL> --distinct
SQL> select distinct median(value_int) from ct_regress_aggr_median group by id order by id;

CT-00601, [1:84]Sql syntax error: expression not in distinct list
SQL> select distinct median(value_decimal) from ct_regress_aggr_median group by id order by id;

CT-00601, [1:88]Sql syntax error: expression not in distinct list
SQL> select distinct median(value_real) from ct_regress_aggr_median group by id order by id;

CT-00601, [1:85]Sql syntax error: expression not in distinct list
SQL> select distinct median(value_varchar) from ct_regress_aggr_median group by id order by id;

CT-00606, [1:17]Inconsistent datatypes, expected NUMERIC - got VARCHAR
SQL> select median(distinct value_int) from ct_regress_aggr_median group by id order by id;

MEDIAN(DISTINCT VALUE_INT)              
----------------------------------------
4                                       
4                                       

2 rows fetched.

SQL> select median(distinct value_decimal) from ct_regress_aggr_median group by id order by id;

MEDIAN(DISTINCT VALUE_DECIMAL)          
----------------------------------------
13445697.922                            
16657974.999                            

2 rows fetched.

SQL> select median(distinct value_real) from ct_regress_aggr_median group by id order by id;

MEDIAN(DISTINCT VALUE_REAL)
---------------------------
14962567.415               
13368921.62                

2 rows fetched.

SQL> select median(distinct value_varchar) from ct_regress_aggr_median group by id order by id;

CT-00606, [1:8]Inconsistent datatypes, expected NUMERIC - got VARCHAR
SQL> 
SQL> --first row is empty
SQL> drop table if exists ct_regress_aggr_median_empty;

Succeed.

SQL> create table ct_regress_aggr_median_empty(id int not null, value_int int);

Succeed.

SQL> select median(value_int) from ct_regress_aggr_median_empty group by id order by id;

MEDIAN(VALUE_INT)                       
----------------------------------------

0 rows fetched.

SQL> insert into ct_regress_aggr_median_empty(id) values(1);

1 rows affected.

SQL> select median(value_int) from ct_regress_aggr_median_empty group by id order by id;

MEDIAN(VALUE_INT)                       
----------------------------------------
                                        

1 rows fetched.

SQL> insert into ct_regress_aggr_median_empty(id) values(1);

1 rows affected.

SQL> select median(value_int) from ct_regress_aggr_median_empty group by id order by id;

MEDIAN(VALUE_INT)                       
----------------------------------------
                                        

1 rows fetched.

SQL> insert into ct_regress_aggr_median_empty values(2, 1);

1 rows affected.

SQL> select median(value_int) from ct_regress_aggr_median_empty group by id order by id;

MEDIAN(VALUE_INT)                       
----------------------------------------
                                        
1                                       

2 rows fetched.

SQL> insert into ct_regress_aggr_median_empty values(2, 2);

1 rows affected.

SQL> select median(value_int) from ct_regress_aggr_median_empty group by id order by id;

MEDIAN(VALUE_INT)                       
----------------------------------------
                                        
1.5                                     

2 rows fetched.

SQL> drop table ct_regress_aggr_median_empty;

Succeed.

SQL> 
SQL> --multiple aggrs
SQL> select avg(value_int), median(value_int) from ct_regress_aggr_median group by id order by id;

AVG(VALUE_INT)                           MEDIAN(VALUE_INT)                       
---------------------------------------- ----------------------------------------
4.15384615384615384615384615384615384615 4                                       
2.33333333333333333333333333333333333333 4                                       

2 rows fetched.

SQL> select median(value_int), avg(value_int) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_INT)                        AVG(VALUE_INT)                          
---------------------------------------- ----------------------------------------
4                                        4.15384615384615384615384615384615384615
4                                        2.33333333333333333333333333333333333333

2 rows fetched.

SQL> select avg(value_int), median(value_int), avg(value_int) from ct_regress_aggr_median group by id order by id;

AVG(VALUE_INT)                           MEDIAN(VALUE_INT)                        AVG(VALUE_INT)                          
---------------------------------------- ---------------------------------------- ----------------------------------------
4.15384615384615384615384615384615384615 4                                        4.15384615384615384615384615384615384615
2.33333333333333333333333333333333333333 4                                        2.33333333333333333333333333333333333333

2 rows fetched.

SQL> select avg(value_int), median(value_int), median(value_int) from ct_regress_aggr_median group by id order by id;

AVG(VALUE_INT)                           MEDIAN(VALUE_INT)                        MEDIAN(VALUE_INT)                       
---------------------------------------- ---------------------------------------- ----------------------------------------
4.15384615384615384615384615384615384615 4                                        4                                       
2.33333333333333333333333333333333333333 4                                        4                                       

2 rows fetched.

SQL> select avg(value_int), avg(value_int), median(value_int) from ct_regress_aggr_median group by id order by id;

AVG(VALUE_INT)                           AVG(VALUE_INT)                           MEDIAN(VALUE_INT)                       
---------------------------------------- ---------------------------------------- ----------------------------------------
4.15384615384615384615384615384615384615 4.15384615384615384615384615384615384615 4                                       
2.33333333333333333333333333333333333333 2.33333333333333333333333333333333333333 4                                       

2 rows fetched.

SQL> select median(value_int), avg(value_int), median(value_decimal) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_INT)                        AVG(VALUE_INT)                           MEDIAN(VALUE_DECIMAL)                   
---------------------------------------- ---------------------------------------- ----------------------------------------
4                                        4.15384615384615384615384615384615384615 13456797.922                            
4                                        2.33333333333333333333333333333333333333 16623713.1245                           

2 rows fetched.

SQL> select median(value_int), avg(value_int), avg(value_decimal) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_INT)                        AVG(VALUE_INT)                           AVG(VALUE_DECIMAL)                      
---------------------------------------- ---------------------------------------- ----------------------------------------
4                                        4.15384615384615384615384615384615384615 13963489.8084615384615384615384615384615
4                                        2.33333333333333333333333333333333333333 16021755.1785                           

2 rows fetched.

SQL> select median(value_int), median(value_decimal), avg(value_decimal) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_INT)                        MEDIAN(VALUE_DECIMAL)                    AVG(VALUE_DECIMAL)                      
---------------------------------------- ---------------------------------------- ----------------------------------------
4                                        13456797.922                             13963489.8084615384615384615384615384615
4                                        16623713.1245                            16021755.1785                           

2 rows fetched.

SQL> select median(value_int), median(value_decimal), median(value_decimal) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_INT)                        MEDIAN(VALUE_DECIMAL)                    MEDIAN(VALUE_DECIMAL)                   
---------------------------------------- ---------------------------------------- ----------------------------------------
4                                        13456797.922                             13456797.922                            
4                                        16623713.1245                            16623713.1245                           

2 rows fetched.

SQL> 
SQL> --index
SQL> create index idx_value on ct_regress_aggr_median(value_int);

Succeed.

SQL> select avg(value_int), median(value_int) from ct_regress_aggr_median group by id order by id;

AVG(VALUE_INT)                           MEDIAN(VALUE_INT)                       
---------------------------------------- ----------------------------------------
4.15384615384615384615384615384615384615 4                                       
2.33333333333333333333333333333333333333 4                                       

2 rows fetched.

SQL> select median(value_int) from ct_regress_aggr_median group by id order by id;

MEDIAN(VALUE_INT)                       
----------------------------------------
4                                       
4                                       

2 rows fetched.

SQL> select avg(distinct value_int), median(distinct value_int) from ct_regress_aggr_median group by id order by id;

AVG(DISTINCT VALUE_INT)                  MEDIAN(DISTINCT VALUE_INT)              
---------------------------------------- ----------------------------------------
3.88888888888888888888888888888888888889 4                                       
2.33333333333333333333333333333333333333 4                                       

2 rows fetched.

SQL> select median(distinct value_int) from ct_regress_aggr_median group by id order by id;

MEDIAN(DISTINCT VALUE_INT)              
----------------------------------------
4                                       
4                                       

2 rows fetched.

SQL> drop index idx_value on ct_regress_aggr_median;

Succeed.

SQL> 
SQL> drop table ct_regress_aggr_median;

Succeed.

SQL> 
SQL> --DTS2019081305153
SQL> drop table if exists test_aggr_arg_is_array_element;

Succeed.

SQL> create table test_aggr_arg_is_array_element(col_16 int[],col_1 int);

Succeed.

SQL> insert into test_aggr_arg_is_array_element(col_1) values(null);

1 rows affected.

SQL> select VAR_POP(COL_16[1]) from test_aggr_arg_is_array_element order by 1;

VAR_POP(COL_16[1])                      
----------------------------------------
                                        

1 rows fetched.

SQL> drop table test_aggr_arg_is_array_element;

Succeed.

SQL> 
SQL> --max +max over( partition by) ---error
SQL> drop table if exists test_max_over;

Succeed.

SQL> create table test_max_over(f1 int,f2 int);

Succeed.

SQL> insert into test_max_over values (1,2);

1 rows affected.

SQL> insert into test_max_over values (2,3);

1 rows affected.

SQL> select max(f1) + max(f1) over(partition by f2) from test_max_over ;

CT-00609, Expression not in group list
SQL> drop table test_max_over;

Succeed.

SQL> 
SQL> --DENSE_RANK
SQL> drop table if exists rank1;

Succeed.

SQL> create table rank1(c1 int , c2 int, c3 varchar(10));

Succeed.

SQL> insert into rank1 values(3,1,'a10');

1 rows affected.

SQL> insert into rank1 values (3,3,'a11');

1 rows affected.

SQL> insert into rank1 values (3,2,'a12');

1 rows affected.

SQL> insert into rank1 values (3,1,'a13');

1 rows affected.

SQL> insert into rank1 values (3,5,'a14');

1 rows affected.

SQL> insert into rank1 values (3,5,'a15');

1 rows affected.

SQL> insert into rank1 values (3,7,'a16');

1 rows affected.

SQL> insert into rank1 values(4,1,'a17');

1 rows affected.

SQL> insert into rank1 values(1,3,'a1');

1 rows affected.

SQL> insert into rank1 values (1,2,'a2');

1 rows affected.

SQL> insert into rank1 values (1,1,'a3');

1 rows affected.

SQL> insert into rank1 values (1,3,'a4');

1 rows affected.

SQL> insert into rank1 values (1,2,'a5');

1 rows affected.

SQL> insert into rank1 values(2,1,'a6');

1 rows affected.

SQL> insert into rank1 values (2,3,'a7');

1 rows affected.

SQL> insert into rank1 values (2,2,'a8');

1 rows affected.

SQL> insert into rank1 values (2,1,'a9');

1 rows affected.

SQL> insert into rank1 values (2,null,'a18');

1 rows affected.

SQL> insert into rank1 values (3,null,'a19');

1 rows affected.

SQL> insert into rank1 values (null,null,'a20');

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> select DENSE_RANK(1) WITHIN GROUP (ORDER BY c1) as "dense_rank"  FROM rank1;

dense_rank  
------------
1           

1 rows fetched.

SQL> select DENSE_RANK(null) WITHIN GROUP (ORDER BY c1 asc nulls last) as "dense_rank"  FROM rank1;

dense_rank  
------------
5           

1 rows fetched.

SQL> select c1, DENSE_RANK(3) WITHIN GROUP (ORDER BY c2 desc) as "dense_rank"  FROM rank1 group by c1 order by c1;

C1           dense_rank  
------------ ------------
1            1           
2            2           
3            4           
4            1           
             2           

5 rows fetched.

SQL> select c1, DENSE_RANK(3, 'bd') WITHIN GROUP (ORDER BY c2 desc nulls last, c3 asc) as "dense_rank"  FROM rank1 group by c1 order by c1;

C1           dense_rank  
------------ ------------
1            3           
2            2           
3            5           
4            1           
             1           

5 rows fetched.

SQL> 
SQL> select DENSE_RANK(distinct 2) WITHIN GROUP (ORDER BY c1) as "dense_rank"  FROM rank1;

CT-00601, Sql syntax error: DISTINCT option not allowed for this function
SQL> select DENSE_RANK('sw') WITHIN GROUP (ORDER BY c1) as "dense_rank"  FROM rank1;

CT-00636, [1:8]Invalid number -- unexpected character
SQL> select DENSE_RANK(2, 1) WITHIN GROUP (ORDER BY c1) as "dense_rank"  FROM rank1;

CT-00601, [1:19]Sql syntax error: invalid number of arguments
SQL> select DENSE_RANK(c1) WITHIN GROUP (ORDER BY c1) as "dense_rank"  FROM rank1;

CT-00601, [1:19]Sql syntax error: Argument should be a constant
SQL> --new
SQL> select DENSE_RANK(3.12) WITHIN GROUP (ORDER BY c1) as "dense_rank"  FROM rank1;

dense_rank  
------------
4           

1 rows fetched.

SQL> select c2, DENSE_RANK(5.4) WITHIN GROUP (ORDER BY c1) as "dense_rank"  FROM rank1 group by c2 order by c2;

C2           dense_rank  
------------ ------------
1            5           
2            4           
3            4           
5            2           
7            2           
             3           

6 rows fetched.

SQL> select DENSE_RANK(true) WITHIN GROUP (ORDER BY c1) as "dense_rank"  FROM rank1;

dense_rank  
------------
1           

1 rows fetched.

SQL> select DENSE_RANK(false) WITHIN GROUP (ORDER BY c1) as "dense_rank"  FROM rank1;

dense_rank  
------------
1           

1 rows fetched.

SQL> --rank
SQL> select rank(1) WITHIN GROUP (ORDER BY c1) as "rank"  FROM rank1;

rank        
------------
1           

1 rows fetched.

SQL> select rank(null) WITHIN GROUP (ORDER BY c1 asc nulls last) as "rank"  FROM rank1;

rank        
------------
20          

1 rows fetched.

SQL> select c1, rank(3) WITHIN GROUP (ORDER BY c2 desc) as "rank"  FROM rank1 group by c1 order by c1;

C1           rank        
------------ ------------
1            1           
2            2           
3            5           
4            1           
             2           

5 rows fetched.

SQL> select c1, rank(3, 'bd') WITHIN GROUP (ORDER BY c2 desc nulls last, c3 asc) as "rank"  FROM rank1 group by c1 order by c1;

C1           rank        
------------ ------------
1            3           
2            2           
3            5           
4            1           
             1           

5 rows fetched.

SQL> select rank(distinct 2) WITHIN GROUP (ORDER BY c1) as "rank"  FROM rank1;

CT-00601, Sql syntax error: DISTINCT option not allowed for this function
SQL> select rank('sw') WITHIN GROUP (ORDER BY c1) as "rank"  FROM rank1;

CT-00636, [1:8]Invalid number -- unexpected character
SQL> select rank(2, 1) WITHIN GROUP (ORDER BY c1) as "rank"  FROM rank1;

CT-00601, [1:13]Sql syntax error: invalid number of arguments
SQL> select rank(c1) WITHIN GROUP (ORDER BY c1) as "rank"  FROM rank1;

CT-00601, [1:13]Sql syntax error: Argument should be a constant
SQL> select rank(3.12) WITHIN GROUP (ORDER BY c1) as "rank"  FROM rank1;

rank        
------------
19          

1 rows fetched.

SQL> select c2, rank(5.4) WITHIN GROUP (ORDER BY c1) as "rank"  FROM rank1 group by c2 order by c2;

C2           rank        
------------ ------------
1            7           
2            5           
3            5           
5            3           
7            2           
             3           

6 rows fetched.

SQL> select rank(true) WITHIN GROUP (ORDER BY c1) as "rank"  FROM rank1;

rank        
------------
1           

1 rows fetched.

SQL> select rank(false) WITHIN GROUP (ORDER BY c1) as "rank"  FROM rank1;

rank        
------------
1           

1 rows fetched.

SQL> --DTS2019120207030
SQL> select DENSE_RANK(2) WITHIN GROUP (ORDER BY max(c2)) as "dense_rank"  FROM rank1 group by c2;

CT-01317, [1:45]Unexpected aggregation 'MAX'
SQL> select DENSE_RANK(max(c1)) WITHIN GROUP (ORDER BY c1) as "dense_rank"  FROM rank1  group by c1;

CT-01317, [1:19]Unexpected aggregation 'MAX'
SQL> select DENSE_RANK(2) WITHIN GROUP (ORDER BY max(c2) over()) as "dense_rank"  FROM rank1 group by c2;

CT-01316, [1:53]Unexpected windows sort analytic function
SQL> select DENSE_RANK(*) WITHIN GROUP (ORDER BY c1) as "dense_rank"  FROM rank1;

CT-00601, [1:19]Sql syntax error: unexcpected '*'
SQL> DROP SEQUENCE if exists seq_auto_extend11;

Succeed.

SQL> CREATE SEQUENCE seq_auto_extend11 START WITH 10 MAXVALUE 200 INCREMENT BY 2 CYCLE;

Succeed.

SQL> select DENSE_RANK(200) WITHIN GROUP (ORDER BY seq_auto_extend11.NEXTVAL) as "dense_rank"  FROM rank1;

CT-00601, [1:47]Sql syntax error: unexpected sequence occurs
SQL> DROP SEQUENCE seq_auto_extend11;

Succeed.

SQL> select DENSE_RANK(3) WITHIN GROUP (ORDER BY (select c1 from rank1 where c3 = 'a8')) as "dense_rank"  FROM rank1;

dense_rank  
------------
2           

1 rows fetched.

SQL> select DENSE_RANK(1) WITHIN GROUP (ORDER BY rowid) as "dense_rank"  FROM rank1; 

CT-00601, [1:45]Sql syntax error: unexpected rowid occurs
SQL> drop table if exists rank2;

Succeed.

SQL> create table rank2(c1 int default 3, c2 int[], c3 clob);

Succeed.

SQL> insert into rank2 values(3,array[2],'a10');

1 rows affected.

SQL> select DENSE_RANK('z') WITHIN GROUP (ORDER BY c3) as "dense_rank"  FROM rank2;

CT-00601, [1:47]Sql syntax error: unexpected LOB datatype occurs
SQL> select DENSE_RANK(to_clob('z')) WITHIN GROUP (ORDER BY c3) as "dense_rank"  FROM rank2;

CT-00601, [1:19]Sql syntax error: unexpected LOB datatype occurs
SQL> select DENSE_RANK(array[2]) WITHIN GROUP (ORDER BY c2) as "dense_rank"  FROM rank2;

CT-00601, [1:19]Sql syntax error: unexpected array expression
SQL> drop table rank2;

Succeed.

SQL> drop table rank1;

Succeed.

SQL> 
SQL> drop table if exists dense_null;

Succeed.

SQL> create table dense_null(c1 int , c2 int);

Succeed.

SQL> select DENSE_RANK(9) WITHIN GROUP (ORDER BY c1) as "dense_rank"  FROM dense_null;

dense_rank  
------------
1           

1 rows fetched.

SQL> select DENSE_RANK(null) WITHIN GROUP (ORDER BY c1) as "dense_rank"  FROM dense_null;

dense_rank  
------------
1           

1 rows fetched.

SQL> select CUME_DIST(9) WITHIN GROUP (ORDER BY c1) as "cume_dist"  FROM dense_null;

cume_dist           
--------------------
1                   

1 rows fetched.

SQL> select CUME_DIST(null) WITHIN GROUP (ORDER BY c1) as "cume_dist"  FROM dense_null;

cume_dist           
--------------------
1                   

1 rows fetched.

SQL> select RANK(9) WITHIN GROUP (ORDER BY c1) as "rank" FROM dense_null;

rank        
------------
1           

1 rows fetched.

SQL> select RANK(null) WITHIN GROUP (ORDER BY c1) as "rank" FROM dense_null;

rank        
------------
1           

1 rows fetched.

SQL> drop table dense_null;

Succeed.

SQL> --DTS2019090902204
SQL> select cume_dist(case when 1=2 then 2 else 3 end) within group (order by 1) from dual;

CUME_DIST(CASE WHEN 1=2 THEN 2 ELSE 3 END) WITHIN GROUP (ORDER B
----------------------------------------------------------------
1                                                               

1 rows fetched.

SQL> select cume_dist(lpad('z',4000,'q')) within group (order by 'wer') from dual;

CUME_DIST(LPAD('Z',4000,'Q')) WITHIN GROUP (ORDER BY 'WER')
-----------------------------------------------------------
0.5                                                        

1 rows fetched.

SQL> select cume_dist(case when dummy=2 then 2 else 3 end) within group (order by dummy) from dual;

CT-00601, [1:18]Sql syntax error: Argument should be a constant
SQL> select cume_dist(lpad(dummy,4000,'q')) within group (order by dummy) from dual;

CT-00601, [1:23]Sql syntax error: Argument should be a constant
SQL> 
SQL> drop table if exists count_rewrite;

Succeed.

SQL> drop table if exists count_rewrite1;

Succeed.

SQL> CREATE TABLE count_rewrite ( id int not null, "NAME" VARCHAR2(30), "PRODUCTID" NUMBER, "PRICE" NUMBER(10,2));

Succeed.

SQL> CREATE TABLE count_rewrite1 ( id int not null, "NAME" VARCHAR2(30), "PRODUCTID" NUMBER, "PRICE" NUMBER(10,2));

Succeed.

SQL> create index ind_name on count_rewrite(name);

Succeed.

SQL> create index ind_1 on count_rewrite(name, price);

Succeed.

SQL> create index ind_name1 on count_rewrite1(name);

Succeed.

SQL> --DTS2019112910209,        DTS2019112909886
SQL> drop table if exists t_select_agg_001;

Succeed.

SQL> create table t_select_agg_001(id int not null,c_int int,c_vchar varchar(55) not null,c_vchar2 varchar(55) not null,c_blob blob not null,c_date date);

Succeed.

SQL> insert into t_select_agg_001 values(1,100,'abc123',lpad('123abc',50,'abc'),lpad('11100011',50,'1100'),to_timestamp(to_char('1800-01-01 10:51:47'),'yyyy-mm-dd hh24:mi:ss'));

1 rows affected.

SQL> SELECT RANK('a') WITHIN GROUP(ORDER BY 'a'||max(id)) c FROM t_select_agg_001 group by id;

CT-01317, [1:45]Unexpected aggregation 'MAX'
SQL> SELECT DENSE_RANK('a') WITHIN GROUP(ORDER BY 'a'||max(id)) c FROM t_select_agg_001 group by id;

CT-01317, [1:51]Unexpected aggregation 'MAX'
SQL> SELECT listagg('a') WITHIN GROUP(ORDER BY 'a'||max(id)) c FROM t_select_agg_001 group by id;

CT-01317, [1:48]Unexpected aggregation 'MAX'
SQL> SELECT cume_dist(1) WITHIN GROUP(ORDER BY 'a'||max(id)) c FROM t_select_agg_001 group by id;

CT-01317, [1:48]Unexpected aggregation 'MAX'
SQL> SELECT group_concat(1 ORDER BY 'a'||max(id)) c FROM t_select_agg_001 group by id;

CT-01317, [1:37]Unexpected aggregation 'MAX'
SQL> drop table if exists t_select_agg_001;

Succeed.

SQL> SELECT RANK('a') WITHIN GROUP(ORDER BY 'a'||max(1) over()) c FROM dual;

CT-01316, [1:52]Unexpected windows sort analytic function
SQL> SELECT DENSE_RANK('a') WITHIN GROUP(ORDER BY 'a'||max(1) over()) c FROM dual;

CT-01316, [1:58]Unexpected windows sort analytic function
SQL> SELECT listagg('a') WITHIN GROUP(ORDER BY 'a'||max(1) over()) c FROM dual;

CT-01316, [1:55]Unexpected windows sort analytic function
SQL> SELECT cume_dist(1) WITHIN GROUP(ORDER BY 'a'||max(1) over()) c FROM dual;

CT-01316, [1:55]Unexpected windows sort analytic function
SQL> SELECT group_concat(1 ORDER BY 'a'||max(1) over()) c FROM dual;

CT-01316, [1:44]Unexpected windows sort analytic function
SQL> --20201020


SQL> alter system set _optimizer_aggr_placement = false;

Succeed.


SQL> alter system set _optimizer_aggr_placement = true;

Succeed.

SQL> --20201211
SQL> drop table if exists t_20201209;

Succeed.

SQL> create table t_20201209(c1 int,c2 int,c3 int);

Succeed.

SQL> insert into t_20201209 values(1,1,1);

1 rows affected.

SQL> insert into t_20201209 values(1,1,1);

1 rows affected.

SQL> insert into t_20201209 values(1,2,2);

1 rows affected.

SQL> insert into t_20201209 values(1,2,3);

1 rows affected.

SQL> commit;

Succeed.

SQL> select array[1,2,3],count(c3) from t_20201209;

ARRAY[1,2,3]                                                     COUNT(C3)
---------------------------------------------------------------- --------------------
{1,2,3}                                                          4

1 rows fetched.

SQL> select array[1,2,3],count(c3) from t_20201209 group by c3 order by c3;

ARRAY[1,2,3]                                                     COUNT(C3)
---------------------------------------------------------------- --------------------
{1,2,3}                                                          2
{1,2,3}                                                          1
{1,2,3}                                                          1

3 rows fetched.

SQL> select array[c3],count(c3) from t_20201209 group by c3 order by c3;

ARRAY[C3]                                                        COUNT(C3)
---------------------------------------------------------------- --------------------
{1}                                                              2
{2}                                                              1
{3}                                                              1

3 rows fetched.

SQL> select array[c1],count(c3) from t_20201209 group by c3 order by c3;

CT-00609, [1:14]Expression not in group list
SQL> drop table t_20201209;

Succeed.


SQL> 
SQL> DROP TABLE  if exists  group_concate_test;

Succeed.

SQL> create table group_concate_test
  2 (
  3   emp_id number(10),
  4   lead_id2 VARCHAR2(43),
  5   lead_id3 VARCHAR2(43),
  6   lead_id4 VARCHAR2(43),
  7   lead_id5 VARCHAR2(43)
  8 );

Succeed.

SQL> 
SQL> begin
  2 for i in 0 .. 600 loop
  3   insert into group_concate_test values((i+3)%3 , DBE_RANDOM.GET_STRING('l', 43),DBE_RANDOM.GET_STRING('l', 43),DBE_RANDOM.GET_STRING('l', 43),DBE_RANDOM.GET_STRING('l', 3));
  4 end loop;
  5 end;
  6 /

PL/SQL procedure successfully completed.

SQL> commit;

Succeed.

SQL> 
SQL> select group_concat(emp_id, lead_id2,lead_id3 , emp_id, lead_id3 , lead_id5, lead_id4 order by emp_id,lead_id2) ,
  2 group_concat(emp_id, lead_id3 order by emp_id, lead_id3),
  3 group_concat(emp_id, lead_id4 order by emp_id)
  4 from group_concate_test;

CT-00654, The size of one row is 64079, must be less than 64000
SQL> DROP TABLE  if exists  group_concate_test;

Succeed.

SQL> 
SQL> --bugfix: session stack overflow
SQL> drop table if exists FVT_OBJ_DEFINE_table_001;

Succeed.

SQL> create table FVT_OBJ_DEFINE_table_001(f1 int, f2 clob);

Succeed.

SQL> begin
  2 	for i in 1..1000 loop
  3       insert into FVT_OBJ_DEFINE_table_001 values(i, lpad('abc',i+4000,'a@123&^%djgk'));
  4       commit;
  5     end loop;
  6 end;
  7 /

PL/SQL procedure successfully completed.

SQL> select APPROX_COUNT_DISTINCT(f2) from FVT_OBJ_DEFINE_table_001;

APPROX_COUNT_DISTINCT(F2)
-------------------------
995                      

1 rows fetched.

SQL> select MIN(F2), MAX(f2) from FVT_OBJ_DEFINE_table_001;

MIN(F2)                                                          MAX(F2)                                                         
---------------------------------------------------------------- ----------------------------------------------------------------
a@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%abc a@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@abc

1 rows fetched.

SQL> drop table if exists FVT_OBJ_DEFINE_table_001;

Succeed.

SQL> 


