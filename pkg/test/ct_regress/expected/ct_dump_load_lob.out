

SQL> -- load large clob data.
SQL> drop table if exists LOAD_CLOB_TABLE;

Succeed.

SQL> 
SQL> create TABLE LOAD_CLOB_TABLE(
  2 	c          integer,
  3 	c1         clob
  4 );

Succeed.

SQL> 
SQL> load data infile "./data/clob_data.dat" into table LOAD_CLOB_TABLE
  2 fields enclosed by '"' 
  3 fields terminated by ',' 
  4 lines terminated by '\n'
  5 ignore 0 lines;
1 rows have been committed.

Complete the data load.
totally read rows: 1
     ignored rows: 0
      loaded rows: 1
   committed rows: 1
       error rows: 0
        skip rows: 0
SQL> 
SQL> select c,length(c1) from LOAD_CLOB_TABLE;

C            LENGTH(C1)          
------------ --------------------
1            2097152     

1 rows fetched.

SQL> 
SQL> -- load convert char clob data
SQL> truncate table LOAD_CLOB_TABLE;

Succeed.

SQL> 
SQL> load data infile "./data/clob_data_convert.dat" into table LOAD_CLOB_TABLE
  2 fields enclosed by '"' 
  3 fields terminated by ',' 
  4 lines terminated by '\n'
  5 ignore 0 lines;
1 rows have been committed.

Complete the data load.
totally read rows: 1
     ignored rows: 0
      loaded rows: 1
   committed rows: 1
       error rows: 0
        skip rows: 0
SQL> 
SQL> select c,length(c1) from LOAD_CLOB_TABLE;

C            LENGTH(C1)          
------------ --------------------
1            1048579     

1 rows fetched.

SQL> 
SQL> -- load multi row clob data
SQL> truncate table LOAD_CLOB_TABLE;

Succeed.

SQL> 
SQL> load data infile "./data/multi_row_clob_data.dat" into table LOAD_CLOB_TABLE
  2 fields enclosed by '"' 
  3 fields terminated by ',' 
  4 lines terminated by '\n'
  5 ignore 0 lines;
1 rows have been committed.
2 rows have been committed.
3 rows have been committed.
4 rows have been committed.
5 rows have been committed.
6 rows have been committed.
7 rows have been committed.
8 rows have been committed.
9 rows have been committed.
10 rows have been committed.
11 rows have been committed.
12 rows have been committed.
13 rows have been committed.
14 rows have been committed.
15 rows have been committed.
16 rows have been committed.
17 rows have been committed.
18 rows have been committed.
19 rows have been committed.
20 rows have been committed.
21 rows have been committed.
22 rows have been committed.
23 rows have been committed.
24 rows have been committed.
25 rows have been committed.
26 rows have been committed.
27 rows have been committed.
28 rows have been committed.
29 rows have been committed.
30 rows have been committed.

Complete the data load.
totally read rows: 30
     ignored rows: 0
      loaded rows: 30
   committed rows: 30
       error rows: 0
        skip rows: 0
SQL> 
SQL> select c,length(c1) from LOAD_CLOB_TABLE;

C            LENGTH(C1)          
------------ --------------------
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     

30 rows fetched.

SQL> 
SQL> -- dump clob data
SQL> dump table LOAD_CLOB_TABLE into file './data/clob_data_dump.dat'
  2 fields enclosed by '"' 
  3 fields terminated by ',' 
  4 lines terminated by '\n';
30 rows dumped.

Dump TABLE successfully:
  30 rows are totally dumped.

SQL> 
SQL> -- load large blob data.
SQL> drop table if exists LOAD_BLOB_TABLE;

Succeed.

SQL> 
SQL> create TABLE LOAD_BLOB_TABLE(
  2 	c          integer,
  3 	c1         blob
  4 );

Succeed.

SQL> 
SQL> load data infile "./data/clob_data.dat" into table LOAD_BLOB_TABLE
  2 fields enclosed by '"' 
  3 fields terminated by ',' 
  4 lines terminated by '\n'
  5 ignore 0 lines;
1 rows have been committed.

Complete the data load.
totally read rows: 1
     ignored rows: 0
      loaded rows: 1
   committed rows: 1
       error rows: 0
        skip rows: 0
SQL> 
SQL> select c,length(c1) from LOAD_BLOB_TABLE;

C            LENGTH(C1)          
------------ --------------------
1            2097152     

1 rows fetched.

SQL> 
SQL> -- load convert char blob data
SQL> truncate table LOAD_BLOB_TABLE;

Succeed.

SQL> 
SQL> load data infile "./data/clob_data_convert.dat" into table LOAD_BLOB_TABLE
  2 fields enclosed by '"' 
  3 fields terminated by ',' 
  4 lines terminated by '\n'
  5 ignore 0 lines;
1 rows have been committed.

Complete the data load.
totally read rows: 1
     ignored rows: 0
      loaded rows: 1
   committed rows: 1
       error rows: 0
        skip rows: 0
SQL> 
SQL> select c,length(c1) from LOAD_BLOB_TABLE;

C            LENGTH(C1)          
------------ --------------------
1            1048579     

1 rows fetched.

SQL> 
SQL> 
SQL> -- load multi row clob data
SQL> truncate table LOAD_BLOB_TABLE;

Succeed.

SQL> 
SQL> load data infile "./data/multi_row_clob_data.dat" into table LOAD_BLOB_TABLE
  2 fields enclosed by '"' 
  3 fields terminated by ',' 
  4 lines terminated by '\n'
  5 ignore 0 lines;
1 rows have been committed.
2 rows have been committed.
3 rows have been committed.
4 rows have been committed.
5 rows have been committed.
6 rows have been committed.
7 rows have been committed.
8 rows have been committed.
9 rows have been committed.
10 rows have been committed.
11 rows have been committed.
12 rows have been committed.
13 rows have been committed.
14 rows have been committed.
15 rows have been committed.
16 rows have been committed.
17 rows have been committed.
18 rows have been committed.
19 rows have been committed.
20 rows have been committed.
21 rows have been committed.
22 rows have been committed.
23 rows have been committed.
24 rows have been committed.
25 rows have been committed.
26 rows have been committed.
27 rows have been committed.
28 rows have been committed.
29 rows have been committed.
30 rows have been committed.

Complete the data load.
totally read rows: 30
     ignored rows: 0
      loaded rows: 30
   committed rows: 30
       error rows: 0
        skip rows: 0
SQL> 
SQL> select c,length(c1) from LOAD_BLOB_TABLE;

C            LENGTH(C1)          
------------ --------------------
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     
1            1048579     

30 rows fetched.

SQL> 
SQL> -- dump blob data
SQL> dump table LOAD_BLOB_TABLE into file './data/blob_data_dump.dat'
  2 fields enclosed by '"' 
  3 fields terminated by ',' 
  4 lines terminated by '\n';
30 rows dumped.

Dump TABLE successfully:
  30 rows are totally dumped.

SQL> 
SQL> --construct big data
SQL> drop table if exists clob_big_data;

Succeed.

SQL> create table clob_big_data (c clob);

Succeed.

SQL> 
SQL> insert into clob_big_data values('abcdefghijklmn');

1 rows affected.

SQL> 
SQL> create or replace procedure gen_big_data(size in int )
  2 as
  3 begin 
  4     for i in 1..size loop
  5         update clob_big_data set c=c||c;
  6     end loop;
  7 end;
  8 /

Succeed.

SQL> 
SQL> call gen_big_data(20);

PL/SQL procedure successfully completed.

SQL> 
SQL> select length(c) from clob_big_data;

LENGTH(C)           
--------------------
14680064            

1 rows fetched.

SQL> 
SQL> dump table clob_big_data into file './data/clob_big_data_dump.dat'
  2 fields enclosed by '"' 
  3 fields terminated by ',' 
  4 lines terminated by '\n';
1 rows dumped.

Dump TABLE successfully:
  1 rows are totally dumped.

SQL> 
SQL> truncate table clob_big_data;

Succeed.

SQL> 
SQL> load data infile "./data/clob_big_data_dump.dat" into table clob_big_data
  2 fields enclosed by '"' 
  3 fields terminated by ',' 
  4 lines terminated by '\n'
  5 ignore 0 lines;
1 rows have been committed.

Complete the data load.
totally read rows: 1
     ignored rows: 0
      loaded rows: 1
   committed rows: 1
       error rows: 0
        skip rows: 0
SQL> 
SQL> select length(c) from clob_big_data;

LENGTH(C)           
--------------------
14680064            

1 rows fetched.

SQL> 
SQL> -- large string can not be loaded into string 
SQL> drop table if exists load_too_long_data_table;

Succeed.

SQL> create table load_too_long_data_table (c varchar(1000));

Succeed.

SQL> 
SQL> load data infile "./data/clob_big_data_dump.dat" into table load_too_long_data_table
  2 fields enclosed by '"' 
  3 fields terminated by ',' 
  4 lines terminated by '\n'
  5 ignore 0 lines;
ZS-00003: row 1 column C size 1048576 exceeds max size 16386.

Failure happens and loading process is interrupted.
totally read rows: 0
     ignored rows: 0
      loaded rows: 0
   committed rows: 0
       error rows: 1
        skip rows: 0
SQL> 
SQL> -- load NULL and "" to lob column
SQL> alter system set EMPTY_STRING_AS_NULL = FALSE;

Succeed.

SQL> drop table if exists empty_lob;

Succeed.

SQL> create table empty_lob(c clob , c1 clob not null , b blob , b1 blob not null);

Succeed.

SQL> insert into empty_lob values(NULL, '', NULL, '');

1 rows affected.

SQL> commit;

Succeed.

SQL> select * from empty_lob;

C                                                                C1                                                               B                                                                B1                                                              
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
                                                                                                                                                                                                                                                                   

1 rows fetched.

SQL> select length(c),length(c1),length(b),length(b1) from empty_lob;

LENGTH(C)            LENGTH(C1)           LENGTH(B)            LENGTH(B1)          
-------------------- -------------------- -------------------- --------------------
                     0                                         0                   

1 rows fetched.

SQL> dump table empty_lob into file "./data/empty_lob.dat" columns enclosed by '"';
1 rows dumped.

Dump TABLE successfully:
  1 rows are totally dumped.

SQL> truncate table empty_lob;

Succeed.

SQL> select count(*) from empty_lob;

COUNT(*)            
--------------------
0                   

1 rows fetched.

SQL> load data infile "./data/empty_lob.dat" into table empty_lob columns enclosed by '"';
1 rows have been committed.

Complete the data load.
totally read rows: 1
     ignored rows: 0
      loaded rows: 1
   committed rows: 1
       error rows: 0
        skip rows: 0
SQL> select * from empty_lob;

C                                                                C1                                                               B                                                                B1                                                              
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
                                                                                                                                                                                                                                                                   

1 rows fetched.

SQL> select length(c),length(c1),length(b),length(b1) from empty_lob;

LENGTH(C)            LENGTH(C1)           LENGTH(B)            LENGTH(B1)          
-------------------- -------------------- -------------------- --------------------
                     0                                         0                   

1 rows fetched.

SQL> alter system set EMPTY_STRING_AS_NULL = TRUE;

Succeed.

SQL> 
SQL> -- load "" from large string to lob by bind
SQL> alter system set EMPTY_STRING_AS_NULL = FALSE;

Succeed.

SQL> 
SQL> drop table if exists relation_dashboard_widget;

Succeed.

SQL> 
SQL> CREATE TABLE IF NOT EXISTS relation_dashboard_widget
  2 (
  3     id NVARCHAR2(50) NOT NULL,
  4     dashboard_id NVARCHAR2(50) NOT NULL,
  5     widget_id NVARCHAR2(50) NOT NULL,
  6     show_mode NVARCHAR2(50) NOT NULL,
  7     position NVARCHAR2(128) NOT NULL,
  8     size NVARCHAR2(128) NOT NULL,
  9     container_size NVARCHAR2(128) NOT NULL,
 10     type NVARCHAR2(32),
 11     layer_index INT DEFAULT 1000 NOT NULL,
 12     extension NVARCHAR2(2048),
 13     PRIMARY KEY (id)
 14 );

Succeed.

SQL> 
SQL> insert into relation_dashboard_widget values ('1','1','1','1','1','1','1','1','1','');

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> dump table relation_dashboard_widget into file './data/relation_dashboard_widget.csv' columns enclosed by '`';
1 rows dumped.

Dump TABLE successfully:
  1 rows are totally dumped.

SQL> truncate table relation_dashboard_widget;

Succeed.

SQL> load data infile "./data/relation_dashboard_widget.csv" into table relation_dashboard_widget columns enclosed by '`' lines terminated by '\n';
1 rows have been committed.

Complete the data load.
totally read rows: 1
     ignored rows: 0
      loaded rows: 1
   committed rows: 1
       error rows: 0
        skip rows: 0
SQL> 
SQL> select * from relation_dashboard_widget order by id limit 10;

ID                                                               DASHBOARD_ID                                                     WIDGET_ID                                                        SHOW_MODE                                                        POSITION                                                         SIZE                                                             CONTAINER_SIZE                                                   TYPE                                                             LAYER_INDEX  EXTENSION                                                       
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ----------------------------------------------------------------


1 rows fetched.

SQL> 
SQL> alter system set EMPTY_STRING_AS_NULL = TRUE;

Succeed.

SQL> 
SQL> -- large msg split
SQL> drop table if exists clob_big_data;

Succeed.

SQL> create table clob_big_data (c int,c1 clob);

Succeed.

SQL> 
SQL> insert into clob_big_data values(2, 'abcdefghijklmn');

1 rows affected.

SQL> 
SQL> create or replace procedure gen_big_data(size in int )
  2 as
  3 begin 
  4     for i in 1..size loop
  5         update clob_big_data set c1=c1||c1;
  6     end loop;
  7 end;
  8 /

Succeed.

SQL> 
SQL> call gen_big_data(20);

PL/SQL procedure successfully completed.

SQL> 
SQL> insert into clob_big_data values(1, 'abcdefghijklmn');

1 rows affected.

SQL> insert into clob_big_data values(3, 'abcdefghijklmn');

1 rows affected.

SQL> insert into clob_big_data values(4, 'abcdefghijklmn');

1 rows affected.

SQL> select c,length(c1) from clob_big_data order by c asc;

C            LENGTH(C1)          
------------ --------------------
1            14                  
2            14680064            
3            14                  
4            14                  

4 rows fetched.

SQL> 
SQL> dump query "select * from clob_big_data order by c asc" into file './data/clob_big_data_dump1.dat'
  2 fields enclosed by '"' 
  3 fields terminated by ',' 
  4 lines terminated by '\n';
4 rows dumped.

Dump QUERY successfully:
  4 rows are totally dumped.

SQL> 
SQL> truncate table clob_big_data;

Succeed.

SQL> 
SQL> load data infile "./data/clob_big_data_dump1.dat" into table clob_big_data
  2 fields enclosed by '"' 
  3 fields terminated by ',' 
  4 lines terminated by '\n'
  5 threads 2
  6 ignore 0 lines;
2 rows have been committed.
4 rows have been committed.

Complete the data load.
totally read rows: 4
     ignored rows: 0
      loaded rows: 4
   committed rows: 4
       error rows: 0
        skip rows: 0
SQL> 
SQL> select c,length(c1) from clob_big_data order by c asc;

C            LENGTH(C1)          
------------ --------------------
1            14                  
2            14680064            
3            14                  
4            14                  

4 rows fetched.

SQL> 
SQL> -- table include nvarchar(1500) and clob ,load and dump
SQL> alter system set EMPTY_STRING_AS_NULL = FALSE;

Succeed.

SQL> drop table if exists TBL_AGGR_RULE;

Succeed.

SQL> CREATE TABLE IF NOT EXISTS TBL_AGGR_RULE
  2 (
  3     ID                     INT NOT NULL,
  4     TENANTID    NVARCHAR2(512)     NULL,
  5     NAME        NVARCHAR2(600) NOT NULL,
  6     ENABLE             TINYINT NOT NULL,
  7     DESCRIPTION NVARCHAR2(1500)     NULL,
  8     CREATE_TIME         BIGINT NOT NULL,
  9     UPDATE_TIME         BIGINT NOT NULL,
 10     CATEGORY          SMALLINT     NULL DEFAULT NULL,
 11     TIME_COND             TEXT     NULL,
 12     OBJECT_COND           TEXT     NULL,
 13     ALARM_COND            TEXT     NULL,
 14     EXT_COND              TEXT     NULL,
 15     POLICY_COND           TEXT     NULL,
 16     AGE_TIME            BIGINT     NULL,
 17     MODIFIER          VARCHAR(255) NULL,
 18     PRIMARY KEY (ID)
 19 );

Succeed.

SQL> 
SQL> insert into TBL_AGGR_RULE values(1,'abc','abc',1,'abc',1,1,1,'','','','abc','abc',1,'abc');

1 rows affected.

SQL> insert into TBL_AGGR_RULE values(2,'abc','abc',1,'abc',1,1,1,'','','','abc','abc',1,'abc');

1 rows affected.

SQL> insert into TBL_AGGR_RULE values(3,'abc','abc',1,'abc',1,1,1,'','','','abc','abc',1,'abc');

1 rows affected.

SQL> insert into TBL_AGGR_RULE values(4,'abc','abc',1,'abc',1,1,1,'','','','abc','abc',1,'abc');

1 rows affected.

SQL> insert into TBL_AGGR_RULE values(5,'abc','abc',1,'abc',1,1,1,'','','','abc','abc',1,'abc');

1 rows affected.

SQL> 
SQL> select * from TBL_AGGR_RULE order by id asc;

ID           TENANTID                                                         NAME                                                             ENABLE       DESCRIPTION                                                      CREATE_TIME          UPDATE_TIME          CATEGORY     TIME_COND                                                        OBJECT_COND                                                      ALARM_COND                                                       EXT_COND                                                         POLICY_COND                                                      AGE_TIME             MODIFIER                                                        

1            abc                                                              abc                                                              1            abc                                                              1                    1                    1                                                                                                                                                                                                               abc                                                              abc                                                              1                    abc                                                             
2            abc                                                              abc                                                              1            abc                                                              1                    1                    1                                                                                                                                                                                                               abc                                                              abc                                                              1                    abc                                                             
3            abc                                                              abc                                                              1            abc                                                              1                    1                    1                                                                                                                                                                                                               abc                                                              abc                                                              1                    abc                                                             
4            abc                                                              abc                                                              1            abc                                                              1                    1                    1                                                                                                                                                                                                               abc                                                              abc                                                              1                    abc                                                             
5            abc                                                              abc                                                              1            abc                                                              1                    1                    1                                                                                                                                                                                                               abc                                                              abc                                                              1                    abc                                                             

5 rows fetched.

SQL> 
SQL> dump table TBL_AGGR_RULE into file './data/TBL_AGGR_RULE.dat' columns enclosed by '"';
5 rows dumped.

Dump TABLE successfully:
  5 rows are totally dumped.

SQL> 
SQL> truncate table TBL_AGGR_RULE;

Succeed.

SQL> 
SQL> load data infile './data/TBL_AGGR_RULE.dat' into table TBL_AGGR_RULE columns enclosed by '"';
5 rows have been committed.

Complete the data load.
totally read rows: 5
     ignored rows: 0
      loaded rows: 5
   committed rows: 5
       error rows: 0
        skip rows: 0
SQL> select * from TBL_AGGR_RULE order by id asc;

ID           TENANTID                                                         NAME                                                             ENABLE       DESCRIPTION                                                      CREATE_TIME          UPDATE_TIME          CATEGORY     TIME_COND                                                        OBJECT_COND                                                      ALARM_COND                                                       EXT_COND                                                         POLICY_COND                                                      AGE_TIME             MODIFIER                                                        

1            abc                                                              abc                                                              1            abc                                                              1                    1                    1                                                                                                                                                                                                               abc                                                              abc                                                              1                    abc                                                             
2            abc                                                              abc                                                              1            abc                                                              1                    1                    1                                                                                                                                                                                                               abc                                                              abc                                                              1                    abc                                                             
3            abc                                                              abc                                                              1            abc                                                              1                    1                    1                                                                                                                                                                                                               abc                                                              abc                                                              1                    abc                                                             
4            abc                                                              abc                                                              1            abc                                                              1                    1                    1                                                                                                                                                                                                               abc                                                              abc                                                              1                    abc                                                             
5            abc                                                              abc                                                              1            abc                                                              1                    1                    1                                                                                                                                                                                                               abc                                                              abc                                                              1                    abc                                                             

5 rows fetched.

SQL> alter system set EMPTY_STRING_AS_NULL = TRUE;

Succeed.

SQL> 
SQL> drop table if exists clob_lob_var;

Succeed.

SQL> create table clob_lob_var (f1 varchar(8000), c1 clob, f2 varchar(8000), f3 varchar(8000), f4 varchar(8000), f5 varchar(8000));

Succeed.

SQL> insert into clob_lob_var values(LPAD('10',8000,'1'),'sdfsf_sdfsf_sdfsf_sdfsf_sdfsf_1', LPAD('10',8000,'1'), LPAD('10',8000,'1'), LPAD('10',8000,'1'), LPAD('10',8000,'1'));

1 rows affected.

SQL> commit;

Succeed.

SQL> drop procedure if exists gen_big_lob;

Succeed.

SQL> create or replace procedure gen_big_lob(size in int )
  2 as
  3 begin 
  4     for i in 1..size loop
  5         update clob_lob_var set c1=c1||c1||c1||c1||c1||c1||c1||c1;
  6     end loop;
  7 end;
  8 /

Succeed.

SQL> 
SQL> call gen_big_lob(5);

PL/SQL procedure successfully completed.

SQL> commit;

Succeed.

SQL> select length(f2),length(c1),length(f2),length(f3),length(f4),length(f5) from clob_lob_var;

LENGTH(F2)           LENGTH(C1)           LENGTH(F2)           LENGTH(F3)           LENGTH(F4)           LENGTH(F5)          
-------------------- -------------------- -------------------- -------------------- -------------------- --------------------
8000                 1015808              8000                 8000                 8000                 8000                

1 rows fetched.

SQL> 
SQL> dump table clob_lob_var into file 'clob_and_varchar_dump.dat'
  2 fields enclosed by '"' 
  3 fields terminated by ',' 
  4 lines terminated by '\n';
1 rows dumped.

Dump TABLE successfully:
  1 rows are totally dumped.

SQL> 
SQL> truncate table clob_lob_var;

Succeed.

SQL> 
SQL> load data infile "clob_and_varchar_dump.dat" into table clob_lob_var
  2 fields enclosed by '"' 
  3 fields terminated by ',' 
  4 lines terminated by '\n'
  5 ignore 0 lines;
1 rows have been committed.

Complete the data load.
totally read rows: 1
     ignored rows: 0
      loaded rows: 1
   committed rows: 1
       error rows: 0
        skip rows: 0
SQL> 
SQL> drop procedure if exists gen_big_lob;

Succeed.

SQL> drop table if exists clob_lob_var;

Succeed.

SQL> 
SQL> --DTS2019070111073/DTS2019070109848
SQL> drop table if exists DUMPDTS2019070111073_UDS;

Succeed.

SQL> create TABLE DUMPDTS2019070111073_UDS(
  2 	B_INT          integer,
  3 	B_NUMBER       number,
  4 	B_CHAR_SMALL   char(20),
  5 	B_VARCHAR_MID  varchar(200)
  6 );

Succeed.

SQL> drop table if exists DUMPDTS2019070109848_UDS;

Succeed.

SQL> create TABLE DUMPDTS2019070109848_UDS(
  2 	B_INT          integer,
  3 	B_NUMBER       number,
  4 	B_CHAR_SMALL   char(20),
  5 	B_VARCHAR_MID  varchar(200)
  6 );

Succeed.

SQL> insert into DUMPDTS2019070111073_UDS values(0, 2574526298633856, 123123, '3AqXUOEGaAEXG3NeYY6bQCYACkW');

1 rows affected.

SQL> insert into DUMPDTS2019070111073_UDS values(1, 34534, 'World', '123123123');

1 rows affected.

SQL> insert into DUMPDTS2019070111073_UDS values(2, 124, 'Hellow', 'XqXnWYECg2CXN4PxQgw');

1 rows affected.

SQL> insert into DUMPDTS2019070111073_UDS values(3, 569345692354, '124df', '123123123');

1 rows affected.

SQL> insert into DUMPDTS2019070111073_UDS values(4, 555555, 'af', '5aWgGQ');

1 rows affected.

SQL> insert into DUMPDTS2019070111073_UDS values(5, 7777777777777, 'asdfsdf', 'YXqInXa');

1 rows affected.

SQL> insert into DUMPDTS2019070111073_UDS values(6, 222222222, 'asf', 'X4U8QUyOXGOioaubIGugGQw');

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> ALTER SYSTEM SET AUDIT_LEVEL=255;

Succeed.

SQL> 
SQL> dump TABLE DUMPDTS2019070111073_UDS into FILE './DUMPDTS2019070111073_UDS.csv'
  2 fields enclosed by '`'
  3 fields terminated by ',' 
  4 lines terminated by '\n';
7 rows dumped.

Dump TABLE successfully:
  7 rows are totally dumped.

SQL> 
SQL> load data infile "./DUMPDTS2019070111073_UDS.csv" into table DUMPDTS2019070109848_UDS threads 10
  2 fields enclosed by '`' 
  3 fields terminated by ',' 
  4 lines terminated by '\n'
  5 ignore 0 lines
  6 nologging;
nologging load need to manual check database not in HA mode and parameter _RCY_CHECK_PCN is false.
7 rows have been committed.

Complete the data load.
totally read rows: 7
     ignored rows: 0
      loaded rows: 7
   committed rows: 7
       error rows: 0
        skip rows: 0
SQL> select * from DUMPDTS2019070109848_UDS order by B_INT;

B_INT        B_NUMBER                                 B_CHAR_SMALL         B_VARCHAR_MID                                                   
------------ ---------------------------------------- -------------------- ----------------------------------------------------------------
0            2574526298633856                         123123               3AqXUOEGaAEXG3NeYY6bQCYACkW                                     
1            34534                                    World                123123123                                                       
2            124                                      Hellow               XqXnWYECg2CXN4PxQgw                                             
3            569345692354                             124df                123123123                                                       
4            555555                                   af                   5aWgGQ                                                          
5            7777777777777                            asdfsdf              YXqInXa                                                         
6            222222222                                asf                  X4U8QUyOXGOioaubIGugGQw                                         

7 rows fetched.

SQL> delete from DUMPDTS2019070109848_UDS;

7 rows affected.

SQL> drop table DUMPDTS2019070111073_UDS;

Succeed.

SQL> drop table DUMPDTS2019070109848_UDS;

Succeed.

SQL> 
SQL> -- test lob truncate at enclosed char position
SQL> drop table if exists lob_truncate;

Succeed.

SQL> create table lob_truncate(c clob);

Succeed.

SQL> insert into lob_truncate values('a');

1 rows affected.

SQL> create or replace procedure gen_big_data(size in int )
  2 as
  3 begin 
  4     for i in 1..size loop
  5         update lob_truncate set c=c||lpad('a',8000,'abc');
  6     end loop;
  7 end;
  8 /

Succeed.

SQL> call gen_big_data(131);

PL/SQL procedure successfully completed.

SQL> update lob_truncate set c=c||lpad('a',573,'abc');

1 rows affected.

SQL> update lob_truncate set c=c||'"isNull":false';

1 rows affected.

SQL> commit;

Succeed.

SQL> select lengthb(c) from lob_truncate;

LENGTHB(C)          
--------------------
1048588             

1 rows fetched.

SQL> dump table lob_truncate into file "./data/lob_truncate.dat" columns enclosed by '"';
1 rows dumped.

Dump TABLE successfully:
  1 rows are totally dumped.

SQL> truncate table lob_truncate;

Succeed.

SQL> load data infile "./data/lob_truncate.dat" into table lob_truncate columns enclosed by '"';
1 rows have been committed.

Complete the data load.
totally read rows: 1
     ignored rows: 0
      loaded rows: 1
   committed rows: 1
       error rows: 0
        skip rows: 0
SQL> select lengthb(c) from lob_truncate;

LENGTHB(C)          
--------------------
1048588             

1 rows fetched.

SQL> drop table lob_truncate;
Succeed.



