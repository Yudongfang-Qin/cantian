

SQL> --- the command `exit`, etc. can be used as column names
SQL> DROP TABLE IF EXISTS PFA_CMDER_TB1;

Succeed.

SQL> CREATE TABLE PFA_CMDER_TB1(
  2 EXIT VARCHAR(100),
  3 LOAD VARCHAR(100),
  4 DUMP VARCHAR(100),
  5 SHOW VARCHAR(100),
  6 spool VARCHAR(100),
  7 conn VARCHAR(100)
  8 );

Succeed.

SQL> 
SQL> --- the command `desc` can not be a column name
SQL> DROP TABLE IF EXISTS PFA_CMDER_TB2;

Succeed.

SQL> CREATE TABLE PFA_CMDER_TB2(
  2 EXIT VARCHAR(100),
  3 DESC NUMBER(20)
  4 );

CT-00601, [3:1]Sql syntax error: invalid column name 'DESC'
SQL> 
SQL> --- the `semicolon` and `/` will execute the command in SQL buffer
SQL> select '12345' as "123" from dual
  2 ;

123  
-----
12345

1 rows fetched.

SQL> select '12345' as "123" from dual
  2 /

123  
-----
12345

1 rows fetched.

SQL> --- after each execution, the SQL buffer is cleaned, then input for `;` and `/`
SQL> --- will return an Error with empty buffer
SQL> ;
ZS-00001: Nothing in SQL buffer to run
SQL> /
ZS-00001: Nothing in SQL buffer to run
SQL> 
SQL> --- Multi-commands that are serapated by `;` can be executed in one line
SQL> --- NOTE: the enclosed `;` will be ignored
SQL> desc SYS_TABLES; select 1||';'||1 from dual; select * from dual;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
USER#                               NOT NULL BINARY_INTEGER                      
ID                                  NOT NULL BINARY_INTEGER                      
NAME                                NOT NULL VARCHAR(64 BYTE)                    
SPACE#                              NOT NULL BINARY_INTEGER                      
ORG_SCN                             NOT NULL BINARY_BIGINT                       
CHG_SCN                             NOT NULL BINARY_BIGINT                       
TYPE                                NOT NULL BINARY_INTEGER                      
COLS                                NOT NULL BINARY_INTEGER                      
INDEXES                             NOT NULL BINARY_INTEGER                      
PARTITIONED                         NOT NULL BINARY_INTEGER                      
ENTRY                               NOT NULL BINARY_BIGINT                       
INITRANS                            NOT NULL BINARY_INTEGER                      
PCTFREE                             NOT NULL BINARY_INTEGER                      
CR_MODE                             NOT NULL BINARY_INTEGER                      
RECYCLED                            NOT NULL BINARY_INTEGER                      
APPENDONLY                          NOT NULL BINARY_INTEGER                      
NUM_ROWS                                     BINARY_INTEGER                      
BLOCKS                                       BINARY_INTEGER                      
EMPTY_BLOCKS                                 BINARY_INTEGER                      
AVG_ROW_LEN                                  BINARY_BIGINT                       
SAMPLESIZE                                   BINARY_INTEGER                      
ANALYZETIME                                  TIMESTAMP(6)                        
SERIAL_START                        NOT NULL BINARY_BIGINT                       
OPTIONS                                      RAW(16)                             
OBJ#                                         BINARY_INTEGER
VERSION                                      BINARY_INTEGER                      
FLAG                                         BINARY_INTEGER


1||';'||1
---------
1;1      

1 rows fetched.


DUMMY
-----
X    

1 rows fetched.

SQL> select 'Hello; World!' as "123;" from dual;

123;         
-------------
Hello; World!

1 rows fetched.

SQL> desc SYS_TABLES; select * from dual; select cast(systimestamp as number) from dual

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
USER#                               NOT NULL BINARY_INTEGER                      
ID                                  NOT NULL BINARY_INTEGER                      
NAME                                NOT NULL VARCHAR(64 BYTE)                    
SPACE#                              NOT NULL BINARY_INTEGER                      
ORG_SCN                             NOT NULL BINARY_BIGINT                       
CHG_SCN                             NOT NULL BINARY_BIGINT                       
TYPE                                NOT NULL BINARY_INTEGER                      
COLS                                NOT NULL BINARY_INTEGER                      
INDEXES                             NOT NULL BINARY_INTEGER                      
PARTITIONED                         NOT NULL BINARY_INTEGER                      
ENTRY                               NOT NULL BINARY_BIGINT                       
INITRANS                            NOT NULL BINARY_INTEGER                      
PCTFREE                             NOT NULL BINARY_INTEGER                      
CR_MODE                             NOT NULL BINARY_INTEGER                      
RECYCLED                            NOT NULL BINARY_INTEGER                      
APPENDONLY                          NOT NULL BINARY_INTEGER                      
NUM_ROWS                                     BINARY_INTEGER                      
BLOCKS                                       BINARY_INTEGER                      
EMPTY_BLOCKS                                 BINARY_INTEGER                      
AVG_ROW_LEN                                  BINARY_BIGINT                       
SAMPLESIZE                                   BINARY_INTEGER                      
ANALYZETIME                                  TIMESTAMP(6)                        
SERIAL_START                        NOT NULL BINARY_BIGINT                       
OPTIONS                                      RAW(16)                             
OBJ#                                         BINARY_INTEGER
VERSION                                      BINARY_INTEGER                      
FLAG                                         BINARY_INTEGER


DUMMY
-----
X    

1 rows fetched.

SQL> /

CT-00606, [1:13]Inconsistent datatypes, expected NUMBER - got TIMESTAMP_TZ
SQL> 
SQL> --- In-line comment `--` is supported, but not for enclosed `--`
SQL> DROP TABLE IF EXISTS PFA_CMDER_TB3;

Succeed.

SQL> CREATE TABLE PFA_CMDER_TB3( ---123123
  2 inline VARCHAR(100)   --- 123123
  3 );  --123123

Succeed.

SQL> 
SQL> select 'Hello world' as "123;--hhggffddss" from dual -- hello
SQL> /

123;--hhggffddss
----------------
Hello world     

1 rows fetched.

SQL> 
SQL> select '--Hello world' as "--hhggffddss" from dual -- hello
  2 ;

--hhggffddss 
-------------
--Hello world

1 rows fetched.

SQL> 
SQL> select 'Hello World!'  -- comment from dual;  
SQL> from
  2 dual
  3 /

'HELLO WORLD!'
--------------
Hello World!  

1 rows fetched.

SQL> 
SQL> desc

Usage: DESCRIBE [schema.]object

SQL> desc a.b

CT-00843, [1:15]The table or view A.B does not exist.

SQL> desc a.b.c

CT-00601, Sql syntax error: expected end but . found
Usage: DESCRIBE [schema.]object

SQL> desc a.b.c.d

CT-00601, Sql syntax error: expected end but . found
Usage: DESCRIBE [schema.]object

SQL> desc a.b.c.d.e

CT-00601, Sql syntax error: expected end but . found
Usage: DESCRIBE [schema.]object

SQL> 
SQL> desc dual

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
DUMMY                               NOT NULL VARCHAR(1 BYTE)                     

SQL> desc -o dual

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
DUMMY                               NOT NULL VARCHAR(1 BYTE)                     

SQL> desc DUAL

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
DUMMY                               NOT NULL VARCHAR(1 BYTE)                     

SQL> 
SQL> -- invalid desc case
SQL> desc abc123.dual

CT-00843, [1:15]The table or view ABC123.DUAL does not exist.

SQL> desc abc123  .  dual

CT-00843, [1:15]The table or view ABC123.DUAL does not exist.

SQL> desc abc%sdgsdfgsdgasfdasfdafdsafgdsafdsafdsafdsagdsafdasfdsasfdasfdasdffsdgfsdfg123  .  dual

CT-00601, Sql syntax error: expected end but % found
Usage: DESCRIBE [schema.]object

SQL> desc .SYS_TABLES

CT-00601, Sql syntax error: invalid variant/object name was found
Usage: DESCRIBE [schema.]object

SQL> desc sys.SYS_TABLES.dual

CT-00601, Sql syntax error: expected end but . found
Usage: DESCRIBE [schema.]object

SQL> desc  sys.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

CT-00601, Sql syntax error: object is too long or varaint name
Usage: DESCRIBE [schema.]object

SQL> desc  sys.

CT-00601, Sql syntax error: expression expected but '' found
Usage: DESCRIBE [schema.]object

SQL> desc -o sys.

CT-00601, Sql syntax error: expression expected but '' found
Usage: DESCRIBE [schema.]object

SQL> 
SQL> -- desc -q
SQL> desc -q select trunc(systimestamp(2)), trunc('123') from dual;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
TRUNC(SYSTIMESTAMP(2))                       DATE                                
TRUNC('123')                                 NUMBER                              

SQL> desc -q select * from dual;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
DUMMY                               NOT NULL VARCHAR(1 BYTE)                     

SQL> 
SQL> desc -q with cte1 as (select * from  all_tables) select count(*) from cte1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
COUNT(*)                                     BINARY_BIGINT                       

SQL> desc -q with1 cte1 as (select * from  all_tables) select count(*) from cte1;

CT-00601, [1:1]Sql syntax error: key word expected

SQL> desc -q select* from dual;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
DUMMY                               NOT NULL VARCHAR(1 BYTE)                     

SQL> desc -q selectx * from dual;

CT-00601, [1:1]Sql syntax error: key word expected

SQL> 
SQL> desc -q commit;

CT-00202, a query is expected

SQL> desc -q create table OMyGod as select * from all_tables;

CT-00202, a query is expected

SQL> 
SQL> drop table if exists t1;

Succeed.

SQL> drop view  if exists v1;

Succeed.

SQL> drop view  if exists v2;

Succeed.

SQL> create table t1(a int not null);

Succeed.

SQL> create view v1 as select * from t1;

Succeed.

SQL> desc v1

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
A                                   NOT NULL BINARY_INTEGER                      

SQL> drop table t1;

Succeed.

SQL> create table t1(a char(8));

Succeed.

SQL> desc v1

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
A                                            CHAR(8 BYTE)                        

SQL> create view v2 as select * from v1;

Succeed.

SQL> desc v2

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
A                                            CHAR(8 BYTE)                        

SQL> 
SQL> drop table if exists t1;

Succeed.

SQL> drop view  if exists v1;

Succeed.

SQL> drop view  if exists v2;

Succeed.

SQL> create table t1(a int);

Succeed.

SQL> create view v1 as select * from t1;

Succeed.

SQL> desc v1

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
A                                            BINARY_INTEGER                      

SQL> drop table t1;

Succeed.

SQL> create table t1(a char(8));

Succeed.

SQL> desc v1

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
A                                            CHAR(8 BYTE)                        

SQL> create view v2 as select * from v1;

Succeed.

SQL> desc v2

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
A                                            CHAR(8 BYTE)                        

SQL> 
SQL> drop user if exists desc_user1;

Succeed.

SQL> create user desc_user1 IDENTIFIED by 'desc_user123';

Succeed.

SQL> grant create session to desc_user1;

Succeed.

SQL> grant create table to desc_user1;

Succeed.

SQL> grant create sequence to desc_user1;

Succeed.

SQL> 
SQL> drop user if exists desc_user2;

Succeed.

SQL> create user desc_user2 IDENTIFIED by 'desc_user123';

Succeed.

SQL> grant create session to desc_user2;

Succeed.

SQL> grant create table to desc_user2;

Succeed.

SQL> grant create sequence to desc_user2;

Succeed.

SQL> 
SQL> CREATE TABLE desc_user1.mytab1 
  2 ( 
  3   dusr1_id  NUMBER NOT NULL, 
  4   dusr1_name  CHAR(50) NOT NULL,
  5   dusr1_info  varchar(2000)
  6 );

Succeed.

SQL> 
SQL> CREATE TABLE desc_user2.mytab1 
  2 ( 
  3   dusr2_id    NUMBER NOT NULL, 
  4   dusr2_name  CHAR(50) NOT NULL,
  5   dusr2_pic   clob
  6 );

Succeed.

SQL> 
SQL> desc desc_user1.mytab1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
DUSR1_ID                            NOT NULL NUMBER                              
DUSR1_NAME                          NOT NULL CHAR(50 BYTE)                       
DUSR1_INFO                                   VARCHAR(2000 BYTE)                  

SQL> desc desc_user2.mytab1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
DUSR2_ID                            NOT NULL NUMBER                              
DUSR2_NAME                          NOT NULL CHAR(50 BYTE)                       
DUSR2_PIC                                    CLOB                                

SQL> 
SQL> conn desc_user1/desc_user123@127.0.0.1:1611

connected.

SQL> desc desc_user1.mytab1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
DUSR1_ID                            NOT NULL NUMBER                              
DUSR1_NAME                          NOT NULL CHAR(50 BYTE)                       
DUSR1_INFO                                   VARCHAR(2000 BYTE)                  

SQL> desc mytab1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
DUSR1_ID                            NOT NULL NUMBER                              
DUSR1_NAME                          NOT NULL CHAR(50 BYTE)                       
DUSR1_INFO                                   VARCHAR(2000 BYTE)                  

SQL> desc desc_user2.mytab1;

CT-01001, Permissions were insufficient

SQL> 
SQL> -- test synonym
SQL> desc all_users

CT-01001, Permissions were insufficient

SQL> desc sys.all_users

CT-01001, Permissions were insufficient

SQL> desc desc_user1.user_tables;

CT-00843, [1:15]The table or view DESC_USER1.USER_TABLES does not exist.

SQL> desc -q select * from all_users;

CT-01001, Permissions were insufficient

SQL> 
SQL> conn sys/Huawei@123@127.0.0.1:1611

connected.

SQL> 
SQL> DROP TABLE IF EXISTS `db_test`;

Succeed.

SQL> DROP TABLE IF EXISTS "dbtable";

Succeed.

SQL> 
SQL> create table `db_test`(a int);

Succeed.

SQL> create table "dbtable"(a int);

Succeed.

SQL> 
SQL> desc `db_test`;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
A                                            BINARY_INTEGER                      

SQL> desc "dbtable"

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
A                                            BINARY_INTEGER                      

SQL> 
SQL> DROP TABLE IF EXISTS `db_test`;

Succeed.

SQL> DROP TABLE IF EXISTS "dbtable";

Succeed.

SQL> 
SQL> start ;

ZS-00001: START, @ or @@ command has no arguments

SQL> @;

ZS-00001: File name expected


SQL> @@;

ZS-00001: File name expected

SQL> 
SQL> set invalid;

Set failed.

Usage:
SET AUTO[COMMIT] {ON|OFF}
SET EXITC[OMMIT] {ON|OFF}
SET CHARSET {GBK|UTF8}
SET HEA[DING] {ON|OFF}
SET SERVEROUT[PUT] {ON|OFF}
SET TRIMS[POOOL] {ON|OFF}
SET LIN[ESIZE] {80|n}
SET NUM[WIDTH] {10|n}
SET PAGES[IZE] {14|n}
SET TIM[ING] {ON|OFF}
SET FEED[BACK] {n|ON|OFF}
SET ECHO {ON|OFF}
SET VER[IFY] {ON|OFF}
SET TERM[OUT] {ON|OFF}
SET NEWP[AGE] {1|n|NONE}
SET COLSEP {'text'|"text"|text}
SET LONG {n}
SET DEFINE {ON|OFF|ONE CHAR}
SET OPLOG {ON|OFF}
SET CONNECT[_TIMEOUT] {-1|n}
SET SOCKET[_TIMEOUT] {-1|n}
SET CTSQL_SSL_CA [=] {ca_file_path}
SET CTSQL_SSL_CERT [=] {cert_file_path}
SET CTSQL_SSL_KEY [=] {key_file_path}
SET CTSQL_SSL_MODE [=] {DISABLED|PREFERRED|REQUIRED|VERIFY_CA|VERIFY_FULL}
SET CTSQL_SSL_CRL [=] {crl_file_path}
SET CTSQL_SSL_KEY_PASSWD [=] {ssl_keypwd}
SET CTSQL_SSL_CIPHER [=] {ssl_cipher}
SET UDS_SERVER_PATH [=] {path}
SET UDS_CLIENT_PATH [=] {path}
SET BIND {ON|OFF}
SET SHARD_RW_FLAG {0|1|2|3}
SET HIST[ORY] {ON|OFF}
SET AUTOTRACE {ON|OFF|TRACEONLY}

SQL> show invalid;

Show failed.

Usage:
SHOW AUTO[COMMIT]
SHOW EXITC[OMMIT]
SHOW CHARSET
SHOW HEA[DING]
SHOW SERVEROUT[PUT]
SHOW TRIMS[POOL]
SHOW SPOO[L]
SHOW LIN[ESIZE]
SHOW NUM[WIDTH]
SHOW PAGES[IZE]
SHOW TIM[ING]
SHOW FEED[BACK]
SHOW ECHO
SHOW VER[IFY]
SHOW TERM[OUT]
SHOW NEWP[AGE]
SHOW COLSEP
SHOW LONG
SHOW PARAMETER[S] [PARAMETER_NAME]
SHOW DEFINE
SHOW OPLOG
SHOW CONNECT[_TIMEOUT]
SHOW SOCKET[_TIMEOUT]
SHOW CTSQL_SSL[_MODE|_CA|_CERT|_KEY|_CRL|_KEY_PASSWD|_CIPHER]
SHOW UDS_SERVER_PATH
SHOW UDS_CLIENT_PATH
SHOW BIND
SHOW SHARD_RW_FLAG
SHOW HIST[ORY]
SHOW AUTOTRACE
SHOW TENANT_NAME
SHOW TENANT_ID
SHOW CREATE TABLE

SQL> show autocommit;

autocommit OFF.

SQL> set autocommit on;

ON
SQL> show autocommit;

autocommit ON.

SQL> set autocommit off;

OFF
SQL> show autocommit;

autocommit OFF.

SQL> set autocommit on off;

unknown set autocommit option.
Usage: SET AUTO[COMMIT] {ON|OFF}.

SQL> show autocommit;

autocommit OFF.

SQL> show exitcommit;

exitcommit ON.

SQL> set exitcommit on;

ON
SQL> show exitcommit;

exitcommit ON.

SQL> set exitcommit off;

OFF
SQL> show exitcommit;

exitcommit OFF.

SQL> set exitcommit on off;

unknown set exitcommit option.
Usage: SET EXITC[OMMIT] {ON|OFF}.

SQL> show exitcommit;

exitcommit OFF.

SQL> set autotrace on;

ON
SQL> show autotrace;

autotrace ON.

SQL> set autotrace off;

OFF
SQL> show autotrace;

autotrace OFF.

SQL> set autotrace on off;

unknown set autotrace option.
Usage: SET AUTOTRACE {ON|OFF|TRACEONLY}.

SQL> show autotrace;

autotrace OFF.

SQL>


