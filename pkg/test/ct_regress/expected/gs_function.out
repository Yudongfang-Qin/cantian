

SQL> --code coverage
SQL> conn / as sysdba 

connected.

SQL> select DBE_UTIL.GET_ERROR_BACKTRACE();

DBE_UTIL.GET_ERROR_BACKTRACE()
------------------------------
                              

1 rows fetched.

SQL> select DBE_UTIL.GET_ERROR_BACKTRACE(1);

CT-00615, [1:8]Invalid argument number for GET_ERROR_BACKTRACE, min=0, max=0
SQL> drop table if exists tt3;

Succeed.

SQL> create table TT3 (id DOUBLE, id2 DOUBLE, id3 DOUBLE, id4 DOUBLE, id5 DOUBLE, id6 DOUBLE);

Succeed.

SQL> exec DBE_MASK_DATA.ADD_POLICY('SYS', 'TT3', 'ID2','RULE', 'FULL','0.5');

CT-00932, [1:2] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[1:2] PL/SQL(DBE_MASK_DATA.ADD_POLICY) terminated with execute errors
CT-00613, Invalid operation, adding a policy to an object owned by SYS is not allowed

SQL> exec DBE_MASK_DATA.ADD_POLICY('SYS', 'TT3', 'ID2','RULE', 'FULL1','0.5');

CT-00932, [1:2] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[1:2] PL/SQL(DBE_MASK_DATA.ADD_POLICY) terminated with execute errors
CT-00613, Invalid operation, policy_type only support full type

SQL> drop table if exists tt3;

Succeed.

SQL> exec DBE_MASK_DATA.ADD_POLICY('TT3', 'ID2','', 'FULL','0.5');

CT-00944, PL/SQL(SYS.ANONYMOUS BLOCK) terminated with compiling errors
[1:2] PLC-00615 Invalid argument number for ADD_POLICY, min=6, max=6

SQL> exec DBE_MASK_DATA.ADD_POLICY(1, 1, 1,'', 1,'0.5');

CT-00944, PL/SQL(SYS.ANONYMOUS BLOCK) terminated with compiling errors
[1:27] PLC-00614 Parameter error: object_schema should be string

SQL> conn / as sysdba

connected.

SQL> drop user if exists DDMUSER cascade;

Succeed.

SQL> create user DDMUSER identified by CANTIAN_234;

Succeed.

SQL> grant connect , resource  to DDMUSER;

Succeed.

SQL> grant create table to DDMUSER;

Succeed.

SQL> grant create view to DDMUSER;

Succeed.

SQL> grant execute on DBE_MASK_DATA to DDMUSER;

Succeed.

SQL> grant unlimited tablespace to DDMUSER;

Succeed.

SQL> conn DDMUSER/CANTIAN_234@127.0.0.1:1611

connected.

SQL> drop table if exists najinschool;

Succeed.

SQL> create table najinschool(gradeid int, classid int, groupid int, stdid int, stdsco int);

Succeed.

SQL> create global temporary table temp_tab(gradeid int, classid int, groupid int, stdid int, stdsco int);

Succeed.

SQL> insert into najinschool values(1,1,1,1,1000);

1 rows affected.

SQL> commit;

Succeed.

SQL> exec SYS.DBE_MASK_DATA.ADD_POLICY('DDMUSER', 'najinschool', 'rowid', 'RULE1', 'FULL', '7');

CT-00932, [1:2] PL/SQL(DDMUSER.ANONYMOUS BLOCK) terminated with execute errors
[1:2] PL/SQL(SYS.ADD_POLICY) terminated with execute errors
CT-00844, The column column.ROWID does not exist.

SQL> exec SYS.DBE_MASK_DATA.ADD_POLICY('DDMUSER', 'temp_tab', 'stdsco', 'RULE1', 'FULL', '7');

CT-00932, [1:2] PL/SQL(DDMUSER.ANONYMOUS BLOCK) terminated with execute errors
[1:2] PL/SQL(SYS.ADD_POLICY) terminated with execute errors
CT-00613, Invalid operation, please set rule on common table

SQL> exec SYS.DBE_MASK_DATA.ADD_POLICY('DDMUSER', 'najinschool', 'stdsco1', 'RULE1', 'FULL', '7');

CT-00932, [1:2] PL/SQL(DDMUSER.ANONYMOUS BLOCK) terminated with execute errors
[1:2] PL/SQL(SYS.ADD_POLICY) terminated with execute errors
CT-00844, The column column.STDSCO1 does not exist.

SQL> exec SYS.DBE_MASK_DATA.ADD_POLICY('DDMUSER', 'najinschool', 'stdsco', 'RULE1', 'FULL', 'a');

CT-00932, [1:2] PL/SQL(DDMUSER.ANONYMOUS BLOCK) terminated with execute errors
[1:2] PL/SQL(SYS.ADD_POLICY) terminated with execute errors
CT-00613, Invalid operation, param value can't match column

SQL> exec SYS.DBE_MASK_DATA.ADD_POLICY('DDMUSER', 'najinschool', 'stdsco', 'RULE1', 'FULL', 'sin(groupid)');

CT-00932, [1:2] PL/SQL(DDMUSER.ANONYMOUS BLOCK) terminated with execute errors
[1:2] PL/SQL(SYS.ADD_POLICY) terminated with execute errors
CT-00613, Invalid operation, param value can't match column

SQL> conn / as sysdba

connected.

SQL> drop user if exists DDMUSER cascade;

Succeed.

SQL> conn / as sysdba

connected.

SQL> SELECT DBE_DIAGNOSE.DBA_TABLE_NAME(0, 2);

DBE_DIAGNOSE.DBA_TABLE_NAME(0, 2)                               
----------------------------------------------------------------
SYS.SYS_TABLES                                                  

1 rows fetched.

SQL> SELECT DBE_DIAGNOSE.DBA_LISTCOLS('SYS','SYS_TABLES','0,1');

DBE_DIAGNOSE.DBA_LISTCOLS('SYS','SYS_TABLES','0,1')             
----------------------------------------------------------------
USER#, ID                                                       

1 rows fetched.

SQL> SELECT DBE_DIAGNOSE.DBA_LISTCOLS('SYS','SYS_TABLES','');

CT-01312, [1:53]column list string expected
SQL> SELECT DBE_DIAGNOSE.DBA_LISTCOLS('SYS','SYS_TABLES','1,a');

CT-00636, [1:8]Invalid number :invalid column list
SQL> SELECT DBE_DIAGNOSE.DBA_LISTCOLS('SYS','SYS_TABLES','1,200');

CT-00102, [1:8]column id out of index,limits is 27
SQL> SELECT DBE_DIAGNOSE.has_obj_privs('SYS', 'SYS', '', 'TABLE');

CT-00613, Invalid operation, arg of function has_obj_privs must be effective word
SQL> SELECT DBE_DIAGNOSE.has_obj_privs('SYS', 'SYS', 'SYS_TABLES', 'TABLE');

DBE_DIAGNOSE.HAS_OBJ_PRIVS('SYS', 'SYS', 'SYS_TABLES', 'TABLE')
---------------------------------------------------------------
TRUE                                                           

1 rows fetched.

SQL> SELECT DBE_DIAGNOSE.has_obj_privs('SYS', 'SYS', 'SYS_TABLES', 'SQUENCE');

CT-00613, Invalid operation, please check object type
SQL> SELECT DBE_DIAGNOSE.has_obj_privs('SYS', 'SYS', 'SYS_TABLES', 'SEQUENCE');

DBE_DIAGNOSE.HAS_OBJ_PRIVS('SYS', 'SYS', 'SYS_TABLES', 'SEQUENCE
----------------------------------------------------------------
TRUE                                                            

1 rows fetched.

SQL> SELECT DBE_DIAGNOSE.has_obj_privs('SYS', 'SYS', 'SYS_TABLES', 'TABLE');

DBE_DIAGNOSE.HAS_OBJ_PRIVS('SYS', 'SYS', 'SYS_TABLES', 'TABLE')
---------------------------------------------------------------
TRUE                                                           

1 rows fetched.

SQL> conn / as  sysdba

connected.

SQL> drop user if exists c##core_user cascade;

Succeed.

SQL> create user c##core_user identified by Cantian_234;

Succeed.

SQL> grant connect ,create table , create view to c##core_user;

Succeed.

SQL> drop table if exists test_stats_1;

Succeed.

SQL> create table test_stats_1 (a int);

Succeed.

SQL> insert into test_stats_1 values(1);

1 rows affected.

SQL> insert into test_stats_1 (a) select a + 1 from test_stats_1;

1 rows affected.

SQL> insert into test_stats_1 (a) select a + 2 from test_stats_1;

2 rows affected.

SQL> insert into test_stats_1 (a) select a + 4 from test_stats_1;

4 rows affected.

SQL> insert into test_stats_1 (a) select a + 8 from test_stats_1;

8 rows affected.

SQL> insert into test_stats_1 (a) select a + 16 from test_stats_1;

16 rows affected.

SQL> insert into test_stats_1 (a) select a + 32 from test_stats_1;

32 rows affected.

SQL> insert into test_stats_1 (a) select a + 64 from test_stats_1;

64 rows affected.

SQL> commit;

Succeed.

SQL> create index index1_test_stats_1 on test_stats_1(a);

Succeed.

SQL> analyze table test_stats_1 compute statistics;

Succeed.

SQL> grant execute on DBE_STATS to c##core_user;

Succeed.

SQL> grant dba to c##core_user;

Succeed.

SQL> conn  c##core_user/Cantian_234@127.0.0.1:1611

connected.

SQL> EXEC DBE_STATS.MODIFY_TABLE_STATS('sys','TEST_STATS_1', row_nums=>2000, blk_nums=>2000, avgr_len=>100);

PL/SQL procedure successfully completed.

SQL> EXEC DBE_STATS.MODIFY_COLUMN_STATS('sys','TEST_STATS_1', 'a', dist_nums=>300, density=>0.0075, null_cnt=>10);

PL/SQL procedure successfully completed.

SQL> EXEC DBE_STATS.MODIFY_INDEX_STATS('sys');

CT-00944, PL/SQL(C##CORE_USER.ANONYMOUS BLOCK) terminated with compiling errors
[1:2] PLC-00615 Invalid argument number for MODIFY_INDEX_STATS, min=2, max=13

SQL> conn / as sysdba 

connected.

SQL> revoke dba from c##core_user;

Succeed.

SQL> conn  c##core_user/Cantian_234@127.0.0.1:1611

connected.

SQL> EXEC DBE_STATS.MODIFY_TABLE_STATS('sys','TEST_STATS_1', row_nums=>2000, blk_nums=>2000, avgr_len=>100);

CT-00932, [1:2] PL/SQL(C##CORE_USER.ANONYMOUS BLOCK) terminated with execute errors
[1:2] PL/SQL(DBE_STATS.MODIFY_TABLE_STATS) terminated with execute errors
[1:2] CT-01001, Permissions were insufficient

SQL> EXEC DBE_STATS.MODIFY_COLUMN_STATS('sys','TEST_STATS_1', 'a', dist_nums=>300, density=>0.0075, null_cnt=>10);

CT-00932, [1:2] PL/SQL(C##CORE_USER.ANONYMOUS BLOCK) terminated with execute errors
[1:2] PL/SQL(DBE_STATS.MODIFY_COLUMN_STATS) terminated with execute errors
[1:2] CT-01001, Permissions were insufficient

SQL> EXEC DBE_STATS.UNLOCK_TABLE_STATS('sys','TEST_STATS_1');

CT-00932, [1:2] PL/SQL(C##CORE_USER.ANONYMOUS BLOCK) terminated with execute errors
[1:2] PL/SQL(DBE_STATS.UNLOCK_TABLE_STATS) terminated with execute errors
[1:2] CT-01001, Permissions were insufficient

SQL> EXEC DBE_STATS.MODIFY_COLUMN_STATS('sys');

CT-00944, PL/SQL(C##CORE_USER.ANONYMOUS BLOCK) terminated with compiling errors
[1:2] PLC-00615 Invalid argument number for MODIFY_COLUMN_STATS, min=3, max=10

SQL> EXEC DBE_STATS.MODIFY_INDEX_STATS('sys');

CT-00944, PL/SQL(C##CORE_USER.ANONYMOUS BLOCK) terminated with compiling errors
[1:2] PLC-00615 Invalid argument number for MODIFY_INDEX_STATS, min=2, max=13

SQL> EXEC DBE_STATS.MODIFY_TABLE_STATS('sys');

CT-00944, PL/SQL(C##CORE_USER.ANONYMOUS BLOCK) terminated with compiling errors
[1:2] PLC-00615 Invalid argument number for MODIFY_TABLE_STATS, min=2, max=8

SQL> EXEC DBE_STATS.UNLOCK_TABLE_STATS('sys');

CT-00944, PL/SQL(C##CORE_USER.ANONYMOUS BLOCK) terminated with compiling errors
[1:2] PLC-00615 Invalid argument number for UNLOCK_TABLE_STATS, min=2, max=2

SQL> conn / as  sysdba

connected.

SQL> drop user if exists c##core_user cascade;

Succeed.

SQL> drop table if exists test_cume_dist;

Succeed.

SQL> create table test_cume_dist(c1 int ,c2 int ,c3 char(10),c4 varchar(20),c5 blob);

Succeed.

SQL> insert into test_cume_dist values(5,23,'a3','adf','ad123');

1 rows affected.

SQL> insert into test_cume_dist values(7,25,'12','asdfa','aaa');

1 rows affected.

SQL> insert into test_cume_dist values(7,35,'cad','asdf','a1111');

1 rows affected.

SQL> select cume_dist(6, '3.365') WITHIN GROUP (ORDER BY c1 asc, c2 asc) as "cume_dist_col"  FROM test_cume_dist order by c1 asc, c2 asc, c3 asc;  562 581 551 552 658 607

cume_dist_col       
--------------------
0.5                 

1 rows fetched.

SQL> select cume_dist('adf', 'sdf') WITHIN GROUP (ORDER BY c1 asc, c2 asc) as "cume_dist_col"  FROM test_cume_dist order by c1 asc, c2 asc, c3 asc; 562 575 581 582 551 552

CT-00601, [1:1]Sql syntax error: key word expected
SQL> select cume_dist(c4, 'sdf') WITHIN GROUP (ORDER BY c1 asc, c4 asc) as "cume_dist_col"  FROM test_cume_dist order by c1 asc, c2 asc, c3 asc,c4 asc; 576

CT-00601, [1:18]Sql syntax error: Argument should be a constant
SQL> select cume_dist(8, 'bb') WITHIN GROUP (ORDER BY c1 asc, c3 asc) as "cume_dist_col"  FROM test_cume_dist group by c1 order by c1 asc;

cume_dist_col       
--------------------
1                   
1                   

2 rows fetched.

SQL> drop table if exists test_cume_dist;

Succeed.

SQL> select md5('dsaf','ad') from dual;

CT-00615, [1:8]Invalid argument number for MD5, min=1, max=1
SQL> drop table if exists t_md5_test;

Succeed.

SQL> create table t_md5_test(f1 int,f2 float,f3 image,f4 clob,f5 varchar(10),f6 TINYINT);

Succeed.

SQL> insert into t_md5_test values(214748,1.2,'a100111111','15*ad','aabb12',0);

1 rows affected.

SQL> select md5(f1),md5(f2),md5(f3),md5(f4),md5(f5),md5(f6) from t_md5_test;

MD5(F1)                          MD5(F2)                          MD5(F3)                          MD5(F4)                          MD5(F5)                          MD5(F6)                         
-------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- --------------------------------
4088e07a3caef857dc0ec102bcba90fa 56765472680401499c79732468ba4340 348e7e00d56b0f24da55bd99f838d2b6 dcdb4a1c94836246d5583e5732bb1a14 51d5b55b26712dc3c2e9b004eb3045a4 cfcd208495d565ef66e7dff9f98764da

1 rows fetched.

SQL> select FROM_TZ(TIMESTAMP '2019-07-13 02:00:00', '21:00',10) from dual;

CT-00615, [1:8]Invalid argument number for FROM_TZ, min=2, max=2
SQL> select FROM_TZ(TIMESTAMP '2019-07-13 02:00:00', 10) from dual;

CT-00606, [1:8]Inconsistent datatypes, expected CHAR - got BINARY_INTEGER
SQL> select FROM_TZ('', '') from dual;

CT-00606, [1:8]Inconsistent datatypes, expected TIMESTAMP - got CHAR
SQL> select FROM_TZ(TIMESTAMP '2019-07-13 02:00:00', 'adfc') from dual;

CT-00635, [1:8]Value error: unrecognized character in the specified timezone offset
SQL> select numtoyminterval('sd2','year');

CT-00636, [1:24]Invalid number -- unexpected character
SQL> SELECT MONTHS_BETWEEN(TO_DATE('10-31-2018','MM-DD-YYYY'),'ADFASD') FROM DUAL;	

CT-00105, [1:58]Invalid format of datetime
SQL> SELECT MONTHS_BETWEEN('AD',TO_DATE('06-30-2018','MM-DD-YYYY') ) FROM DUAL; 

CT-00105, [1:23]Invalid format of datetime
SQL> SELECT MONTHS_BETWEEN(123,TO_DATE('06-30-2018','MM-DD-YYYY')) FROM DUAL;

CT-00614, [1:23]Parameter error: illegal function argument: DATETIME argument expected - got BINARY_INTEGER
SQL> SELECT MONTHS_BETWEEN(TO_DATE('10-12-2018','MM-DD-YYYY'),45) FROM DUAL;

CT-00614, [1:58]Parameter error: illegal function argument: DATETIME argument expected - got BINARY_INTEGER
SQL> select timestampadd(month,123,'2018');

CT-00105, [1:31]Invalid format of datetime
SQL> select timestampdiff("day",'123', '2017-03-22 00:00:00');

CT-00105, [1:28]Invalid format of datetime
SQL> select timestampdiff("day",'2017-03-22 00:00:00', 'ad');

CT-00105, [1:51]Invalid format of datetime
SQL> select try_get_lock(5) from dual;

TRY_GET_LOCK(5)
---------------
1              

1 rows fetched.

SQL> select group_concat;

CT-00615, [1:8]Invalid argument number for GROUP_CONCAT, min=1, max=64
SQL> select hash;

CT-00615, [1:8]Invalid argument number for HASH, min=1, max=64
SQL> select hash('adf');

HASH('ADF') 
------------
245511892   

1 rows fetched.

SQL> select ct_hash(empty_clob()) from dual;

CT_HASH(EMPTY_CLOB())
---------------------
                     

1 rows fetched.

SQL> drop table if exists test_hex_real;

Succeed.

SQL> create table test_hex_real(c1 real);

Succeed.

SQL> insert into test_hex_real values(15.61);

1 rows affected.

SQL> select hex(c1) from test_hex_real;

HEX(C1)                                         
------------------------------------------------
10                                              

1 rows fetched.

SQL> drop table if exists test_hex_real;

Succeed.

SQL> select unhex(empty_clob()) from dual;

UNHEX(EMPTY_CLOB())                                             
----------------------------------------------------------------
                                                                

1 rows fetched.

SQL> select left('',3) from dual;

LEFT('',3)
----------
          

1 rows fetched.

SQL> select left('sdf','asf') from dual;

LEFT('SDF','ASF')
-----------------
                 

1 rows fetched.

SQL> drop table if exists test_left;

Succeed.

SQL> create table test_left(c1 clob);

Succeed.

SQL> insert into test_left values('aaa');

1 rows affected.

SQL> select left(c1,3) from test_left;

CT-00606, Inconsistent datatypes, expected VARCHAR - got CLOB
SQL> select left('adfd','ad') from test_left;	

LEFT('ADFD','AD')
-----------------
                 

1 rows fetched.

SQL> drop table if exists test_left;

Succeed.

SQL> SELECT DBE_DIAGNOSE.DBA_PARTITIONED_LOBSIZE(0,'CANTIANDB','TEST_PART_cv123');

CT-00843, [1:8]The table or view CANTIANDB.TEST_PART_CV123 does not exist.
SQL> SELECT DBE_DIAGNOSE.DBA_PARTITIONED_LOBSIZE(-5,'CANTIANDB','dual');

CT-00242, [1:8]The function argument is out of range
SQL> SELECT DBE_DIAGNOSE.DBA_PARTITIONED_LOBSIZE('','CANTIANDB','dual');

CT-00240, [1:8]Null is not allowed for the function argument
SQL> drop table if exists test_if;

Succeed.

SQL> create table test_if(c1 int,c2 boolean,c3 raw(10),c4 binary(10),c5 clob);

Succeed.

SQL> insert into test_if values(23,0,'aaa','adfjksd','adf1');

1 rows affected.

SQL> select c3 ,if(c1>24,c1,c3) newif from test_if;

CT-00606, [1:12]Inconsistent datatypes, expected RAW - got BINARY_INTEGER
SQL> select if(c1>24,c1,c4) from test_if;

IF(C1>24,C1,C4)                                                 
----------------------------------------------------------------
adfjksd                                                         

1 rows fetched.

SQL> select object_id('dual','');

CT-00614, [1:25]Parameter error: object owner cannot be a NULL nor an empty string
SQL> select ln(TO_DATE('10-12-2018','MM-DD-YYYY')) from dual;

CT-00614, [1:11]Parameter error: illegal function argument: NUMERIC argument expected - got DATE
SQL> select lpad(empty_blob(),5,123) from dual;

LPAD(EMPTY_BLOB(),5,123)                                        
----------------------------------------------------------------
                                                                

1 rows fetched.

SQL> select lpad('12',5,empty_blob()) from dual;

LPAD('12',5,EMPTY_BLOB())                                       
----------------------------------------------------------------
                                                                

1 rows fetched.

SQL> select asciistr(empty_blob()) from dual;

ASCIISTR(EMPTY_BLOB())                                          
----------------------------------------------------------------
                                                                

1 rows fetched.

SQL> select exp('1as23') from dual;

CT-00636, [1:12]Invalid number -- unexpected character
SQL> select exp(to_date('10-12-2018','MM-DD-YYYY')) from dual;

CT-00614, [1:12]Parameter error: illegal function argument: NUMERIC argument expected - got DATE
SQL> select asin(to_date('10-12-2018','MM-DD-YYYY')) from dual;

CT-00614, [1:13]Parameter error: illegal function argument: NUMERIC argument expected - got DATE
SQL> select serial_lastval(to_date('08-12-2019','MM-DD-YYYY'),'') from dual;

CT-00614, [1:23]Parameter error: illegal function argument: string argument expected - got DATE
SQL> select serial_lastval('SYS',to_date('08-12-2019','MM-DD-YYYY')) from dual;

CT-00614, [1:29]Parameter error: illegal function argument: string argument expected - got DATE
SQL> select greatest(1,1,'156a') from dual;

CT-00636, [1:21]Invalid number -- unexpected character
SQL> drop table if exists test_try_get_xact_lock;

Succeed.

SQL> create table test_try_get_xact_lock(c1 int);

Succeed.

SQL> insert into test_try_get_xact_lock values(10);

1 rows affected.

SQL> select try_get_xact_lock(c1) from test_try_get_xact_lock;

TRY_GET_XACT_LOCK(C1)
---------------------
1                    

1 rows fetched.

SQL> select translate('三a个a字a节','三a','b') a from dual;

A         
----------
b个字节

1 rows fetched.

SQL> select translate('sdsfad','f','及b') df1sd from dual;

DF1SD   
--------
sds及ad

1 rows fetched.

SQL> alter system add lsnr_addr '1.0.0.1';

CT-00259, IP address 1.0.0.1 is not local ip, please check your ifconfig
SQL> alter system delete lsnr_addr '1.0.0.1';

CT-00708, The object lsnr 1.0.0.1 does not exist
SQL> 
SQL> --LNNVL
SQL> drop table if exists lnnvl_table;

Succeed.

SQL> create table lnnvl_table(name varchar2(30),year int);

Succeed.

SQL> insert into lnnvl_table values('test2001',2001);

1 rows affected.

SQL> insert into lnnvl_table values('test2002',2002);

1 rows affected.

SQL> insert into lnnvl_table values('test2003',2003);

1 rows affected.

SQL> insert into lnnvl_table values('test2004',null);

1 rows affected.

SQL> insert into lnnvl_table values('test2005',2005);

1 rows affected.

SQL> insert into lnnvl_table values('test2006',2006);

1 rows affected.

SQL> insert into lnnvl_table values('test2007',2007);

1 rows affected.

SQL> insert into lnnvl_table values('test2008',null);

1 rows affected.

SQL> insert into lnnvl_table values('test2009',2009);

1 rows affected.

SQL> insert into lnnvl_table values('test2010',2010);

1 rows affected.

SQL> insert into lnnvl_table values('test2011',2011);

1 rows affected.

SQL> insert into lnnvl_table values(null,2012);

1 rows affected.

SQL> 
SQL> select * from lnnvl_table where lnnvl(not year>2005);

NAME                           YEAR        
------------------------------ ------------
test2004                                   
test2006                       2006        
test2007                       2007        
test2008                                   
test2009                       2009        
test2010                       2010        
test2011                       2011        
                               2012        

8 rows fetched.

SQL> select * from lnnvl_table where lnnvl(not exists(select * from lnnvl_table));

NAME                           YEAR        
------------------------------ ------------
test2001                       2001        
test2002                       2002        
test2003                       2003        
test2004                                   
test2005                       2005        
test2006                       2006        
test2007                       2007        
test2008                                   
test2009                       2009        
test2010                       2010        
test2011                       2011        
                               2012        

12 rows fetched.

SQL> select * from lnnvl_table where lnnvl(not regexp_like(name,'test[[:digit:]]{3}1$'));

NAME                           YEAR        
------------------------------ ------------
test2001                       2001        
test2011                       2011        
                               2012        

3 rows fetched.

SQL> select * from lnnvl_table where lnnvl(year is json);

NAME                           YEAR        
------------------------------ ------------
test2001                       2001        
test2002                       2002        
test2003                       2003        
test2004                                   
test2005                       2005        
test2006                       2006        
test2007                       2007        
test2008                                   
test2009                       2009        
test2010                       2010        
test2011                       2011        
                               2012        

12 rows fetched.

SQL> select * from lnnvl_table where lnnvl(name regexp '1$');

NAME                           YEAR        
------------------------------ ------------
test2002                       2002        
test2003                       2003        
test2004                                   
test2005                       2005        
test2006                       2006        
test2007                       2007        
test2008                                   
test2009                       2009        
test2010                       2010        
                               2012        

10 rows fetched.

SQL> select * from lnnvl_table where lnnvl(name not regexp '1$');

NAME                           YEAR        
------------------------------ ------------
test2001                       2001        
test2011                       2011        
                               2012        

3 rows fetched.

SQL> select * from lnnvl_table where lnnvl(true);

NAME                           YEAR        
------------------------------ ------------

0 rows fetched.

SQL> select * from lnnvl_table where lnnvl(false);

NAME                           YEAR        
------------------------------ ------------
test2001                       2001        
test2002                       2002        
test2003                       2003        
test2004                                   
test2005                       2005        
test2006                       2006        
test2007                       2007        
test2008                                   
test2009                       2009        
test2010                       2010        
test2011                       2011        
                               2012        

12 rows fetched.

SQL> select * from lnnvl_table where lnnvl(null);

NAME                           YEAR        
------------------------------ ------------
test2001                       2001        
test2002                       2002        
test2003                       2003        
test2004                                   
test2005                       2005        
test2006                       2006        
test2007                       2007        
test2008                                   
test2009                       2009        
test2010                       2010        
test2011                       2011        
                               2012        

12 rows fetched.

SQL> select * from lnnvl_table where lnnvl(2005);

NAME                           YEAR        
------------------------------ ------------

0 rows fetched.

SQL> select * from lnnvl_table where lnnvl(0=false);

NAME                           YEAR        
------------------------------ ------------

0 rows fetched.

SQL> select * from lnnvl_table where lnnvl(0.0=false);

NAME                           YEAR        
------------------------------ ------------

0 rows fetched.

SQL> select * from lnnvl_table where lnnvl(1=true);

NAME                           YEAR        
------------------------------ ------------

0 rows fetched.

SQL> select * from lnnvl_table where lnnvl(1.0=true);

CT-00606, [1:43]Inconsistent datatypes, expected NUMBER - got BOOLEAN
SQL> select * from lnnvl_table where lnnvl(2=true);

NAME                           YEAR        
------------------------------ ------------
test2001                       2001        
test2002                       2002        
test2003                       2003        
test2004                                   
test2005                       2005        
test2006                       2006        
test2007                       2007        
test2008                                   
test2009                       2009        
test2010                       2010        
test2011                       2011        
                               2012        

12 rows fetched.

SQL> select * from lnnvl_table where lnnvl(2=false);

NAME                           YEAR        
------------------------------ ------------
test2001                       2001        
test2002                       2002        
test2003                       2003        
test2004                                   
test2005                       2005        
test2006                       2006        
test2007                       2007        
test2008                                   
test2009                       2009        
test2010                       2010        
test2011                       2011        
                               2012        

12 rows fetched.

SQL> select * from lnnvl_table where lnnvl(if(year>2005,1,0));

NAME                           YEAR        
------------------------------ ------------
test2001                       2001        
test2002                       2002        
test2003                       2003        
test2004                                   
test2005                       2005        
test2008                                   

6 rows fetched.

SQL> select * from lnnvl_table where lnnvl(if(year>2005,true,false));

NAME                           YEAR        
------------------------------ ------------
test2001                       2001        
test2002                       2002        
test2003                       2003        
test2004                                   
test2005                       2005        
test2008                                   

6 rows fetched.

SQL> select * from lnnvl_table where lnnvl(1=if(year>2005,1,0));

NAME                           YEAR        
------------------------------ ------------
test2001                       2001        
test2002                       2002        
test2003                       2003        
test2004                                   
test2005                       2005        
test2008                                   

6 rows fetched.

SQL> 
SQL> select lnnvl(year>2005) from lnnvl_table;

LNNVL(YEAR>2005)
----------------
TRUE            
TRUE            
TRUE            
TRUE            
TRUE            
FALSE           
FALSE           
TRUE            
FALSE           
FALSE           
FALSE           
FALSE           

12 rows fetched.

SQL> 
SQL> drop table lnnvl_table;

Succeed.

SQL> 
SQL> drop table if exists winsort_lnnvl_t;

Succeed.

SQL> create table winsort_lnnvl_t(f0 int);

Succeed.

SQL> insert into winsort_lnnvl_t(f0) values(10);

1 rows affected.

SQL> insert into winsort_lnnvl_t(f0) values(null);

1 rows affected.

SQL> insert into winsort_lnnvl_t(f0) values(5);

1 rows affected.

SQL> insert into winsort_lnnvl_t(f0) values(15);

1 rows affected.

SQL> commit;

Succeed.

SQL> select max(case when lnnvl(f0 is not null) then f0 else 1 end) over (partition by f0 order by f0) as c1 from winsort_lnnvl_t where f0 is not null;

C1          
------------
1           
1           
1           

3 rows fetched.

SQL> drop table winsort_lnnvl_t;

Succeed.

SQL> 
SQL> drop table if exists cond_arg_func_t1;

Succeed.

SQL> drop table if exists cond_arg_func_t2;

Succeed.

SQL> drop table if exists cond_arg_func_t3;

Succeed.

SQL> create table cond_arg_func_t1(id int, c_int int not null, c_bool boolean);

Succeed.

SQL> create table cond_arg_func_t2(id int, c_int int not null, c_bool boolean);

Succeed.

SQL> create table cond_arg_func_t3(id int, c_int int not null, c_bool boolean);

Succeed.

SQL> create index idx_cond_arg_func_t1_1 on cond_arg_func_t1(c_int);

Succeed.

SQL> create index idx_cond_arg_func_t2_1 on cond_arg_func_t2(c_int);

Succeed.

SQL> create index idx_cond_arg_func_t3_1 on cond_arg_func_t3(c_int);

Succeed.

SQL> insert into cond_arg_func_t1 values(1,1000,true);

1 rows affected.

SQL> insert into cond_arg_func_t2 values(1,1000,true);

1 rows affected.

SQL> insert into cond_arg_func_t3 values(1,1000,true);

1 rows affected.

SQL> commit;

Succeed.

SQL> select count(*) from cond_arg_func_t1 t1, (cond_arg_func_t2 t2 left join cond_arg_func_t3 t3 on t2.c_int = t3.c_int) 
  2 where if(t2.id is not null, t2.c_bool, t2.c_bool) = lnnvl(t1.id is not null);

COUNT(*)            
--------------------
0                   

1 rows fetched.

SQL> 
SQL> select count(*) from cond_arg_func_t1 t1, (cond_arg_func_t2 t2 left join cond_arg_func_t3 t3 on t2.c_int = t3.c_int) 
  2 where lnnvl(t1.id is not null) = if(t2.id is not null, t1.c_bool, t1.c_bool);

COUNT(*)            
--------------------
0                   

1 rows fetched.

SQL> 
SQL> drop table cond_arg_func_t1;

Succeed.

SQL> drop table cond_arg_func_t2;

Succeed.

SQL> drop table cond_arg_func_t3;

Succeed.

SQL> 
SQL> --DTS2019090613640
SQL> drop table if exists lnnvl_table;

Succeed.

SQL> create table lnnvl_table
  2 (
  3 c1 boolean default lnnvl(1),
  4 c2 boolean default lnnvl(0)
  5 );

Succeed.

SQL> insert into lnnvl_table values(default,default);

1 rows affected.

SQL> 
SQL> drop table if exists lnnvl_table;

Succeed.

SQL> create table lnnvl_table
  2 (
  3 c1 boolean check(c1!=lnnvl(1)),
  4 c2 boolean check(c2=lnnvl(1))
  5 );

Succeed.

SQL> insert into lnnvl_table values(false,true);

CT-01222, Check constraint violated
SQL> 
SQL> drop table if exists lnnvl_table;

Succeed.

SQL> create table lnnvl_table(c1 boolean,c2 boolean);

Succeed.

SQL> 
SQL> insert into lnnvl_table values(false, true);

1 rows affected.

SQL> insert into lnnvl_table values(false, false);

1 rows affected.

SQL> 
SQL> delete from lnnvl_table where c1=lnnvl(c1!=c2);

1 rows affected.

SQL> 
SQL> --DTS2020011412401
SQL> select lnnvl(*) from sys_dummy;

CT-00601, [1:14]Sql syntax error: unexcpected '*'
SQL> 
SQL> --functiono to_blob
SQL> select to_blob(123212) from dual;

CT-01303, Convert BINARY_INTEGER type to RAW type failed
SQL> select to_blob('asd12') from dual;

CT-00105, Invalid format of hex
SQL> 
SQL> drop table if exists IREQ02350169CUI;

Succeed.

SQL> create table IREQ02350169CUI(c1 raw(20),c2 blob,c3 char(20),c4 varchar(20),c5 integer,c6 real,c7 number,c8 date,c9 timestamp,c10 varbinary(20),c11 binary_uint32,c12 bigint,c13 image,c14 clob,c15 boolean);

Succeed.

SQL> insert into IREQ02350169CUI values('a111','b22','c33','d44',55,6,77,to_date('2015-7-18 11:42:56','yyyy-mm-dd hh24:mi:ss'), to_date('2019-7-18 11:42:56','yyyy-mm-dd hh24:mi:ss'),'a10',32,12,'a13','c14',0);

1 rows affected.

SQL> select to_blob(c1) from IREQ02350169CUI;

TO_BLOB(C1)                                                     
----------------------------------------------------------------
A111                                                            

1 rows fetched.

SQL> select to_blob(c2) from IREQ02350169CUI;

TO_BLOB(C2)                                                     
----------------------------------------------------------------
0B22                                                            

1 rows fetched.

SQL> select to_blob(c3) from IREQ02350169CUI;

CT-00105, Invalid format of hex
SQL> select to_blob(c4) from IREQ02350169CUI;

TO_BLOB(C4)                                                     
----------------------------------------------------------------
0D44                                                            

1 rows fetched.

SQL> select to_blob(c5) from IREQ02350169CUI;

CT-01303, Convert BINARY_INTEGER type to RAW type failed
SQL> select to_blob(c6) from IREQ02350169CUI;

CT-01303, Convert BINARY_DOUBLE type to RAW type failed
SQL> select to_blob(c7) from IREQ02350169CUI;

CT-01303, Convert NUMBER type to RAW type failed
SQL> select to_blob(c8) from IREQ02350169CUI;

CT-01303, Convert DATE type to RAW type failed
SQL> select to_blob(c9) from IREQ02350169CUI;

CT-01303, Convert TIMESTAMP type to RAW type failed
SQL> select to_blob(c10) from IREQ02350169CUI;

TO_BLOB(C10)                                                    
----------------------------------------------------------------
0A10                                                            

1 rows fetched.

SQL> select to_blob(c11) from IREQ02350169CUI;

CT-01303, Convert BINARY_UINT32 type to RAW type failed
SQL> select to_blob(c12) from IREQ02350169CUI;

CT-01303, Convert BINARY_BIGINT type to RAW type failed
SQL> select to_blob(c13) from IREQ02350169CUI;

CT-01303, Convert IMAGE type to RAW type failed
SQL> select to_blob(c14) from IREQ02350169CUI;

CT-01303, Convert CLOB type to RAW type failed
SQL> select to_blob(c15) from IREQ02350169CUI;

CT-01303, Convert BOOLEAN type to RAW type failed
SQL> drop table if exists IREQ02350169CUI;

Succeed.

SQL> 
SQL> --DTS2019071501106
SQL> drop table if exists test_DTS2019071501106;

Succeed.

SQL> create table test_DTS2019071501106(l date);

Succeed.

SQL> insert into test_DTS2019071501106 values('2018-10-10 00:00:00');

1 rows affected.

SQL> select * from test_DTS2019071501106;

L                     
----------------------
2018-10-10 00:00:00   

1 rows fetched.

SQL> commit;

Succeed.

SQL> SELECT TO_CHAR(NVL(l, ''), 'yyyy-mm-dd hh24:mi') as dynamicDate
  2 FROM test_DTS2019071501106
  3 where rownum < 10;

DYNAMICDATE                                     
------------------------------------------------
2018-10-10 00:00                                

1 rows fetched.

SQL> drop table if exists test_DTS2019071501106;

Succeed.

SQL> 
SQL> conn sys/Huawei@123@127.0.0.1:1611

connected.

SQL> drop user if exists cao_2 cascade;

Succeed.

SQL> create user cao_2 identified by Cantian_234;

Succeed.

SQL> grant create session,create table to cao_2;

Succeed.

SQL> grant EXECUTE on DBE_DIAGNOSE to cao_2;

Succeed.

SQL> conn cao_2/Cantian_234@127.0.0.1:1611

connected.

SQL> drop table if exists t_1;

Succeed.

SQL> create table t_1(id1 int,id2 int);

Succeed.

SQL> select DBE_DIAGNOSE.DBA_LISTCOLS('CAO_2','T_1','0,4');

CT-00102, [1:8]column id out of index,limits is 2
SQL> select DBE_DIAGNOSE.DBA_LISTCOLS('CAO_2','T_1','0,1');

DBE_DIAGNOSE.DBA_LISTCOLS('CAO_2','T_1','0,1')                  
----------------------------------------------------------------
ID1, ID2                                                        

1 rows fetched.

SQL> conn sys/Huawei@123@127.0.0.1:1611

connected.

SQL> drop user cao_2 cascade;

Succeed.

SQL> drop table if exists t_function_1;

Succeed.

SQL> drop table if exists t_function_2;

Succeed.

SQL> drop table if exists t_function_3;

Succeed.

SQL> drop table if exists t_function_4;

Succeed.

SQL> drop table if exists t_function_5;

Succeed.

SQL> drop table if exists t_function_6;

Succeed.

SQL> create table t_function_1(f0 bigint, f1 int, f2 double, f3 char(10), f4 varchar(10), f5 number(10,6), f6 date, f7 timestamp);

Succeed.

SQL> create table t_function_2(f0 bigint, f1 int, f2 double, f3 char(10), f4 varchar(10), f5 number(10,6), f6 date, f7 timestamp);

Succeed.

SQL> create table t_function_4(f0 blob, f1 clob, f2 binary(100), f3 raw(100));

Succeed.

SQL> create table t_function_5(f1 varchar(100));

Succeed.

SQL> create table t_function_6(f1 CHAR(32), f2 VARCHAR(32), leading VARCHAR(32), f3 clob);

Succeed.

SQL> insert into t_function_1(f0, f1, f2, f3, f4, f5, f6, f7) values(1, 1, 3.333, '4', '5asdf', 6.666666666, '2018-01-16 12:13:14', '2017-03-30 12:13:14.456');

1 rows affected.

SQL> insert into t_function_1(f0, f1, f2, f3, f4, f5, f6, f7) values(null, null, 2.22, '5', 'test', 87.223, null, '2018-02-28 12:13:14.456');

1 rows affected.

SQL> insert into t_function_1(f0, f1, f2, f3, f4, f5, f6, f7) values(1, 2, 1.112233, '3', 'nebulaisok', 998.22222, '2018-01-31 12:13:14', null);

1 rows affected.

SQL> insert into t_function_2(f0) values(1);

1 rows affected.

SQL> insert into t_function_4 values('abc', '1122', '12345', '23456');

1 rows affected.

SQL> insert into t_function_4 values('eefff', '3344', null, '5678');

1 rows affected.

SQL> insert into t_function_5 values('abcdefg');

1 rows affected.

SQL> insert into t_function_5 values(null);

1 rows affected.

SQL> insert into t_function_6 values('MMMMMMMMMMMMMMZenithMMMMMMMMMMMM', 'aa             Zenitha', '   Zenith aaa', '                                    Zenith                                        ');

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> ---nvl/nvl2
SQL> select nvl() from dual;

CT-00615, [1:8]Invalid argument number for NVL, min=2, max=2
SQL> select nvl(1) from dual;

CT-00615, [1:8]Invalid argument number for NVL, min=2, max=2
SQL> select nvl2() from dual;

CT-00615, [1:8]Invalid argument number for NVL2, min=3, max=3
SQL> select nvl2(1) from dual;

CT-00615, [1:8]Invalid argument number for NVL2, min=3, max=3
SQL> select nvl2(1, 2) from dual;

CT-00615, [1:8]Invalid argument number for NVL2, min=3, max=3
SQL> select nvl2(1, 2, 3, 4) from dual;

CT-00615, [1:8]Invalid argument number for NVL2, min=3, max=3
SQL> select f0,f1 from t_function_1 where f1 = nvl(2, (select min(f0) from t_function_1));

F0                   F1          
-------------------- ------------
1                    2           

1 rows fetched.

SQL> select f0,f1 from t_function_1 where f1 = nvl(null, (select min(f0) from t_function_1));

F0                   F1          
-------------------- ------------
1                    1           

1 rows fetched.

SQL> select f1, nvl(f1, 'nvl') from t_function_5 order by f1;

F1                                                               NVL(F1, 'NVL')                                                  
---------------------------------------------------------------- ----------------------------------------------------------------
abcdefg                                                          abcdefg                                                         
                                                                 nvl                                                             

2 rows fetched.

SQL> select f1, nvl2(f1, 'nvl2', 'nvl3') from t_function_5 order by f1;

F1                                                               NVL2(F1, 'NVL2', 'NVL3')
---------------------------------------------------------------- ------------------------
abcdefg                                                          nvl2                    
                                                                 nvl3                    

2 rows fetched.

SQL> 
SQL> select nvl(x, 2011-2011+2/3*4) from (select cast(null as binary_integer) x from dual union select 1/2.3333 from dual);

NVL(X, 2011-2011+2/3*4)                 
----------------------------------------
.428577551107872969613851626451806454378
2.66666666666667                        

2 rows fetched.

SQL> 
SQL> select nvl(123+null, systimestamp) from dual;

CT-00606, [1:8]Inconsistent datatypes, expected NUMBER - got TIMESTAMP_TZ
SQL> select nvl(123+null, 1/3.1415926) from dual;

NVL(123+NULL, 1/3.1415926)              
----------------------------------------
.318309891613572046229036826735586275572

1 rows fetched.

SQL> select nvl(123+null/3+4-7|2+3-1/2*3, 1/3.1415926) from dual;

NVL(123+NULL/3+4-7|2+3-1/2*3, 1/3.1415926)
------------------------------------------
0                                         

1 rows fetched.

SQL> select nvl(null|6622, 1/0.1415926) from dual;

NVL(NULL|6622, 1/0.1415926)
---------------------------
7                          

1 rows fetched.

SQL> select nvl(null + 1 + 3, 1/3.1415926) from dual;

NVL(NULL + 1 + 3, 1/3.1415926)          
----------------------------------------
.318309891613572046229036826735586275572

1 rows fetched.

SQL> select nvl(null + null, systimestamp) from dual;

CT-00606, [1:8]Inconsistent datatypes, expected NUMBER - got TIMESTAMP_TZ
SQL> select nvl(null*2+1-2/3, 2011-2011+2/3*4) as f from dual;

F                                       
----------------------------------------
2.66666666666667                        

1 rows fetched.

SQL> select nvl('', to_timestamp('2012-12-12 12:12:12.121212', 'yyyy-mm-dd hh24:mi:ss.ff')) + 1 from dual;

CT-00636, [1:88]Invalid number -- unexpected character
SQL> 
SQL> select timestampdiff(month, sysdate);

CT-00615, [1:8]Invalid argument number for TIMESTAMPDIFF, min=3, max=3
SQL> select timestampdiff(month1, sysdate, systimestamp);

CT-00614, [1:22]Parameter error: datetime unit expected
SQL> select timestampdiff();

CT-00615, [1:8]Invalid argument number for TIMESTAMPDIFF, min=3, max=3
SQL> select timestampdiff(month, dummy) from dual;

CT-00615, [1:8]Invalid argument number for TIMESTAMPDIFF, min=3, max=3
SQL> select timestampadd(month, sysdate);

CT-00614, [1:28]Parameter error: illegal function argument: NUMERIC argument expected - got DATE
SQL> select timestampadd(year to month, sysdate, systimestamp);

CT-00601, [1:26]Sql syntax error: ',' expected but to found
SQL> select timestampadd();

CT-00615, [1:8]Invalid argument number for TIMESTAMPADD, min=3, max=3
SQL> select timestampadd(month, dummy) from dual;

CT-00615, [1:8]Invalid argument number for TIMESTAMPADD, min=3, max=3
SQL> select timestampadd(month, dummy) from dual;

CT-00615, [1:8]Invalid argument number for TIMESTAMPADD, min=3, max=3
SQL> select timestampadd(month, 1, '19900101') from dual;

TIMESTAMPADD(MONTH, 1, '19900101')
----------------------------------
1990-02-01 00:00:00.000000        

1 rows fetched.

SQL> 
SQL> --- part 1
SQL> --- abs
SQL> select abs() from dual;

CT-00615, [1:8]Invalid argument number for ABS, min=1, max=1
SQL> select abs(1,2) from dual;

CT-00615, [1:8]Invalid argument number for ABS, min=1, max=1
SQL> select abs(-a) from dual;

CT-00601, [1:13]Sql syntax error: invalid column name 'A'
SQL> select abs('a') from dual;

CT-00636, [1:8]Invalid number -- unexpected character
SQL> select abs(f2) from t_function_1 order by f3;

ABS(F2)                                 
----------------------------------------
1.112233                                
3.333                                   
2.22                                    

3 rows fetched.

SQL> create table test_abs_1 as select abs(9999999999999999999999999999999999999999) c from dual;

Succeed.

SQL> create table test_abs_2 as select abs(-99) c from dual;

Succeed.

SQL> create table test_abs_3 as select abs('-99.99') c from dual;

Succeed.

SQL> desc test_abs_1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C                                            NUMBER                              

SQL> desc test_abs_2;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C                                            NUMBER                              

SQL> desc test_abs_3;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C                                            NUMBER                              

SQL> drop table test_abs_1;

Succeed.

SQL> drop table test_abs_2;

Succeed.

SQL> drop table test_abs_3;

Succeed.

SQL> 
SQL> --- ceil
SQL> select ceil(#) from dual;

CT-00601, [1:13]Sql syntax error: invalid column name '#'
SQL> select ceil(true) from dual;

CT-00614, [1:13]Parameter error: illegal function argument: NUMERIC argument expected - got BOOLEAN
SQL> select ceil(FALSE) from dual;

CT-00614, [1:13]Parameter error: illegal function argument: NUMERIC argument expected - got BOOLEAN
SQL> 
SQL> --- add_months
SQL> select add_months() from dual;

CT-00615, [1:8]Invalid argument number for ADD_MONTHS, min=2, max=2
SQL> select add_months(1) from dual;

CT-00615, [1:8]Invalid argument number for ADD_MONTHS, min=2, max=2
SQL> select add_months(1, 2, 3) from dual;

CT-00615, [1:8]Invalid argument number for ADD_MONTHS, min=2, max=2
SQL> select add_months(1, 2) from dual;

CT-00614, [1:19]Parameter error: illegal function argument: DATETIME argument expected - got BINARY_INTEGER
SQL> select add_months('2018-03-31 11:12:13', 1) from dual;

ADD_MONTHS('2018-03-31 11:12:13', 1)
------------------------------------
2018-04-30 11:12:13                 

1 rows fetched.

SQL> select add_months(to_date('2018-03-30 11:12:13','yyyy-mm-dd hh24:mi:ss'), 1000000) from dual;

CT-00659, [1:8]DATETIME out of range
SQL> select add_months(to_date('2018-02-29 11:12:13','yyyy-mm-dd hh24:mi:ss'), 1) from dual;

CT-00105, [1:19]Invalid format of datetime
SQL> select add_months(to_date('2018-02-29 11:12:13','yyyy-mm-dd hh24:mi:ss'), 0.33 + 1) from dual;

CT-00105, [1:19]Invalid format of datetime
SQL> select add_months(to_date('2018-03-30 11:12:13','yyyy-mm-dd hh24:mi:ss'), systimestamp) from dual;

CT-00614, [1:75]Parameter error: illegal function argument: NUMERIC argument expected - got TIMESTAMP_TZ
SQL> select add_months(to_date('2018-03-30 11:12:13','yyyy-mm-dd hh24:mi:ss'), 'abc') from dual;

CT-00636, [1:75]Invalid number -- unexpected character
SQL> 
SQL> --- bin2hex
SQL> select bin2hex() from dual;

CT-00615, [1:8]Invalid argument number for BIN2HEX, min=1, max=1
SQL> select bin2hex(1,2) from dual;

CT-00615, [1:8]Invalid argument number for BIN2HEX, min=1, max=1
SQL> select bin2hex(TYPE_ID2NAME('a')) from dual;

CT-00636, Invalid number -- unexpected character
SQL> select bin2hex(1) from dual;

CT-00614, [1:8]Parameter error: parameter is not string or binary type.
SQL> select bin2hex(f2) from t_function_4 order by f2;

BIN2HEX(F2)                                                     
----------------------------------------------------------------
0x31323334350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
                                                                

2 rows fetched.

SQL> 
SQL> --- bitand
SQL> select bitand() from dual;

CT-00615, [1:8]Invalid argument number for BITAND, min=2, max=2
SQL> select bitand(1) from dual;

CT-00615, [1:8]Invalid argument number for BITAND, min=2, max=2
SQL> select bitand(1,2,3) from dual;

CT-00615, [1:8]Invalid argument number for BITAND, min=2, max=2
SQL> select bitand(9223372036854775808, 2) from dual;

CT-00659, [1:15]BIGINT out of range
SQL> select bitand(1, -9223372036854775809) from dual;

CT-00659, [1:18]BIGINT out of range
SQL> select bitand('a', 2) from dual;

CT-00636, [1:15]Invalid number -- unexpected character
SQL> select bitand(1, 'b') from dual;

CT-00636, [1:18]Invalid number -- unexpected character
SQL> 
SQL> --- bitor
SQL> select bitor() from dual;

CT-00615, [1:8]Invalid argument number for BITOR, min=2, max=2
SQL> select bitor(1) from dual;

CT-00615, [1:8]Invalid argument number for BITOR, min=2, max=2
SQL> select bitor(1,2,3) from dual;

CT-00615, [1:8]Invalid argument number for BITOR, min=2, max=2
SQL> select bitor(null,2), bitor(1,null) from dual;

BITOR(NULL,2)        BITOR(1,NULL)       
-------------------- --------------------
                                         

1 rows fetched.

SQL> select bitor(9223372036854775808, 2) from dual;

CT-00659, [1:14]BIGINT out of range
SQL> select bitor(1, -9223372036854775809) from dual;

CT-00659, [1:17]BIGINT out of range
SQL> select bitor(9223372036854775807, 2) from dual;

BITOR(9223372036854775807, 2)
-----------------------------
9223372036854775807          

1 rows fetched.

SQL> select bitor(1, -9223372036854775808) from dual;

BITOR(1, -9223372036854775808)
------------------------------
-9223372036854775807          

1 rows fetched.

SQL> select bitor('a', 2) from dual;

CT-00636, [1:14]Invalid number -- unexpected character
SQL> select bitor(1, 'b') from dual;

CT-00636, [1:17]Invalid number -- unexpected character
SQL> select bitor(1, 2), bitor(1, -2), bitor(-1, 2), bitor(-1, -2) from dual;

BITOR(1, 2)          BITOR(1, -2)         BITOR(-1, 2)         BITOR(-1, -2)       
-------------------- -------------------- -------------------- --------------------
3                    -1                   -1                   -1                  

1 rows fetched.

SQL> select bitor(2,-2), bitor(2,2.999), bitor(2,-2.999), bitor(2,2.4), bitor(2,-2.4) from dual;

BITOR(2,-2)          BITOR(2,2.999)       BITOR(2,-2.999)      BITOR(2,2.4)         BITOR(2,-2.4)       
-------------------- -------------------- -------------------- -------------------- --------------------
-2                   2                    -2                   2                    -2                  

1 rows fetched.

SQL> 
SQL> --- bitxor
SQL> select bitxor() from dual;

CT-00615, [1:8]Invalid argument number for BITXOR, min=2, max=2
SQL> select bitxor(1) from dual;

CT-00615, [1:8]Invalid argument number for BITXOR, min=2, max=2
SQL> select bitxor(1,2,3) from dual;

CT-00615, [1:8]Invalid argument number for BITXOR, min=2, max=2
SQL> select bitxor(null,2), bitxor(1,null) from dual;

BITXOR(NULL,2)       BITXOR(1,NULL)      
-------------------- --------------------
                                         

1 rows fetched.

SQL> select bitxor(9223372036854775808, 2) from dual;

CT-00659, [1:15]BIGINT out of range
SQL> select bitxor(1, -9223372036854775809) from dual;

CT-00659, [1:18]BIGINT out of range
SQL> select bitxor(9223372036854775807, 2) from dual;

BITXOR(9223372036854775807, 2)
------------------------------
9223372036854775805           

1 rows fetched.

SQL> select bitxor(1, -9223372036854775808) from dual;

BITXOR(1, -9223372036854775808)
-------------------------------
-9223372036854775807           

1 rows fetched.

SQL> select bitxor('a', 2) from dual;

CT-00636, [1:15]Invalid number -- unexpected character
SQL> select bitxor(1, 'b') from dual;

CT-00636, [1:18]Invalid number -- unexpected character
SQL> select bitxor(1, 2), bitxor(1, -2), bitxor(-1, 2), bitxor(-1, -2) from dual;

BITXOR(1, 2)         BITXOR(1, -2)        BITXOR(-1, 2)        BITXOR(-1, -2)      
-------------------- -------------------- -------------------- --------------------
3                    -1                   -3                   1                   

1 rows fetched.

SQL> select bitxor(2,-2), bitxor(2,2.999), bitxor(2,-2.999), bitxor(2,2.4), bitxor(2,-2.4) from dual;

BITXOR(2,-2)         BITXOR(2,2.999)      BITXOR(2,-2.999)     BITXOR(2,2.4)        BITXOR(2,-2.4)      
-------------------- -------------------- -------------------- -------------------- --------------------
-4                   0                    -4                   0                    -4                  

1 rows fetched.

SQL> 
SQL> --- chr
SQL> select chr() from dual;

CT-00615, [1:8]Invalid argument number for CHR, min=1, max=1
SQL> select chr(1,2) from dual;

CT-00615, [1:8]Invalid argument number for CHR, min=1, max=1
SQL> select chr(9223372036854775808) from dual;

CT-00659, [1:12]INTEGER out of range
SQL> select chr(-1) from dual;

CT-00614, [1:12]Parameter error: argument value of the function must between [0, 127]
SQL> select chr(128) from dual;

CT-00614, [1:12]Parameter error: argument value of the function must between [0, 127]
SQL> 
SQL> --- sin
SQL> select sin(0) from dual;

SIN(0)                                  
----------------------------------------
0                                       

1 rows fetched.

SQL> select sin(1) from dual;

SIN(1)                                  
----------------------------------------
.841470984807896506652502321630298999623

1 rows fetched.

SQL> select sin(2) from dual;

SIN(2)                                  
----------------------------------------
.909297426825681695396019865911744842702

1 rows fetched.

SQL> select sin(4) from dual;

SIN(4)                                  
----------------------------------------
-.75680249530792825137263909451182909414

1 rows fetched.

SQL> select sin(5) from dual;

SIN(5)                                  
----------------------------------------
-.95892427466313846889315440615599397335

1 rows fetched.

SQL> select sin(3.1415926) from dual;

SIN(3.1415926)                          
----------------------------------------
5.35897932384626177328291865713765641E-8

1 rows fetched.

SQL> select sin(3.1415926535897932384626433832795028841) from dual;

SIN(3.1415926535897932384626433832795028841)
--------------------------------------------
-9.716939937500000000000000000000000E-38    

1 rows fetched.

SQL> select sin(3.14159265358979323846264338327950288419) from dual;

SIN(3.14159265358979323846264338327950288419)
---------------------------------------------
-7.169399375000000000000000000000000E-39     

1 rows fetched.

SQL> select sin(-1) from dual;

SIN(-1)                                 
----------------------------------------
-.84147098480789650665250232163029899962

1 rows fetched.

SQL> select sin(-3.1415926) from dual;

SIN(-3.1415926)                         
----------------------------------------
-5.3589793238462617732829186571376564E-8

1 rows fetched.

SQL> select sin(-10) from dual;

SIN(-10)                                
----------------------------------------
.544021110889369813404747661851377281684

1 rows fetched.

SQL> select sin(-20) from dual;

SIN(-20)                                
----------------------------------------
-.9129452507276276543760999838456823013 

1 rows fetched.

SQL> 
SQL> --- cos
SQL> select cos(1) from dual;

COS(1)                                  
----------------------------------------
.540302305868139717400936607442976603732

1 rows fetched.

SQL> select cos(2) from dual;

COS(2)                                  
----------------------------------------
-.41614683654714238699756822950076218977

1 rows fetched.

SQL> select cos(4) from dual;

COS(4)                                  
----------------------------------------
-.65364362086361191463916818309775038142

1 rows fetched.

SQL> select cos(5) from dual;

COS(5)                                  
----------------------------------------
.283662185463226264466639171513557308334

1 rows fetched.

SQL> select cos(3.1415926) from dual;

COS(3.1415926)                          
----------------------------------------
-.9999999999999985640670303294121180756 

1 rows fetched.

SQL> select cos(3.1415926535897932384626433832795028841) from dual;

COS(3.1415926535897932384626433832795028841)
--------------------------------------------
-1                                          

1 rows fetched.

SQL> select cos(3.14159265358979323846264338327950288419) from dual;

COS(3.14159265358979323846264338327950288419)
---------------------------------------------
-1                                           

1 rows fetched.

SQL> select cos(-1) from dual;

COS(-1)                                 
----------------------------------------
.540302305868139717400936607442976603732

1 rows fetched.

SQL> select cos(-3.1415926) from dual;

COS(-3.1415926)                         
----------------------------------------
-.9999999999999985640670303294121180756 

1 rows fetched.

SQL> select cos(-10) from dual;

COS(-10)                                
----------------------------------------
-.83907152907645245225886394782406483452

1 rows fetched.

SQL> select cos(-20) from dual;

COS(-20)                                
----------------------------------------
.408082061813391986062267860927644957099

1 rows fetched.

SQL> 
SQL> --- asin
SQL> select asin(-1.01) from dual;

CT-00614, [1:13]Parameter error: argument value of function ASIN must between [-1, 1]
SQL> select asin(-1) from dual;

ASIN(-1)                                
----------------------------------------
-1.5707963267948966192313216916397514421

1 rows fetched.

SQL> select asin(-0.7523472893457) from dual;

ASIN(-0.7523472893457)                  
----------------------------------------
-.85161802328377957932735759342020024673

1 rows fetched.

SQL> select asin(-0.5) from dual;

ASIN(-0.5)                              
----------------------------------------
-.52359877559829887307710723054658381403

1 rows fetched.

SQL> select asin(-0.1237832751932847) from dual;

ASIN(-0.1237832751932847)               
----------------------------------------
-.12410158224976507032132188260820240353

1 rows fetched.

SQL> select asin(0.3) from dual;

ASIN(0.3)                               
----------------------------------------
.304692654015397507972002961227529166955

1 rows fetched.

SQL> select asin(0.7523472893457) from dual;

ASIN(0.7523472893457)                   
----------------------------------------
.851618023283779579327357593420200246726

1 rows fetched.

SQL> select asin(1) from dual;

ASIN(1)                                 
----------------------------------------
1.5707963267948966192313216916397514421 

1 rows fetched.

SQL> select asin(1.000000000000000000001) from dual;

CT-00614, [1:13]Parameter error: argument value of function ASIN must between [-1, 1]
SQL> select asin(-1.00000000000000000000001) from dual;

CT-00614, [1:13]Parameter error: argument value of function ASIN must between [-1, 1]
SQL> select asin(2) from dual;

CT-00614, [1:13]Parameter error: argument value of function ASIN must between [-1, 1]
SQL> 
SQL> --- acos
SQL> select acos(-1.01) from dual;

CT-00614, [1:13]Parameter error: argument value of function ACOS must between [-1, 1]
SQL> select acos(1.000000000000000000001) from dual;

CT-00614, [1:13]Parameter error: argument value of function ACOS must between [-1, 1]
SQL> select acos(-1.00000000000000000000001) from dual;

CT-00614, [1:13]Parameter error: argument value of function ACOS must between [-1, 1]
SQL> select acos(2) from dual;

CT-00614, [1:13]Parameter error: argument value of function ACOS must between [-1, 1]
SQL> 
SQL> -- sign
SQL> select sign('-12ddd334') from dual;

CT-00636, [1:13]Invalid number -- unexpected character
SQL> select sign('12ddd334') from dual;

CT-00636, [1:13]Invalid number -- unexpected character
SQL> 
SQL> --- current_timestamp
SQL> select current_timestamp('a') from dual;

CT-00614, [1:8]Parameter error: integer argument required
SQL> select current_timestamp(-1) from dual;

CT-00601, [1:8]Sql syntax error: fraction must between 0 and 6. 
SQL> select current_timestamp(7) from dual;

CT-00601, [1:8]Sql syntax error: fraction must between 0 and 6. 
SQL> select current_timestamp(f1) from t_function_1;

CT-00614, [1:8]Parameter error: integer argument required
SQL> 
SQL> --- SYSTIMESTAMP
SQL> select SYSTIMESTAMP('a') from dual;

CT-00614, [1:8]Parameter error: integer argument required
SQL> select SYSTIMESTAMP(-1) from dual;

CT-00601, [1:8]Sql syntax error: fraction must between 0 and 6. 
SQL> select SYSTIMESTAMP(7) from dual;

CT-00601, [1:8]Sql syntax error: fraction must between 0 and 6. 
SQL> 
SQL> --- now
SQL> select now('a') from dual;

CT-00614, [1:8]Parameter error: integer argument required
SQL> select now(-1) from dual;

CT-00601, [1:8]Sql syntax error: fraction must between 0 and 6. 
SQL> select now(7) from dual;

CT-00601, [1:8]Sql syntax error: fraction must between 0 and 6. 
SQL> select now(f1) from t_function_1;

CT-00614, [1:8]Parameter error: integer argument required
SQL> 
SQL> --- decode
SQL> select decode(1,2) from dual;

CT-00615, [1:8]Invalid argument number for DECODE, min=3, max=256
SQL> select decode(1,'a','a') from dual;

CT-00636, [1:8]Invalid number -- unexpected character
SQL> 
SQL> drop table if exists t_decode1;

Succeed.

SQL> create table t_decode1(f1 bigint);

Succeed.

SQL> insert into t_decode1 values(460799988736);

1 rows affected.

SQL> commit;

Succeed.

SQL> select decode(f1, 0, 0, 888888888888) from t_decode1;

DECODE(F1, 0, 0, 888888888888)          
----------------------------------------
888888888888                            

1 rows fetched.

SQL> 
SQL> drop table if exists t_decode2;

Succeed.

SQL> create table t_decode2(f1 real, f2 number, f3 decimal);

Succeed.

SQL> insert into t_decode2 values(2.0e+128, 123.456, 456.78);

1 rows affected.

SQL> commit;

Succeed.

SQL> select decode(f1, 0, 123.456, 3.0e+128) from t_decode2;

DECODE(F1, 0, 123.456, 3.0E+128)
--------------------------------
3e+128                          

1 rows fetched.

SQL> select decode(f1, 0, 456.78, 3.0e+128) from t_decode2;

DECODE(F1, 0, 456.78, 3.0E+128)
-------------------------------
3e+128                         

1 rows fetched.

SQL> 
SQL> drop table if exists test_array;

Succeed.

SQL> create table test_array(f1 int[], f2 bigint[], f3 real[], f4 number[], f5 decimal[]);

Succeed.

SQL> insert into test_array values(array[1, 2], array[111111111111111111, 22222222222222222], array[2.0e+128, 3.0e+128], array[111.111, 222.222], array[11.11, 22.22]);

1 rows affected.

SQL> commit;

Succeed.

SQL> select decode(f2[1], 0, array[1,2], array[11111111111111111, 2222222222222222]) from test_array;

DECODE(F2[1], 0, ARRAY[1,2], ARRAY[11111111111111111, 2222222222
----------------------------------------------------------------
{11111111111111111,2222222222222222}                            

1 rows fetched.

SQL> select decode(f3[1], 0, array[111.111, 222.222], array[2.0e+129, 3.0e+129]) from test_array;

DECODE(F3[1], 0, ARRAY[111.111, 222.222], ARRAY[2.0E+129, 3.0E+1
----------------------------------------------------------------
{2e+129,3e+129}                                                 

1 rows fetched.

SQL> select decode(f3[1], 0, array[11.11, 22.22], array[2.0e+129, 3.0e+129]) from test_array;

DECODE(F3[1], 0, ARRAY[11.11, 22.22], ARRAY[2.0E+129, 3.0E+129])
----------------------------------------------------------------
{2e+129,3e+129}                                                 

1 rows fetched.

SQL> 
SQL> --- test type:
SQL> desc -q select decode(f1,0,0,888888888888) from t_decode1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
DECODE(F1,0,0,888888888888)                  NUMBER                              

SQL> desc -q select decode(f1, 0, 123.456, 3.0e+128) from t_decode2;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
DECODE(F1, 0, 123.456, 3.0E+128)             BINARY_DOUBLE                       

SQL> desc -q select decode(f1, 0, 456.78, 3.0e+128) from t_decode2;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
DECODE(F1, 0, 456.78, 3.0E+128)              BINARY_DOUBLE                       

SQL> drop table if exists t_decode1;

Succeed.

SQL> drop table if exists t_decode2;

Succeed.

SQL> 
SQL> desc -q select decode(f2[1], 0, array[1,2], array[11111111111111111, 2222222222222222]) from test_array;

Name                                                                Null?    Type                                
------------------------------------------------------------------- -------- ------------------------------------
DECODE(F2[1], 0, ARRAY[1,2], ARRAY[11111111111111111, 2222222222             NUMBER[]                            

SQL> desc -q select decode(f3[1], 0, array[111.111, 222.222], array[2.0e+129, 3.0e+129]) from test_array;

Name                                                                Null?    Type                                
------------------------------------------------------------------- -------- ------------------------------------
DECODE(F3[1], 0, ARRAY[111.111, 222.222], ARRAY[2.0E+129, 3.0E+1             BINARY_DOUBLE[]                     

SQL> desc -q select decode(f3[1], 0, array[11.11, 22.22], array[2.0e+129, 3.0e+129]) from test_array;

Name                                                                Null?    Type                                
------------------------------------------------------------------- -------- ------------------------------------
DECODE(F3[1], 0, ARRAY[11.11, 22.22], ARRAY[2.0E+129, 3.0E+129])             BINARY_DOUBLE[]                     

SQL> drop table if exists test_array;

Succeed.

SQL> 
SQL> desc -q select decode(1,2) from dual;

CT-00615, [1:8]Invalid argument number for DECODE, min=3, max=256

SQL> desc -q select decode(null,1,2) a, decode(1,null,1) b, decode(1,null,2,3) c, decode(1,null,2,null) d from dual;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
A                                            BINARY_INTEGER                      
B                                            BINARY_INTEGER                      
C                                            BINARY_INTEGER                      
D                                            BINARY_INTEGER                      

SQL> desc -q select decode(1,1,1),decode(1,2,2),decode(1,2,2,3),decode(1,2,2,3,4) from dual;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
DECODE(1,1,1)                                BINARY_INTEGER                      
DECODE(1,2,2)                                BINARY_INTEGER                      
DECODE(1,2,2,3)                              BINARY_INTEGER                      
DECODE(1,2,2,3,4)                            BINARY_INTEGER                      

SQL> desc -q select decode(1,'a','a') from dual;

CT-00636, [1:8]Invalid number -- unexpected character

SQL> desc -q select decode(1,2, 321, 3, 123) a, decode(1,2, 'abc', 3, 123) b, decode(1,2, 123, 3, 'abc') c, decode(1,2, sysdate, 3, to_date('2222-11-11', 'yyyy-MM-dd')) d, decode(1, 2, hextoraw('123'), 1, '321') e from dual;   --oracle:number,varchar,number,date,raw(2)

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
A                                            BINARY_INTEGER                      
B                                            VARCHAR                             
C                                            VARCHAR                             
D                                            DATE                                
E                                            RAW(2)                              

SQL> --- error
SQL> desc -q select decode(1,2, to_date('1111-11-11', 'yyyy-MM-dd'), 3, 123) a from dual;

CT-00606, [1:8]Inconsistent datatypes, expected DATE - got BINARY_INTEGER

SQL> desc -q select decode(1,2, 123, 3, to_date('1111-11-11', 'yyyy-MM-dd')) a from dual;

CT-00606, [1:8]Inconsistent datatypes, expected BINARY_INTEGER - got DATE

SQL> --- DTS:DTS2018110209708
SQL> drop table if exists t_abs ;

Succeed.

SQL> create table t_abs (c1 varbinary(12));

Succeed.

SQL> insert into t_abs values ('abccdddddddd');

1 rows affected.

SQL> commit;

Succeed.

SQL> desc -q select DECODE(c1,'abccdddddddd',21346532346562535424546573214235672134653234656253542454657321423567,1) from t_abs order by 1;

Name                                                                Null?    Type                                
------------------------------------------------------------------- -------- ------------------------------------
DECODE(C1,'ABCCDDDDDDDD',213465323465625354245465732142356721346             NUMBER                              

SQL> select DECODE(c1,'abccdddddddd',21346532346562535424546573214235672134653234656253542454657321423567,1) from t_abs order by 1;

DECODE(C1,'ABCCDDDDDDDD',213465323465625354245465732142356721346
----------------------------------------------------------------
2.1346532346562535424546573214235672E+67                        

1 rows fetched.

SQL> select DECODE(cast(c1 as varbinary(256)),'abccdddddddd',21346532346562535424546573214235672134653234656253542454657321423567,1) from t_abs order by 1;

DECODE(CAST(C1 AS VARBINARY(256)),'ABCCDDDDDDDD',213465323465625
----------------------------------------------------------------
2.1346532346562535424546573214235672E+67                        

1 rows fetched.

SQL> --- DTS:DTS2019011710060
SQL> drop table if exists decode_ts;

Succeed.

SQL> create table decode_ts (f1 timestamp);

Succeed.

SQL> insert into decode_ts values ('2019-01-25 17:34:25.123456');

1 rows affected.

SQL> commit;

Succeed.

SQL> select DECODE(f1,f1,f1), f1 from decode_ts;

DECODE(F1,F1,F1)                 F1                              
-------------------------------- --------------------------------
2019-01-25 17:34:25.123456       2019-01-25 17:34:25.123456      

1 rows fetched.

SQL> desc -q select DECODE(1,1,f1) from decode_ts;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
DECODE(1,1,F1)                               TIMESTAMP(6)                        

SQL> desc -q select f1 from decode_ts;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
F1                                           TIMESTAMP(6)                        

SQL> desc -q select decode(6, 1, systimestamp(1), 6,  systimestamp(3), 2, systimestamp(5), 3, NULL, NULL) X from dual;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
X                                            TIMESTAMP(1) WITH TIME ZONE         

SQL> desc -q select decode(3, 1, systimestamp(1), 6,  systimestamp(3), 2, systimestamp(5), 3, NULL, NULL) X from dual;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
X                                            TIMESTAMP(1) WITH TIME ZONE         

SQL> desc -q select decode(2, 1, NULL, 6,  systimestamp(3), 2, systimestamp(5), 3, systimestamp(1), NULL) X from dual;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
X                                            VARCHAR(48 BYTE)                    

SQL> 
SQL> drop table if exists diff_type_t;

Succeed.

SQL> create table diff_type_t(c_int int, c_uint32 binary_uint32, c_bigint bigint, c_bool boolean, c_number number(12), c_decimal decimal(10,3), c_real real, c_float float, 
  2                          c_char char(15), c_varchar varchar(10), c_binary binary(10), c_varbinary varbinary(10), c_raw raw(10), c_clob clob, c_blob blob, c_image image,
  3                          c_date date, c_timestamp timestamp(6), c_timestamp_tz timestamp(6) with time zone, c_timestamp_ltz timestamp(6) with local time zone, 
  4                          c_interval_ds interval day(7) to second, c_interval_ym interval year(4) to month, c_int_array int[], c_str_array varchar(20)[]);

Succeed.

SQL> insert into diff_type_t values(1,1,100000,true,12,20.333,5.6,6.6,'1111','2222','100','101','102','103','104','105', '1999-09-27','2000-01-01 12:59:59.999999',
  2 '2021-04-08 07:00:00.000000 +04:00', '2021-04-08 14:36:25.046731', '123 9:20:27', '2020-10', array[1,2,3], array['1','a','b']);

1 rows affected.

SQL> insert into diff_type_t values(2,2,200000,false,22,40.666,7.8,8.8,'aaaa','bbbb','200','201','202','203','204','205', '2000-09-27','2001-01-01 12:59:59.999999',
  2 '2022-04-08 07:00:00.000000 +04:00', '2022-04-08 14:36:25.046731', '234 9:20:27', '2020-11', array[4,5,6], array['2','c','d']);

1 rows affected.

SQL> 
SQL> desc -q select decode(c_int, 1, c_int, 2, '123.456') as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           VARCHAR(11 BYTE)                    

SQL> desc -q select decode(c_int, 1, c_int, 2, c_varchar) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           VARCHAR(11 BYTE)                    

SQL> desc -q select decode(c_int, 1, c_char, 2, c_varchar) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           VARCHAR(15 BYTE)                    

SQL> desc -q select decode(c_int, 1, c_char, 2, cast('www' as char(5))) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           VARCHAR(15 BYTE)                    

SQL> 
SQL> desc -q select decode(c_int, 1, c_number, 2, c_real) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           BINARY_DOUBLE                       

SQL> desc -q select decode(c_int, 1, c_bigint, 2, c_real) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           BINARY_DOUBLE                       

SQL> desc -q select decode(c_int, 1, c_real, 2, c_int) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           BINARY_DOUBLE                       

SQL> 
SQL> desc -q select decode(c_int, 1, c_date, 2, c_timestamp) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           DATE                                

SQL> -- truncate c_timestamp
SQL> select decode(c_int, 1, c_date, 2, c_timestamp) as c1 from diff_type_t;

C1                    
----------------------
1999-09-27 00:00:00   
2001-01-01 12:59:59   

2 rows fetched.

SQL> desc -q select decode(c_int, 1, c_timestamp, 2, c_date) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           TIMESTAMP(6)                        

SQL> desc -q select decode(c_int, 1, c_timestamp_tz, 2, c_timestamp) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           TIMESTAMP(6) WITH TIME ZONE         

SQL> desc -q select decode(c_int, 1, c_timestamp, 2, c_timestamp_tz) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           TIMESTAMP(6)                        

SQL> -- truncate c_timestamp_tz
SQL> select decode(c_int, 1, c_timestamp, 2, c_timestamp_tz) as c1 from diff_type_t;

C1                              
--------------------------------
2000-01-01 12:59:59.999999      
2022-04-08 07:00:00.000000      

2 rows fetched.

SQL> desc -q select decode(c_int, 1, c_timestamp_tz, 2, c_timestamp_ltz) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           TIMESTAMP(6) WITH TIME ZONE         

SQL> desc -q select decode(c_int, 1, c_timestamp_ltz, 2, c_timestamp_tz) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           TIMESTAMP(6) WITH LOCAL TIME ZONE   

SQL> select decode(c_int, 1, c_timestamp_ltz, 2, c_timestamp_tz) as c1 from diff_type_t;

C1                              
--------------------------------
2021-04-08 14:36:25.046731      
2022-04-08 11:00:00.000000      

2 rows fetched.

SQL> 
SQL> desc -q select decode(c_int, 1, c_interval_ds, 2, c_varchar) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           INTERVAL DAY(7) TO SECOND(6)        

SQL> desc -q select decode(c_int, 1, c_interval_ds, 2, '123 11:11:11') as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           INTERVAL DAY(7) TO SECOND(6)        

SQL> desc -q select decode(c_int, 1, c_varchar, 2, c_interval_ds) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           VARCHAR(24 BYTE)                    

SQL> desc -q select decode(c_int, 1, c_interval_ds, 2, '123 11:11:11') as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           INTERVAL DAY(7) TO SECOND(6)        

SQL> desc -q select decode(c_int, 1, c_interval_ym, 2, c_varchar) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           INTERVAL YEAR(4) TO MONTH           

SQL> desc -q select decode(c_int, 1, c_interval_ym, 2, '10-11') as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           INTERVAL YEAR(4) TO MONTH           

SQL> desc -q select decode(c_int, 1, c_varchar, 2, c_interval_ym) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           VARCHAR(10 BYTE)                    

SQL> 
SQL> desc -q select decode(c_int, 1, c_clob, 2, c_int) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           CLOB                                

SQL> desc -q select decode(c_int, 1, c_int, 2, c_clob) as c1 from diff_type_t;

CT-00606, [1:8]Inconsistent datatypes, expected BINARY_INTEGER - got CLOB

SQL> desc -q select decode(c_int, 1, c_clob, 2, c_char) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           CLOB                                

SQL> desc -q select decode(c_int, 1, c_char, 2, c_clob) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           VARCHAR(65534 BYTE)                 

SQL> desc -q select decode(c_int, 1, c_image, 2, c_clob) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           IMAGE                               

SQL> desc -q select decode(c_int, 1, c_clob, 2, c_image) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           CLOB                                

SQL> desc -q select decode(c_int, 1, c_clob, 2, c_raw) as c1 from diff_type_t;

CT-00606, [1:8]Inconsistent datatypes, expected CLOB - got RAW

SQL> desc -q select decode(c_int, 1, c_clob, 2, c_blob) as c1 from diff_type_t;

CT-00606, [1:8]Inconsistent datatypes, expected CLOB - got BLOB

SQL> desc -q select decode(c_int, 1, c_raw, 2, c_blob) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           RAW(65534)                          

SQL> 
SQL> desc -q select decode(c_int, 1, c_binary, 2, c_varbinary) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           VARBINARY(10)                       

SQL> desc -q select decode(c_int, 1, c_binary, 2, cast('1112' as binary(5))) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           VARBINARY(10)                       

SQL> desc -q select decode(c_int, 1, c_bool, 2, c_int) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           BOOLEAN                             

SQL> desc -q select decode(c_int, 1, c_int, 2, c_bool) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           BINARY_INTEGER                      

SQL> desc -q select decode(c_int, 1, c_varchar, 2, c_bool) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           VARCHAR(10 BYTE)                    

SQL> 
SQL> desc -q select decode(c_int, 1, c_int_array, 2, c_int) as c1 from diff_type_t;

CT-00606, [1:41]Inconsistent datatypes, expected ARRAY - got BINARY_INTEGER

SQL> desc -q select decode(c_int, 1, c_int_array[1], 2, c_int) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           BINARY_INTEGER                      

SQL> desc -q select decode(c_int, 1, c_int_array, 2, array['1', '2']) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           VARCHAR(11 BYTE)[]                  

SQL> desc -q select decode(c_int, 1, c_int_array, 2, c_str_array[2]) as c1 from diff_type_t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C1                                           BINARY_INTEGER[]                    

SQL> 
SQL> drop table diff_type_t;

Succeed.

SQL> 
SQL> --- floor
SQL> select floor() from dual;

CT-00615, [1:8]Invalid argument number for FLOOR, min=1, max=1
SQL> select floor(1, 2) from dual;

CT-00615, [1:8]Invalid argument number for FLOOR, min=1, max=1
SQL> select floor('a') from dual;

CT-00636, [1:8]Invalid number -- unexpected character
SQL> 
SQL> --- hex2bin/hex2raw
SQL> select hex2bin() from dual;

CT-00615, [1:8]Invalid argument number for HEX2BIN, min=1, max=1
SQL> select hex2bin(1, 2) from dual;

CT-00615, [1:8]Invalid argument number for HEX2BIN, min=1, max=1
SQL> select hex2bin(1) from dual;

CT-00614, [1:8]Parameter error: the argument of the function must be a string variant.
SQL> select hex2bin('0') from dual;

CT-00635, [1:8]Value error: the argument of the function is not a valid hex string.
SQL> select hex2bin('0x') from dual;

CT-00105, [1:8]Invalid format of hex
SQL> select hex2bin('0x1') from dual;

HEX2BIN('0X1')                                                  
----------------------------------------------------------------
                                                               

1 rows fetched.

SQL> select hex2bin('0x112233') from dual;

HEX2BIN('0X112233')                                             
----------------------------------------------------------------
"3                                                             

1 rows fetched.

SQL> select hextoraw() from dual;

CT-00615, [1:8]Invalid argument number for HEXTORAW, min=1, max=1
SQL> select hextoraw(1, 2) from dual;

CT-00615, [1:8]Invalid argument number for HEXTORAW, min=1, max=1
SQL> select hextoraw('0x112233') from dual;

CT-00105, [1:8]Invalid format of hex
SQL> 
SQL> --DTS2018091305216
SQL> SELECT BIN2HEX(HEX2BIN('06937110C9AD368DA2190581887C58A7')) FROM DUAL;  --invalid argument

CT-00635, [1:16]Value error: the argument of the function is not a valid hex string.
SQL> SELECT BIN2HEX(HEX2BIN('0X6937110C9AD368DA2190581887C58A7')) FROM DUAL;

BIN2HEX(HEX2BIN('0X6937110C9AD368DA2190581887C58A7'))
-----------------------------------------------------
0x06937110C9AD368DA2190581887C58A7                   

1 rows fetched.

SQL> SELECT BIN2HEX(HEXTORAW('06937110C9AD368DA2190581887C58A7')) FROM DUAL;

BIN2HEX(HEXTORAW('06937110C9AD368DA2190581887C58A7'))
-----------------------------------------------------
0x06937110C9AD368DA2190581887C58A7                   

1 rows fetched.

SQL> 
SQL> --- rawtohew
SQL> select rawtohex() from dual;

CT-00615, [1:8]Invalid argument number for RAWTOHEX, min=1, max=1
SQL> select rawtohex(1, 2) from dual;

CT-00615, [1:8]Invalid argument number for RAWTOHEX, min=1, max=1
SQL> select rawtohex(f3) from t_function_4;

RAWTOHEX(F3)                                                    
----------------------------------------------------------------
023456                                                          
5678                                                            

2 rows fetched.

SQL> 
SQL> --- to_char
SQL> select to_char() from dual;

CT-00615, [1:8]Invalid argument number for TO_CHAR, min=1, max=2
SQL> select to_char(1,2,3) from dual;

CT-00615, [1:8]Invalid argument number for TO_CHAR, min=1, max=2
SQL> select to_char(1, f1) from t_function_4;

CT-00614, [1:19]Parameter error: illegal function argument: string argument expected - got CLOB
SQL> select to_char(sysdate, 'abc') from dual;

CT-00105, Invalid format of datetime
SQL> select to_char(f1),to_char(f2),to_char(f3),to_char(f4),to_char(f5),to_char(f6),to_char(f7) from t_function_1 order by f3;

TO_CHAR(F1) TO_CHAR(F2)              TO_CHAR(F3) TO_CHAR(F4) TO_CHAR(F5)                                                      TO_CHAR(F6)                                      TO_CHAR(F7)                                     
----------- ------------------------ ----------- ----------- ---------------------------------------------------------------- ------------------------------------------------ ------------------------------------------------
2           1.112233                 3           nebulaisok  998.22222                                                        2018-01-31 12:13:14                                                                              
1           3.333                    4           5asdf       6.666667                                                         2018-01-16 12:13:14                              2017-03-30 12:13:14.456000                      
            2.22                     5           test        87.223                                                                                                            2018-02-28 12:13:14.456000                      

3 rows fetched.

SQL> select to_char(date '1990-01-01', 'RM') FROM DUAL;

TO_CHAR(DATE '1990-01-01', 'RM')                
------------------------------------------------
I                                               

1 rows fetched.

SQL> select to_char(date '1990-02-01', 'RM') FROM DUAL;

TO_CHAR(DATE '1990-02-01', 'RM')                
------------------------------------------------
II                                              

1 rows fetched.

SQL> select to_char(date '1990-03-01', 'RM') FROM DUAL;

TO_CHAR(DATE '1990-03-01', 'RM')                
------------------------------------------------
III                                             

1 rows fetched.

SQL> select to_char(date '1990-04-01', 'RM') FROM DUAL;

TO_CHAR(DATE '1990-04-01', 'RM')                
------------------------------------------------
IV                                              

1 rows fetched.

SQL> select to_char(date '1990-05-01', 'RM') FROM DUAL;

TO_CHAR(DATE '1990-05-01', 'RM')                
------------------------------------------------
V                                               

1 rows fetched.

SQL> select to_char(date '1990-06-01', 'RM') FROM DUAL;

TO_CHAR(DATE '1990-06-01', 'RM')                
------------------------------------------------
VI                                              

1 rows fetched.

SQL> select to_char(date '1990-07-01', 'RM') FROM DUAL;

TO_CHAR(DATE '1990-07-01', 'RM')                
------------------------------------------------
VII                                             

1 rows fetched.

SQL> select to_char(date '1990-08-01', 'RM') FROM DUAL;

TO_CHAR(DATE '1990-08-01', 'RM')                
------------------------------------------------
VIII                                            

1 rows fetched.

SQL> select to_char(date '1990-09-01', 'RM') FROM DUAL;

TO_CHAR(DATE '1990-09-01', 'RM')                
------------------------------------------------
IX                                              

1 rows fetched.

SQL> select to_char(date '1990-10-01', 'RM') FROM DUAL;

TO_CHAR(DATE '1990-10-01', 'RM')                
------------------------------------------------
X                                               

1 rows fetched.

SQL> select to_char(date '1990-11-01', 'RM') FROM DUAL;

TO_CHAR(DATE '1990-11-01', 'RM')                
------------------------------------------------
XI                                              

1 rows fetched.

SQL> select to_char(date '1990-12-01', 'RM') FROM DUAL;

TO_CHAR(DATE '1990-12-01', 'RM')                
------------------------------------------------
XII                                             

1 rows fetched.

SQL> select to_char(TIMESTAMP '1990-02-01 01:01:01', 'rm') FROM DUAL;

TO_CHAR(TIMESTAMP '1990-02-01 01:01:01', 'RM')  
------------------------------------------------
II                                              

1 rows fetched.

SQL> select to_char(array[convert('1', uint), convert('2', uint)]) from sys_dummy;

TO_CHAR(ARRAY[CONVERT('1', UINT), CONVERT('2', UINT)])
------------------------------------------------------
{1,2}                                                 

1 rows fetched.

SQL> select to_char(array[true,false]) from sys_dummy;

TO_CHAR(ARRAY[TRUE,FALSE])
--------------------------
{TRUE,FALSE}              

1 rows fetched.

SQL> select to_char(array[to_bigint('1245'), to_bigint('5678')]) from sys_dummy;

TO_CHAR(ARRAY[TO_BIGINT('1245'), TO_BIGINT('5678')])
----------------------------------------------------
{1245,5678}                                         

1 rows fetched.

SQL> select to_char(array[convert('123.456', real), convert('456.789', real)]) from sys_dummy;

TO_CHAR(ARRAY[CONVERT('123.456', REAL), CONVERT('456.789', REAL)
----------------------------------------------------------------
{123.456,456.789}                                               

1 rows fetched.

SQL> select to_char(array[to_number('123.500', '000.0000'), to_number('00FFFFFF', '0000000X')]) from sys_dummy;

TO_CHAR(ARRAY[TO_NUMBER('123.500', '000.0000'), TO_NUMBER('00FFF
----------------------------------------------------------------
{123.5,16777215}                                                

1 rows fetched.

SQL> select to_char(array[to_date('2018-06-28 13:14:15', 'YYYY-MM-DD HH24:MI:SS:FF'), to_date('2020-09-21 13:14:15', 'YYYY-MM-DD HH24:MI:SS:FF')]) from sys_dummy;

TO_CHAR(ARRAY[TO_DATE('2018-06-28 13:14:15', 'YYYY-MM-DD HH24:MI
----------------------------------------------------------------
{2018-06-28 13:14:15,2020-09-21 13:14:15}                       

1 rows fetched.

SQL> select to_char(array[to_timestamp('2017-09-11 23:45:59.44', 'YYYY-MM-DD HH24:MI:SSXFF6'), to_timestamp('2020-09-21 23:45:59.44', 'YYYY-MM-DD HH24:MI:SSXFF6')]) from sys_dummy;

TO_CHAR(ARRAY[TO_TIMESTAMP('2017-09-11 23:45:59.44', 'YYYY-MM-DD
----------------------------------------------------------------
{2017-09-11 23:45:59.440000,2020-09-21 23:45:59.440000}         

1 rows fetched.

SQL> select to_char(array[cast('2020-09-21 17:24:37.444569 +08:00' as timestamp with time zone)]) from sys_dummy;

TO_CHAR(ARRAY[CAST('2020-09-21 17:24:37.444569 +08:00' AS TIMEST
----------------------------------------------------------------
{2020-09-21 17:24:37.444569 +08:00}                             

1 rows fetched.

SQL> select to_char(array[cast('2020-09-21 17:24:37.444569' as timestamp with local time zone)]) from sys_dummy;

TO_CHAR(ARRAY[CAST('2020-09-21 17:24:37.444569' AS TIMESTAMP WIT
----------------------------------------------------------------
{2020-09-21 17:24:37.444569}                                    

1 rows fetched.

SQL> select to_char(array[numtodsinterval(3.1425926535897932384626, 'DAY'), numtodsinterval(3.1425926535897932384626, 'MINUTE')]) from sys_dummy;

TO_CHAR(ARRAY[NUMTODSINTERVAL(3.1425926535897932384626, 'DAY'), 
----------------------------------------------------------------
{+03 03:25:20.005270,+00 00:03:08.555559}                       

1 rows fetched.

SQL> select to_char(array[numtoyminterval(9999.9, 'year'), numtoyminterval(99999.9, 'month')]) from sys_dummy;

TO_CHAR(ARRAY[NUMTOYMINTERVAL(9999.9, 'YEAR'), NUMTOYMINTERVAL(9
----------------------------------------------------------------
{+9999-11,+8333-04}                                             

1 rows fetched.

SQL> 
SQL> -- to_number
SQL> select to_number(-'000133', '000xXX') from dual;

CT-00636, [1:18]Invalid number 
SQL> select to_number(-'000Eff', '000xXX') from dual;

CT-00636, [1:18]Invalid number -- unexpected character in exponent
SQL> select to_number('l000133', '000xXX') from dual;

CT-00636, [1:18]Invalid number 
SQL> select to_number('133', '000xXX') from dual;

CT-00636, [1:18]Invalid number 
SQL> select to_number('133', '00000') from dual;

CT-00636, [1:8]Invalid number 
SQL> select to_number('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFfffffFFFFF', 'xxxxxXXXXXxxXXXXXxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx') from dual;

TO_NUMBER('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF', '
----------------------------------------------------------------
1.0043362776618689222137263077132266E+59                        

1 rows fetched.

SQL> select to_number('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFfffffFFFFFEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE', 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXxxxxxXXXXXxxXXXXXxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxXxxx') from dual;

TO_NUMBER('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEEE
----------------------------------------------------------------
3.757668132438133164623168954862939E+109                        

1 rows fetched.

SQL> 
SQL> --select * from dual where rowid in (to_char('000863846400000'), to_char('000863641700000'), to_char('000863641700000'), to_char('000863641700000'), to_char('000863846400000'), to_char('000863641800000'), to_char('000863642700000'));
SQL> --select rowid from dual where rowid = to_char('000863846400000') or rowid = to_char('000863641800000');
SQL> select rowid from dual where rowid = to_char('000863846400000') or rowid = to_char('000863641800000') or 1=0;

CT-00639, The row ID was invalid
SQL> --- to_date
SQL> select to_date() from dual;

CT-00615, [1:8]Invalid argument number for TO_DATE, min=1, max=2
SQL> select to_date(1, 2, 3) from dual;

CT-00615, [1:8]Invalid argument number for TO_DATE, min=1, max=2
SQL> --select to_date(1, 'YYYY-MM-DD') from dual;
SQL> select to_date('2018-01-20', 2) from dual;

CT-00614, [1:30]Parameter error: string argument expected
SQL> select to_date('2018-01-20') from dual;

TO_DATE('2018-01-20') 
----------------------
2018-01-20 00:00:00   

1 rows fetched.

SQL> select to_date('2018-01-20 12:13:14') from dual;

TO_DATE('2018-01-20 12:13:14')
------------------------------
2018-01-20 12:13:14           

1 rows fetched.

SQL> 
SQL> --- to_timestamp
SQL> select to_timestamp() from dual;

CT-00615, [1:8]Invalid argument number for TO_TIMESTAMP, min=1, max=2
SQL> select to_timestamp(1,2,3) from dual;

CT-00615, [1:8]Invalid argument number for TO_TIMESTAMP, min=1, max=2
SQL> select to_timestamp(1, 'YYYY-MM-DD') from dual;

CT-00614, [1:21]Parameter error: string argument expected
SQL> select to_timestamp('2018-01-20', 2) from dual;

CT-00614, [1:35]Parameter error: string argument expected
SQL> select to_timestamp('2290-09-12', 'YYYY-MM-DD') from dual;

TO_TIMESTAMP('2290-09-12', 'YYYY-MM-DD')
----------------------------------------
2290-09-12 00:00:00.000000              

1 rows fetched.

SQL> select to_timestamp('2290-09-12', 'YYYY-MM-DD') from dual;

TO_TIMESTAMP('2290-09-12', 'YYYY-MM-DD')
----------------------------------------
2290-09-12 00:00:00.000000              

1 rows fetched.

SQL> select to_timestamp('2018-01-20') from dual;

TO_TIMESTAMP('2018-01-20')      
--------------------------------
2018-01-20 00:00:00.000000      

1 rows fetched.

SQL> select to_timestamp('2018-01-20 12:13:14.123456') from dual;

TO_TIMESTAMP('2018-01-20 12:13:14.123456')
------------------------------------------
2018-01-20 12:13:14.123456                

1 rows fetched.

SQL> 
SQL> --- avg count max min sum
SQL> select count() from dual;

CT-00615, [1:8]Invalid argument number for COUNT, min=1, max=1
SQL> select count(1, 2) from dual;

CT-00615, [1:8]Invalid argument number for COUNT, min=1, max=1
SQL> select count(dual.*) from dual;

CT-00614, [1:14]Parameter error: user.table.column or table.column or column is invalid
SQL> select sum(1) from dual;

SUM(1)              
--------------------
1                   

1 rows fetched.

SQL> select avg(f0), avg(f1), avg(f2), avg(f5) from t_function_1;

AVG(F0)                                  AVG(F1)                                  AVG(F2)              AVG(F5)                                 
---------------------------------------- ---------------------------------------- -------------------- ----------------------------------------
1                                        1.5                                      2.22174433333333     364.037295666666666666666666666666666667

1 rows fetched.

SQL> select avg(f0+f1+f2) from t_function_1;

AVG(F0+F1+F2)       
--------------------
4.7226165           

1 rows fetched.

SQL> select avg(f0,f1) from t_function_1;

CT-00615, [1:8]Invalid argument number for AVG, min=1, max=1
SQL> select avg(f3) from t_function_1;

AVG(F3)                                 
----------------------------------------
4                                       

1 rows fetched.

SQL> select avg(f4) from t_function_1;

CT-00636, Invalid number -- unexpected character
SQL> select sum(f0), min(f1), count(f2), avg(f5), max(f1) from t_function_1;

SUM(F0)                                  MIN(F1)      COUNT(F2)            AVG(F5)                                  MAX(F1)     
---------------------------------------- ------------ -------------------- ---------------------------------------- ------------
2                                        1            3                    364.037295666666666666666666666666666667 2           

1 rows fetched.

SQL> select sum(f0+f1+f2) from t_function_1;

SUM(F0+F1+F2)       
--------------------
9.445233            

1 rows fetched.

SQL> select sum(f0,f1) from t_function_1;

CT-00615, [1:8]Invalid argument number for SUM, min=1, max=1
SQL> select sum(f3) from t_function_1;

SUM(F3)                                 
----------------------------------------
12                                      

1 rows fetched.

SQL> select sum(f4) from t_function_1;

CT-00636, Invalid number -- unexpected character
SQL> select sum(*) from t_function_1;

CT-00601, [1:12]Sql syntax error: unexcpected '*'
SQL> select avg(*) from t_function_1;

CT-00601, [1:12]Sql syntax error: unexcpected '*'
SQL> select min(*) from t_function_1;

CT-00601, [1:12]Sql syntax error: unexcpected '*'
SQL> select max(*) from t_function_1;

CT-00601, [1:12]Sql syntax error: unexcpected '*'
SQL> select max(f1) from t_function_1;

MAX(F1)     
------------
2           

1 rows fetched.

SQL> select sum(f0), min(f1), count(f2), avg(f5), max(f1) from t_function_1;

SUM(F0)                                  MIN(F1)      COUNT(F2)            AVG(F5)                                  MAX(F1)     
---------------------------------------- ------------ -------------------- ---------------------------------------- ------------
2                                        1            3                    364.037295666666666666666666666666666667 2           

1 rows fetched.

SQL> select avg(f0), avg(f1), avg(f2), avg(f5) from t_function_1;

AVG(F0)                                  AVG(F1)                                  AVG(F2)              AVG(F5)                                 
---------------------------------------- ---------------------------------------- -------------------- ----------------------------------------
1                                        1.5                                      2.22174433333333     364.037295666666666666666666666666666667

1 rows fetched.

SQL> select avg(f0) from t_function_4;

CT-00606, [1:8]Inconsistent datatypes, expected NUMERIC - got BLOB
SQL> 
SQL> --- instr/instrb
SQL> select instr() from dual;

CT-00615, [1:8]Invalid argument number for INSTR, min=2, max=4
SQL> select instr(1) from dual;

CT-00615, [1:8]Invalid argument number for INSTR, min=2, max=4
SQL> select instr(1,2,3,4,5) from dual;

CT-00615, [1:8]Invalid argument number for INSTR, min=2, max=4
SQL> 
SQL> select instr(f1, 2, 3, 4) from t_function_2;

INSTR(F1, 2, 3, 4)
------------------
                  

1 rows fetched.

SQL> select instr(1, f1, 3, 4) from t_function_2;

INSTR(1, F1, 3, 4)
------------------
                  

1 rows fetched.

SQL> select instr('', 2, 3, 4) from dual;

INSTR('', 2, 3, 4)
------------------
                  

1 rows fetched.

SQL> select instr(1, '', 3, 4) from dual;

INSTR(1, '', 3, 4)
------------------
                  

1 rows fetched.

SQL> 
SQL> select instr(1, 2, f1, 4) from t_function_2;

INSTR(1, 2, F1, 4)
------------------
                  

1 rows fetched.

SQL> select instr(1, 2, 'a', 4) from dual;

CT-00636, [1:8]Invalid number -- unexpected character
SQL> select instr(1, 2, 3, f1) from t_function_2;

INSTR(1, 2, 3, F1)
------------------
                  

1 rows fetched.

SQL> select instr(1, 2, 3, 'a') from dual;

CT-00636, [1:8]Invalid number -- unexpected character
SQL> select instr(1, 2, 3, 0) from dual;

CT-00614, [1:8]Parameter error: argument '0' is out of range
SQL> select instr(1, 2, 3, -1) from dual;

CT-00614, [1:8]Parameter error: argument '-1' is out of range
SQL> 
SQL> --- length/lengthb
SQL> select length() from dual;

CT-00615, [1:8]Invalid argument number for LENGTH, min=1, max=1
SQL> select length(1, 2) from dual;

CT-00615, [1:8]Invalid argument number for LENGTH, min=1, max=1
SQL> select * from t_function_1 order by f3;

F0                   F1           F2                   F3         F4         F5                                       F6                     F7                              
-------------------- ------------ -------------------- ---------- ---------- ---------------------------------------- ---------------------- --------------------------------
1                    2            1.112233             3          nebulaisok 998.22222                                2018-01-31 12:13:14                                    
1                    1            3.333                4          5asdf      6.666667                                 2018-01-16 12:13:14    2017-03-30 12:13:14.456000      
                                  2.22                 5          test       87.223                                                          2018-02-28 12:13:14.456000      

3 rows fetched.

SQL> select f3, length(f0),length(f1),length(f2),length(f3),length(f4),length(f5) from t_function_1 order by f3;

F3         LENGTH(F0)           LENGTH(F1)           LENGTH(F2)           LENGTH(F3)           LENGTH(F4)           LENGTH(F5)          
---------- -------------------- -------------------- -------------------- -------------------- -------------------- --------------------
3          1                    1                    8                    10                   10                   9                   
4          1                    1                    5                    10                   5                    8                   
5                                                    4                    10                   4                    6                   

3 rows fetched.

SQL> select f3, lengthb(f0),lengthb(f1),lengthb(f2),lengthb(f3),lengthb(f4),lengthb(f5) from t_function_1 order by f3;

F3         LENGTHB(F0)          LENGTHB(F1)          LENGTHB(F2)          LENGTHB(F3)          LENGTHB(F4)          LENGTHB(F5)         
---------- -------------------- -------------------- -------------------- -------------------- -------------------- --------------------
3          1                    1                    8                    10                   10                   9                   
4          1                    1                    5                    10                   5                    8                   
5                                                    4                    10                   4                    6                   

3 rows fetched.

SQL> select f2, length(f0), length(f1), length(f2), lengthb(f0), lengthb(f1), lengthb(f2) from t_function_4 order by f2;

F2                                                               LENGTH(F0)           LENGTH(F1)           LENGTH(F2)           LENGTHB(F0)          LENGTHB(F1)          LENGTHB(F2)         
---------------------------------------------------------------- -------------------- -------------------- -------------------- -------------------- -------------------- --------------------
12345                                                            2                    4                    100                  2                    4                    100                 
                                                                 3                    4                                         3                    4                                        

2 rows fetched.

SQL> select length('华') from dual;

LENGTH('华')       
--------------------
1                   

1 rows fetched.

SQL> select length(substrb('华',1,1)) from dual;

CT-00217, [1:8]Nls internal error, invalid utf-8 buffer
SQL> select length(substrb('华',1,2)) from dual;

CT-00217, [1:8]Nls internal error, invalid utf-8 buffer
SQL> 
SQL> --- scn2date
SQL> select scn2date() from dual;

CT-00615, [1:8]Invalid argument number for SCN2DATE, min=1, max=1
SQL> select scn2date(1, 2) from dual;

CT-00615, [1:8]Invalid argument number for SCN2DATE, min=1, max=1
SQL> 
SQL> --- substr/substrb
SQL> select substr() from dual;

CT-00615, [1:8]Invalid argument number for SUBSTR, min=2, max=3
SQL> select substr(1) from dual;

CT-00615, [1:8]Invalid argument number for SUBSTR, min=2, max=3
SQL> select substr(1,2,3,4) from dual;

CT-00615, [1:8]Invalid argument number for SUBSTR, min=2, max=3
SQL> 
SQL> select substr(f1, 2) from t_function_2;

SUBSTR(F1, 2)
-------------
             

1 rows fetched.

SQL> select substr('', 2) from dual;

SUBSTR('', 2)
-------------
             

1 rows fetched.

SQL> select substr('0abc12abc34abc567890', f1) as substr from t_function_2;

SUBSTR              
--------------------
                    

1 rows fetched.

SQL> select substr('0abc12abc34abc567890', 'a') as substr from dual;

CT-00636, [1:8]Invalid number -- unexpected character
SQL> select substr('0abc12abc34abc567890', 2, f1) as substr from t_function_2;

SUBSTR              
--------------------
                    

1 rows fetched.

SQL> select substr('0abc12abc34abc567890', 2, 'a') as substr from t_function_2;

CT-00636, [1:8]Invalid number -- unexpected character
SQL> select substr('0abc12abc34abc567890', 2, 0) as substr1, substr('0abc12abc34abc567890', 2, -1) as substr2 from t_function_2;

SUBSTR1 SUBSTR2
------- -------
               

1 rows fetched.

SQL> 
SQL> select substr('0abc12abc34abc567890', 21) as substr1, substr('0abc12abc34abc567890', -21) as substr2 from dual;

SUBSTR1 SUBSTR2
------- -------
               

1 rows fetched.

SQL> 
SQL> select substr('0abc12abc34abc567890', 0) as substr, substrb('0abc12abc34abc567890', 0) as substrb from dual;

SUBSTR               SUBSTRB             
-------------------- --------------------
0abc12abc34abc567890 0abc12abc34abc567890

1 rows fetched.

SQL> select substr('0abc12abc34abc567890', 1) as substr, substrb('0abc12abc34abc567890', -1) as substrb from dual;

SUBSTR               SUBSTRB
-------------------- -------
0abc12abc34abc567890 0      

1 rows fetched.

SQL> select substr('0abc12abc34abc567890', 10) as substr, substrb('0abc12abc34abc567890', -10) as substrb from dual;

SUBSTR      SUBSTRB   
----------- ----------
34abc567890 4abc567890

1 rows fetched.

SQL> select substr('0abc12abc34abc567890', 20) as substr, substrb('0abc12abc34abc567890', -20) as substrb from dual;

SUBSTR SUBSTRB             
------ --------------------
0      0abc12abc34abc567890

1 rows fetched.

SQL> 
SQL> select substr('0abc12abc34abc567890', 7, 10) as substr, substrb('0abc12abc34abc567890', 7, 10) as substrb from dual;

SUBSTR     SUBSTRB   
---------- ----------
abc34abc56 abc34abc56

1 rows fetched.

SQL> select substr('0abc12abc34abc567890', 7, 13) as substr, substrb('0abc12abc34abc567890', 7, 13) as substrb from dual;

SUBSTR        SUBSTRB      
------------- -------------
abc34abc56789 abc34abc56789

1 rows fetched.

SQL> select substr('0abc12abc34abc567890', 7, 14) as substr, substrb('0abc12abc34abc567890', 7, 14) as substrb from dual;

SUBSTR         SUBSTRB       
-------------- --------------
abc34abc567890 abc34abc567890

1 rows fetched.

SQL> select substr('0abc12abc34abc567890', 7, 15) as substr, substrb('0abc12abc34abc567890', 7, 15) as substrb from dual;

SUBSTR         SUBSTRB       
-------------- --------------
abc34abc567890 abc34abc567890

1 rows fetched.

SQL> select substr('0abc12abc34abc567890', -7, 4) as substr, substrb('0abc12abc34abc567890', -7, 4) as substrb from dual;

SUBSTR SUBSTRB
------ -------
c567   c567   

1 rows fetched.

SQL> select substr('0abc12abc34abc567890', -7, 6) as substr, substrb('0abc12abc34abc567890', -7, 6) as substrb from dual;

SUBSTR SUBSTRB
------ -------
c56789 c56789 

1 rows fetched.

SQL> select substr('0abc12abc34abc567890', -7, 7) as substr, substrb('0abc12abc34abc567890', -7, 7) as substrb from dual;

SUBSTR  SUBSTRB
------- -------
c567890 c567890

1 rows fetched.

SQL> select substr('0abc12abc34abc567890', -7, 8) as substr, substrb('0abc12abc34abc567890', -7, 8) as substrb from dual;

SUBSTR  SUBSTRB
------- -------
c567890 c567890

1 rows fetched.

SQL> 
SQL> select substring('高斯DB数据库', -5, -4) from dual;

SUBSTRING('高斯DB数据库', -5, -4)
--------------------------------------
                                      

1 rows fetched.

SQL> select substring('高斯DB数据库', -8, 1) from dual;

SUBSTRING('高斯DB数据库', -8, 1)
-------------------------------------
                                     

1 rows fetched.

SQL> select substring('高斯DB数据库', -8, 7) from dual;

SUBSTRING('高斯DB数据库', -8, 7)
-------------------------------------
                                     

1 rows fetched.

SQL> select substring('高斯DB数据库', -8, 8) from dual;

SUBSTRING('高斯DB数据库', -8, 8)
-------------------------------------
                                     

1 rows fetched.

SQL> select substring('高斯DB数据库', -8) from dual;

SUBSTRING('高斯DB数据库', -8)
----------------------------------
                                  

1 rows fetched.

SQL> select substring('高斯DB数据库', 8, 2) from dual;

SUBSTRING('高斯DB数据库', 8, 2)
------------------------------------
                                    

1 rows fetched.

SQL> select substring('高斯DB数据库', 8) from dual;

SUBSTRING('高斯DB数据库', 8)
---------------------------------
                                 

1 rows fetched.

SQL> 
SQL> select substrb('abcdefg', 3) from dual;

SUBSTRB('ABCDEFG', 3)
---------------------
cdefg                

1 rows fetched.

SQL> select substrb('abcdefg', 2) from dual;

SUBSTRB('ABCDEFG', 2)
---------------------
bcdefg               

1 rows fetched.

SQL> select substrb('abcdefg', 2.99) from dual;

SUBSTRB('ABCDEFG', 2.99)
------------------------
bcdefg                  

1 rows fetched.

SQL> select substrb('abcdefg', 1.99) from dual;

SUBSTRB('ABCDEFG', 1.99)
------------------------
abcdefg                 

1 rows fetched.

SQL> select substrb('abcdefg', 1) from dual;

SUBSTRB('ABCDEFG', 1)
---------------------
abcdefg              

1 rows fetched.

SQL> 
SQL> -- left/right
SQL> select left('abcdefg', 0) from dual;

LEFT('ABCDEFG', 0)
------------------
                  

1 rows fetched.

SQL> select left('abcdefg', -1) from dual;

LEFT('ABCDEFG', -1)
-------------------
                   

1 rows fetched.

SQL> select left('abcdefg', -123456789012345) from dual;

LEFT('ABCDEFG', -123456789012345)
---------------------------------
                                 

1 rows fetched.

SQL> select right('abcdefg', 0) from dual;

RIGHT('ABCDEFG', 0)
-------------------
                   

1 rows fetched.

SQL> select right('abcdefg', -1) from dual;

RIGHT('ABCDEFG', -1)
--------------------
                    

1 rows fetched.

SQL> select right('abcdefg', -123456789012345) from dual;

RIGHT('ABCDEFG', -123456789012345)
----------------------------------
                                  

1 rows fetched.

SQL> select left('abcde', -1234567890123456789012345) from dual;

LEFT('ABCDE', -1234567890123456789012345)
-----------------------------------------
                                         

1 rows fetched.

SQL> select right('abcdefg', '-1.1') from dual;

RIGHT('ABCDEFG', '-1.1')
------------------------
                        

1 rows fetched.

SQL> select right('abcdefg', '0.01') from dual;

RIGHT('ABCDEFG', '0.01')
------------------------
                        

1 rows fetched.

SQL> select left('高斯DB数据库', 0) from dual;

LEFT('高斯DB数据库', 0)
----------------------------
                            

1 rows fetched.

SQL> select left('高斯DB数据库', -1) from dual;

LEFT('高斯DB数据库', -1)
-----------------------------
                             

1 rows fetched.

SQL> select right('高斯DB数据库', 0) from dual;

RIGHT('高斯DB数据库', 0)
-----------------------------
                             

1 rows fetched.

SQL> select right('高斯DB数据库', -1) from dual;

RIGHT('高斯DB数据库', -1)
------------------------------
                              

1 rows fetched.

SQL> select left(lpad('badbadfa',10,'dfafda'),5000) from dual;

LEFT(LPAD('BADBADFA',10,'DFAFDA'),5000)
---------------------------------------
dfbadbadfa                             

1 rows fetched.

SQL> select right(lpad('badbadfa',10,'dfafda'),5000) from dual;

RIGHT(LPAD('BADBADFA',10,'DFAFDA'),5000)
----------------------------------------
dfbadbadfa                              

1 rows fetched.

SQL> 
SQL> -- ltrim/rtrim
SQL> select ltrim() from dual;

CT-00615, [1:8]Invalid argument number for LTRIM, min=1, max=2
SQL> select ltrim(1, 2, 3) from dual;

CT-00615, [1:8]Invalid argument number for LTRIM, min=1, max=2
SQL> select ltrim(TYPE_ID2NAME('a')) from dual;

CT-00636, Invalid number -- unexpected character
SQL> 
SQL> drop table if exists lob_test;

Succeed.

SQL> create table lob_test (temp clob, temp_1 blob);

Succeed.

SQL> insert into lob_test values ('==abcdeftasdasdggadasdad==','0xffba2345721cdab');

1 rows affected.

SQL> select ltrim(temp,'=') from lob_test;

CT-00606, Inconsistent datatypes, expected VARCHAR - got CLOB
SQL> select rtrim(temp,'=') from lob_test;

CT-00606, Inconsistent datatypes, expected VARCHAR - got CLOB
SQL> 
SQL> -- trim
SQL> SELECT f1, TRIM('M' FROM f1) AS NEW_F1, f2, TRIM(CHR(32) FROM TRIM('a' FROM f2)) AS NEW_F2 FROM t_function_6;

F1                               NEW_F1                           F2                               NEW_F2                          
-------------------------------- -------------------------------- -------------------------------- --------------------------------
MMMMMMMMMMMMMMZenithMMMMMMMMMMMM Zenith                           aa             Zenitha           Zenith                          

1 rows fetched.

SQL> SELECT LENGTH(f1) AS LENGTH1, LENGTH(TRIM('M' FROM f1)) AS TLENGTH1, LENGTH(f2) AS LENGTH2, LENGTH(TRIM(TRIM('a' FROM f2))) AS TLENGTH2 FROM t_function_6;

LENGTH1              TLENGTH1             LENGTH2              TLENGTH2            
-------------------- -------------------- -------------------- --------------------
32                   6                    22                   6                   

1 rows fetched.

SQL> SELECT TRIM(NULL FROM f1) FROM t_function_6;

TRIM(NULL FROM F1)              
--------------------------------
                                

1 rows fetched.

SQL> SELECT f2, LTRIM(TRIM(f2, 'a')) AS "LTRIM(TRIM)" FROM t_function_6;

F2                               LTRIM(TRIM)                     
-------------------------------- --------------------------------
aa             Zenitha           Zenith                          

1 rows fetched.

SQL> SELECT TRIM(f2, 'a', LEADING) FROM t_function_6;

CT-00601, [1:20]Sql syntax error: expected end but , found
SQL> SELECT TRIM(LEADING, 'a') FROM t_function_6;

CT-00601, [1:20]Sql syntax error: invalid expression
SQL> SELECT f2, TRIM(LEADING FROM TRIM(f2, 'a')) AS "LTRIM(TRIM)" FROM t_function_6;

F2                               LTRIM(TRIM)                     
-------------------------------- --------------------------------
aa             Zenitha           Zenith                          

1 rows fetched.

SQL> SELECT f2, TRIM('a ' FROM f2) AS "NEW_F2" FROM t_function_6;

F2                               NEW_F2                          
-------------------------------- --------------------------------
aa             Zenitha           Zenith                          

1 rows fetched.

SQL> SELECT f2, TRIM(CHR(20) FROM TRIM('b' FROM f2)) AS "F2 NOT TRIM" FROM t_function_6;

F2                               F2 NOT TRIM                     
-------------------------------- --------------------------------
aa             Zenitha           aa             Zenitha          

1 rows fetched.

SQL> SELECT f2, TRIM(BOTH CHR(20) FROM TRIM('b' FROM f2)) AS "F2 NOT TRIM" FROM t_function_6;

F2                               F2 NOT TRIM                     
-------------------------------- --------------------------------
aa             Zenitha           aa             Zenitha          

1 rows fetched.

SQL> SELECT count(f1) FROM t_function_6 WHERE TRIM(BOTH FROM TRIM(f2, 'a'))='Zenith';

COUNT(F1)           
--------------------
1                   

1 rows fetched.

SQL> SELECT TRIM(TRIM(LEADING 'M' FROM f1), 'M') FROM t_function_6 WHERE TRIM(BOTH FROM TRIM(f2, 'a'))='Zenith';

TRIM(TRIM(LEADING 'M' FROM F1), 'M')
------------------------------------
Zenith                              

1 rows fetched.

SQL> 
SQL> SELECT f2, TRIM(LEADING CHR(32) FROM TRIM('a' FROM f2)) AS "LTRIM(TRIM)" FROM t_function_6;

F2                               LTRIM(TRIM)                     
-------------------------------- --------------------------------
aa             Zenitha           Zenith                          

1 rows fetched.

SQL> SELECT f2, TRIM(TRAILING CHR(32) FROM TRIM('a' FROM f2)) AS "LTRIM(TRIM)" FROM t_function_6;

F2                               LTRIM(TRIM)                     
-------------------------------- --------------------------------
aa             Zenitha                        Zenith             

1 rows fetched.

SQL> SELECT f2, TRIM(BOTH CHR(32) FROM TRIM('a' FROM f2)) AS "LTRIM(TRIM)" FROM t_function_6;

F2                               LTRIM(TRIM)                     
-------------------------------- --------------------------------
aa             Zenitha           Zenith                          

1 rows fetched.

SQL> 
SQL> select trim() from dual;

CT-00615, [1:8]Invalid argument number for TRIM, min=1, max=2
SQL> select trim(BOTH 'a' From NULL 'aaZenitha') from dual;

CT-00601, [1:32]Sql syntax error: expected end but 'aaZenitha' found
SQL> select trim(BOTH From NULL 'aaZenitha') from dual;

CT-00601, [1:28]Sql syntax error: from or "," expected but 'aaZenitha' found
SQL> select trim(BOTH From From 'aaZenitha') from dual;

CT-00601, [1:23]Sql syntax error: invalid expression
SQL> select trim(BOTH 'a' from 'aaZenitha', 'Z') from dual;

CT-00601, [1:38]Sql syntax error: expected end but , found
SQL> select trim('aaZenitha', 'a', 1);

CT-00601, [1:29]Sql syntax error: expected end but , found
SQL> select trim('aaZenitha', 'a', LEADING);

CT-00601, [1:29]Sql syntax error: expected end but , found
SQL> select trim(1, 2, 3, 4) from dual;

CT-00601, [1:17]Sql syntax error: expected end but , found
SQL> 
SQL> --connection_id
SQL> SELECT count(connection_id()) FROM DUAL;

COUNT(CONNECTION_ID())
----------------------
1                     

1 rows fetched.

SQL> SELECT COUNT(f1) FROM t_function_6 WHERE CAST(CONNECTION_ID() AS CHAR(30))>0;  --check if the expression "CAST(CONNECTION_ID() AS CHAR(30))" is OK

COUNT(F1)           
--------------------
1                   

1 rows fetched.

SQL> SELECT connection_id(1) FROM DUAL;

CT-00615, [1:8]Invalid argument number for CONNECTION_ID, min=0, max=0
SQL> SELECT connection_id(f1) FROM t_function_6;

CT-00615, [1:8]Invalid argument number for CONNECTION_ID, min=0, max=0
SQL> 
SQL> -- sleep
SQL> select sleep() from dual;

CT-00615, [1:8]Invalid argument number for SLEEP, min=1, max=1
SQL> select sleep(1, 2) from dual;

CT-00615, [1:8]Invalid argument number for SLEEP, min=1, max=1
SQL> select sleep(TYPE_ID2NAME('a')) from dual;

CT-00636, Invalid number -- unexpected character
SQL> select sleep(null) from dual;

SLEEP(NULL)
-----------
           

1 rows fetched.

SQL> select sleep('a') from dual;

CT-00636, Invalid number -- unexpected character
SQL> select sleep(1) from dual;

SLEEP(1)
--------
        

1 rows fetched.

SQL> 
SQL> -- upper/lower
SQL> select upper() from dual;

CT-00615, [1:8]Invalid argument number for UPPER, min=1, max=1
SQL> select upper(1, 2) from dual;

CT-00615, [1:8]Invalid argument number for UPPER, min=1, max=1
SQL> select lower() from dual;

CT-00615, [1:8]Invalid argument number for LOWER, min=1, max=1
SQL> select lower(1, 2) from dual;

CT-00615, [1:8]Invalid argument number for LOWER, min=1, max=1
SQL> create table t_function_3 (f1 varchar(20));

Succeed.

SQL> create index t_function_3_index1 on t_function_3 (f1);

Succeed.

SQL> insert into t_function_3 values ('abc');

1 rows affected.

SQL> select * from t_function_3;

F1                  
--------------------
abc                 

1 rows fetched.

SQL> update t_function_3 set f1 = upper(f1);

1 rows affected.

SQL> select * from t_function_3;

F1                  
--------------------
ABC                 

1 rows fetched.

SQL> update t_function_3 set f1 = lower(f1);

1 rows affected.

SQL> select * from t_function_3;

F1                  
--------------------
abc                 

1 rows fetched.

SQL> commit;

Succeed.

SQL> 
SQL> -- utf-8
SQL> select substr('abc中国abc', 3, 2), substrb('abc中国abc', 2, 1) from dual;

SUBSTR('ABC中国ABC', 3, 2) SUBSTRB('ABC中国ABC', 2, 1)
---------------------------- -----------------------------
c中                         b                            

1 rows fetched.

SQL> select substr('abc中国abc', 4, 3), substrb('abc中国abc', 4, 3) from dual;

SUBSTR('ABC中国ABC', 4, 3) SUBSTRB('ABC中国ABC', 4, 3)
---------------------------- -----------------------------
中国a                      中                          

1 rows fetched.

SQL> select instr('abc中国abc', 'ab', 4, 1), instrb('abc中国abc', 'ab', 4, 1) from dual;

INSTR('ABC中国ABC', 'AB', 4, 1) INSTRB('ABC中国ABC', 'AB', 4, 1)
--------------------------------- ----------------------------------
6                                 10                                

1 rows fetched.

SQL> 
SQL> --- _to_col_type
SQL> select _to_col_type(-1) from dual;

CT-00828, [1:8]function SYS._TO_COL_TYPE does not exist
SQL> select _to_col_type(20000) from dual;

CT-00828, [1:8]function SYS._TO_COL_TYPE does not exist
SQL> select _to_col_type(20001) from dual;

CT-00828, [1:8]function SYS._TO_COL_TYPE does not exist
SQL> select _to_col_type(20002) from dual;

CT-00828, [1:8]function SYS._TO_COL_TYPE does not exist
SQL> select _to_col_type(20003) from dual;

CT-00828, [1:8]function SYS._TO_COL_TYPE does not exist
SQL> select _to_col_type(20004) from dual;

CT-00828, [1:8]function SYS._TO_COL_TYPE does not exist
SQL> select _to_col_type(20005) from dual;

CT-00828, [1:8]function SYS._TO_COL_TYPE does not exist
SQL> select _to_col_type(20006) from dual;

CT-00828, [1:8]function SYS._TO_COL_TYPE does not exist
SQL> select _to_col_type(20007) from dual;

CT-00828, [1:8]function SYS._TO_COL_TYPE does not exist
SQL> select _to_col_type(20008) from dual;

CT-00828, [1:8]function SYS._TO_COL_TYPE does not exist
SQL> select _to_col_type(20009) from dual;

CT-00828, [1:8]function SYS._TO_COL_TYPE does not exist
SQL> select _to_col_type(20010) from dual;

CT-00828, [1:8]function SYS._TO_COL_TYPE does not exist
SQL> select _to_col_type(20011) from dual;

CT-00828, [1:8]function SYS._TO_COL_TYPE does not exist
SQL> select _to_col_type(20012) from dual;

CT-00828, [1:8]function SYS._TO_COL_TYPE does not exist
SQL> select _to_col_type(20013) from dual;

CT-00828, [1:8]function SYS._TO_COL_TYPE does not exist
SQL> select _to_col_type(20014) from dual;

CT-00828, [1:8]function SYS._TO_COL_TYPE does not exist
SQL> select _to_col_type(20015) from dual;

CT-00828, [1:8]function SYS._TO_COL_TYPE does not exist
SQL> select _to_col_type(20016) from dual;

CT-00828, [1:8]function SYS._TO_COL_TYPE does not exist
SQL> select _to_col_type(20017) from dual;

CT-00828, [1:8]function SYS._TO_COL_TYPE does not exist
SQL> select _to_col_type(20018) from dual;

CT-00828, [1:8]function SYS._TO_COL_TYPE does not exist
SQL> select _to_col_type(20019) from dual;

CT-00828, [1:8]function SYS._TO_COL_TYPE does not exist
SQL> select _to_col_type(20020) from dual;

CT-00828, [1:8]function SYS._TO_COL_TYPE does not exist
SQL> select _to_col_type(20021) from dual;

CT-00828, [1:8]function SYS._TO_COL_TYPE does not exist
SQL> select _to_tab_type(-1) from dual;

CT-00828, [1:8]function SYS._TO_TAB_TYPE does not exist
SQL> select _to_tab_type(0) from dual;

CT-00828, [1:8]function SYS._TO_TAB_TYPE does not exist
SQL> select _to_tab_type(1) from dual;

CT-00828, [1:8]function SYS._TO_TAB_TYPE does not exist
SQL> select _to_tab_type(2) from dual;

CT-00828, [1:8]function SYS._TO_TAB_TYPE does not exist
SQL> select _to_tab_type(3) from dual;

CT-00828, [1:8]function SYS._TO_TAB_TYPE does not exist
SQL> select _to_tab_type(4) from dual;

CT-00828, [1:8]function SYS._TO_TAB_TYPE does not exist
SQL> select _to_tab_type(5) from dual;

CT-00828, [1:8]function SYS._TO_TAB_TYPE does not exist
SQL> 
SQL> --- DBE_DIAGNOSE.DBA_LISTCOLS/DBE_DIAGNOSE.DBA_SEGSIZE/DBE_DIAGNOSE.DBA_SPCSIZE/DBE_DIAGNOSE.DBA_TABTYPE/TYPE_ID2NAME
SQL> select DBE_DIAGNOSE.DBA_LISTCOLS() from dual;

CT-00615, [1:8]Invalid argument number for DBA_LISTCOLS, min=3, max=3
SQL> select DBE_DIAGNOSE.DBA_LISTCOLS(1) from dual;

CT-00615, [1:8]Invalid argument number for DBA_LISTCOLS, min=3, max=3
SQL> select DBE_DIAGNOSE.DBA_LISTCOLS(1, 2) from dual;

CT-00615, [1:8]Invalid argument number for DBA_LISTCOLS, min=3, max=3
SQL> select DBE_DIAGNOSE.DBA_LISTCOLS(1, 2, 3, 4) from dual;

CT-00615, [1:8]Invalid argument number for DBA_LISTCOLS, min=3, max=3
SQL> select DBE_DIAGNOSE.DBA_LISTCOLS(1, 'TABLE_NAME', 'COLUMN_LIST') from dual;

CT-01312, [1:34]user name expected
SQL> select DBE_DIAGNOSE.DBA_LISTCOLS('USER_NAME', 2, 'COLUMN_LIST') from dual;

CT-01312, [1:47]table name expected
SQL> select DBE_DIAGNOSE.DBA_LISTCOLS('USER_NAME', 'TABLE_NAME', 3) from dual;

CT-01312, [1:61]column list string expected
SQL> select DBE_DIAGNOSE.DBA_LISTCOLS('SYS', 'SYS_TABLES', col_list) from SYS_INDEXES where user#=0 and table#=0 order by col_list;

DBE_DIAGNOSE.DBA_LISTCOLS('SYS', 'SYS_TABLES', COL_LIST)        
----------------------------------------------------------------
USER#, ID                                                       
USER#, NAME                                                     

2 rows fetched.

SQL> 
SQL> select DBE_DIAGNOSE.DBA_SEGSIZE() from dual;

CT-00615, [1:8]Invalid argument number for DBA_SEGSIZE, min=2, max=2
SQL> select DBE_DIAGNOSE.DBA_SEGSIZE(1) from dual;

CT-00615, [1:8]Invalid argument number for DBA_SEGSIZE, min=2, max=2
SQL> select DBE_DIAGNOSE.DBA_SEGSIZE(1, 2, 3) from dual;

CT-00615, [1:8]Invalid argument number for DBA_SEGSIZE, min=2, max=2
SQL> select DBE_DIAGNOSE.DBA_SEGSIZE('a', 2) from dual;

CT-00636, [1:8]Invalid number -- unexpected character
SQL> select DBE_DIAGNOSE.DBA_SEGSIZE(1, 'a') from dual;

CT-00636, [1:8]Invalid number -- unexpected character
SQL> select DBE_DIAGNOSE.DBA_SEGSIZE(1, -1) from dual;

DBE_DIAGNOSE.DBA_SEGSIZE(1, -1)
-------------------------------
0                              

1 rows fetched.

SQL> select DBE_DIAGNOSE.DBA_SEGSIZE(1234, 5678) from dual;

CT-00242, The function argument is out of range
SQL> 
SQL> select DBE_DIAGNOSE.DBA_SPCSIZE() from dual;

CT-00615, [1:8]Invalid argument number for DBA_SPCSIZE, min=2, max=2
SQL> select DBE_DIAGNOSE.DBA_SPCSIZE(1) from dual;

CT-00615, [1:8]Invalid argument number for DBA_SPCSIZE, min=2, max=2
SQL> select DBE_DIAGNOSE.DBA_SPCSIZE(1, 2, 3) from dual;

CT-00615, [1:8]Invalid argument number for DBA_SPCSIZE, min=2, max=2
SQL> select DBE_DIAGNOSE.DBA_SPCSIZE('a', 'PAGE') from v$tablespace where name='SYSTEM';

CT-01312, [1:33]tablespace id expected
SQL> select DBE_DIAGNOSE.DBA_SPCSIZE(id, 2) from v$tablespace where name='SYSTEM';

CT-01312, [1:37]attribute name expected
SQL> select DBE_DIAGNOSE.DBA_SPCSIZE(id, 'PAGE-TOTAL-USED') from v$tablespace where name='SYSTEM';

CT-01313, [1:37]Invalid attribute name PAGE-TOTAL-USED
SQL> select count(1) from (select DBE_DIAGNOSE.DBA_SPCSIZE(id, 'PAGE'), DBE_DIAGNOSE.DBA_SPCSIZE(id, 'TOTAL'), DBE_DIAGNOSE.DBA_SPCSIZE(id, 'USED') from v$tablespace where name='SYSTEM');

COUNT(1)            
--------------------
1                   

1 rows fetched.

SQL> select * from v$tablespace where name='SYSTEM' and (DBE_DIAGNOSE.DBA_SPCSIZE(id, 'PAGE') < 0 or DBE_DIAGNOSE.DBA_SPCSIZE(id, 'TOTAL')<0 or DBE_DIAGNOSE.DBA_SPCSIZE(id, 'USED')<0);

ID           NAME                                                             TEMPORARY IN_MEMORY AUTO_PURGE EXTENT_SIZE  SEGMENT_COUNT FILE_COUNT   STATUS   AUTO_OFFLINE EXTENT_MANAGEMENT EXTENT_ALLOCATION ENCRYPT  PUNCHED_SIZE        
------------ ---------------------------------------------------------------- --------- --------- ---------- ------------ ------------- ------------ -------- ------------ ----------------- ----------------- -------- --------------------

0 rows fetched.

SQL> 
SQL> select DBE_DIAGNOSE.DBA_TABTYPE() from dual;

CT-00615, [1:8]Invalid argument number for DBA_TABTYPE, min=1, max=1
SQL> select DBE_DIAGNOSE.DBA_TABTYPE(1, 2) from dual;

CT-00615, [1:8]Invalid argument number for DBA_TABTYPE, min=1, max=1
SQL> select DBE_DIAGNOSE.DBA_TABTYPE('a') from dual;

CT-00636, Invalid number -- unexpected character
SQL> select DBE_DIAGNOSE.DBA_TABTYPE(-1), DBE_DIAGNOSE.DBA_TABTYPE(0), DBE_DIAGNOSE.DBA_TABTYPE(1), DBE_DIAGNOSE.DBA_TABTYPE(2), DBE_DIAGNOSE.DBA_TABTYPE(3), DBE_DIAGNOSE.DBA_TABTYPE(4) from dual;

DBE_DIAGNOSE.DBA_TABTYPE(-1)                                     DBE_DIAGNOSE.DBA_TABTYPE(0)                                      DBE_DIAGNOSE.DBA_TABTYPE(1)                                      DBE_DIAGNOSE.DBA_TABTYPE(2)                                      DBE_DIAGNOSE.DBA_TABTYPE(3)                                      DBE_DIAGNOSE.DBA_TABTYPE(4)                                     
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
UNKNOWN_TYPE                                                     HEAP                                                             IOT                                                              TRANS_TEMP                                                       SESSION_TEMP                                                     NOLOGGING                                                       

1 rows fetched.

SQL> 
SQL> select TYPE_ID2NAME() from dual;

CT-00615, [1:8]Invalid argument number for TYPE_ID2NAME, min=1, max=1
SQL> select TYPE_ID2NAME(1, 2) from dual;

CT-00615, [1:8]Invalid argument number for TYPE_ID2NAME, min=1, max=1
SQL> select TYPE_ID2NAME('a') from dual;

CT-00636, Invalid number -- unexpected character
SQL> select TYPE_ID2NAME(null) from dual;

TYPE_ID2NAME(NULL)                                              
----------------------------------------------------------------
UNKNOWN_TYPE                                                    

1 rows fetched.

SQL> select TYPE_ID2NAME(datatype) from SYS_COLUMNS where table#=0 and name='USER#';

TYPE_ID2NAME(DATATYPE)                                          
----------------------------------------------------------------
BINARY_INTEGER                                                  

1 rows fetched.

SQL> 
SQL> -- Function test add
SQL> select DBE_DIAGNOSE.dba_space_name(-1);

CT-00780, The tablespace  does not exist.
SQL> select DBE_DIAGNOSE.dba_space_name(0);

DBE_DIAGNOSE.DBA_SPACE_NAME(0)                                  
----------------------------------------------------------------
SYSTEM                                                          

1 rows fetched.

SQL> select DBE_DIAGNOSE.dba_space_name(1);

DBE_DIAGNOSE.DBA_SPACE_NAME(1)                                  
----------------------------------------------------------------
UNDO_00                                                         

1 rows fetched.

SQL> select DBE_DIAGNOSE.dba_space_name(100);

CT-00794, tablespace id 100 does not exists
SQL> select DBE_DIAGNOSE.dba_space_name('2');

DBE_DIAGNOSE.DBA_SPACE_NAME('2')                                
----------------------------------------------------------------
SWAP_00                                                         

1 rows fetched.

SQL> select DBE_DIAGNOSE.dba_space_name('-2');

CT-00780, The tablespace  does not exist.
SQL> select DBE_DIAGNOSE.dba_space_name('');

CT-00780, The tablespace  does not exist.
SQL> select DBE_DIAGNOSE.dba_space_name();

CT-00615, [1:8]Invalid argument number for DBA_SPACE_NAME, min=1, max=1
SQL> 
SQL> select  DBE_DIAGNOSE.dba_user_name(-1);

CT-00781, The user  does not exist.
SQL> select  DBE_DIAGNOSE.dba_user_name(0);

DBE_DIAGNOSE.DBA_USER_NAME(0)                                   
----------------------------------------------------------------
SYS                                                             

1 rows fetched.

SQL> select  DBE_DIAGNOSE.dba_user_name(1);

DBE_DIAGNOSE.DBA_USER_NAME(1)                                   
----------------------------------------------------------------
PUBLIC                                                          

1 rows fetched.

SQL> select  DBE_DIAGNOSE.dba_user_name(10000);

CT-00781, The user  does not exist.
SQL> select  DBE_DIAGNOSE.dba_user_name(',');

CT-00636, Invalid number -- unexpected character
SQL> select  DBE_DIAGNOSE.dba_user_name(' ');

CT-00636, Invalid number -- text is empty or too long
SQL> 
SQL> CREATE TABLE TEST_SEG(A INT, B INT);

Succeed.

SQL> INSERT INTO SYS.TEST_SEG VALUES(100, 200);

1 rows affected.

SQL> SELECT DBE_DIAGNOSE.DBA_SEGSIZE(0, T.ENTRY) FROM SYS.SYS_TABLES T WHERE T.NAME = 'TEST_SEG';

DBE_DIAGNOSE.DBA_SEGSIZE(0, T.ENTRY)
------------------------------------
65536                               

1 rows fetched.

SQL> SELECT DBE_DIAGNOSE.DBA_SEGSIZE(1, T.ENTRY) FROM SYS.SYS_TABLES T WHERE T.NAME = 'TEST_SEG';

DBE_DIAGNOSE.DBA_SEGSIZE(1, T.ENTRY)
------------------------------------
8                                   

1 rows fetched.

SQL> SELECT DBE_DIAGNOSE.DBA_SEGSIZE(2, T.ENTRY) FROM SYS.SYS_TABLES T WHERE T.NAME = 'TEST_SEG';

DBE_DIAGNOSE.DBA_SEGSIZE(2, T.ENTRY)
------------------------------------
1                                   

1 rows fetched.

SQL> SELECT DBE_DIAGNOSE.DBA_SEGSIZE(200000000000000000000000000000000000000, T.ENTRY) FROM SYS.SYS_TABLES T WHERE T.NAME = 'TEST_SEG';

CT-00659, [1:8]INTEGER out of range
SQL> DROP TABLE TEST_SEG;

Succeed.

SQL> 
SQL> --- invalid function
SQL> select abr(1) from dual;

CT-00828, [1:8]function SYS.ABR does not exist
SQL> select abt(1) from dual;

CT-00828, [1:8]function SYS.ABT does not exist
SQL> 
SQL> --- part 2
SQL> --- function in expression
SQL> select 1 + to_date('2290-09-12', 'YYYY-MM-DD') from dual;

1 + TO_DATE('2290-09-12', 'YYYY-MM-DD')
---------------------------------------
2290-09-13 00:00:00                    

1 rows fetched.

SQL> 
SQL> --- any
SQL> delete from t_function_1;

3 rows affected.

SQL> delete from t_function_2;

1 rows affected.

SQL> insert into t_function_1(f0, f1, f4) values(1, 2, 'A');

1 rows affected.

SQL> insert into t_function_1(f0, f1, f4) values(2, 3, 'B');

1 rows affected.

SQL> insert into t_function_1(f0, f1, f4) values(3, 4, 'C');

1 rows affected.

SQL> insert into t_function_1(f0, f1, f4) values(4, 5, 'D');

1 rows affected.

SQL> insert into t_function_1(f0, f1, f4) values(2, 3, 'B');

1 rows affected.

SQL> insert into t_function_1(f0, f1, f4) values(3, 4, 'C');

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> select f0, f1, f4 from t_function_1 where f0 = any(2,4,3) + 1;

CT-00601, [1:59]Sql syntax error: invalid word '+' found
SQL> select f0, f1, f4 from t_function_1 where f0 = 1 + any(2,4,3);

CT-00601, [1:50]Sql syntax error: expression error
SQL> select f0, f1, f4 from t_function_1 where f0 > any(2,4,3) + 1;

CT-00601, [1:59]Sql syntax error: invalid word '+' found
SQL> select f0, f1, f4 from t_function_1 where f0 < 1 + any(2,4,3);

CT-00601, [1:50]Sql syntax error: expression error
SQL> select f0, f1, f4 from t_function_1 where any(2,4,3) < f0;

CT-00601, [1:43]Sql syntax error: the "any" is not a correct keyword
SQL> 
SQL> select f0, f1, f4 from t_function_1 where f0 = any(2,4,3) order by f0 desc;

F0                   F1           F4        
-------------------- ------------ ----------
4                    5            D         
3                    4            C         
3                    4            C         
2                    3            B         
2                    3            B         

5 rows fetched.

SQL> select f0, f1, f4 from t_function_1 where f0 <> any(2,4,3) order by f0 desc;

F0                   F1           F4        
-------------------- ------------ ----------
4                    5            D         
3                    4            C         
3                    4            C         
2                    3            B         
2                    3            B         
1                    2            A         

6 rows fetched.

SQL> select f0, f1, f4 from t_function_1 where f0 > any(2,4,3) order by f0 desc;

F0                   F1           F4        
-------------------- ------------ ----------
4                    5            D         
3                    4            C         
3                    4            C         

3 rows fetched.

SQL> select f0, f1, f4 from t_function_1 where f0 < any(2,4,3) order by f0 desc;

F0                   F1           F4        
-------------------- ------------ ----------
3                    4            C         
3                    4            C         
2                    3            B         
2                    3            B         
1                    2            A         

5 rows fetched.

SQL> select f0, f1, f4 from t_function_1 where f0 >= any(3,4,2) order by f0 desc;

F0                   F1           F4        
-------------------- ------------ ----------
4                    5            D         
3                    4            C         
3                    4            C         
2                    3            B         
2                    3            B         

5 rows fetched.

SQL> select f0, f1, f4 from t_function_1 where f0 <= any(1,3,2) order by f0 desc;

F0                   F1           F4        
-------------------- ------------ ----------
3                    4            C         
3                    4            C         
2                    3            B         
2                    3            B         
1                    2            A         

5 rows fetched.

SQL> 
SQL> CREATE INDEX index_t_function_1 ON t_function_1(f0);

Succeed.

SQL> 
SQL> select f0, f1, f4 from t_function_1 where f0 = any(2,4,3) order by f0 desc;

F0                   F1           F4        
-------------------- ------------ ----------
4                    5            D         
3                    4            C         
3                    4            C         
2                    3            B         
2                    3            B         

5 rows fetched.

SQL> select f0, f1, f4 from t_function_1 where f0 != any(2,4,3) order by f0 desc;

F0                   F1           F4        
-------------------- ------------ ----------
4                    5            D         
3                    4            C         
3                    4            C         
2                    3            B         
2                    3            B         
1                    2            A         

6 rows fetched.

SQL> select f0, f1, f4 from t_function_1 where f0 > any(2,4,3) order by f0 desc;

F0                   F1           F4        
-------------------- ------------ ----------
4                    5            D         
3                    4            C         
3                    4            C         

3 rows fetched.

SQL> select f0, f1, f4 from t_function_1 where f0 < any(2,4,3) order by f0 desc;

F0                   F1           F4        
-------------------- ------------ ----------
3                    4            C         
3                    4            C         
2                    3            B         
2                    3            B         
1                    2            A         

5 rows fetched.

SQL> select f0, f1, f4 from t_function_1 where f0 >= any(3,4,2) order by f0 desc;

F0                   F1           F4        
-------------------- ------------ ----------
4                    5            D         
3                    4            C         
3                    4            C         
2                    3            B         
2                    3            B         

5 rows fetched.

SQL> select f0, f1, f4 from t_function_1 where f0 <= any(1,3,2) order by f0 desc;

F0                   F1           F4        
-------------------- ------------ ----------
3                    4            C         
3                    4            C         
2                    3            B         
2                    3            B         
1                    2            A         

5 rows fetched.

SQL> 
SQL> 
SQL> insert into t_function_2(f0, f1) values(2, 3);

1 rows affected.

SQL> insert into t_function_2(f0, f1) values(3, 4);

1 rows affected.

SQL> insert into t_function_2(f0, f1) values(4, 5);

1 rows affected.

SQL> select f0, f1, f4 from t_function_1 where f0 = any(select f0 from t_function_2) order by f0 desc;

F0                   F1           F4        
-------------------- ------------ ----------
4                    5            D         
3                    4            C         
3                    4            C         
2                    3            B         
2                    3            B         

5 rows fetched.

SQL> select f0, f1, f4 from t_function_1 where f0 > any(select f0 from t_function_2) order by f0 desc;

F0                   F1           F4        
-------------------- ------------ ----------
4                    5            D         
3                    4            C         
3                    4            C         

3 rows fetched.

SQL> select f0, f1, f4 from t_function_1 where f0 < any(select f0 from t_function_2) order by f0 desc;

F0                   F1           F4        
-------------------- ------------ ----------
3                    4            C         
3                    4            C         
2                    3            B         
2                    3            B         
1                    2            A         

5 rows fetched.

SQL> select f0, f1, f4 from t_function_1 where f0 >= any(select f0 from t_function_2) order by f0 desc;

F0                   F1           F4        
-------------------- ------------ ----------
4                    5            D         
3                    4            C         
3                    4            C         
2                    3            B         
2                    3            B         

5 rows fetched.

SQL> 
SQL> delete from t_function_2;

3 rows affected.

SQL> insert into t_function_2(f0, f1, f4) values(1, 3, 'D');

1 rows affected.

SQL> insert into t_function_2(f0, f1, f4) values(2, 4, 'B');

1 rows affected.

SQL> insert into t_function_2(f0, f1, f4) values(3, 5, 'C');

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> select f0, f1, f4 from t_function_1 where f0 <= any(select f0 from t_function_2) order by f0 desc;

F0                   F1           F4        
-------------------- ------------ ----------
3                    4            C         
3                    4            C         
2                    3            B         
2                    3            B         
1                    2            A         

5 rows fetched.

SQL> select f0, f1, f4 from t_function_1 where f4 >= any(substr('A',0,1),substr('B',0,1),substr('C',0, 1)) order by f0 desc;

F0                   F1           F4        
-------------------- ------------ ----------
4                    5            D         
3                    4            C         
3                    4            C         
2                    3            B         
2                    3            B         
1                    2            A         

6 rows fetched.

SQL> select f0, f1, f4 from t_function_1 where f4 >= any(substr('B',0,1),substr('C',0, 1)) order by f0 desc;

F0                   F1           F4        
-------------------- ------------ ----------
4                    5            D         
3                    4            C         
3                    4            C         
2                    3            B         
2                    3            B         

5 rows fetched.

SQL> select f0, f1, f4 from t_function_1 where f4 >= any(select substr(f4,0,1) from t_function_2) order by f0 desc;

F0                   F1           F4        
-------------------- ------------ ----------
4                    5            D         
3                    4            C         
3                    4            C         
2                    3            B         
2                    3            B         

5 rows fetched.

SQL> 
SQL> --- mod
SQL> select mod() from dual;

CT-00615, [1:8]Invalid argument number for MOD, min=2, max=2
SQL> select mod(1) from dual;

CT-00615, [1:8]Invalid argument number for MOD, min=2, max=2
SQL> select mod(1,2,3) from dual;

CT-00615, [1:8]Invalid argument number for MOD, min=2, max=2
SQL> 
SQL> select mod('a', 2) from dual;

CT-00636, [1:8]Invalid number -- unexpected character
SQL> select mod(1, 'b') from dual;

CT-00636, [1:8]Invalid number -- unexpected character
SQL> 
SQL> delete from t_function_1;

6 rows affected.

SQL> insert into t_function_1(f0, f1, f2, f5) values(5, -5, 2.5, -2.5);

1 rows affected.

SQL> commit;

Succeed.

SQL> select mod(f0, f0), mod(f1, f1), mod(f2, f2), mod(f5, f5) from t_function_1;

MOD(F0, F0)                              MOD(F1, F1)                              MOD(F2, F2)                              MOD(F5, F5)                             
---------------------------------------- ---------------------------------------- ---------------------------------------- ----------------------------------------
0                                        0                                        0                                        0                                       

1 rows fetched.

SQL> select mod(5, 1.5), mod(5, -1.5) from dual;

MOD(5, 1.5)                              MOD(5, -1.5)                            
---------------------------------------- ----------------------------------------
.5                                       .5                                      

1 rows fetched.

SQL> select mod(512312312393912312311115, 1.512123), mod(512312312393912312311115, -1.512123) from dual;

MOD(512312312393912312311115, 1.512123)  MOD(512312312393912312311115, -1.512123)
---------------------------------------- ----------------------------------------
.85376                                   .85376                                  

1 rows fetched.

SQL> 
SQL> --- power
SQL> select power() from dual;

CT-00615, [1:8]Invalid argument number for POWER, min=2, max=2
SQL> select power(1) from dual;

CT-00615, [1:8]Invalid argument number for POWER, min=2, max=2
SQL> select power(1,2,3) from dual;

CT-00615, [1:8]Invalid argument number for POWER, min=2, max=2
SQL> 
SQL> select power('a', 2) from dual;

CT-00636, [1:8]Invalid number -- unexpected character
SQL> select power(1, 'b') from dual;

CT-00636, [1:8]Invalid number -- unexpected character
SQL> select power(0, -0.1) from dual;

CT-00614, [1:8]Parameter error: invalid argument for POWER function
SQL> select power(-0.1, 1.1) from dual;

CT-00614, [1:8]Parameter error: invalid argument for POWER function
SQL> select power(4, 5), power(4, 5.4), power(4, 5.9), power(4, 6) from dual;

POWER(4, 5)                              POWER(4, 5.4)                            POWER(4, 5.9)                            POWER(4, 6)                             
---------------------------------------- ---------------------------------------- ---------------------------------------- ----------------------------------------
1024                                     1782.88755363046223695108099579852001071 3565.77510726092447390216199159704002142 4096                                    

1 rows fetched.

SQL> 
SQL> --- log
SQL> select log() from dual;

CT-00615, [1:8]Invalid argument number for LOG, min=1, max=2
SQL> select log(1,2,3) from dual;

CT-00615, [1:8]Invalid argument number for LOG, min=1, max=2
SQL> select log('a') from dual;

CT-00636, [1:12]Invalid number -- unexpected character
SQL> select log(-0.1) from dual;

CT-00614, [1:12]Parameter error: argument must be greater than 0
SQL> select log(0) from dual;

CT-00614, [1:12]Parameter error: argument must be greater than 0
SQL> select log(0.5) from dual;

LOG(0.5)                                
----------------------------------------
-.69314718055994530941723212145817656808

1 rows fetched.

SQL> 
SQL> select ln(4.94065645841246E-324) from dual;

CT-00614, [1:11]Parameter error: argument must be greater than 0
SQL> select log(1.79769313486231E+308) from dual;

CT-01319, [1:12]High-Precision numeric overflow
SQL> 
SQL> select ln('4.94065645841246E-324') from dual;

CT-00614, [1:11]Parameter error: argument must be greater than 0
SQL> select log('1.79769313486231E+308') from dual;

CT-00636, [1:12]Invalid number -- overflow
SQL> 
SQL> select log('1.79769313486231E+300') from dual;

CT-00636, [1:12]Invalid number -- overflow
SQL> 
SQL> --- ln
SQL> select ln() from dual;

CT-00615, [1:8]Invalid argument number for LN, min=1, max=1
SQL> select ln(1,2) from dual;

CT-00615, [1:8]Invalid argument number for LN, min=1, max=1
SQL> select ln('a') from dual;

CT-00636, [1:11]Invalid number -- unexpected character
SQL> select ln(-0.1) from dual;

CT-00614, [1:11]Parameter error: argument must be greater than 0
SQL> select ln(0) from dual;

CT-00614, [1:11]Parameter error: argument must be greater than 0
SQL> select ln(0.1), ln(0.9), ln(1), ln(9999999999) from dual;

LN(0.1)                                  LN(0.9)                                  LN(1)                                    LN(9999999999)                          
---------------------------------------- ---------------------------------------- ---------------------------------------- ----------------------------------------
-2.3025850929940456840179914546843642076 -.10536051565782630122750098083931279831 0                                        23.0258509298404568401749145468433087427

1 rows fetched.

SQL> 
SQL> --- lpad
SQL> select lpad() from dual;

CT-00615, [1:8]Invalid argument number for LPAD, min=2, max=3
SQL> select lpad(1) from dual;

CT-00615, [1:8]Invalid argument number for LPAD, min=2, max=3
SQL> select lpad(1,2,3,4) from dual;

CT-00615, [1:8]Invalid argument number for LPAD, min=2, max=3
SQL> 
SQL> select rpad() from dual;

CT-00615, [1:8]Invalid argument number for RPAD, min=2, max=3
SQL> select rpad(1) from dual;

CT-00615, [1:8]Invalid argument number for RPAD, min=2, max=3
SQL> select rpad(1,2,3,4) from dual;

CT-00615, [1:8]Invalid argument number for RPAD, min=2, max=3
SQL> 
SQL> --- round trunc
SQL> select round() from dual;

CT-00615, [1:8]Invalid argument number for ROUND, min=1, max=2
SQL> select round(1, 2, 3) from dual;

CT-00615, [1:8]Invalid argument number for ROUND, min=1, max=2
SQL> select trunc() from dual;

CT-00615, [1:8]Invalid argument number for TRUNC, min=1, max=2
SQL> select trunc(1, 2, 3) from dual;

CT-00615, [1:8]Invalid argument number for TRUNC, min=1, max=2
SQL> 
SQL> select round('a') from dual;

CT-00636, [1:8]Invalid number -- unexpected character
SQL> 
SQL> select trunc('a') from dual;

CT-00636, Invalid number -- unexpected character
SQL> 
SQL> select round(to_date('2018-06-13 12:12:12', 'yyyy-mm-dd hh24:mi:ss'), 'invalid') as round from dual;

CT-00105, [1:8]Invalid format of datetime
SQL> select round(to_date('2018-06-13 12:12:12', 'yyyy-mm-dd hh24:mi:ss'), 'hh1234') as round from dual;

CT-00105, [1:8]Invalid format of datetime
SQL> select round(to_date('2018-06-13 12:12:12', 'yyyy-mm-dd hh24:mi:ss'), 'ss') as round from dual;

ROUND                 
----------------------
2018-06-13 12:12:12   

1 rows fetched.

SQL> 
SQL> select trunc(to_date('2018-06-13 12:12:12', 'yyyy-mm-dd hh24:mi:ss'), 'invalid') as trunc from dual;

CT-00105, Invalid format of datetime
SQL> select trunc(to_date('2018-06-13 12:12:12', 'yyyy-mm-dd hh24:mi:ss'), 'hh1234') as trunc from dual;

CT-00105, Invalid format of datetime
SQL> select trunc(to_date('2018-06-13 12:12:12', 'yyyy-mm-dd hh24:mi:ss'), 'ss') as trunc from dual;

TRUNC                 
----------------------
2018-06-13 12:12:12   

1 rows fetched.

SQL> 
SQL> delete from t_function_1;

1 rows affected.

SQL> insert into t_function_1(f0) values(1);

1 rows affected.

SQL> insert into t_function_1(f0) values(2);

1 rows affected.

SQL> commit;

Succeed.

SQL> select min(decode(f0, 1, 'abc', 12.34)) from t_function_1;

MIN(DECODE(F0, 1, 'ABC', 12.34))                                
----------------------------------------------------------------
12.34                                                           

1 rows fetched.

SQL> 
SQL> --uuid()
SQL> SELECT UUID(1) FROM DUAL;    --syntax error

CT-00615, [1:8]Invalid argument number for UUID, min=0, max=0
SQL> SELECT UUID(NULL) FROM DUAL;    --syntax error

CT-00615, [1:8]Invalid argument number for UUID, min=0, max=0
SQL> SELECT LENGTHB(UUID()) FROM DUAL;  --call directly

LENGTHB(UUID())     
--------------------
32                  

1 rows fetched.

SQL> 
SQL> DROP TABLE IF EXISTS t_temp_guid;

Succeed.

SQL> CREATE TABLE t_temp_guid (col1 INTEGER NOT NULL, col2 VARCHAR(32) DEFAULT UUID());  --uuid() as default

Succeed.

SQL> INSERT INTO t_temp_guid(col1) VALUES (1);

1 rows affected.

SQL> INSERT INTO t_temp_guid(col1, col2) VALUES (1, UUID());

1 rows affected.

SQL> SELECT COUNT(col1) FROM t_temp_guid;

COUNT(COL1)         
--------------------
2                   

1 rows fetched.

SQL> DROP TABLE t_temp_guid;

Succeed.

SQL> 
SQL> --object_id()
SQL> DROP VIEW IF EXISTS v_objectid;

Succeed.

SQL> DROP TABLE IF EXISTS t_objectid;

Succeed.

SQL> DROP TABLE IF EXISTS t_temp_objectid;

Succeed.

SQL> CREATE TABLE t_objectid (col1 INTEGER NOT NULL, col2 VARCHAR(32));

Succeed.

SQL> CREATE TABLE t_temp_objectid (col1 INTEGER NOT NULL, col2 VARCHAR(32));

Succeed.

SQL> CREATE USER tempuser IDENTIFIED BY Asdf1234;

Succeed.

SQL> CREATE VIEW v_objectid AS SELECT col1 FROM t_objectid;

Succeed.

SQL> 
SQL> INSERT INTO t_temp_objectid VALUES (1, 't_objectid');

1 rows affected.

SQL> COMMIT;

Succeed.

SQL> 
SQL> SELECT OBJECT_NAME FROM USER_OBJECTS WHERE OBJECT_ID=OBJECT_ID('t_objectid') AND OBJECT_TYPE='TABLE';  --1 row found

OBJECT_NAME                                                     
----------------------------------------------------------------
T_OBJECTID                                                      

1 rows fetched.

SQL> SELECT OBJECT_NAME FROM USER_OBJECTS WHERE OBJECT_ID IN (SELECT OBJECT_ID(col2, 'table') AS id FROM t_temp_objectid WHERE col2 = 't_objectid') AND OBJECT_TYPE='TABLE'; --1 row found

OBJECT_NAME                                                     
----------------------------------------------------------------
T_OBJECTID                                                      

1 rows fetched.

SQL> SELECT OBJECT_NAME FROM USER_OBJECTS WHERE OBJECT_ID=OBJECT_ID('SYS_TABLES','TABLE') AND OBJECT_TYPE='TABLE';  --1 row found

OBJECT_NAME                                                     
----------------------------------------------------------------
SYS_TABLES                                                      

1 rows fetched.

SQL> SELECT OBJECT_NAME FROM USER_OBJECTS WHERE OBJECT_ID=OBJECT_ID('SYS_TABLES','TABLE', 'tempuser') AND OBJECT_TYPE='TABLE';  --0 row found

OBJECT_NAME                                                     
----------------------------------------------------------------

0 rows fetched.

SQL> SELECT OBJECT_NAME FROM USER_OBJECTS WHERE OBJECT_ID=OBJECT_ID('t_temp_objectid') AND OBJECT_TYPE='TABLE'; --1 row found

OBJECT_NAME                                                     
----------------------------------------------------------------
T_TEMP_OBJECTID                                                 

1 rows fetched.

SQL> SELECT OBJECT_NAME FROM USER_OBJECTS WHERE OBJECT_ID=OBJECT_ID('v_objectid') AND OBJECT_TYPE='VIEW';  --0 row found

OBJECT_NAME                                                     
----------------------------------------------------------------

0 rows fetched.

SQL> SELECT OBJECT_NAME FROM USER_OBJECTS WHERE OBJECT_ID=OBJECT_ID('v_objectid', 'view') AND OBJECT_TYPE='VIEW'; --1 row found

OBJECT_NAME                                                     
----------------------------------------------------------------
V_OBJECTID                                                      

1 rows fetched.

SQL> SELECT OBJECT_NAME FROM USER_OBJECTS WHERE OBJECT_ID=OBJECT_ID('v_objectid', 'view', 'tempuser') AND OBJECT_TYPE='VIEW';  --0 row found

OBJECT_NAME                                                     
----------------------------------------------------------------

0 rows fetched.

SQL> SELECT OBJECT_NAME FROM USER_OBJECTS WHERE OBJECT_ID=OBJECT_ID(TRIM('  t_objectid  '), 'TABLE') AND OBJECT_TYPE='TABLE';  --1 row found

OBJECT_NAME                                                     
----------------------------------------------------------------
T_OBJECTID                                                      

1 rows fetched.

SQL> SELECT OBJECT_NAME FROM USER_OBJECTS WHERE OBJECT_ID IN (SELECT OBJECT_ID(TRIM(col2), 'TABLE', 'sys') FROM t_temp_objectid WHERE col1=1) AND OBJECT_TYPE='TABLE';  --1 row found

OBJECT_NAME                                                     
----------------------------------------------------------------
T_OBJECTID                                                      

1 rows fetched.

SQL> SELECT OBJECT_NAME FROM DB_OBJECTS WHERE OBJECT_ID=OBJECT_ID('DV_DATABASE', 'DYNAMIC VIEW') AND OBJECT_TYPE='DYNAMIC VIEW';  --1 row found

OBJECT_NAME                                                     
----------------------------------------------------------------
DV_DATABASE                                                     

1 rows fetched.

SQL> SELECT OBJECT_NAME FROM USER_OBJECTS WHERE OBJECT_ID=OBJECT_ID('DV_DATABASE', 'DYNAMIC VIEW', 'tempuser') AND OBJECT_TYPE='DYNAMIC VIEW';  --0 row found

OBJECT_NAME                                                     
----------------------------------------------------------------

0 rows fetched.

SQL> 
SQL> CREATE OR REPLACE TRIGGER trig_objectid
  2 BEFORE INSERT OR UPDATE OF col1 OR DELETE ON t_objectid
  3 BEGIN
  4   INSERT INTO t_temp_objectid VALUES(100,'triggered');
  5 END;
  6 /

Succeed.

SQL> 
SQL> CREATE PROCEDURE proc_objectid(param1 out varchar2)
  2 IS
  3     tmp varchar2(20) :='12345678';
  4 begin
  5  param1:=param1||tmp;
  6 end proc_objectid;
  7 /

Succeed.

SQL> 
SQL> CREATE FUNCTION func_objectid(A varchar)
  2 RETURN varchar
  3 AS
  4 BEGIN
  5    if (func_objectid(A) = 'ab') then
  6    	return A;
  7    else
  8    	return func_objectid(A);
  9    end if; 
 10 END;
 11 /

Succeed.

SQL> 
SQL> SELECT OBJECT_NAME FROM USER_OBJECTS WHERE OBJECT_ID=OBJECT_ID('trig_objectid', 'trigger') AND OBJECT_TYPE='TRIGGER'; --1 row found

OBJECT_NAME                                                     
----------------------------------------------------------------
TRIG_OBJECTID                                                   

1 rows fetched.

SQL> SELECT NAME FROM SYS_PROCS WHERE OBJ# = OBJECT_ID('trig_objectid', 'trigger') AND SCN2DATE(ORG_SCN) IN (SELECT CREATED FROM USER_OBJECTS WHERE OBJECT_ID=OBJECT_ID('trig_objectid', 'trigger') AND OBJECT_TYPE='TRIGGER');

NAME                                                            
----------------------------------------------------------------
TRIG_OBJECTID                                                   

1 rows fetched.

SQL> SELECT NAME FROM SYS_PROCS WHERE OBJ# = OBJECT_ID('trig_objectid', 'trigger') AND SCN2DATE(ORG_SCN) IN (SELECT CREATED FROM ALL_OBJECTS WHERE OBJECT_ID=OBJECT_ID('trig_objectid', 'trigger') AND OBJECT_TYPE='TRIGGER');

NAME                                                            
----------------------------------------------------------------
TRIG_OBJECTID                                                   

1 rows fetched.

SQL> SELECT OBJECT_NAME FROM USER_OBJECTS WHERE OBJECT_ID=OBJECT_ID('proc_objectid', 'procedure') AND OBJECT_TYPE='PROCEDURE'; --1 row found

OBJECT_NAME                                                     
----------------------------------------------------------------
PROC_OBJECTID                                                   

1 rows fetched.

SQL> SELECT NAME FROM SYS_PROCS WHERE OBJ# = OBJECT_ID('proc_objectid', 'procedure') AND SCN2DATE(ORG_SCN) IN (SELECT CREATED FROM USER_OBJECTS WHERE OBJECT_ID=OBJECT_ID('proc_objectid', 'procedure') AND OBJECT_TYPE='PROCEDURE');

NAME                                                            
----------------------------------------------------------------
PROC_OBJECTID                                                   

1 rows fetched.

SQL> SELECT NAME FROM SYS_PROCS WHERE OBJ# = OBJECT_ID('proc_objectid', 'procedure') AND SCN2DATE(ORG_SCN) IN (SELECT CREATED FROM ALL_OBJECTS WHERE OBJECT_ID=OBJECT_ID('proc_objectid', 'procedure') AND OBJECT_TYPE='PROCEDURE');

NAME                                                            
----------------------------------------------------------------
PROC_OBJECTID                                                   

1 rows fetched.

SQL> SELECT OBJECT_NAME FROM USER_OBJECTS WHERE OBJECT_ID=OBJECT_ID('func_objectid', 'function') AND OBJECT_TYPE='FUNCTION'; --1 row found

OBJECT_NAME                                                     
----------------------------------------------------------------
FUNC_OBJECTID                                                   

1 rows fetched.

SQL> SELECT NAME FROM SYS_PROCS WHERE OBJ# = OBJECT_ID('func_objectid', 'function') AND SCN2DATE(ORG_SCN) IN (SELECT CREATED FROM USER_OBJECTS WHERE OBJECT_ID=OBJECT_ID('func_objectid', 'function') AND OBJECT_TYPE='FUNCTION');

NAME                                                            
----------------------------------------------------------------
FUNC_OBJECTID                                                   

1 rows fetched.

SQL> SELECT NAME FROM SYS_PROCS WHERE OBJ# = OBJECT_ID('func_objectid', 'function') AND SCN2DATE(ORG_SCN) IN (SELECT CREATED FROM ALL_OBJECTS WHERE OBJECT_ID=OBJECT_ID('func_objectid', 'function') AND OBJECT_TYPE='FUNCTION');

NAME                                                            
----------------------------------------------------------------
FUNC_OBJECTID                                                   

1 rows fetched.

SQL> 
SQL> SELECT OBJECT_NAME FROM USER_OBJECTS WHERE OBJECT_ID=OBJECT_ID('v_objectid', 'index');  --syntax error(not supported type)

CT-00614, [1:78]Parameter error: unrecognised object type "index".
SQL> SELECT OBJECT_NAME FROM USER_OBJECTS WHERE OBJECT_ID=OBJECT_ID('v_objectid', 'view', 'tempuser1'); --user not existed

OBJECT_NAME                                                     
----------------------------------------------------------------

0 rows fetched.

SQL> SELECT OBJECT_ID(123, 'view') FROM DUAL;  --syntax error, incorret datatype for object name

CT-00614, [1:18]Parameter error: illegal function argument: string argument expected - got BINARY_INTEGER
SQL> SELECT OBJECT_ID(NULL) FROM DUAL;  --syntax error

OBJECT_ID(NULL)     
--------------------
                    

1 rows fetched.

SQL> SELECT OBJECT_ID() FROM DUAL;  --syntax error, incorrect argument number

CT-00615, [1:8]Invalid argument number for OBJECT_ID, min=1, max=3
SQL> SELECT OBJECT_ID(TRIM('  t_objectid  '), 'TABLE', 'SYS', 'VIEW') FROM DUAL;  --syntax error, incorrect argument number

CT-00615, [1:8]Invalid argument number for OBJECT_ID, min=1, max=3
SQL> SELECT OBJECT_ID(TRIM('  t_objectid  '), 'TABLE', 'S'||dummy) FROM DUAL;  --syntax error, only const allowed in 3nd argument

CT-00601, [1:51]Sql syntax error: the 2nd and the 3rd argument of "OBJECT_ID" must be a const or a binding paramter
SQL> SELECT OBJECT_ID('abcd', 'ANONYMOUS BLOCK') FROM DUAL;  -- unsupported type

CT-00614, [1:26]Parameter error: unrecognised object type "ANONYMOUS BLOCK".
SQL> 
SQL> DROP TRIGGER trig_objectid;

Succeed.

SQL> DROP PROCEDURE proc_objectid;

Succeed.

SQL> DROP FUNCTION func_objectid;

Succeed.

SQL> DROP USER tempuser CASCADE;

Succeed.

SQL> DROP TABLE t_temp_objectid;

Succeed.

SQL> DROP VIEW v_objectid;

Succeed.

SQL> DROP TABLE t_objectid;

Succeed.

SQL> 
SQL> --sys_context() & userenv
SQL> DROP TABLE IF EXISTS t_myenv;

Succeed.

SQL> CREATE TABLE t_myenv(option VARCHAR(32) NOT NULL, oplen INTEGER);

Succeed.

SQL> 
SQL> INSERT INTO t_myenv VALUES('sid', 11);

1 rows affected.

SQL> INSERT INTO t_myenv VALUES('terminal', 4000);

1 rows affected.

SQL> INSERT INTO t_myenv VALUES('terminal', 1);

1 rows affected.

SQL> COMMIT;

Succeed.

SQL> 
SQL> SELECT COUNT(user_name) FROM V$ME WHERE SID IN (SELECT SYS_CONTEXT('USERENV', 'SID') FROM DUAL);

COUNT(USER_NAME)    
--------------------
1                   

1 rows fetched.

SQL> SELECT COUNT(user_name) FROM V$ME WHERE SID IN (SELECT CAST(SYS_CONTEXT('USERENV', option, (8 - 9)) AS INTEGER) FROM t_myenv WHERE option='sid');

COUNT(USER_NAME)    
--------------------
1                   

1 rows fetched.

SQL> SELECT COUNT(user_name) FROM V$ME WHERE SID IN (SELECT USERENV('SID') FROM DUAL);

COUNT(USER_NAME)    
--------------------
1                   

1 rows fetched.

SQL> SELECT COUNT(user_name) FROM V$ME WHERE SID IN (SELECT CAST(USERENV(option) AS INTEGER) FROM t_myenv WHERE option='sid');

COUNT(USER_NAME)    
--------------------
1                   

1 rows fetched.

SQL> SELECT COUNT(user_name) FROM V$ME WHERE OS_HOST IN (SELECT SYS_CONTEXT('USER'|| 'ENV', TRIM('TERMINAL'))) LIMIT 1;

COUNT(USER_NAME)    
--------------------
1                   

1 rows fetched.

SQL> SELECT COUNT(user_name) FROM V$ME WHERE OS_HOST IN (SELECT SYS_CONTEXT('USER'|| 'ENV', TRIM(BOTH FROM option)) FROM t_myenv WHERE option='terminal') LIMIT 1;

COUNT(USER_NAME)    
--------------------
1                   

1 rows fetched.

SQL> SELECT COUNT(user_name) FROM V$ME WHERE OS_HOST IN (SELECT SYS_CONTEXT('USER'|| 'ENV', TRIM(BOTH FROM option), oplen) FROM t_myenv WHERE option='terminal' AND oplen=1);   -- 0 row found, too short buffer

COUNT(USER_NAME)    
--------------------
0                   

1 rows fetched.

SQL> SELECT COUNT(user_name) FROM V$ME WHERE OS_HOST IN (SELECT SYS_CONTEXT('USER'|| 'ENV', TRIM(BOTH FROM option), oplen) FROM t_myenv WHERE option='terminal');

COUNT(USER_NAME)    
--------------------
1                   

1 rows fetched.

SQL> SELECT COUNT(user_name) FROM V$ME WHERE OS_HOST IN (SELECT USERENV(TRIM(BOTH FROM option)) FROM t_myenv WHERE option='terminal') LIMIT 1;

COUNT(USER_NAME)    
--------------------
1                   

1 rows fetched.

SQL> SELECT COUNT(user_name) FROM V$ME WHERE OS_HOST IN (SELECT USERENV('TERMINAL') FROM DUAL);

COUNT(USER_NAME)    
--------------------
1                   

1 rows fetched.

SQL> SELECT COUNT(user_name) FROM V$ME WHERE OS_HOST IN (SELECT SYS_CONTEXT('USER'|| 'ENV', TRIM('TERMINAL'), NULL)); --NULL can be implictly converted to INTEGER, so 1 row found

COUNT(USER_NAME)    
--------------------
1                   

1 rows fetched.

SQL> SELECT COUNT(user_name) FROM V$ME WHERE OS_HOST IN (SELECT SYS_CONTEXT('USER'|| 'ENV', TRIM('TERMINAL'), ABS(8 - 9)));  -- 0 row found, too short buffer

COUNT(USER_NAME)    
--------------------
0                   

1 rows fetched.

SQL> select COUNT(sid) from  v$session where sid=userenv('sid');

COUNT(SID)          
--------------------
1                   

1 rows fetched.

SQL> SELECT COUNT(user_name) FROM V$ME WHERE CURR_SCHEMA IN (SELECT SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') FROM DUAL);

COUNT(USER_NAME)    
--------------------
1                   

1 rows fetched.

SQL> SELECT COUNT(user_name) FROM V$ME WHERE USER_ID IN (SELECT SYS_CONTEXT('USER'||'ENV', 'CURRENT_SCHEMAID') FROM DUAL);

COUNT(USER_NAME)    
--------------------
1                   

1 rows fetched.

SQL> SELECT COUNT(DBID) FROM V$DATABASE WHERE NAME IN (SELECT SYS_CONTEXT('USERENV', 'DB_NAME') FROM DUAL);

COUNT(DBID)         
--------------------
1                   

1 rows fetched.

SQL> SELECT COUNT(user_name) FROM V$ME WHERE OS_USER IN (SELECT SYS_CONTEXT('USERENV', 'OS_USER') FROM DUAL);

COUNT(USER_NAME)    
--------------------
1                   

1 rows fetched.

SQL> SELECT COUNT(user_name) FROM V$ME WHERE CURR_SCHEMA IN (SELECT USERENV('CURRENT_SCHEMA') FROM DUAL);

COUNT(USER_NAME)    
--------------------
1                   

1 rows fetched.

SQL> SELECT COUNT(user_name) FROM V$ME WHERE USER_ID IN (SELECT USERENV('CURRENT_SCHEMAID') FROM DUAL);

COUNT(USER_NAME)    
--------------------
1                   

1 rows fetched.

SQL> SELECT COUNT(DBID) FROM V$DATABASE WHERE NAME IN (SELECT USERENV('DB_NAME') FROM DUAL);

COUNT(DBID)         
--------------------
1                   

1 rows fetched.

SQL> SELECT COUNT(user_name) FROM V$ME WHERE OS_USER IN (SELECT USERENV('OS_USER') FROM DUAL);

COUNT(USER_NAME)    
--------------------
1                   

1 rows fetched.

SQL> 
SQL> SELECT SYS_CONTEXT('USER_ENV', 'SID') FROM DUAL; --namespace error

CT-00614, [1:20]Parameter error: unrecognised namespace name "USER_ENV".
SQL> SELECT SYS_CONTEXT('USERENV', 'UID') FROM DUAL; --option error

CT-00614, [1:31]Parameter error: unrecognised option name "UID".
SQL> SELECT SYS_CONTEXT(NULL, 'SID') FROM DUAL; --namespace error

CT-00614, [1:20]Parameter error: namespace cannot be NULL
SQL> SELECT SYS_CONTEXT('USERENV', NULL) FROM DUAL; --option error

CT-00614, [1:31]Parameter error: the option name cannot be NULL
SQL> SELECT SYS_CONTEXT('USERENV', 32) FROM DUAL; --option error

CT-00614, [1:31]Parameter error: illegal function argument: string argument expected - got BINARY_INTEGER
SQL> SELECT SYS_CONTEXT('USERENV', 'SID', 'AAA') FROM DUAL; --length error

CT-00636, Invalid number -- unexpected character
SQL> SELECT SYS_CONTEXT('USERENV', 'SID', 32, 1) FROM DUAL; --invalid parameter

CT-00615, [1:8]Invalid argument number for SYS_CONTEXT, min=2, max=3
SQL> SELECT SYS_CONTEXT('USERENV') FROM DUAL; --invalid parameter

CT-00615, [1:8]Invalid argument number for SYS_CONTEXT, min=2, max=3
SQL> SELECT USERENV('LANG') FROM DUAL; --option error

CT-00614, [1:16]Parameter error: unrecognised option name "LANG".
SQL> SELECT USERENV('LANGUAGE') FROM DUAL; --option error

CT-00614, [1:16]Parameter error: unrecognised option name "LANGUAGE".
SQL> SELECT USERENV('ISDBA') FROM DUAL; --option error

CT-00614, [1:16]Parameter error: unrecognised option name "ISDBA".
SQL> SELECT USERENV('ENTRYID') FROM DUAL; --option error

CT-00614, [1:16]Parameter error: unrecognised option name "ENTRYID".
SQL> SELECT USERENV('CLIENT_INFO') FROM DUAL; --option error

CT-00614, [1:16]Parameter error: unrecognised option name "CLIENT_INFO".
SQL> SELECT USERENV('SESSIONID') FROM DUAL; --option error

CT-00614, [1:16]Parameter error: unrecognised option name "SESSIONID".
SQL> SELECT USERENV() FROM DUAL; --invalid parameter

CT-00615, [1:8]Invalid argument number for USERENV, min=1, max=1
SQL> SELECT USERENV('SID',32) FROM DUAL; --invalid parameter

CT-00615, [1:8]Invalid argument number for USERENV, min=1, max=1
SQL> 
SQL> DROP TABLE t_myenv;

Succeed.

SQL> 
SQL> select convert(1234.456, number(10, 2)) from dual;

CONVERT(1234.456, NUMBER(10, 2))        
----------------------------------------
1234.46                                 

1 rows fetched.

SQL> select convert('1234.456', number(10, 2)) from dual;

CONVERT('1234.456', NUMBER(10, 2))      
----------------------------------------
1234.46                                 

1 rows fetched.

SQL> select convert(1234.456, signed int) from dual;

CONVERT(1234.456, SIGNED INT)
-----------------------------
1234                         

1 rows fetched.

SQL> select convert('1970-01-01 00:00:00.000', timestamp) from dual;

CONVERT('1970-01-01 00:00:00.000', TIMESTAMP)
---------------------------------------------
1970-01-01 00:00:00.000000                   

1 rows fetched.

SQL> select convert('1970-01-01 00:00:00', datetime) from dual;

CONVERT('1970-01-01 00:00:00', DATETIME)
----------------------------------------
1970-01-01 00:00:00                     

1 rows fetched.

SQL> select reverse('asdf');

REVERSE('ASDF')
---------------
fdsa           

1 rows fetched.

SQL> select reverse(cast('asdf' as varchar(4)));

REVERSE(CAST('ASDF' AS VARCHAR(4)))
-----------------------------------
fdsa                               

1 rows fetched.

SQL> select reverse(12345);

CT-00614, [1:16]Parameter error: illegal function argument: string argument expected - got BINARY_INTEGER
SQL> select reverse(cast('2018-07-18' as datetime));

CT-00614, [1:16]Parameter error: illegal function argument: string argument expected - got DATE
SQL> 
SQL> --sql_verify_round_trunc error
SQL> select round(f0) from t_function_4;

CT-00614, [1:14]Parameter error: illegal function argument: NUMERIC or DATETIME argument expected - got BLOB
SQL> select trunc(f0) from t_function_4;

CT-00614, [1:14]Parameter error: illegal function argument: NUMERIC or DATETIME argument expected - got BLOB
SQL> select round(sysdate, sysdate) from t_function_4;

CT-00614, [1:23]Parameter error: illegal function argument: string argument expected - got DATE
SQL> select trunc(12345678, sysdate) from t_function_4;

CT-00614, [1:24]Parameter error: illegal function argument: NUMERIC argument expected - got DATE
SQL> select round(1234.5678, sysdate) from t_function_4;

CT-00614, [1:25]Parameter error: illegal function argument: NUMERIC argument expected - got DATE
SQL> select trunc('1234.5678', sysdate) from t_function_4;

CT-00614, [1:27]Parameter error: illegal function argument: NUMERIC argument expected - got DATE
SQL> 
SQL> --get_lock() & release_lock(): basic functionality
SQL> DROP TABLE IF EXISTS t_shared_locks;

Succeed.

SQL> CREATE TABLE t_shared_locks(name VARCHAR(128) NOT NULL, timeout INTEGER);

Succeed.

SQL> 
SQL> INSERT INTO t_shared_locks VALUES('a001', 3);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('b002', -32);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('c003', 10);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('d004', 0);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('e005', 10);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('f006', 10);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('g007', 10);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('h008', 10);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('i009', 10);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('j010', 10);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('k011', 10);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('l012', 10);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('m013', 10);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('n014', 10);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('o015', 10);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('p016', 10);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('p016', 3);    --duplicate

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('p016', -32767);  --duplicate

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('q017', 10);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('r018', 10);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('s019', 10);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('t020', 10);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('u021', 10);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('v022', 10);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('w023', 10);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('x024', 10);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('y025', 10);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('z026', 10);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('asdfqwerasdfqwerasdfqwerasdfqwerasdfqwerasdfqwerasdfqwerasdfqwer', 100);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('qwer1234', 1);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('a001', 1); --duplicate

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('a0001', 1);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('b0002', 1);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('c0003', 3);

1 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('d0004', 3);

1 rows affected.

SQL> COMMIT;

Succeed.

SQL> 
SQL> SELECT GET_LOCK(name, timeout) FROM t_shared_locks;

GET_LOCK(NAME, TIMEOUT)
-----------------------
1                      
1                      
1                      
1                      
1                      
1                      
1                      
1                      
1                      
1                      
1                      
1                      
1                      
1                      
1                      
1                      
1                      
1                      
1                      
1                      
1                      
1                      
1                      
1                      
1                      
1                      
1                      
1                      
1                      
1                      
1                      
1                      
1                      
1                      
1                      

35 rows fetched.

SQL> SELECT LOCK_NAME, LOCK_TIMES FROM V$USER_ADVISORY_LOCKS WHERE SID=CONNECTION_ID() ORDER BY LOCK_NAME;

LOCK_NAME                                                        LOCK_TIMES  
---------------------------------------------------------------- ------------
a0001                                                            1           
a001                                                             2           
asdfqwerasdfqwerasdfqwerasdfqwerasdfqwerasdfqwerasdfqwerasdfqwer 1           
b0002                                                            1           
b002                                                             1           
c0003                                                            1           
c003                                                             1           
d0004                                                            1           
d004                                                             1           
e005                                                             1           
f006                                                             1           
g007                                                             1           
h008                                                             1           
i009                                                             1           
j010                                                             1           
k011                                                             1           
l012                                                             1           
m013                                                             1           
n014                                                             1           
o015                                                             1           
p016                                                             3           
q017                                                             1           
qwer1234                                                         1           
r018                                                             1           
s019                                                             1           
t020                                                             1           
u021                                                             1           
v022                                                             1           
w023                                                             1           
x024                                                             1           
y025                                                             1           
z026                                                             1           

32 rows fetched.

SQL> 
SQL> INSERT INTO t_shared_locks VALUES('e0005', 12);

1 rows affected.

SQL> COMMIT;

Succeed.

SQL> SELECT GET_LOCK(name, timeout) FROM t_shared_locks WHERE name='e005';

GET_LOCK(NAME, TIMEOUT)
-----------------------
1                      

1 rows fetched.

SQL> SELECT COUNT(LOCK_NAME) FROM V$USER_ADVISORY_LOCKS WHERE SID=CONNECTION_ID();  --32

COUNT(LOCK_NAME)    
--------------------
32                  

1 rows fetched.

SQL> SELECT RELEASE_LOCK(name) FROM t_shared_locks;  --mixed with 35 number '1' and a NULL

RELEASE_LOCK(NAME)
------------------
1                 
1                 
1                 
1                 
1                 
1                 
1                 
1                 
1                 
1                 
1                 
1                 
1                 
1                 
1                 
1                 
1                 
1                 
1                 
1                 
1                 
1                 
1                 
1                 
1                 
1                 
1                 
1                 
1                 
1                 
1                 
1                 
1                 
1                 
1                 
                  

36 rows fetched.

SQL> 
SQL> DELETE FROM t_shared_locks;

36 rows affected.

SQL> INSERT INTO t_shared_locks VALUES('asdfqwerasdfqwerasdfqwerasdfqwerasdfqwerasdfqwerasdfqwerasdfqwerX', 3);

1 rows affected.

SQL> COMMIT;

Succeed.

SQL> SELECT GET_LOCK(name, timeout) FROM t_shared_locks;

GET_LOCK(NAME, TIMEOUT)
-----------------------
1                      

1 rows fetched.

SQL> SELECT COUNT(LOCK_NAME) FROM V$USER_ADVISORY_LOCKS WHERE SID=CONNECTION_ID();  --0 rows

COUNT(LOCK_NAME)    
--------------------
2                   

1 rows fetched.

SQL> 
SQL> SELECT GET_LOCK('32767', 'a') FROM DUAL;  -- timeout invalid

CT-00636, Invalid number -- unexpected character
SQL> SELECT GET_LOCK() FROM DUAL;  -- invalid parameter count

CT-00615, [1:8]Invalid argument number for GET_LOCK, min=1, max=2
SQL> SELECT GET_LOCK('32767', 'a', 33) FROM DUAL;  -- invalid parameter count

CT-00615, [1:8]Invalid argument number for GET_LOCK, min=1, max=2
SQL> SELECT RELEASE_LOCK() FROM DUAL;  -- invalid parameter count

CT-00615, [1:8]Invalid argument number for RELEASE_LOCK, min=1, max=1
SQL> SELECT RELEASE_LOCK('32767', 3) FROM DUAL;  -- invalid parameter count 

CT-00615, [1:8]Invalid argument number for RELEASE_LOCK, min=1, max=1
SQL> 
SQL> DROP TABLE t_shared_locks;

Succeed.

SQL> 
SQL> --found_rows()
SQL> 
SQL> DROP TABLE IF EXISTS foobar;

Succeed.

SQL> DROP TABLE IF EXISTS footemp;

Succeed.

SQL> CREATE TABLE foobar (col1 INTEGER NOT NULL, col2 VARCHAR(32));

Succeed.

SQL> CREATE TABLE footemp (col1 INTEGER NOT NULL, col2 VARCHAR(32));

Succeed.

SQL> 
SQL> INSERT INTO foobar VALUES (1, 'aaa');

1 rows affected.

SQL> INSERT INTO foobar VALUES (2, 'b');

1 rows affected.

SQL> INSERT INTO foobar VALUES (3, 'cc');

1 rows affected.

SQL> INSERT INTO foobar VALUES (4, 'ddd');

1 rows affected.

SQL> INSERT INTO foobar VALUES (5, 'eeee');

1 rows affected.

SQL> INSERT INTO foobar VALUES (6, 'aaa');

1 rows affected.

SQL> INSERT INTO foobar VALUES (7, 'bbb');

1 rows affected.

SQL> INSERT INTO foobar VALUES (8, 'b');

1 rows affected.

SQL> INSERT INTO foobar VALUES (9, 'cc');

1 rows affected.

SQL> INSERT INTO foobar VALUES (10, 'dddd');

1 rows affected.

SQL> INSERT INTO foobar VALUES (11, 'aaa');

1 rows affected.

SQL> INSERT INTO foobar VALUES (12, 'f'); 

1 rows affected.

SQL> INSERT INTO foobar VALUES (4, 'aaa');

1 rows affected.

SQL> INSERT INTO foobar VALUES (6, 'bb');

1 rows affected.

SQL> INSERT INTO foobar VALUES (7, 'ccc');

1 rows affected.

SQL> INSERT INTO foobar VALUES (9, 'ddd');

1 rows affected.

SQL> INSERT INTO foobar VALUES (12, 'ee');

1 rows affected.

SQL> INSERT INTO foobar VALUES (1, 'eeee');

1 rows affected.

SQL> INSERT INTO foobar VALUES (3, 'b');

1 rows affected.

SQL> INSERT INTO foobar VALUES (7, 'ff');

1 rows affected.

SQL> 
SQL> COMMIT;

Succeed.

SQL> 
SQL> INSERT INTO footemp VALUES (1, 'aaa');

1 rows affected.

SQL> INSERT INTO footemp VALUES (2, 'b');

1 rows affected.

SQL> INSERT INTO footemp VALUES (3, 'cc');

1 rows affected.

SQL> INSERT INTO footemp VALUES (4, 'ddd');

1 rows affected.

SQL> INSERT INTO footemp VALUES (5, 'eeee');

1 rows affected.

SQL> INSERT INTO footemp VALUES (6, 'aaa');

1 rows affected.

SQL> INSERT INTO footemp VALUES (7, 'bbb');

1 rows affected.

SQL> INSERT INTO footemp VALUES (8, 'b');

1 rows affected.

SQL> 
SQL> COMMIT;

Succeed.

SQL> 
SQL> --in the documentation of mysql, the usage with the absense of "SQL_CALC_FOUND_ROWS", 
SQL> --the description of this usage is:
SQL> --"In the absence of the SQL_CALC_FOUND_ROWS option in the most recent successful SELECT statement, 
SQL> --FOUND_ROWS() returns the number of rows in the result set returned by that statement"
SQL> --
SQL> --HOWEVER, mysql did not implement it completely according to its own description,
SQL> --so we have to test this kind of usage by comparing the result set
SQL> SELECT * FROM foobar ORDER BY col1, col2;

COL1         COL2                            
------------ --------------------------------
1            aaa                             
1            eeee                            
2            b                               
3            b                               
3            cc                              
4            aaa                             
4            ddd                             
5            eeee                            
6            aaa                             
6            bb                              
7            bbb                             
7            ccc                             
7            ff                              
8            b                               
9            cc                              
9            ddd                             
10           dddd                            
11           aaa                             
12           ee                              
12           f                               

20 rows fetched.

SQL> SELECT FOUND_ROWS();

FOUND_ROWS()        
--------------------
20                  

1 rows fetched.

SQL> 
SQL> SELECT * FROM foobar ORDER BY col1, col2 LIMIT 5, 3;

COL1         COL2                            
------------ --------------------------------
4            aaa                             
4            ddd                             
5            eeee                            

3 rows fetched.

SQL> SELECT FOUND_ROWS();

FOUND_ROWS()        
--------------------
3                   

1 rows fetched.

SQL> 
SQL> SELECT * FROM foobar WHERE col1 >11 ORDER BY col1, col2 LIMIT 5, 3;

COL1         COL2                            
------------ --------------------------------

0 rows fetched.

SQL> SELECT FOUND_ROWS();

FOUND_ROWS()        
--------------------
0                   

1 rows fetched.

SQL> 
SQL> SELECT col1, col2 FROM foobar WHERE col1 > 10 UNION ALL SELECT col1, col2 FROM footemp ORDER BY col1, col2;

COL1         COL2                            
------------ --------------------------------
1            aaa                             
2            b                               
3            cc                              
4            ddd                             
5            eeee                            
6            aaa                             
7            bbb                             
8            b                               
11           aaa                             
12           ee                              
12           f                               

11 rows fetched.

SQL> SELECT FOUND_ROWS();

FOUND_ROWS()        
--------------------
11                  

1 rows fetched.

SQL> 
SQL> (SELECT col1, col2 FROM foobar WHERE col1 > 10 ORDER BY col1, col2 LIMIT 2) UNION ALL SELECT col1, col2 FROM footemp ORDER BY col1 DESC, col2;

COL1         COL2                            
------------ --------------------------------
12           ee                              
11           aaa                             
8            b                               
7            bbb                             
6            aaa                             
5            eeee                            
4            ddd                             
3            cc                              
2            b                               
1            aaa                             

10 rows fetched.

SQL> SELECT FOUND_ROWS();

FOUND_ROWS()        
--------------------
10                  

1 rows fetched.

SQL> 
SQL> (SELECT col1, col2 FROM foobar WHERE col1 > 10 ORDER BY col1, col2 LIMIT 2) UNION ALL SELECT col1, col2 FROM footemp ORDER BY col2, col1 LIMIT 3;

COL1         COL2                            
------------ --------------------------------
1            aaa                             
6            aaa                             
11           aaa                             

3 rows fetched.

SQL> SELECT FOUND_ROWS();

FOUND_ROWS()        
--------------------
3                   

1 rows fetched.

SQL> 
SQL> (SELECT col1, col2 FROM foobar WHERE col1 > 10) UNION ALL (SELECT col1, col2 FROM footemp ORDER BY col1, col2 LIMIT 2) ORDER BY col2, col1 LIMIT 3;

COL1         COL2                            
------------ --------------------------------
1            aaa                             
11           aaa                             
2            b                               

3 rows fetched.

SQL> SELECT FOUND_ROWS();

FOUND_ROWS()        
--------------------
3                   

1 rows fetched.

SQL> 
SQL> SELECT col1, col2 FROM foobar WHERE col1 < 10 UNION SELECT col1, col2 FROM footemp ORDER BY col1, col2 LIMIT 2;

COL1         COL2                            
------------ --------------------------------
1            aaa                             
1            eeee                            

2 rows fetched.

SQL> SELECT FOUND_ROWS();

FOUND_ROWS()        
--------------------
2                   

1 rows fetched.

SQL> 
SQL> SELECT col1, col2 FROM ((SELECT col1, col2 FROM foobar WHERE col1 > 5) UNION (SELECT col1, col2 FROM footemp ORDER BY col1, col2 LIMIT 2)) temp ORDER BY col2, col1 LIMIT 2, 3;

COL1         COL2                            
------------ --------------------------------
11           aaa                             
2            b                               
8            b                               

3 rows fetched.

SQL> SELECT FOUND_ROWS();

FOUND_ROWS()        
--------------------
3                   

1 rows fetched.

SQL> 
SQL> SELECT col1, col2 FROM (SELECT f1.col1 as col1, f1.col2 as col2 FROM foobar f1 JOIN footemp f2 ON f1.col1 = f2.col1 ORDER BY f1.col1, f1.col2 LIMIT 5) temp ORDER BY col2, col1 LIMIT 2, 3;

COL1         COL2                            
------------ --------------------------------
3            b                               
3            cc                              
1            eeee                            

3 rows fetched.

SQL> SELECT FOUND_ROWS();

FOUND_ROWS()        
--------------------
3                   

1 rows fetched.

SQL> 
SQL> SELECT col1, col2 FROM foobar WHERE col1 in (SELECT col1 FROM footemp) ORDER BY col1, col2 LIMIT 5, 4;

COL1         COL2                            
------------ --------------------------------
4            aaa                             
4            ddd                             
5            eeee                            
6            aaa                             

4 rows fetched.

SQL> SELECT FOUND_ROWS();

FOUND_ROWS()        
--------------------
4                   

1 rows fetched.

SQL> 
SQL> SELECT SQL_CALC_FOUND_ROWS * FROM foobar MINUS SELECT * FROM footemp ORDER BY col1, col2 LIMIT 5, 3;

COL1         COL2                            
------------ --------------------------------
7            ff                              
9            cc                              
9            ddd                             

3 rows fetched.

SQL> SELECT 1 FROM DUAL WHERE FOUND_ROWS() = (SELECT COUNT(col1) FROM (SELECT * FROM foobar MINUS SELECT * FROM footemp ORDER BY col1, col2) temp);  --expect: 1 row fetched

1           
------------
1           

1 rows fetched.

SQL> SELECT * FROM foobar MINUS SELECT * FROM footemp ORDER BY col1, col2 LIMIT 5, 3;

COL1         COL2                            
------------ --------------------------------
7            ff                              
9            cc                              
9            ddd                             

3 rows fetched.

SQL> SELECT 1 FROM DUAL WHERE FOUND_ROWS() = (SELECT COUNT(col1) FROM (SELECT * FROM foobar MINUS SELECT * FROM footemp ORDER BY col1, col2) temp);  --expect: 0 row fetched

1           
------------

0 rows fetched.

SQL> 
SQL> --query a dynamic view (no table entity at all)
SQL> SELECT SQL_CALC_FOUND_ROWS ID FROM V$DATAFILE LIMIT 100, 2;  --no row retrived due to limit's offset

ID          
------------

0 rows fetched.

SQL> SELECT 1 FROM DUAL WHERE FOUND_ROWS() = (SELECT COUNT(ID) FROM V$DATAFILE);  -- expect: 1 row fetched

1           
------------
1           

1 rows fetched.

SQL> SELECT ID FROM V$DATAFILE LIMIT 100, 2;

ID          
------------

0 rows fetched.

SQL> SELECT 1 FROM DUAL WHERE FOUND_ROWS() = (SELECT COUNT(ID) FROM V$DATAFILE);  -- expect: 0 row fetched

1           
------------

0 rows fetched.

SQL> 
SQL> --syntax check
SQL> SELECT col1, col2 FROM (SELECT SQL_CALC_FOUND_ROWS f1.col1 as col1, f1.col2 as col2 FROM foobar f1 JOIN footemp f2 ON f1.col1 = f2.col1 ORDER BY f1.col1, f1.col2 LIMIT 5) temp ORDER BY col2, col1 LIMIT 2, 3;

CT-00601, [1:52]Sql syntax error: invalid column alias
SQL> SELECT col1, col2 FROM foobar WHERE col1 > 10 UNION ALL SELECT SQL_CALC_FOUND_ROWS col1, col2 FROM footemp ORDER BY col1, col2;

CT-00601, [1:64]Sql syntax error: Incorrect usage/placement of "SQL_CALC_FOUND_ROWS"
SQL> SELECT col1, col2 FROM foobar WHERE col1 in (SELECT SQL_CALC_FOUND_ROWS col1 FROM footemp) ORDER BY col1, col2 LIMIT 5, 4;

CT-00601, [1:53]Sql syntax error: invalid column name 'SQL_CALC_FOUND_ROWS'
SQL> SELECT SQL_CALC_FOUND_ROWS col1, col2 FROM foobar WHERE col1 > 10 UNION ALL SELECT SQL_CALC_FOUND_ROWS col1, col2 FROM footemp ORDER BY col1, col2;

CT-00601, [1:84]Sql syntax error: Incorrect usage/placement of "SQL_CALC_FOUND_ROWS"
SQL> 
SQL> SELECT * FROM foobar ORDER BY col1, col2 LIMIT 0 offset 2;

COL1         COL2                            
------------ --------------------------------

0 rows fetched.

SQL> SELECT FOUND_ROWS();

FOUND_ROWS()        
--------------------
0                   

1 rows fetched.

SQL> SELECT * FROM foobar union all SELECT * FROM foobar ORDER BY col1, col2 LIMIT 0 offset 3;

COL1         COL2                            
------------ --------------------------------

0 rows fetched.

SQL> SELECT FOUND_ROWS();

FOUND_ROWS()        
--------------------
0                   

1 rows fetched.

SQL> 
SQL> DROP TABLE foobar;

Succeed.

SQL> DROP TABLE footemp;

Succeed.

SQL> 
SQL> --sha1()
SQL> SELECT SHA1() FROM DUAL;  --syntax error

CT-00615, [1:8]Invalid argument number for SHA1, min=1, max=1
SQL> SELECT SHA1(123, 456) FROM DUAL;  --syntax error

CT-00615, [1:8]Invalid argument number for SHA1, min=1, max=1
SQL> SELECT LENGTH(SHA1('')) AS L, SHA1('') AS SHA FROM DUAL;  --zenith's empty string is NULL

L                    SHA
-------------------- ---
                        

1 rows fetched.

SQL> SELECT LENGTH(SHA1(HEX2BIN('0x112233'))) AS L, SHA1(HEX2BIN('0x112233')) AS SHA FROM DUAL;

L                    SHA                                     
-------------------- ----------------------------------------
40                   228B3B718E92E54B02D6735B2A8AF3978CA225BE

1 rows fetched.

SQL> 
SQL> drop table t_function_1;

Succeed.

SQL> drop table t_function_2;

Succeed.

SQL> drop table t_function_3;

Succeed.

SQL> drop table t_function_4;

Succeed.

SQL> drop table t_function_5;

Succeed.

SQL> drop table t_function_6;

Succeed.

SQL> 
SQL> select nvl(null, 'abc') from dual;

NVL(NULL, 'ABC')
----------------
abc             

1 rows fetched.

SQL> select nvl(null, to_timestamp('2012-12-12 12:12:12.121212')) from dual;

NVL(NULL, TO_TIMESTAMP('2012-12-12 12:12:12.121212'))
-----------------------------------------------------
2012-12-12 12:12:12.121212                           

1 rows fetched.

SQL> select nvl(null, to_timestamp('2012-12-12 12:12:12.121212')) + 1 from dual;

NVL(NULL, TO_TIMESTAMP('2012-12-12 12:12:12.121212')) + 1
---------------------------------------------------------
2012-12-13 12:12:12.121212                               

1 rows fetched.

SQL> select nvl('', to_timestamp('2012-12-12 12:12:12.121212')) + 1 from dual;

CT-00636, [1:60]Invalid number -- unexpected character
SQL> select cast((select 1234 from dual) as varchar(20)) as abc from dual;

ABC                 
--------------------
1234                

1 rows fetched.

SQL> 
SQL> ------------------------ substring_index ------------------------
SQL> select substring_index ();

CT-00615, [1:8]Invalid argument number for SUBSTRING_INDEX, min=3, max=3
SQL> select substring_index ('abc');

CT-00615, [1:8]Invalid argument number for SUBSTRING_INDEX, min=3, max=3
SQL> select substring_index ('abc', 'abc');

CT-00615, [1:8]Invalid argument number for SUBSTRING_INDEX, min=3, max=3
SQL> select substring_index ('abc', 'abc', 1, 1);

CT-00615, [1:8]Invalid argument number for SUBSTRING_INDEX, min=3, max=3
SQL> select substring_index ('abc', 'abc', 'a');

CT-00636, Invalid number -- unexpected character
SQL> select substring_index ('1aaaaaaaa2', 'aa', 2147483648);

CT-00659, INTEGER out of range
SQL> select substring_index ('1aaaaaaaa2', 'aa', -2147483649);

CT-00659, INTEGER out of range
SQL> select 1 from dual where substring_index ('1aaaaaaaa2', 'aa', 0) is null;

1           
------------
1           

1 rows fetched.

SQL> select substring_index ('1aaaaaaaa2', 'aaaaaaaa', 0);

SUBSTRING_INDEX ('1AAAAAAAA2', 'AAAAAAAA', 0)
---------------------------------------------
                                             

1 rows fetched.

SQL> select substring_index ('1aaaaaaaa2', '1aaaaaaaa2', 0);

SUBSTRING_INDEX ('1AAAAAAAA2', '1AAAAAAAA2', 0)
-----------------------------------------------
                                               

1 rows fetched.

SQL> select substring_index ('1aaaaaaaa2', '1aaaaaaaa2', 1);

SUBSTRING_INDEX ('1AAAAAAAA2', '1AAAAAAAA2', 1)
-----------------------------------------------
                                               

1 rows fetched.

SQL> select substring_index('aaaaaaaaa1','a',1);

SUBSTRING_INDEX('AAAAAAAAA1','A',1)
-----------------------------------
                                   

1 rows fetched.

SQL> select substring_index('aaaaaaaaa1','aa',1);

SUBSTRING_INDEX('AAAAAAAAA1','AA',1)
------------------------------------
                                    

1 rows fetched.

SQL> select substring_index('aaaaaaaaa1','aaa',1);

SUBSTRING_INDEX('AAAAAAAAA1','AAA',1)
-------------------------------------
                                     

1 rows fetched.

SQL> select substring_index('aaaaaaaaa1','aaaa',1);

SUBSTRING_INDEX('AAAAAAAAA1','AAAA',1)
--------------------------------------
                                      

1 rows fetched.

SQL> select substring_index('www.tcx.se','',3);

SUBSTRING_INDEX('WWW.TCX.SE','',3)
----------------------------------
                                  

1 rows fetched.

SQL> select 1 from dual where substring_index ('1aaaaaaaa2', 'aa', 0) is null;

1           
------------
1           

1 rows fetched.

SQL> 
SQL> drop table if exists t1;

Succeed.

SQL> create table t1 (c varchar(40));

Succeed.

SQL> insert into t1 values ('y,abc'),('y,abc');

2 rows affected.

SQL> select c, substring_index(lower(c), ',', -1) as res from t1;

C                                        RES                                     
---------------------------------------- ----------------------------------------
y,abc                                    abc                                     
y,abc                                    abc                                     

2 rows fetched.

SQL> drop table t1;

Succeed.

SQL> 
SQL> CREATE TABLE t (i INT NOT NULL, c CHAR(255) NOT NULL);

Succeed.

SQL> INSERT INTO t VALUES (0,'.www.mysql.com'),(1,'.wwwmysqlcom');

2 rows affected.

SQL> SELECT i, SUBSTRING_INDEX(c, '.', -2) FROM t WHERE i = 1;

I            SUBSTRING_INDEX(C, '.', -2)                                     
------------ ----------------------------------------------------------------
1            .wwwmysqlcom                                                                                                                                                                                                                                                   

1 rows fetched.

SQL> SELECT i, SUBSTRING_INDEX(c, '.', -2) FROM t;

I            SUBSTRING_INDEX(C, '.', -2)                                     
------------ ----------------------------------------------------------------
0            mysql.com                                                                                                                                                                                                                                                 
1            .wwwmysqlcom                                                                                                                                                                                                                                                   

2 rows fetched.

SQL> drop table t;

Succeed.

SQL> 
SQL> -- test utf8
SQL> select substring_index ('分隔F华为分隔F技术分隔F有限分隔F公司分隔F', '分隔F', 0); 

SUBSTRING_INDEX ('分隔F华为分隔F技术分隔F有限分隔F
----------------------------------------------------------------
                                                                

1 rows fetched.

SQL> select substring_index ('分隔F华为分隔F技术分隔F有限分隔F公司分隔F', '分隔F', 1); 

SUBSTRING_INDEX ('分隔F华为分隔F技术分隔F有限分隔F
----------------------------------------------------------------
                                                                

1 rows fetched.

SQL> select substring_index ('分隔F华为分隔F技术分隔F有限分隔F公司分隔F', '分隔F', 2); 

SUBSTRING_INDEX ('分隔F华为分隔F技术分隔F有限分隔F
----------------------------------------------------------------
分隔F华为                                                   

1 rows fetched.

SQL> select substring_index ('分隔F华为分隔F技术分隔F有限分隔F公司分隔F', '分隔F', 3); 

SUBSTRING_INDEX ('分隔F华为分隔F技术分隔F有限分隔F
----------------------------------------------------------------
分隔F华为分隔F技术                                      

1 rows fetched.

SQL> select substring_index ('分隔F华为分隔F技术分隔F有限分隔F公司分隔F', '分隔F', 4); 

SUBSTRING_INDEX ('分隔F华为分隔F技术分隔F有限分隔F
----------------------------------------------------------------
分隔F华为分隔F技术分隔F有限                         

1 rows fetched.

SQL> select substring_index ('分隔F华为分隔F技术分隔F有限分隔F公司分隔F', '分隔F', 5); 

SUBSTRING_INDEX ('分隔F华为分隔F技术分隔F有限分隔F
----------------------------------------------------------------
分隔F华为分隔F技术分隔F有限分隔F公司            

1 rows fetched.

SQL> select substring_index ('分隔F华为分隔F技术分隔F有限分隔F公司分隔F', '分隔F', 6);

SUBSTRING_INDEX ('分隔F华为分隔F技术分隔F有限分隔F
----------------------------------------------------------------
分隔F华为分隔F技术分隔F有限分隔F公司分隔F     

1 rows fetched.

SQL> select substring_index ('分隔F华为分隔F技术分隔F有限分隔F公司分隔F', '分隔F', 7);

SUBSTRING_INDEX ('分隔F华为分隔F技术分隔F有限分隔F
----------------------------------------------------------------
分隔F华为分隔F技术分隔F有限分隔F公司分隔F     

1 rows fetched.

SQL> select substring_index ('分隔F华为分隔F技术分隔F有限分隔F公司分隔F', '分隔F', -1); 

SUBSTRING_INDEX ('分隔F华为分隔F技术分隔F有限分隔F
----------------------------------------------------------------
                                                                

1 rows fetched.

SQL> select substring_index ('分隔F华为分隔F技术分隔F有限分隔F公司分隔F', '分隔F', -2); 

SUBSTRING_INDEX ('分隔F华为分隔F技术分隔F有限分隔F
----------------------------------------------------------------
公司分隔F                                                   

1 rows fetched.

SQL> select substring_index ('分隔F华为分隔F技术分隔F有限分隔F公司分隔F', '分隔F', -3); 

SUBSTRING_INDEX ('分隔F华为分隔F技术分隔F有限分隔F
----------------------------------------------------------------
有限分隔F公司分隔F                                      

1 rows fetched.

SQL> select substring_index ('分隔F华为分隔F技术分隔F有限分隔F公司分隔F', '分隔F', -4); 

SUBSTRING_INDEX ('分隔F华为分隔F技术分隔F有限分隔F
----------------------------------------------------------------
技术分隔F有限分隔F公司分隔F                         

1 rows fetched.

SQL> select substring_index ('分隔F华为分隔F技术分隔F有限分隔F公司分隔F', '分隔F', -5); 

SUBSTRING_INDEX ('分隔F华为分隔F技术分隔F有限分隔F
----------------------------------------------------------------
华为分隔F技术分隔F有限分隔F公司分隔F            

1 rows fetched.

SQL> select substring_index ('分隔F华为分隔F技术分隔F有限分隔F公司分隔F', '分隔F', -6);

SUBSTRING_INDEX ('分隔F华为分隔F技术分隔F有限分隔F
----------------------------------------------------------------
分隔F华为分隔F技术分隔F有限分隔F公司分隔F     

1 rows fetched.

SQL> select substring_index ('1华华华华华2', '华华', 0);

SUBSTRING_INDEX ('1华华华华华2', '华华', 0)
--------------------------------------------------
                                                  

1 rows fetched.

SQL> select substring_index ('1华华华华华2', '华华', 1);

SUBSTRING_INDEX ('1华华华华华2', '华华', 1)
--------------------------------------------------
1                                                 

1 rows fetched.

SQL> select substring_index ('1华华华华华2', '华华', 2);

SUBSTRING_INDEX ('1华华华华华2', '华华', 2)
--------------------------------------------------
1华华                                           

1 rows fetched.

SQL> select substring_index ('1华华华华华2', '华华', 3);

SUBSTRING_INDEX ('1华华华华华2', '华华', 3)
--------------------------------------------------
1华华华华华2                                 

1 rows fetched.

SQL> select substring_index ('1华华华华华2', '华华', -1);

SUBSTRING_INDEX ('1华华华华华2', '华华', -1)
---------------------------------------------------
华2                                               

1 rows fetched.

SQL> select substring_index ('1华华华华华2', '华华', -2);

SUBSTRING_INDEX ('1华华华华华2', '华华', -2)
---------------------------------------------------
华华华2                                         

1 rows fetched.

SQL> select substring_index ('1华华华华华2', '华华', -3);

SUBSTRING_INDEX ('1华华华华华2', '华华', -3)
---------------------------------------------------
1华华华华华2                                  

1 rows fetched.

SQL> select substring_index ('1华华华华华2', '1华华华华华2', 1);

SUBSTRING_INDEX ('1华华华华华2', '1华华华华华2', 1)
-------------------------------------------------------------
                                                             

1 rows fetched.

SQL> select substring_index ('1华华华华华2', '1华华华华华华2', 1);

SUBSTRING_INDEX ('1华华华华华2', '1华华华华华华2', 1)
----------------------------------------------------------------
1华华华华华2                                               

1 rows fetched.

SQL> select substring_index ('1华华2', SUBSTRB('华', 1, 1), 1);

SUBSTRING_INDEX ('1华华2', SUBSTRB('华', 1, 1), 1)
-----------------------------------------------------
                                                     

1 rows fetched.

SQL> select substring_index ('1华华2', unhex('E58'), 1);

SUBSTRING_INDEX ('1华华2', UNHEX('E58'), 1)
---------------------------------------------
1华华2                                     

1 rows fetched.

SQL> 
SQL> ------------------------ COALESCE ------------------------
SQL> select COALESCE();

CT-00615, [1:8]Invalid argument number for COALESCE, min=1, max=64
SQL> select COALESCE(1, 1.0, sysdate);

COALESCE(1, 1.0, SYSDATE)                                       
----------------------------------------------------------------
1                                                               

1 rows fetched.

SQL> 
SQL> CREATE TABLE t1 (EMPNUM INT);

Succeed.

SQL> CREATE TABLE t2 (EMPNUM DECIMAL (4, 2));

Succeed.

SQL> INSERT INTO t1 VALUES (0), (2);

2 rows affected.

SQL> INSERT INTO t2 VALUES (0.0), (9.0);

2 rows affected.

SQL> SELECT COALESCE(t2.EMPNUM,t1.EMPNUM) AS CEMPNUM, t1.EMPNUM AS EMPMUM1, t2.EMPNUM AS EMPNUM2 FROM t1 LEFT JOIN t2 ON t1.EMPNUM=t2.EMPNUM;

CEMPNUM                                  EMPMUM1      EMPNUM2                                 
---------------------------------------- ------------ ----------------------------------------
0                                        0            0                                       
2                                        2                                                    

2 rows fetched.

SQL> DROP TABLE t1;

Succeed.

SQL> DROP TABLE t2;

Succeed.

SQL> 
SQL> CREATE TABLE CASE_TBL ( i integer, f double precision);

Succeed.

SQL> CREATE TABLE CASE2_TBL ( i integer, j integer);

Succeed.

SQL> INSERT INTO CASE_TBL VALUES (1, 10.1);

1 rows affected.

SQL> INSERT INTO CASE_TBL VALUES (2, 20.2);

1 rows affected.

SQL> INSERT INTO CASE_TBL VALUES (3, -30.3);

1 rows affected.

SQL> INSERT INTO CASE_TBL VALUES (4, NULL);

1 rows affected.

SQL> INSERT INTO CASE2_TBL VALUES (1, -1);

1 rows affected.

SQL> INSERT INTO CASE2_TBL VALUES (2, -2);

1 rows affected.

SQL> INSERT INTO CASE2_TBL VALUES (3, -3);

1 rows affected.

SQL> INSERT INTO CASE2_TBL VALUES (2, -4);

1 rows affected.

SQL> INSERT INTO CASE2_TBL VALUES (1, NULL);

1 rows affected.

SQL> INSERT INTO CASE2_TBL VALUES (NULL, -6);

1 rows affected.

SQL> SELECT * FROM CASE_TBL WHERE COALESCE(f,i) = 4;

I            F                   
------------ --------------------
4                                

1 rows fetched.

SQL> SELECT COALESCE(a.f, b.i, b.j) FROM CASE_TBL a, CASE2_TBL b;

COALESCE(A.F, B.I, B.J)
-----------------------
10.1                   
10.1                   
10.1                   
10.1                   
10.1                   
10.1                   
20.2                   
20.2                   
20.2                   
20.2                   
20.2                   
20.2                   
-30.3                  
-30.3                  
-30.3                  
-30.3                  
-30.3                  
-30.3                  
1                      
2                      
3                      
2                      
1                      
-6                     

24 rows fetched.

SQL> SELECT * FROM CASE_TBL a, CASE2_TBL b WHERE COALESCE(a.f, b.i, b.j) = 2;

I            F                    I            J           
------------ -------------------- ------------ ------------
4                                 2            -2          
4                                 2            -4          

2 rows fetched.

SQL> SELECT * FROM CASE_TBL a, CASE2_TBL b WHERE COALESCE(f, b.i) = 2;

I            F                    I            J           
------------ -------------------- ------------ ------------
4                                 2            -2          
4                                 2            -4          

2 rows fetched.

SQL> DROP TABLE CASE_TBL;

Succeed.

SQL> DROP TABLE CASE2_TBL;

Succeed.

SQL> 
SQL> create or replace procedure f(op varchar, n int)
  2 as
  3     v_order number;
  4 begin
  5     for i in 1..n
  6     loop
  7         if op = 'CREATE' then
  8             execute immediate 'CREATE TABLE t_' || i || ' (c1 INT)';
  9             execute immediate 'INSERT INTO t_' || i || ' VALUES (' || i || ')';
 10         else
 11             execute immediate 'DROP TABLE t_' || i;
 12         end if;
 13     end loop;
 14 end;
 15 /

Succeed.

SQL> 
SQL> exec f ('CREATE', 129);

PL/SQL procedure successfully completed.

SQL> select 1 from t_1, t_2, t_3, t_4, t_5, t_6, t_7, t_8, t_9, t_10, t_11, t_12, t_13, t_14, t_15, t_16, t_17, t_18, t_19, t_20, t_21, t_22, t_23, t_24, t_25, t_26, t_27, t_28, t_29, t_30, t_31, t_32;

1           
------------
1           

1 rows fetched.

SQL> 
SQL> select 1 from t_1, t_2, t_3, t_4, t_5, t_6, t_7, t_8, t_9, t_10, t_11, t_12, t_13, t_14, t_15, t_16, t_17, t_18, t_19, t_20, t_21, t_22, t_23, t_24, t_25, t_26, t_27, t_28, t_29, t_30, t_31, t_32, t_33;

1           
------------
1           

1 rows fetched.

SQL> 
SQL> select 1 from t_1, t_2, t_3, t_4, t_5, t_6, t_7, t_8, t_9, t_10, t_11, t_12, t_13, t_14, t_15, t_16, t_17, t_18, t_19, t_20, t_21, t_22, t_23, t_24, t_25, t_26, t_27, t_28, t_29, t_30, t_31, t_32, t_33, t_34, t_35, t_36, t_37, t_38, t_39, t_40, t_41, t_42, t_43, t_44, t_45, t_46, t_47, t_48, t_49, t_50, t_51, t_52, t_53, t_54, t_55, t_56, t_57, t_58, t_59, t_60, t_61, t_62, t_63, t_64, t_65, t_66, t_67, t_68, t_69, t_70, t_71, t_72, t_73, t_74, t_75, t_76, t_77, t_78, t_79, t_80, t_81, t_82, t_83, t_84, t_85, t_86, t_87, t_88, t_89, t_90, t_91, t_92, t_93, t_94, t_95, t_96, t_97, t_98, t_99, t_100, t_101, t_102, t_103, t_104, t_105, t_106, t_107, t_108, t_109, t_110, t_111, t_112, t_113, t_114, t_115, t_116, t_117, t_118, t_119, t_120, t_121, t_122, t_123, t_124, t_125, t_126, t_127, t_128;

1           
------------
1           

1 rows fetched.

SQL> 
SQL> select 1 from t_1, t_2, t_3, t_4, t_5, t_6, t_7, t_8, t_9, t_10, t_11, t_12, t_13, t_14, t_15, t_16, t_17, t_18, t_19, t_20, t_21, t_22, t_23, t_24, t_25, t_26, t_27, t_28, t_29, t_30, t_31, t_32, t_33, t_34, t_35, t_36, t_37, t_38, t_39, t_40, t_41, t_42, t_43, t_44, t_45, t_46, t_47, t_48, t_49, t_50, t_51, t_52, t_53, t_54, t_55, t_56, t_57, t_58, t_59, t_60, t_61, t_62, t_63, t_64, t_65, t_66, t_67, t_68, t_69, t_70, t_71, t_72, t_73, t_74, t_75, t_76, t_77, t_78, t_79, t_80, t_81, t_82, t_83, t_84, t_85, t_86, t_87, t_88, t_89, t_90, t_91, t_92, t_93, t_94, t_95, t_96, t_97, t_98, t_99, t_100, t_101, t_102, t_103, t_104, t_105, t_106, t_107, t_108, t_109, t_110, t_111, t_112, t_113, t_114, t_115, t_116, t_117, t_118, t_119, t_120, t_121, t_122, t_123, t_124, t_125, t_126, t_127, t_128, t_129;

CT-00102, array out of index,limits is 128
SQL> exec f ('DROP', 129);

PL/SQL procedure successfully completed.

SQL> drop procedure f;

Succeed.

SQL> 
SQL> ------------------------ INET_ATON/INET_ATON ------------------------
SQL> SELECT INET_ATON();

CT-00615, [1:8]Invalid argument number for INET_ATON, min=1, max=1
SQL> SELECT INET_ATON('192.168.0.1', '192.168.0.1');

CT-00615, [1:8]Invalid argument number for INET_ATON, min=1, max=1
SQL> 
SQL> SELECT INET_NTOA();

CT-00615, [1:8]Invalid argument number for INET_NTOA, min=1, max=1
SQL> SELECT INET_NTOA(3232235777, 3232235777);

CT-00615, [1:8]Invalid argument number for INET_NTOA, min=1, max=1
SQL> SELECT INET_ATON('192.168.0.1', '192.168.0.1');

CT-00615, [1:8]Invalid argument number for INET_ATON, min=1, max=1
SQL> 
SQL> create table t (c1 varchar(32), c2 bigint);

Succeed.

SQL> insert into t(c1) values ('0.0.0.0'), ('255.255.255.255'), ('192'), ('192.168'), ('192.168.1'), ('192.168.1.1');

6 rows affected.

SQL> update t set c2 = INET_ATON(c1);

6 rows affected.

SQL> select c1, INET_NTOA(INET_ATON(c1)), INET_NTOA(c2) from t;

C1                               INET_NTOA(INET_ATON(C1)) INET_NTOA(C2)       
-------------------------------- ------------------------ --------------------
0.0.0.0                          0.0.0.0                  0.0.0.0             
255.255.255.255                  255.255.255.255          255.255.255.255     
192                              0.0.0.192                0.0.0.192           
192.168                          192.0.0.168              192.0.0.168         
192.168.1                        192.168.0.1              192.168.0.1         
192.168.1.1                      192.168.1.1              192.168.1.1         

6 rows fetched.

SQL> drop table t;

Succeed.

SQL> 
SQL> -- exp function
SQL> select exp(1) from dual;

EXP(1)                                  
----------------------------------------
2.71828182845904523536028747135266249776

1 rows fetched.

SQL> select exp(1.0000001) from dual;

EXP(1.0000001)                          
----------------------------------------
2.71828210028724167267440634959032244985

1 rows fetched.

SQL> select exp(1.0002001) from dual;

EXP(1.0002001)                          
----------------------------------------
2.7188258110765656841135466862941235313 

1 rows fetched.

SQL> 
SQL> set numwidth 52


SQL> 
SQL> -- 999999999762152445725379529943075819906419806989267740414730640455962
SQL> select exp(294.730891903) from dual;

EXP(294.730891903)                                  
----------------------------------------------------
9.999999997621524457253795299430758199064198552E+127

1 rows fetched.

SQL> -- overflow
SQL> select exp(294.74) from dual;

CT-01319, [1:12]High-Precision numeric overflow
SQL> 
SQL> select exp(sin(1)) from dual;

EXP(SIN(1))                                         
----------------------------------------------------
2.31977682471585317395659037750326681325490449607014

1 rows fetched.

SQL> select exp(1/(exp(1))) from dual;

EXP(1/(EXP(1)))                                     
----------------------------------------------------
1.44466786100976613365833910859643022305859542411666

1 rows fetched.

SQL> select exp(-200) from dual;

EXP(-200)                                           
----------------------------------------------------
1.3838965267367375306486814569790846854030475824E-87

1 rows fetched.

SQL> -- 3710173544167487172.12828418891805441346872282187877122211
SQL> select exp(exp(exp(1.323234))) from dual;

EXP(EXP(EXP(1.323234)))                             
----------------------------------------------------
3710173544167487172.12828418891805441346863357342656

1 rows fetched.

SQL> 
SQL> -- ln function
SQL> select ln(1.234234423412342134E-1) from dual;

LN(1.234234423412342134E-1)                         
----------------------------------------------------
-2.092134215202573389329999762896809688198923346744 

1 rows fetched.

SQL> select ln(9.999999999999999999E-127) from dual;

LN(9.999999999999999999E-127)                       
----------------------------------------------------
-290.1257217172497561863669232902298901577437878947 

1 rows fetched.

SQL> select exp(ln(123)) from dual;

EXP(LN(123))                                        
----------------------------------------------------
123                                                 

1 rows fetched.

SQL> select ln(exp(123)) from dual;

LN(EXP(123))                                        
----------------------------------------------------
123.000000000000000000000000000000000000000000503779

1 rows fetched.

SQL> select ln(exp(123.12312333452134214213421344)) from dual;

LN(EXP(123.12312333452134214213421344))             
----------------------------------------------------
123.123123334521342142134213439999999999999999443864

1 rows fetched.

SQL> select ln(9.999999999999999999E-128) from dual;

LN(9.999999999999999999E-128)                       
----------------------------------------------------
-292.4283068102438018702849147449142543653398883964 

1 rows fetched.

SQL> select ln(9.999999999999999999E-129) from dual;

CT-00614, [1:11]Parameter error: argument must be greater than 0
SQL> select ln(9.999999999999999999E128) from dual;

CT-01319, [1:11]High-Precision numeric overflow
SQL> 
SQL> -- power(dec, dec) function
SQL> select power(235423542354.123 0.2134) from dual;

CT-00601, [1:31]Sql syntax error: the word "0.2134" is not correct
SQL> select power(12, -2) from dual;

POWER(12, -2)                                       
----------------------------------------------------
.006944444444444444444444444444444444444444431825879

1 rows fetched.

SQL> select power(12, -3) from dual;

POWER(12, -3)                                       
----------------------------------------------------
.000578703703703703703703703703703703703703702000537

1 rows fetched.

SQL> select power(exp(1), exp(1)) from dual;

POWER(EXP(1), EXP(1))                               
----------------------------------------------------
15.1542622414792641897604302726299119055285510868988

1 rows fetched.

SQL> select power(1.23234213412342134234234E-10, 0.2343434234E-5) from dual;

POWER(1.23234213412342134234234E-10, 0.2343434234E-5)
-----------------------------------------------------
.999946531444313051563654849657698282765811764717159 

1 rows fetched.

SQL> select power(1.23234213412342134234234, 1000.82354) from dual;

POWER(1.23234213412342134234234, 1000.82354)        
----------------------------------------------------
6.3976170114661831234264083246271634351312071846E+90

1 rows fetched.

SQL> select power(9999999999999995,1.11111111) from dual;

POWER(9999999999999995,1.11111111)                  
----------------------------------------------------
599484225779145659.247056456885255073160118356460167

1 rows fetched.

SQL> 
SQL> -- Oracle on this case return error result
SQL> select mod(2.71828182845904523536028747135266249776E100, 2.1235) from dual;

MOD(2.71828182845904523536028747135266249776E100, 2.1235)
---------------------------------------------------------
1.0000000000000000000000000000000000000000000000E+61     

1 rows fetched.

SQL> select mod(9.999999999999999999999999999999999e+100,9223372036854775807) from dual;

MOD(9.999999999999999999999999999999999E+100,9223372036854775807
----------------------------------------------------------------
2.0000000000000000000000000000000000000000000000E+61            

1 rows fetched.

SQL> 
SQL> -- DTS2018073002746
SQL> select ceil(0.099990000000000000000000000000000000001) from dual;

CEIL(0.099990000000000000000000000000000000001)     
----------------------------------------------------
1                                                   

1 rows fetched.

SQL> select ceil(99.009) from dual;

CEIL(99.009)                                        
----------------------------------------------------
100                                                 

1 rows fetched.

SQL> select ceil(-99.009) from dual;

CEIL(-99.009)                                       
----------------------------------------------------
-99                                                 

1 rows fetched.

SQL> 
SQL> -- DTS2018073005956
SQL> select convert('1970-1-1 00:00:00.000', DATETIME) from dual;

CT-00105, [1:8]Invalid format of datetime
SQL> select convert('1970-1-1 00:00:00.000', timestamp) from dual;

CONVERT('1970-1-1 00:00:00.000', TIMESTAMP)
-------------------------------------------
1970-01-01 00:00:00.000000                 

1 rows fetched.

SQL> select convert('1970-1-1 00:00:00.000', timestamp(1)) from dual;

CONVERT('1970-1-1 00:00:00.000', TIMESTAMP(1))
----------------------------------------------
1970-01-01 00:00:00.0                         

1 rows fetched.

SQL> 
SQL> ------------------------------------ modular operator ----------------------------------
SQL> ---- RETURN TYPE & mixed cacl ----
SQL> create table t1 (
  2     id int,
  3     c_int int, 
  4     c_bigint bigint,
  5     c_real real,
  6     c_number number,
  7     c_decimal decimal,
  8     c_char char(32),
  9     c_varchar varchar(32)
 10 );

Succeed.

SQL> insert into t1 values (1, 2147483647,  9223372036854775807, 1234567890123.123456, 999999999999999999.9999999999999999999, 123456789, '79213473294793249.8793', '29834739287.298332');

1 rows affected.

SQL> insert into t1 values (2, -2147483648, -9223372036854775808, -1234567890123.123456, -999999999999999999.9999999999999999999, -123456789, '-79213473294793249.8793', '-29834739287.298332');

1 rows affected.

SQL> insert into t1 values (3, 2147483647,  -9223372036854775807, 1234567890123.123456, -999999999999999999.9999999999999999999, 123456789, '-79213473294793249.8793', '29834739287.298332');

1 rows affected.

SQL> insert into t1 values (4, -2147483648, 9223372036854775807, -1234567890123.123456, 999999999999999999.9999999999999999999, -123456789, '79213473294793249.8793', '-29834739287.298332');

1 rows affected.

SQL> 
SQL> create table t as
  2 select
  3     id,
  4     c_int % c_int      AS i4_i4,
  5     c_int % c_bigint   AS i4_i8,
  6     c_int % c_real     AS i4_real,
  7     c_int % c_number   AS i4_number,
  8     c_int % c_decimal  AS i4_decimal, 
  9     c_int % c_char     AS i4_char,
 10     c_int % c_varchar  AS i4_varchar
 11 from t1;

Succeed.

SQL> desc t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
ID                                           BINARY_INTEGER                      
I4_I4                                        BINARY_INTEGER                      
I4_I8                                        BINARY_BIGINT                       
I4_REAL                                      BINARY_DOUBLE                       
I4_NUMBER                                    NUMBER                              
I4_DECIMAL                                   NUMBER                              
I4_CHAR                                      NUMBER                              
I4_VARCHAR                                   NUMBER                              

SQL> select * from t order by id;

ID           I4_I4        I4_I8                I4_REAL              I4_NUMBER                                            I4_DECIMAL                                           I4_CHAR                                              I4_VARCHAR                                          
------------ ------------ -------------------- -------------------- ---------------------------------------------------- ---------------------------------------------------- ---------------------------------------------------- ----------------------------------------------------
1            0            2147483647           2147483647           2147483647                                           48718234                                             2147483647                                           2147483647                                          
2            0            -2147483648          -2147483648          -2147483648                                          -48718235                                            -2147483648                                          -2147483648                                         
3            0            2147483647           2147483647           2147483647                                           48718234                                             2147483647                                           2147483647                                          
4            0            -2147483648          -2147483648          -2147483648                                          -48718235                                            -2147483648                                          -2147483648                                         

4 rows fetched.

SQL> drop table t;

Succeed.

SQL> 
SQL> create table t as
  2 select 
  3     id,
  4     c_bigint % c_int      AS i8_i4,
  5     c_bigint % c_bigint   AS i8_i8,
  6     c_bigint % c_real     AS i8_real,
  7     c_bigint % c_number   AS i8_number,
  8     c_bigint % c_decimal  AS i8_decimal, 
  9     c_bigint % c_char     AS i8_char,
 10     c_bigint % c_varchar  AS i8_varchar
 11 from t1;

Succeed.

SQL> desc t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
ID                                           BINARY_INTEGER                      
I8_I4                                        BINARY_BIGINT                       
I8_I8                                        BINARY_BIGINT                       
I8_REAL                                      BINARY_DOUBLE                       
I8_NUMBER                                    NUMBER                              
I8_DECIMAL                                   NUMBER                              
I8_CHAR                                      NUMBER                              
I8_VARCHAR                                   NUMBER                              

SQL> select * from t order by id;

ID           I8_I4                I8_I8                I8_REAL              I8_NUMBER                                            I8_DECIMAL                                           I8_CHAR                                              I8_VARCHAR                                          
------------ -------------------- -------------------- -------------------- ---------------------------------------------------- ---------------------------------------------------- ---------------------------------------------------- ----------------------------------------------------
1            1                    0                    514929338372.372     223372036854775807.0000000000000000009               46721365                                             34609134658758821.0012                               7792737752.396652                                   
2            0                    0                    -514929338372.372    -223372036854775808.0000000000000000009              -46721366                                            -34609134658758822.0012                              -7792737753.396652                                  
3            -1                   0                    -514929338372.372    -223372036854775807.0000000000000000009              -46721365                                            -34609134658758821.0012                              -7792737752.396652                                  
4            2147483647           0                    514929338372.372     223372036854775807.0000000000000000009               46721365                                             34609134658758821.0012                               7792737752.396652                                   

4 rows fetched.

SQL> drop table t;

Succeed.

SQL> 
SQL> create table t as
  2 select 
  3     id,
  4     c_real % c_int      AS real_i4,
  5     c_real % c_bigint   AS real_i8,
  6     c_real % c_real     AS real_real,
  7     c_real % c_number   AS real_number,
  8     c_real % c_decimal  AS real_decimal, 
  9     c_real % c_char     AS real_char,
 10     c_real % c_varchar  AS real_varchar
 11 from t1;

Succeed.

SQL> desc t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
ID                                           BINARY_INTEGER                      
REAL_I4                                      BINARY_DOUBLE                       
REAL_I8                                      BINARY_DOUBLE                       
REAL_REAL                                    BINARY_DOUBLE                       
REAL_NUMBER                                  NUMBER                              
REAL_DECIMAL                                 NUMBER                              
REAL_CHAR                                    NUMBER                              
REAL_VARCHAR                                 NUMBER                              

SQL> select * from t order by id;

ID           REAL_I4              REAL_I8              REAL_REAL            REAL_NUMBER                                          REAL_DECIMAL                                         REAL_CHAR                                            REAL_VARCHAR                                        
------------ -------------------- -------------------- -------------------- ---------------------------------------------------- ---------------------------------------------------- ---------------------------------------------------- ----------------------------------------------------
1            1912276745.12354     1234567890123.12     0                    1234567890123.12                                     123.12                                               1234567890123.12                                     11343579343.888388                                  
2            -1912276171.12354    -1234567890123.12    0                    -1234567890123.12                                    -123.12                                              -1234567890123.12                                    -11343579343.888388                                 
3            1912276745.12354     1234567890123.12     0                    1234567890123.12                                     123.12                                               1234567890123.12                                     11343579343.888388                                  
4            -1912276171.12354    -1234567890123.12    0                    -1234567890123.12                                    -123.12                                              -1234567890123.12                                    -11343579343.888388                                 

4 rows fetched.

SQL> drop table t;

Succeed.

SQL> 
SQL> create table t as
  2 select 
  3     id,
  4     c_number % c_int      AS number_i4,
  5     c_number % c_bigint   AS number_i8,
  6     c_number % c_real     AS number_real,
  7     c_number % c_number   AS number_number,
  8     c_number % c_decimal  AS number_decimal, 
  9     c_number % c_char     AS number_char,
 10     c_number % c_varchar  AS number_varchar
 11 from t1;

Succeed.

SQL> desc t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
ID                                           BINARY_INTEGER                      
NUMBER_I4                                    NUMBER                              
NUMBER_I8                                    NUMBER                              
NUMBER_REAL                                  NUMBER                              
NUMBER_NUMBER                                NUMBER                              
NUMBER_DECIMAL                               NUMBER                              
NUMBER_CHAR                                  NUMBER                              
NUMBER_VARCHAR                               NUMBER                              

SQL> select * from t order by id;

ID           NUMBER_I4                                            NUMBER_I8                                            NUMBER_REAL                                          NUMBER_NUMBER                                        NUMBER_DECIMAL                                       NUMBER_CHAR                                          NUMBER_VARCHAR                                      
------------ ---------------------------------------------------- ---------------------------------------------------- ---------------------------------------------------- ---------------------------------------------------- ---------------------------------------------------- ---------------------------------------------------- ----------------------------------------------------
1            1126526310.9999999999999999999                       999999999999999999.9999999999999999999               9000272799.9999999999999999999                       0                                                    87654402.9999999999999999999                         49438320462481001.4483999999999999999                14106295265.0789639999999999999                     
2            -660865023.9999999999999999999                       -999999999999999999.9999999999999999999              -9000272799.9999999999999999999                      0                                                    -87654402.9999999999999999999                        -49438320462481001.4483999999999999999               -14106295265.0789639999999999999                    
3            -1126526310.9999999999999999999                      -999999999999999999.9999999999999999999              -9000272799.9999999999999999999                      0                                                    -87654402.9999999999999999999                        -49438320462481001.4483999999999999999               -14106295265.0789639999999999999                    
4            660865023.9999999999999999999                        999999999999999999.9999999999999999999               9000272799.9999999999999999999                       0                                                    87654402.9999999999999999999                         49438320462481001.4483999999999999999                14106295265.0789639999999999999                     

4 rows fetched.

SQL> drop table t;

Succeed.

SQL> 
SQL> create table t as
  2 select 
  3     id,
  4     c_decimal % c_int      AS decimal_i4,
  5     c_decimal % c_bigint   AS decimal_i8,
  6     c_decimal % c_real     AS decimal_real,
  7     c_decimal % c_number   AS decimal_number,
  8     c_decimal % c_decimal  AS decimal_decimal, 
  9     c_decimal % c_char     AS decimal_char,
 10     c_decimal % c_varchar  AS decimal_varchar
 11 from t1;

Succeed.

SQL> desc t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
ID                                           BINARY_INTEGER                      
DECIMAL_I4                                   NUMBER                              
DECIMAL_I8                                   NUMBER                              
DECIMAL_REAL                                 NUMBER                              
DECIMAL_NUMBER                               NUMBER                              
DECIMAL_DECIMAL                              NUMBER                              
DECIMAL_CHAR                                 NUMBER                              
DECIMAL_VARCHAR                              NUMBER                              

SQL> select * from t order by id;

ID           DECIMAL_I4                                           DECIMAL_I8                                           DECIMAL_REAL                                         DECIMAL_NUMBER                                       DECIMAL_DECIMAL                                      DECIMAL_CHAR                                         DECIMAL_VARCHAR                                     
------------ ---------------------------------------------------- ---------------------------------------------------- ---------------------------------------------------- ---------------------------------------------------- ---------------------------------------------------- ---------------------------------------------------- ----------------------------------------------------
1            123456789                                            123456789                                            123456789                                            123456789                                            0                                                    123456789                                            123456789                                           
2            -123456789                                           -123456789                                           -123456789                                           -123456789                                           0                                                    -123456789                                           -123456789                                          
3            123456789                                            123456789                                            123456789                                            123456789                                            0                                                    123456789                                            123456789                                           
4            -123456789                                           -123456789                                           -123456789                                           -123456789                                           0                                                    -123456789                                           -123456789                                          

4 rows fetched.

SQL> drop table t;

Succeed.

SQL> 
SQL> create table t as
  2 select 
  3     id,
  4     c_char % c_int      AS char_i4,
  5     c_char % c_bigint   AS char_i8,
  6     c_char % c_real     AS char_real,
  7     c_char % c_number   AS char_number,
  8     c_char % c_decimal  AS char_decimal, 
  9     c_char % c_char     AS char_char,
 10     c_char % c_varchar  AS char_varchar
 11 from t1;

Succeed.

SQL> desc t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
ID                                           BINARY_INTEGER                      
CHAR_I4                                      NUMBER                              
CHAR_I8                                      NUMBER                              
CHAR_REAL                                    NUMBER                              
CHAR_NUMBER                                  NUMBER                              
CHAR_DECIMAL                                 NUMBER                              
CHAR_CHAR                                    NUMBER                              
CHAR_VARCHAR                                 NUMBER                              

SQL> select * from t order by id;

ID           CHAR_I4                                              CHAR_I8                                              CHAR_REAL                                            CHAR_NUMBER                                          CHAR_DECIMAL                                         CHAR_CHAR                                            CHAR_VARCHAR                                        
------------ ---------------------------------------------------- ---------------------------------------------------- ---------------------------------------------------- ---------------------------------------------------- ---------------------------------------------------- ---------------------------------------------------- ----------------------------------------------------
1            2069631640.8793                                      79213473294793249.8793                               1128328713624.4393                                   79213473294793249.8793                               65018578.8793                                        0                                                    2881569631.0444                                     
2            -2032744993.8793                                     -79213473294793249.8793                              -1128328713624.4393                                  -79213473294793249.8793                              -65018578.8793                                       0                                                    -2881569631.0444                                    
3            -2069631640.8793                                     -79213473294793249.8793                              -1128328713624.4393                                  -79213473294793249.8793                              -65018578.8793                                       0                                                    -2881569631.0444                                    
4            2032744993.8793                                      79213473294793249.8793                               1128328713624.4393                                   79213473294793249.8793                               65018578.8793                                        0                                                    2881569631.0444                                     

4 rows fetched.

SQL> drop table t;

Succeed.

SQL> 
SQL> create table t as
  2 select 
  3     id,
  4     c_varchar % c_int      AS varchar_i4,
  5     c_varchar % c_bigint   AS varchar_i8,
  6     c_varchar % c_real     AS varchar_real,
  7     c_varchar % c_number   AS varchar_number,
  8     c_varchar % c_decimal  AS varchar_decimal, 
  9     c_varchar % c_char     AS varchar_char,
 10     c_varchar % c_varchar  AS varchar_varchar
 11 from t1;

Succeed.

SQL> desc t;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
ID                                           BINARY_INTEGER                      
VARCHAR_I4                                   NUMBER                              
VARCHAR_I8                                   NUMBER                              
VARCHAR_REAL                                 NUMBER                              
VARCHAR_NUMBER                               NUMBER                              
VARCHAR_DECIMAL                              NUMBER                              
VARCHAR_CHAR                                 NUMBER                              
VARCHAR_VARCHAR                              NUMBER                              

SQL> select * from t order by id;

ID           VARCHAR_I4                                           VARCHAR_I8                                           VARCHAR_REAL                                         VARCHAR_NUMBER                                       VARCHAR_DECIMAL                                      VARCHAR_CHAR                                         VARCHAR_VARCHAR                                     
------------ ---------------------------------------------------- ---------------------------------------------------- ---------------------------------------------------- ---------------------------------------------------- ---------------------------------------------------- ---------------------------------------------------- ----------------------------------------------------
1            1917451876.298332                                    29834739287.298332                                   29834739287.298332                                   29834739287.298332                                   81653138.298332                                      29834739287.298332                                   0                                                   
2            -1917451863.298332                                   -29834739287.298332                                  -29834739287.298332                                  -29834739287.298332                                  -81653138.298332                                     -29834739287.298332                                  0                                                   
3            1917451876.298332                                    29834739287.298332                                   29834739287.298332                                   29834739287.298332                                   81653138.298332                                      29834739287.298332                                   0                                                   
4            -1917451863.298332                                   -29834739287.298332                                  -29834739287.298332                                  -29834739287.298332                                  -81653138.298332                                     -29834739287.298332                                  0                                                   

4 rows fetched.

SQL> drop table t;

Succeed.

SQL> drop table t1;

Succeed.

SQL> drop table t2;

CT-00843, The table or view SYS.T2 does not exist.
SQL> 
SQL> ---- unsupported type ----
SQL> SELECT CAST(NULL AS CLOB) % 1;

CT-01304, [1:21]Data type 'CLOB' is not supported
SQL> SELECT CAST(NULL AS BLOB) % 1;

CT-01304, [1:21]Data type 'BLOB' is not supported
SQL> SELECT CAST(NULL AS BOOL) % 1;

CT-01320, [1:27]Undefined operator: BOOLEAN % BINARY_INTEGER
SQL> SELECT CAST(NULL AS DATETIME) % 1;

CT-01320, [1:31]Undefined operator: DATE % BINARY_INTEGER
SQL> SELECT CAST(NULL AS TIMESTAMP) % 1;

CT-01320, [1:32]Undefined operator: TIMESTAMP % BINARY_INTEGER
SQL> SELECT CAST(NULL AS TIMESTAMP WITH TIME ZONE) % 1;

CT-01320, [1:47]Undefined operator: TIMESTAMP_TZ % BINARY_INTEGER
SQL> SELECT CAST(NULL AS TIMESTAMP WITH LOCAL TIME ZONE) % 1;

CT-01320, [1:53]Undefined operator: TIMESTAMP_LTZ % BINARY_INTEGER
SQL> SELECT CAST(NULL AS INTERVAL DAY(1) TO SECOND) % 1;

CT-01320, [1:48]Undefined operator: INTERVAL DAY TO SECOND % BINARY_INTEGER
SQL> SELECT CAST(NULL AS INTERVAL YEAR(1) TO MONTH) % 1;

CT-01320, [1:48]Undefined operator: INTERVAL YEAR TO MONTH % BINARY_INTEGER
SQL> 
SQL> ---- test wrong string ----
SQL> select 'a' % 1;

CT-00636, [1:12]Invalid number -- unexpected character
SQL> select 1 % 'a';

CT-00636, [1:10]Invalid number -- unexpected character
SQL> select 1 % '2';

1 % '2'                                             
----------------------------------------------------
1                                                   

1 rows fetched.

SQL> 
SQL> ---- test null ----
SQL> select null % null;

NULL % NULL                                         
----------------------------------------------------
                                                    

1 rows fetched.

SQL> select null % 1;

NULL % 1                                            
----------------------------------------------------
                                                    

1 rows fetched.

SQL> select 1 % null;

1 % NULL                                            
----------------------------------------------------
                                                    

1 rows fetched.

SQL> 
SQL> ---- test zero ----
SQL> select cast(0 AS signed int) % 10;

CAST(0 AS SIGNED INT) % 10
--------------------------
0                         

1 rows fetched.

SQL> select 10 % cast(0 AS signed int);

10 % CAST(0 AS SIGNED INT)
--------------------------
                          

1 rows fetched.

SQL> 
SQL> create table t (c_int int, c_bigint int);

Succeed.

SQL> insert into t values (10, 10);

1 rows affected.

SQL> select 0 % c_int, c_int % 0, 0 % c_bigint, c_bigint % 0 from t;

0 % C_INT    C_INT % 0    0 % C_BIGINT C_BIGINT % 0
------------ ------------ ------------ ------------
0                         0                        

1 rows fetched.

SQL> drop table t;

Succeed.

SQL> 
SQL> -- Zenith REAL = MySQL REAL = Oracle BINARY_DOUBLE, CT_REAL_PRECISION: (double)0.000000000000001
SQL> create table t (id int, v_real REAL, v_real2 REAL, v_real3 REAL);

Succeed.

SQL> insert into t values (1, 0.000000000000001,  10, 0.000000000000017);

1 rows affected.

SQL> insert into t values (1, 0.000000000000007,  10, 0.000000000000017);

1 rows affected.

SQL> insert into t values (1, 0.0000000000000001, 10, 0.000000000000017); 

1 rows affected.

SQL> select v_real2 % v_real, v_real3 % v_real from t;

V_REAL2 % V_REAL     V_REAL3 % V_REAL    
-------------------- --------------------
2.22946001233389e-16 9.99999999999999e-16
3.78641807639125e-15 3e-15               
                                         

3 rows fetched.

SQL> -- select mod(v_real2, v_real), mod(v_real3, v_real) from t;
SQL> drop table t;

Succeed.

SQL> 
SQL> create table t (id int, v_decimal decimal(38, 1));

Succeed.

SQL> insert into t values (1, 1234567890123456789012345678901234567.8);

1 rows affected.

SQL> -- select mod(v_decimal, cast(0.000001 as decimal(15, 10))) from t;
SQL> -- select mod(v_decimal, cast(0.000007 as decimal(15, 10))) from t;
SQL> -- select mod(v_decimal, cast(0.0000000007 as decimal(15, 10))) from t;
SQL> select v_decimal%cast(0.000001 as decimal(15, 10)) from t;

V_DECIMAL%CAST(0.000001 AS DECIMAL(15, 10))         
----------------------------------------------------
0                                                   

1 rows fetched.

SQL> select v_decimal%cast(0.000007 as decimal(15, 10)) from t;

V_DECIMAL%CAST(0.000007 AS DECIMAL(15, 10))         
----------------------------------------------------
.000003                                             

1 rows fetched.

SQL> select v_decimal%cast(0.0000000007 as decimal(15, 10)) from t;

V_DECIMAL%CAST(0.0000000007 AS DECIMAL(15, 10))     
----------------------------------------------------
.0000000005                                         

1 rows fetched.

SQL> drop table t;

Succeed.

SQL> 
SQL> --regexp_instr
SQL> drop table if exists test_regexp_instr;

Succeed.

SQL> create table test_regexp_instr as select regexp_instr('abceabceffabcabc','abc',5.3) as c from dual;

Succeed.

SQL> select * from test_regexp_instr;

C           
------------
5           

1 rows fetched.

SQL> desc test_regexp_instr;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C                                            BINARY_INTEGER                      

SQL> 
SQL> ---- text conflict with pl attr %type/rowtype/found/notfound/rowcount ----
SQL> -- TODO: 
SQL> -- 1. Disallowed pl attr used in non-PL SQL and PL dynamic statement.
SQL> -- 2. Priority to parse pl attr in PL over modulus operator.
SQL> create table t (
  2     sql real,
  3     isopen real,
  4     found real,
  5     notfound real,
  6     rowcount real,
  7     type real,
  8     rowtype real
  9 );

Succeed.

SQL> 
SQL> insert into t values (452.1245, 123.4578, 23.457, 433.124, 234.789, 1238.145, 12.4578);

1 rows affected.

SQL> select sql%sql from t;

SQL%SQL             
--------------------
0                   

1 rows fetched.

SQL> select sql%abc from t;

CT-00601, [1:12]Sql syntax error: invalid column name 'ABC'
SQL> select sql%(isopen) from t;

SQL%(ISOPEN)        
--------------------
81.7511             

1 rows fetched.

SQL> select sql%(found) from t;

SQL%(FOUND)         
--------------------
6.4415              

1 rows fetched.

SQL> select sql%(notfound) from t;

SQL%(NOTFOUND)      
--------------------
19.0005             

1 rows fetched.

SQL> select sql%(rowcount) from t;

SQL%(ROWCOUNT)      
--------------------
217.3355            

1 rows fetched.

SQL> select sql%(type) from t;

SQL%(TYPE)          
--------------------
452.1245            

1 rows fetched.

SQL> select sql%(rowtype) from t;

SQL%(ROWTYPE)       
--------------------
3.64369999999999    

1 rows fetched.

SQL> 
SQL> select (sql)%isopen from t;

(SQL)%ISOPEN        
--------------------
81.7511             

1 rows fetched.

SQL> select (sql)%found from t;

(SQL)%FOUND         
--------------------
6.4415              

1 rows fetched.

SQL> select (sql)%notfound from t;

(SQL)%NOTFOUND      
--------------------
19.0005             

1 rows fetched.

SQL> select (sql)%rowcount from t;

(SQL)%ROWCOUNT      
--------------------
217.3355            

1 rows fetched.

SQL> select (sql)%type from t;

(SQL)%TYPE          
--------------------
452.1245            

1 rows fetched.

SQL> select (sql)%rowtype from t;

(SQL)%ROWTYPE       
--------------------
3.64369999999999    

1 rows fetched.

SQL> 
SQL> select sql%isopen from t;

CT-00974, [1:8]Unexpected pl variant
SQL> select sql%found from t;

CT-00974, [1:8]Unexpected pl variant
SQL> select sql%notfound from t;

CT-00974, [1:8]Unexpected pl variant
SQL> select sql%rowcount from t;

CT-00974, [1:8]Unexpected pl variant
SQL> select sql%type from t;

CT-00962, Invalid cursor attribute
SQL> select sql%rowtype from t;

CT-00962, Invalid cursor attribute
SQL> 
SQL> select abc%isopen from t;

CT-00974, [1:8]Unexpected pl variant
SQL> select abc%found from t;

CT-00974, [1:8]Unexpected pl variant
SQL> select abc%notfound from t;

CT-00974, [1:8]Unexpected pl variant
SQL> select abc%rowcount from t;

CT-00974, [1:8]Unexpected pl variant
SQL> select abc%type from t;

CT-00962, Invalid cursor attribute
SQL> select abc%rowtype from t;

CT-00962, Invalid cursor attribute
SQL> 
SQL> SET SERVEROUTPUT ON

ON
SQL> declare
  2     abc real;
  3 begin
  4     select sql%(rowcount) into abc from t;
  5     dbe_output.print_line(abc);
  6 end;
  7 /

217.3355

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2     abc real;
  3 begin
  4     select sql%rowcount into abc from t;
  5     dbe_output.print_line(abc);
  6 end;
  7 /

CT-00944, PL/SQL(SYS.ANONYMOUS BLOCK) terminated with compiling errors
[4:12] PLC-00601 Sql syntax error: invalid table alias 'SQL'

SQL> 
SQL> alter table t add column mycursor real default 45145.158;

Succeed.

SQL> declare
  2     cursor mycursor is select 1.123 from dual;
  3     abc real;
  4 begin
  5     for a in mycursor
  6     loop
  7         dbe_output.print_line(mycursor%rowcount);
  8         select mycursor%rowcount into abc from t;
  9     end loop;
 10 end;
 11 /

CT-00944, PL/SQL(SYS.ANONYMOUS BLOCK) terminated with compiling errors
[8:16] PLC-00601 Sql syntax error: invalid table alias 'MYCURSOR'
[11:1] PLC-00954 more text expected but EOF found

SQL> 
SQL> declare
  2     cursor mycursor is select 1.123 from dual;
  3     abc real;
  4 begin
  5     for a in mycursor
  6     loop
  7         dbe_output.print_line(mycursor%rowcount);
  8         select (mycursor)%rowcount into abc from t;
  9         dbe_output.print_line(abc);
 10     end loop;
 11 end;
 12 /

1
65.6700000000055

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2     cursor mycursor is select 1.123 from dual;
  3     abc real;
  4 begin
  5     for a in mycursor
  6     loop
  7         execute IMMEDIATE 'select mycursor%rowcount from t' into abc;
  8         dbe_output.print_line(abc);
  9         execute IMMEDIATE 'select (mycursor)%rowcount from t' into abc;
 10         dbe_output.print_line(abc);
 11         execute IMMEDIATE 'select mycursor%(rowcount) from t' into abc;
 12         dbe_output.print_line(abc);
 13     end loop;
 14 end;
 15 /


65.6700000000055
65.6700000000055

PL/SQL procedure successfully completed.

SQL> 
SQL> drop table t;

Succeed.

SQL> SET SERVEROUTPUT OFF

OFF
SQL> 
SQL> select case substr(version(),7,19) when 'Cantian100-OLTP' then 1 when 'NONE' then 0 else 1 end as version from dual;

VERSION     
------------
1           

1 rows fetched.

SQL> 
SQL> SELECT FROM_UNIXTIME('1534252132 ', '%Y %D %M %h:%i:%s') from dual;

FROM_UNIXTIME('1534252132 ', '%Y %D %M %H:%I:%S')
-------------------------------------------------
2018 14 AUGUST 21:08:52                          

1 rows fetched.

SQL> SELECT FROM_UNIXTIME(1534252132, '%Y %D %M %h:%i:%s');

FROM_UNIXTIME(1534252132, '%Y %D %M %H:%I:%S')
----------------------------------------------
2018 14 AUGUST 21:08:52                       

1 rows fetched.

SQL> SELECT FROM_UNIXTIME(1534252132, '%Y %D %M %h:%i:%s %x');

FROM_UNIXTIME(1534252132, '%Y %D %M %H:%I:%S %X')
-------------------------------------------------
2018 14 AUGUST 21:08:52 2018                     

1 rows fetched.

SQL> SELECT FROM_UNIXTIME('1534252132') from dual;

FROM_UNIXTIME('1534252132')     
--------------------------------
2018-08-14 21:08:52.000000      

1 rows fetched.

SQL> SELECT FROM_UNIXTIME(1534252132, '%Y %D %M %h:%i:%s');

FROM_UNIXTIME(1534252132, '%Y %D %M %H:%I:%S')
----------------------------------------------
2018 14 AUGUST 21:08:52                       

1 rows fetched.

SQL> SELECT FROM_UNIXTIME('1534753762.233');

FROM_UNIXTIME('1534753762.233') 
--------------------------------
2018-08-20 16:29:22.233000      

1 rows fetched.

SQL> SELECT FROM_UNIXTIME(1534753762.233);

FROM_UNIXTIME(1534753762.233)   
--------------------------------
2018-08-20 16:29:22.233000      

1 rows fetched.

SQL> SELECT FROM_UNIXTIME(180980890);

FROM_UNIXTIME(180980890)        
--------------------------------
1975-09-27 00:28:10.000000      

1 rows fetched.

SQL> SELECT FROM_UNIXTIME('1809808900','%Y %D %M %h:%i:%s %x');

FROM_UNIXTIME('1809808900','%Y %D %M %H:%I:%S %X')
--------------------------------------------------
2027 09 MAY 04:41:40 2027                         

1 rows fetched.

SQL> SELECT FROM_UNIXTIME(18098089000);

FROM_UNIXTIME(18098089000)      
--------------------------------
2543-07-04 22:56:40.000000      

1 rows fetched.

SQL> SELECT FROM_UNIXTIME(-180980890);

FROM_UNIXTIME(-180980890)       
--------------------------------
1964-04-07 15:31:50.000000      

1 rows fetched.

SQL> SELECT FROM_UNIXTIME('-1809808900','%Y %D %M %h:%i:%s %x');

FROM_UNIXTIME('-1809808900','%Y %D %M %H:%I:%S %X')
---------------------------------------------------
1912 26 AUGUST 11:18:20 1912                       

1 rows fetched.

SQL> SELECT FROM_UNIXTIME(-18098089000);

FROM_UNIXTIME(-18098089000)     
--------------------------------
1396-06-29 17:03:20.000000      

1 rows fetched.

SQL> SELECT FROM_UNIXTIME(9223372036854775807);

CT-00695, TIMESTAMP out of range, it must be between 0001-01-01 00:00:00.000000 and 9999-12-31 23:59:59.999999
SQL> SELECT FROM_UNIXTIME(-9223372036854775807);

CT-00695, TIMESTAMP out of range, it must be between 0001-01-01 00:00:00.000000 and 9999-12-31 23:59:59.999999
SQL> SELECT FROM_UNIXTIME(9223372036854775809);

CT-00695, TIMESTAMP out of range, it must be between 0001-01-01 00:00:00.000000 and 9999-12-31 23:59:59.999999
SQL> SELECT FROM_UNIXTIME(-9223372036854775809);

CT-00695, TIMESTAMP out of range, it must be between 0001-01-01 00:00:00.000000 and 9999-12-31 23:59:59.999999
SQL> SELECT FROM_UNIXTIME();

CT-00615, [1:8]Invalid argument number for FROM_UNIXTIME, min=1, max=2
SQL> SELECT FROM_UNIXTIME(1534252132, '%Y %D %M %h:%i:%s %x', 'xxxxxx');

CT-00615, [1:8]Invalid argument number for FROM_UNIXTIME, min=1, max=2
SQL> 
SQL> --extract
SQL> select extract(hour from to_date('1995-01-01 11:22:33','yyyy-mm-dd hh24:mi:ss')) from dual;

EXTRACT(HOUR FROM TO_DATE('1995-01-01 11:22:33','YYYY-MM-DD HH24
----------------------------------------------------------------
11                                                              

1 rows fetched.

SQL> select extract(minute from to_date('1995-01-01 11:22:33','yyyy-mm-dd hh24:mi:ss')) from dual;

EXTRACT(MINUTE FROM TO_DATE('1995-01-01 11:22:33','YYYY-MM-DD HH
----------------------------------------------------------------
22                                                              

1 rows fetched.

SQL> select extract(second from to_date('1995-01-01 11:22:33','yyyy-mm-dd hh24:mi:ss')) from dual;

EXTRACT(SECOND FROM TO_DATE('1995-01-01 11:22:33','YYYY-MM-DD HH
----------------------------------------------------------------
33                                                              

1 rows fetched.

SQL> select extract(microsecond from to_date('1995-01-01 11:22:33','yyyy-mm-dd hh24:mi:ss')) from dual;

CT-00601, [1:16]Sql syntax error: YEAR or MONTH or DAY or HOUR or MINUTE or SECOND expected
SQL> select extract(year from interval '-1 11:22:33.456' day to second) from dual;

CT-00614, [1:8]Parameter error: invalid extract field for extract source
SQL> select extract(month from interval '-1 11:22:33.456' day to second) from dual;

CT-00614, [1:8]Parameter error: invalid extract field for extract source
SQL> select extract(day from interval '-1-11' year to month) from dual;

CT-00614, [1:8]Parameter error: invalid extract field for extract source
SQL> select extract(year from '1990') from dual;

CT-00105, [1:26]Invalid format of datetime
SQL> select extract(year from '') from dual;

EXTRACT(YEAR FROM '')
---------------------
                     

1 rows fetched.

SQL> select extract(year from '1990-01-01');

EXTRACT(YEAR FROM '1990-01-01')
-------------------------------
1990                           

1 rows fetched.

SQL> select extract(hour from '1990-01-01 11:22:33');

EXTRACT(HOUR FROM '1990-01-01 11:22:33')
----------------------------------------
11                                      

1 rows fetched.

SQL> select extract(year from '19900102');

EXTRACT(YEAR FROM '19900102')
-----------------------------
1990                         

1 rows fetched.

SQL> select extract(second from '19900101000001.123');

EXTRACT(SECOND FROM '19900101000001.123')           
----------------------------------------------------
1.123                                               

1 rows fetched.

SQL> 
SQL> --date & timestamp
SQL> select datetime '1995-01-01' from dual;

CT-00601, [1:17]Sql syntax error: FROM expected but '1995-01-01' found
SQL> select datetime ' 1995 - 01 - 01 ' from dual;

CT-00601, [1:17]Sql syntax error: FROM expected but ' 1995 - 01 - 01 ' found
SQL> select date '1995-01-01 00:00:00' from dual;

CT-00105, Invalid format of datetime
SQL> select date '0000-01-01' from dual;

DATE '0000-01-01'     
----------------------
0001-01-01 00:00:00   

1 rows fetched.

SQL> select date '' from dual;

CT-00105, Invalid format of datetime
SQL> select date '1990' from dual;

CT-00105, Invalid format of datetime
SQL> select date '1990-01' from dual;

DATE '1990-01'        
----------------------
1990-01-01 00:00:00   

1 rows fetched.

SQL> select date '1990-00-01' from dual;

DATE '1990-00-01'     
----------------------
1990-01-01 00:00:00   

1 rows fetched.

SQL> select date '1990-13-01' from dual;

DATE '1990-13-01'     
----------------------
1990-01-01 00:00:00   

1 rows fetched.

SQL> select date '1990-01-00' from dual;

DATE '1990-01-00'     
----------------------
1990-01-01 00:00:00   

1 rows fetched.

SQL> select date '1990-02-30' from dual;

DATE '1990-02-30'     
----------------------
1990-02-01 00:00:00   

1 rows fetched.

SQL> select date '00:00:00' from dual;

DATE '00:00:00'       
----------------------
0001-01-01 00:00:00   

1 rows fetched.

SQL> select timestamp '1995-01-01' from dual;

CT-00105, Invalid format of datetime
SQL> select timestamp '1995-01-01 00:00:00' from dual;

TIMESTAMP '1995-01-01 00:00:00' 
--------------------------------
1995-01-01 00:00:00.000000      

1 rows fetched.

SQL> select timestamp '1995-01-01  00:00:00 ' from dual;

TIMESTAMP '1995-01-01  00:00:00 '
---------------------------------
1995-01-01 00:00:00.000000       

1 rows fetched.

SQL> select timestamp '1995-01-01  00:00:00.0' from dual;

TIMESTAMP '1995-01-01  00:00:00.0'
----------------------------------
1995-01-01 00:00:00.000000        

1 rows fetched.

SQL> select timestamp '1995-01-01 00:00:00.123' + 1 from dual;

TIMESTAMP '1995-01-01 00:00:00.123' + 1
---------------------------------------
1995-01-02 00:00:00.123000             

1 rows fetched.

SQL> select timestamp '1995-01-01  00:00:00 . 0' from dual;

TIMESTAMP '1995-01-01  00:00:00 . 0'
------------------------------------
1995-01-01 00:00:00.000000          

1 rows fetched.

SQL> select timestamp '1995-01-01 00:00:00.123456' from dual;

TIMESTAMP '1995-01-01 00:00:00.123456'
--------------------------------------
1995-01-01 00:00:00.123456            

1 rows fetched.

SQL> select timestamp '1995-01-01 00:00:00.1234567' from dual;

TIMESTAMP '1995-01-01 00:00:00.1234567'
---------------------------------------
1995-01-01 00:00:00.000000             

1 rows fetched.

SQL> select timestamp '1995-01-01 ' + 1 from dual;

CT-00105, Invalid format of datetime
SQL> select to_date('2008-02-01','yyyy-mm-dd') - timestamp '1995-01-01 11:22:33.123' from dual;

TO_DATE('2008-02-01','YYYY-MM-DD') - TIMESTAMP '1995-01-01 11:22
----------------------------------------------------------------
+0004778 12:37:26.877000                                        

1 rows fetched.

SQL> 
SQL> --vsize
SQL> DROP TABLE IF EXISTS t_func_alltypes;

Succeed.

SQL> CREATE TABLE t_func_alltypes 
  2 (  
  3         f_int1            integer default 0 not null,  
  4         f_int2            integer,  
  5         f_int3            integer, 
  6         f_bigint1        bigint,  
  7         f_bigint2        bigint,  
  8         f_bigint3        bigint,  
  9         f_bool1            integer,  
 10         f_bool2            integer,  
 11         f_num1            number(38, 0),  
 12         f_num2            number(38, 0),  
 13         f_dec1            DECIMAL(38, 0), 
 14         f_dec2            DECIMAL(38, 0),  
 15         f_num10            number(38, 10),  
 16         f_dec10            decimal(38, 10),  
 17         f_float            float,  
 18         f_double        double,  
 19         f_real            real,  
 20         f_char1            char(128),  
 21         f_char2            char(128),  
 22         f_varchar1        varchar(512),  
 23         f_varchar2        varchar2(512),  
 24         f_date1            date,  
 25         f_date2            date,  
 26         f_time            date, 
 27         f_timestamp        timestamp,  
 28         f_tp_tz            timestamp with time zone,  
 29         f_tp_ltz        timestamp with local time zone,  
 30         f_binary        binary(200),  
 31         f_varbinary        varbinary(200),  
 32         f_blob            blob,  
 33         f_clob            clob  
 34 );

Succeed.

SQL> INSERT INTO t_func_alltypes(f_int1, f_bigint1, f_dec1, f_num10, f_float, f_double, f_real, f_char1, f_varchar1, f_date1, f_timestamp, f_clob) VALUES (1234, 1234, 1234567890123456, 1234567890123456.7890, 123.45, 12345678901234.5678, 12345678901234.5678, 'aaa','abcdefghijklmn', SYSDATE, CURRENT_TIMESTAMP, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbvvvvvvvvvvvvvvvvvvvvvvvvvv');

1 rows affected.

SQL> 
SQL> SELECT VSIZE(f_int1), VSIZE(f_bigint1), VSIZE(f_dec1), VSIZE(f_num10), VSIZE(f_float), VSIZE(f_double), VSIZE(f_real), VSIZE(f_char1), VSIZE(f_varchar1), VSIZE(f_date1), VSIZE(f_timestamp) FROM t_func_alltypes;

VSIZE(F_INT1)        VSIZE(F_BIGINT1)     VSIZE(F_DEC1)        VSIZE(F_NUM10)       VSIZE(F_FLOAT)       VSIZE(F_DOUBLE)      VSIZE(F_REAL)        VSIZE(F_CHAR1)       VSIZE(F_VARCHAR1)    VSIZE(F_DATE1)       VSIZE(F_TIMESTAMP)  
-------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- --------------------
4                    8                    10                   12                   8                    8                    8                    128                  14                   8                    8                   

1 rows fetched.

SQL> SELECT VSIZE(f_int1 + f_bigint1) FROM t_func_alltypes;

VSIZE(F_INT1 + F_BIGINT1)
-------------------------
8                        

1 rows fetched.

SQL> 
SQL> --syntax error
SQL> SELECT VSIZE(f_int1), VSIZE(f_bigint1), VSIZE(f_dec1), VSIZE(f_num10), VSIZE(f_float), VSIZE(f_double), VSIZE(f_real), VSIZE(f_char1), VSIZE(f_varchar1), VSIZE(f_date1), VSIZE(f_timestamp), VSIZE(f_clob) FROM t_func_alltypes;

VSIZE(F_INT1)        VSIZE(F_BIGINT1)     VSIZE(F_DEC1)        VSIZE(F_NUM10)       VSIZE(F_FLOAT)       VSIZE(F_DOUBLE)      VSIZE(F_REAL)        VSIZE(F_CHAR1)       VSIZE(F_VARCHAR1)    VSIZE(F_DATE1)       VSIZE(F_TIMESTAMP)   VSIZE(F_CLOB)       
-------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- --------------------
4                    8                    10                   12                   8                    8                    8                    128                  14                   8                    8                    100                 

1 rows fetched.

SQL> SELECT VSIZE(f_int1, 3) FROM t_func_alltypes;

CT-00615, [1:8]Invalid argument number for VSIZE, min=1, max=1
SQL> SELECT VSIZE() FROM DUAL;

CT-00615, [1:8]Invalid argument number for VSIZE, min=1, max=1
SQL> 
SQL> DROP TABLE t_func_alltypes;

Succeed.

SQL> 
SQL> SELECT VSIZE(TRUE) FROM DUAL;

VSIZE(TRUE)         
--------------------
4                   

1 rows fetched.

SQL> SELECT VSIZE('TRUE') FROM DUAL;

VSIZE('TRUE')       
--------------------
4                   

1 rows fetched.

SQL> SELECT VSIZE(FALSE) FROM DUAL;

VSIZE(FALSE)        
--------------------
4                   

1 rows fetched.

SQL> SELECT VSIZE('FALSE') FROM DUAL;

VSIZE('FALSE')      
--------------------
5                   

1 rows fetched.

SQL> 
SQL> --if()
SQL> SELECT IF('TRUE', 'T', 'F') FROM DUAL;

IF('TRUE', 'T', 'F')
--------------------
T                   

1 rows fetched.

SQL> SELECT IF('FALSE', 'T', 'F') FROM DUAL;

IF('FALSE', 'T', 'F')
---------------------
F                    

1 rows fetched.

SQL> SELECT IF(1.1, 'T', 'F') FROM DUAL;

CT-00606, [1:11]Inconsistent datatypes, expected BOOLEAN - got NUMBER
SQL> SELECT IF(CURRENT_TIMESTAMP, 'T', 'F') FROM DUAL;

CT-00606, [1:11]Inconsistent datatypes, expected BOOLEAN - got TIMESTAMP_TZ
SQL> SELECT IF(SYSDATE, 'T', 'F') FROM DUAL;

CT-00606, [1:11]Inconsistent datatypes, expected BOOLEAN - got DATE
SQL> select if(1=1,null,123), if(1=1, 123,null), if(1=1, null,null) from dual; --null 123 null

IF(1=1,NULL,123) IF(1=1, 123,NULL) IF(1=1, NULL,NULL)
---------------- ----------------- ------------------
                 123                                 

1 rows fetched.

SQL> --TYPE
SQL> desc -q SELECT IF('TRUE', 'T', 'F') a,IF('FALSE', 'T', 'F') b, if(1=1,123,123) c, if(1=1,123,'abc') d, if(1=1,'abc',123), if(1=1,123, cast('1111-11-11' as date)) FROM DUAL;  --varchar(1),varchar(1) ,int(3) ,varchar(3) ,varchar(3) ,varchar(10)

Name                                       Null?    Type                                
------------------------------------------ -------- ------------------------------------
A                                                   VARCHAR(1 BYTE)                     
B                                                   VARCHAR(1 BYTE)                     
C                                                   BINARY_INTEGER                      
D                                                   VARCHAR(11 BYTE)                    
IF(1=1,'ABC',123)                                   VARCHAR(11 BYTE)                    
IF(1=1,123, CAST('1111-11-11' AS DATE))             VARCHAR(48 BYTE)                    

SQL> desc -q select if(1=1,null,123), if(1=1, 123,null), if(1=1, null,null) from dual; --int int binary (we not support this)

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
IF(1=1,NULL,123)                             VARCHAR(11 BYTE)                    
IF(1=1, 123,NULL)                            VARCHAR(11 BYTE)                    
IF(1=1, NULL,NULL)                           VARCHAR                             

SQL> 
SQL> drop table if exists t1;

Succeed.

SQL> create table t1 (c1 varbinary(16), c2 int);

Succeed.

SQL> insert into t1 values (UNHEX('11e8d02e03be82a684df0242d307b2a0'), 0);

1 rows affected.

SQL> commit;

Succeed.

SQL> select if( lengthb(c1) + c2 = 16, 0 , 1) RES from t1 group by c1;

CT-00609, [1:26]Expression not in group list
SQL> select c2,lengthb(c2), if(lengthb(c2)=1, 0 ,1) from t1 group by c2;

C2           LENGTHB(C2)          IF(LENGTHB(C2)=1, 0 ,1)
------------ -------------------- -----------------------
0            1                    0                      

1 rows fetched.

SQL> drop table t1;

Succeed.

SQL> --DTS:DTS2018110209708
SQL> drop table if exists t_abs ;

Succeed.

SQL> create table t_abs (c1 varbinary(4));

Succeed.

SQL> insert into t_abs values ('abcd');

1 rows affected.

SQL> commit;

Succeed.

SQL> desc -q select IF(c1='abcd',100000000000000006666666666666666666666666666666666666666666666666666666600000000,111111111111111111111111) from t_abs order by 1;

Name                                                                Null?    Type                                
------------------------------------------------------------------- -------- ------------------------------------
IF(C1='ABCD',100000000000000006666666666666666666666666666666666             NUMBER                              

SQL> select IF(c1='abcd',100000000000000006666666666666666666666666666666666666666666666666666666600000000,111111111111111111111111) from t_abs order by 1;

IF(C1='ABCD',100000000000000006666666666666666666666666666666666
----------------------------------------------------------------
1.0000000000000000666666666666666666666666666667E+80            

1 rows fetched.

SQL> 
SQL> --space
SQL> select space(0),space(1),space(-1);

SPACE(0)                                                         SPACE(1)                                                         SPACE(-1)                                                       
---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
                                                                                                                                                                                                  

1 rows fetched.

SQL> select space(null);

SPACE(NULL)                                                     
----------------------------------------------------------------
                                                                

1 rows fetched.

SQL> select space();

CT-00615, [1:8]Invalid argument number for SPACE, min=1, max=1
SQL> select space(1,2);

CT-00615, [1:8]Invalid argument number for SPACE, min=1, max=1
SQL> select space(4001);

CT-00614, Parameter error: space argument size should be less than 4000.
SQL> select space('aaa');

CT-00636, Invalid number -- unexpected character
SQL> --FIND_IN_SET
SQL> select find_in_set('','');

FIND_IN_SET('','')
------------------
                  

1 rows fetched.

SQL> select find_in_set('','ac,baa,aa,a,aad');

FIND_IN_SET('','AC,BAA,AA,A,AAD')
---------------------------------
                                 

1 rows fetched.

SQL> select find_in_set('',',ac,baa,aa,a,aad');

FIND_IN_SET('',',AC,BAA,AA,A,AAD')
----------------------------------
                                  

1 rows fetched.

SQL> select find_in_set('','ac,,,baa,aa,a,aad');

FIND_IN_SET('','AC,,,BAA,AA,A,AAD')
-----------------------------------
                                   

1 rows fetched.

SQL> select find_in_set('','ac,');

FIND_IN_SET('','AC,')
---------------------
                     

1 rows fetched.

SQL> 
SQL> --DTS2018110507183
SQL> drop table if exists t_func_hex ;

Succeed.

SQL> create table t_func_hex (c1 varbinary(4));

Succeed.

SQL> insert into t_func_hex values ('abcc');

1 rows affected.

SQL> commit;

Succeed.

SQL> desc -q select lpad(c1,8001,'a'), rpad(c1,8001,'a'), insert(c1,2,2,'3267564'), SHA1(c1) from t_func_hex order by 1;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
LPAD(C1,8001,'A')                            VARCHAR(8000 BYTE)                  
RPAD(C1,8001,'A')                            VARCHAR(8000 BYTE)                  
INSERT(C1,2,2,'3267564')                     VARCHAR(11 BYTE)                    
SHA1(C1)                                     VARCHAR(40 BYTE)                    

SQL> select length(lpad(c1,8001,'a')), length(rpad(c1,8001,'a')), length(insert(c1,2,2,'3267564')), length(SHA1(c1)) from t_func_hex order by 1;

LENGTH(LPAD(C1,8001,'A')) LENGTH(RPAD(C1,8001,'A')) LENGTH(INSERT(C1,2,2,'3267564')) LENGTH(SHA1(C1))    
------------------------- ------------------------- -------------------------------- --------------------
8000                      8000                      9                                40                  

1 rows fetched.

SQL> 
SQL> drop table if exists t_func_hex ;

Succeed.

SQL> create table t_func_hex (c1 varbinary(10));

Succeed.

SQL> insert into t_func_hex values ('');

1 rows affected.

SQL> commit;

Succeed.

SQL> desc -q select NVL(c1,10000000000000), NVL2(c1,'10000000000000','222222222222222') from t_func_hex order by 1;

Name                                           Null?    Type                                
---------------------------------------------- -------- ------------------------------------
NVL(C1,10000000000000)                                  VARBINARY(20)                       
NVL2(C1,'10000000000000','222222222222222')             CHAR(15 BYTE)                       

SQL> select length(NVL(c1,10000000000000)), length(NVL2(c1,'10000000000000','222222222222222')) from t_func_hex order by 1;

LENGTH(NVL(C1,10000000000000)) LENGTH(NVL2(C1,'10000000000000','222222222222222'))
------------------------------ ---------------------------------------------------
14                             15                                                 

1 rows fetched.

SQL> 
SQL> drop table if exists t_func_hex;

Succeed.

SQL> create table t_func_hex (c1 clob);

Succeed.

SQL> declare
  2     i varchar(32767);
  3 begin
  4     i:='';
  5     for j in 1..16000 loop
  6         i:=i||'a';
  7     end loop;
  8     insert into t_func_hex values (i);
  9     commit;
 10 end;
 11 /

PL/SQL procedure successfully completed.

SQL> desc -q select lower(c1), upper(c1), hex(c1) from t_func_hex;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
LOWER(C1)                                    VARCHAR(65534 BYTE)                 
UPPER(C1)                                    VARCHAR(65534 BYTE)                 
HEX(C1)                                      VARCHAR(65534 BYTE)                 

SQL> select length(lower(c1)), length(upper(c1)), length(hex(c1)) from t_func_hex;

LENGTH(LOWER(C1))    LENGTH(UPPER(C1))    LENGTH(HEX(C1))     
-------------------- -------------------- --------------------
16000                16000                32000               

1 rows fetched.

SQL> 
SQL> drop table t_func_hex;

Succeed.

SQL> 
SQL> 
SQL> --DTS2018120614216
SQL> --insert func 超过8000截断
SQL> drop table if exists t_func_insert;

Succeed.

SQL> create table t_func_insert(c1 char(8000));

Succeed.

SQL> declare
  2     i varchar(32767);
  3 begin
  4     i:='';
  5     for j in 1..8000 loop
  6         i:=i||'a';
  7     end loop;
  8     insert into t_func_insert values (i);
  9     commit;
 10 end;
 11 /

PL/SQL procedure successfully completed.

SQL> desc -q select insert(c1,1,2,'3432456') from t_func_insert;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
INSERT(C1,1,2,'3432456')                     VARCHAR(8000 BYTE)                  

SQL> select insert(c1,1,2,'3432456') from t_func_insert;

INSERT(C1,1,2,'3432456')                                        
----------------------------------------------------------------
3432456aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

1 rows fetched.

SQL> select length(insert(c1,1,2,'3432456')) from t_func_insert;

LENGTH(INSERT(C1,1,2,'3432456'))
--------------------------------
8000                            

1 rows fetched.

SQL> 
SQL> --if null 参数存在number不带精度的时候，返回类型也不带精度
SQL> drop table if exists t_func_ifnull ;

Succeed.

SQL> create table t_func_ifnull (c1 int, c2 number);

Succeed.

SQL> insert into t_func_ifnull values ('','');

1 rows affected.

SQL> commit;

Succeed.

SQL> desc -q select IFNULL(c1,1000000000000111111111111111111111111000000000000), ifnull(c2, cast(123 as number(10))), ifnull(c1, cast(123 as number(10))) from t_func_ifnull order by 1;

Name                                                            Null?    Type                                
--------------------------------------------------------------- -------- ------------------------------------
IFNULL(C1,1000000000000111111111111111111111111000000000000)             NUMBER                              
IFNULL(C2, CAST(123 AS NUMBER(10)))                                      NUMBER                              
IFNULL(C1, CAST(123 AS NUMBER(10)))                                      NUMBER(10)                          

SQL> select IFNULL(c1,1000000000000111111111111111111111111000000000000), ifnull(c2, cast(123 as number(10))), ifnull(c1, cast(123 as number(10))) from t_func_ifnull order by 1;

IFNULL(C1,1000000000000111111111111111111111111000000000000) IFNULL(C2, CAST(123 AS NUMBER(10)))                  IFNULL(C1, CAST(123 AS NUMBER(10)))                 
------------------------------------------------------------ ---------------------------------------------------- ----------------------------------------------------
1000000000000111111111111111111111111000000000000            123                                                  123                                                 

1 rows fetched.

SQL> 
SQL> --image 类型在函数中的长度最大为64k
SQL> drop table if exists t_image_in_func;

Succeed.

SQL> create table t_image_in_func (c1 image);

Succeed.

SQL> declare
  2     i varchar(32767);
  3 begin
  4     i:='';
  5     for j in 1..16000 loop
  6         i:=i||'a';
  7     end loop;
  8     insert into t_image_in_func values (i);
  9     commit;
 10 end;
 11 /

PL/SQL procedure successfully completed.

SQL> desc -q select hex(c1) from t_image_in_func;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
HEX(C1)                                      VARCHAR(65534 BYTE)                 

SQL> --select hex(c1) from t_image_in_func;
SQL> select length(hex(c1)) from t_image_in_func;

LENGTH(HEX(C1))     
--------------------
32000               

1 rows fetched.

SQL> 
SQL> desc -q select lower(c1) from t_image_in_func;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
LOWER(C1)                                    VARCHAR(65534 BYTE)                 

SQL> --select lower(c1) from t_image_in_func;
SQL> select length(lower(c1)) from t_image_in_func;

LENGTH(LOWER(C1))   
--------------------
16000               

1 rows fetched.

SQL> 
SQL> desc -q select rtrim(c1) from t_image_in_func;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
RTRIM(C1)                                    VARCHAR(65534 BYTE)                 

SQL> --select rtrim(c1) from t_image_in_func;
SQL> select length(rtrim(c1)) from t_image_in_func;

CT-00606, Inconsistent datatypes, expected VARCHAR - got IMAGE
SQL> 
SQL> desc -q select SUBSTRING(c1,1) from t_image_in_func;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
SUBSTRING(C1,1)                              VARCHAR(65534 BYTE)                 

SQL> --select SUBSTRING(c1,1) from t_image_in_func;
SQL> select length(SUBSTRING(c1,1)) from t_image_in_func;

LENGTH(SUBSTRING(C1,1))
-----------------------
16000                  

1 rows fetched.

SQL> 
SQL> desc -q select SUBSTR(c1,1) from t_image_in_func;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
SUBSTR(C1,1)                                 VARCHAR(65534 BYTE)                 

SQL> --select SUBSTR(c1,1) from t_image_in_func;
SQL> select length(SUBSTR(c1,1)) from t_image_in_func;

LENGTH(SUBSTR(C1,1))
--------------------
16000               

1 rows fetched.

SQL> 
SQL> --DTS2018121900740
SQL> drop table if exists function_aa;

Succeed.

SQL> create table function_aa (i varchar(100),j varchar(100));

Succeed.

SQL> insert into function_aa select lpad('aa',7000,'bb'),lpad('aa',8000,'bb') from dual;

CT-01346, The column "I" length exceeded the maximum, (actual: 7000, maximum: 100).
SQL> 
SQL> -- thread stack depth limit exceeded
SQL> select abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(i)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) union abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(ifrom function_aa;

CT-00027, Stack depth limit exceeded
SQL> 
SQL> drop table function_aa;

Succeed.

SQL> 
SQL> select 123 from sys.dba_tables where trim(tablespace_name) is not null limit 1;

123         
------------
123         

1 rows fetched.

SQL> select 456 from sys.dba_tables where trim(leading 'x' from concat('x', tablespace_name)) = tablespace_name limit 1;

456         
------------
456         

1 rows fetched.

SQL> 
SQL> --DTS2019021605200
SQL> drop table if exists t_func_sleep ;

Succeed.

SQL> create table t_func_sleep(a number(5,1));

Succeed.

SQL> insert into t_func_sleep (a) values (1.234);

1 rows affected.

SQL> select sleep(a) from t_func_sleep;

SLEEP(A)
--------
        

1 rows fetched.

SQL> select sleep(1.234);

SLEEP(1.234)
------------
            

1 rows fetched.

SQL> select sleep(-1);

CT-00614, Parameter error: parameter can not be negative.
SQL> select sleep(-1.23);

CT-00614, Parameter error: parameter can not be negative.
SQL> select sleep(99999999999999);

CT-00614, Parameter error: the parameter can not exceed 999999999999
SQL> drop table t_func_sleep;

Succeed.

SQL> 
SQL> --sha\sha1
SQL> SELECT SHA('abcdefghijklmnopqrstuvwxyz');

SHA('ABCDEFGHIJKLMNOPQRSTUVWXYZ')       
----------------------------------------
32D10C7B8CF96570CA04CE37F2A19D84240D3A89

1 rows fetched.

SQL> SELECT SHA1('abcdefghijklmnopqrstuvwxyz');

SHA1('ABCDEFGHIJKLMNOPQRSTUVWXYZ')      
----------------------------------------
32D10C7B8CF96570CA04CE37F2A19D84240D3A89

1 rows fetched.

SQL> 
SQL> drop table if exists t_length_range;

Succeed.

SQL> create table t_length_range (c1 clob);

Succeed.

SQL> declare
  2  i varchar(32767);
  3 begin
  4  i:='';
  5  for j in 1..32767 loop
  6   i:=i||'a';
  7  end loop;
  8  insert into t_length_range values (i);
  9  commit;
 10 end;
 11 /

PL/SQL procedure successfully completed.

SQL> select length(c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1||c1) from t_length_range;

CT-00027, [1:8]Stack depth limit exceeded
SQL> 
SQL> -- test group_concat
SQL> drop table if exists test_gc;

Succeed.

SQL> create table test_gc(id int, name varchar(8000));

Succeed.

SQL> insert into test_gc values (1, lpad('a',8000,'a'));

1 rows affected.

SQL> insert into test_gc values (2, lpad('b',8000,'b'));

1 rows affected.

SQL> insert into test_gc values (3, lpad('c',8000,'c'));

1 rows affected.

SQL> insert into test_gc values (4, lpad('d',8000,'d'));

1 rows affected.

SQL> insert into test_gc values (5, lpad('e',8000,'e'));

1 rows affected.

SQL> insert into test_gc values (6, lpad('f',8000,'f'));

1 rows affected.

SQL> insert into test_gc values (7, lpad('g',8000,'g'));

1 rows affected.

SQL> insert into test_gc values (8, lpad('h',8000,'h'));

1 rows affected.

SQL> insert into test_gc values (9, lpad('i',8000,'i'));

1 rows affected.

SQL> create index idx_gc on test_gc(id);

Succeed.

SQL> commit;

Succeed.

SQL> SELECT group_concat(DISTINCT name ORDER BY name ASC) AS tempname,id FROM test_gc GROUP BY id order by 1;

TEMPNAME                                                         ID          
---------------------------------------------------------------- ------------
 1           
 2           
 3           
 4           
 5           
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 6           
 7           
 8           
iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii 9           

9 rows fetched.

SQL> --isnumeric
SQL> SELECT ISNUMERIC(cast('1' as integer)) from dual;

ISNUMERIC(CAST('1' AS INTEGER))
-------------------------------
1                              

1 rows fetched.

SQL> SELECT ISNUMERIC('a' || '1') from dual;

ISNUMERIC('A' || '1')
---------------------
0                    

1 rows fetched.

SQL> SELECT ISNUMERIC(null) from dual;

ISNUMERIC(NULL)
---------------
0              

1 rows fetched.

SQL> SELECT ISNUMERIC('null') from dual;

ISNUMERIC('NULL')
-----------------
0                

1 rows fetched.

SQL> SELECT ISNUMERIC('1' + 0) from dual;

ISNUMERIC('1' + 0)
------------------
1                 

1 rows fetched.

SQL> SELECT ISNUMERIC(1.2e+10) from dual;

ISNUMERIC(1.2E+10)
------------------
1                 

1 rows fetched.

SQL> SELECT ISNUMERIC(1.2E+10) from dual;

ISNUMERIC(1.2E+10)
------------------
1                 

1 rows fetched.

SQL> SELECT ISNUMERIC(-1.2e+10) from dual;

ISNUMERIC(-1.2E+10)
-------------------
1                  

1 rows fetched.

SQL> SELECT ISNUMERIC(-1.2e-10) from dual;

ISNUMERIC(-1.2E-10)
-------------------
1                  

1 rows fetched.

SQL> SELECT ISNUMERIC(-1.2e110) from dual;

ISNUMERIC(-1.2E110)
-------------------
1                  

1 rows fetched.

SQL> SELECT ISNUMERIC(-1.2e+10^5) from dual;

ISNUMERIC(-1.2E+10^5)
---------------------
1                    

1 rows fetched.

SQL> SELECT ISNUMERIC(200E) from dual;

CT-00601, [1:18]Sql syntax error: the word "200E" is not correct
SQL> SELECT ISNUMERIC(200E+100) from dual;

ISNUMERIC(200E+100)
-------------------
1                  

1 rows fetched.

SQL> SELECT ISNUMERIC(200E100) from dual;

ISNUMERIC(200E100)
------------------
1                 

1 rows fetched.

from dual;

CT-00636, [1:18]Invalid number -- overflow
SQL> SELECT ISNUMERIC('200M') from dual;

ISNUMERIC('200M')
-----------------
0                

1 rows fetched.

SQL> SELECT ISNUMERIC('200E') from dual;

ISNUMERIC('200E')
-----------------
0                

1 rows fetched.

SQL> SELECT ISNUMERIC('200E+100') from dual;

ISNUMERIC('200E+100')
---------------------
1                    

1 rows fetched.

SQL> SELECT ISNUMERIC(ISNUMERIC(ISNUMERIC(ISNUMERIC(ISNUMERIC(ISNUMERIC(ISNUMERIC(ISNUMERIC(ISNUMERIC(ISNUMERIC(ISNUMERIC(1))))))))))) from dual;

ISNUMERIC(ISNUMERIC(ISNUMERIC(ISNUMERIC(ISNUMERIC(ISNUMERIC(ISNU
----------------------------------------------------------------
1                                                               

1 rows fetched.

SQL> SELECT isnumericfrom dual ;

ISNUMERIC('12222222222222222222222222222222222222222222222222222
----------------------------------------------------------------
1                                                               

1 rows fetched.

SQL> 
SQL> drop table if exists md5_test_t;

Succeed.

SQL> create table md5_test_t(f1 date,f2 bool);

Succeed.

SQL> insert into md5_test_t values('2019-04-11 12:00:00',true);

1 rows affected.

SQL> insert into md5_test_t values('2019-04-11',false);

1 rows affected.

SQL> select md5(f1),md5(f2) from md5_test_t;

MD5(F1)                          MD5(F2)                         
-------------------------------- --------------------------------
710b4fd4329f1c6cf872717f66b32e8d c0d83f0b82a6b30de8811e69e6d95c61
de6f79f7dd99115fa36b53bb49c51458 946003f97ccc52d5d3b54ac0ec31bbfc

2 rows fetched.

SQL> 
SQL> SELECT GET_SHARED_LOCK('LOCK1') FROM DUAL;

GET_SHARED_LOCK('LOCK1')
------------------------
1                       

1 rows fetched.

SQL> SELECT GET_SHARED_LOCK('LOCK2',5) FROM DUAL;

GET_SHARED_LOCK('LOCK2',5)
--------------------------
1                         

1 rows fetched.

SQL> SELECT TRY_GET_SHARED_LOCK('LOCK3') FROM DUAL;

TRY_GET_SHARED_LOCK('LOCK3')
----------------------------
1                           

1 rows fetched.

SQL> SELECT RELEASE_SHARED_LOCK('LOCK1') FROM DUAL;

RELEASE_SHARED_LOCK('LOCK1')
----------------------------
1                           

1 rows fetched.

SQL> SELECT RELEASE_SHARED_LOCK('LOCK2') FROM DUAL;

RELEASE_SHARED_LOCK('LOCK2')
----------------------------
1                           

1 rows fetched.

SQL> SELECT RELEASE_SHARED_LOCK('LOCK3') FROM DUAL;

RELEASE_SHARED_LOCK('LOCK3')
----------------------------
1                           

1 rows fetched.

SQL> 
SQL> SELECT GET_XACT_SHARED_LOCK('TEST_LOCK1') FROM DUAL;

GET_XACT_SHARED_LOCK('TEST_LOCK1')
----------------------------------
1                                 

1 rows fetched.

SQL> SELECT GET_XACT_SHARED_LOCK('TEST_LOCK2',10) FROM DUAL;

GET_XACT_SHARED_LOCK('TEST_LOCK2',10)
-------------------------------------
1                                    

1 rows fetched.

SQL> SELECT TRY_GET_XACT_SHARED_LOCK('TEST_LOCK3') FROM DUAL;

TRY_GET_XACT_SHARED_LOCK('TEST_LOCK3')
--------------------------------------
1                                     

1 rows fetched.

SQL> SELECT LOCK_NAME,TOTAL_LOCKED_TIMES FROM DV_XACT_SHARED_LOCKS order by LOCK_NAME;

LOCK_NAME                                                        TOTAL_LOCKED_TIMES
---------------------------------------------------------------- ------------------
TEST_LOCK1                                                       1                 
TEST_LOCK2                                                       1                 
TEST_LOCK3                                                       1                 

3 rows fetched.

SQL> COMMIT;

Succeed.

SQL> SELECT LOCK_NAME,TOTAL_LOCKED_TIMES FROM DV_XACT_SHARED_LOCKS;

LOCK_NAME                                                        TOTAL_LOCKED_TIMES
---------------------------------------------------------------- ------------------

0 rows fetched.

SQL> 
SQL> CREATE OR REPLACE PROCEDURE TRANS_LOCKS()
  2 IS
  3 A BOOLEAN;
  4 BEGIN
  5 	FOR I IN 1..2 LOOP
  6 		IF MOD(I,2)=1 THEN
  7 			SELECT GET_XACT_LOCK('LOCK_COMMIT') INTO A FROM DUAL;
  8 			COMMIT;
  9 		ELSE
 10             SELECT GET_XACT_LOCK('LOCKROLLBACK') INTO A FROM DUAL;
 11 			ROLLBACK;
 12 			SELECT GET_XACT_LOCK('LOCK_SAVED') INTO A FROM DUAL;
 13 		END IF;
 14 	END LOOP;			
 15 END;
 16 /

Succeed.

SQL> CALL TRANS_LOCKS;

PL/SQL procedure successfully completed.

SQL> SELECT LOCK_NAME,LOCK_TIMES FROM V$XACT_LOCK;

LOCK_NAME                                                        LOCK_TIMES  
---------------------------------------------------------------- ------------
LOCK_SAVED                                                       1           

1 rows fetched.

SQL> COMMIT;

Succeed.

SQL> DROP PROCEDURE IF EXISTS TRANS_LOCKS;

Succeed.

SQL> SELECT DBE_DIAGNOSE.DBA_IND_POS('-9223372036854775808,9223372036854775807','9223372036854775807') from SYS_DUMMY;

DBE_DIAGNOSE.DBA_IND_POS('-9223372036854775808,92233720368547758
----------------------------------------------------------------
2                                                               

1 rows fetched.

SQL> SELECT DBE_DIAGNOSE.DBA_IND_POS('-9223372036854775809,-9223372036854775808,9223372036854775808','-9223372036854775808') from SYS_DUMMY;

CT-00614, [1:33]Parameter error: number argument expected
SQL> SELECT DBE_DIAGNOSE.DBA_IND_POS('-9223372036854775808,9223372036854775807','9223372036854775807') from SYS_DUMMY;

DBE_DIAGNOSE.DBA_IND_POS('-9223372036854775808,92233720368547758
----------------------------------------------------------------
2                                                               

1 rows fetched.

SQL> 
SQL> --DTS2019062512807 
SQL> select max(round('0002324')) from sys_dummy;

MAX(ROUND('0002324'))                               
----------------------------------------------------
2324                                                

1 rows fetched.

SQL> select min(round('0002324')) from sys_dummy;

MIN(ROUND('0002324'))                               
----------------------------------------------------
2324                                                

1 rows fetched.

SQL> select round('123123.adads') from sys_dummy; ---error

CT-00636, [1:8]Invalid number -- unexpected character
SQL> 
SQL> --DTS2019080112819
SQL> select * from table(dba_analyze_table(null, 'FUNCTION_TAB_001'));

CT-00212, The value of parameter "" cannot be recognized: "user name can not be null"
SQL> select * from table(dba_analyze_table('', 'FUNCTION_TAB_001'));

CT-00212, The value of parameter "" cannot be recognized: "user name can not be null"
SQL> 
SQL> --DTS2019080304144
SQL> drop table if exists not_if_table;

Succeed.

SQL> create table not_if_table (f1 int);

Succeed.

SQL> select if from not_if_table; --error

CT-00601, [1:8]Sql syntax error: not enough argument for if
SQL> 
SQL> drop table if exists if_table;

Succeed.

SQL> create table if_table (if int);

Succeed.

SQL> insert into if_table values(1);

1 rows affected.

SQL> select if from if_table;

IF          
------------
1           

1 rows fetched.

SQL> 
SQL> drop table not_if_table;

Succeed.

SQL> drop table if_table;

Succeed.

SQL> 
SQL> --test gs_hash
SQL> drop table if exists test_gs_hash;

Succeed.

SQL> create table test_gs_hash(id int, name varchar(20)) partition by hash(name)
  2 (
  3 partition p1,
  4 partition p2,
  5 partition p3,
  6 partition p4
  7 );

Succeed.

SQL> insert into test_gs_hash values(10, 'zhangsan');

1 rows affected.

SQL> insert into test_gs_hash values(20, 'lisi');

1 rows affected.

SQL> insert into test_gs_hash values(30, 'wangwu');

1 rows affected.

SQL> insert into test_gs_hash values(40, 'zhaoliu');

1 rows affected.

SQL> commit;

Succeed.

SQL> select * from test_gs_hash partition(p1);

ID           NAME                
------------ --------------------

0 rows fetched.

SQL> select * from test_gs_hash partition(p2);

ID           NAME                
------------ --------------------

0 rows fetched.

SQL> select * from test_gs_hash partition(p3);

ID           NAME                
------------ --------------------
10           zhangsan            
20           lisi                
30           wangwu              
40           zhaoliu             

4 rows fetched.

SQL> select * from test_gs_hash partition(p4);

ID           NAME                
------------ --------------------

0 rows fetched.

SQL> select ct_hash('zhangsan', 4) from dual;

CT_HASH('ZHANGSAN', 4)
----------------------
2                     

1 rows fetched.

SQL> select ct_hash('lisi', 4) from dual;

CT_HASH('LISI', 4)
------------------
2                 

1 rows fetched.

SQL> select ct_hash('wangwu', 4) from dual;

CT_HASH('WANGWU', 4)
--------------------
2                   

1 rows fetched.

SQL> select ct_hash('zhaoliu', 4) from dual;

CT_HASH('ZHAOLIU', 4)
---------------------
2                    

1 rows fetched.

SQL> drop table test_gs_hash;

Succeed.

SQL> 
SQL> --DTS2019080911544
SQL> select HEXTORAW(empty_clob()) from SYS_DUMMY;

HEXTORAW(EMPTY_CLOB())                                          
----------------------------------------------------------------
                                                                

1 rows fetched.

SQL> select ASCII(empty_clob()) from SYS_DUMMY;

ASCII(EMPTY_CLOB()) 
--------------------
                    

1 rows fetched.

SQL> 
SQL> drop table if exists for_variant_precision_convert;

Succeed.

SQL> create table for_variant_precision_convert(
  2 	a interval year(4) to month,
  3 	b interval year(3) to month,
  4 	c interval day(6) to second(3),
  5 	d interval day(3) to second(6),
  6 	e interval day(3) to second(6),
  7 	f timestamp(6),
  8 	g timestamp(3)
  9 );

Succeed.

SQL> insert into for_variant_precision_convert values('994-07', '994-07', '1001 12:3:4', '101 12:3:4', '101 12:3:4', timestamp'2000-10-12 12:12:12.123', timestamp'2019-12-12 12:12:12.123');

1 rows affected.

SQL> select a,find_in_set('+994-07',a) from for_variant_precision_convert;

A          FIND_IN_SET('+994-07',A)
---------- ------------------------
+0994-07   0                       

1 rows fetched.

SQL> select a,find_in_set('+0994-07',a) from for_variant_precision_convert;

A          FIND_IN_SET('+0994-07',A)
---------- -------------------------
+0994-07   1                        

1 rows fetched.

SQL> select b,find_in_set('+0994-07',b) from for_variant_precision_convert;

B          FIND_IN_SET('+0994-07',B)
---------- -------------------------
+994-07    0                        

1 rows fetched.

SQL> select b,find_in_set('+994-07',b) from for_variant_precision_convert;

B          FIND_IN_SET('+994-07',B)
---------- ------------------------
+994-07    1                       

1 rows fetched.

SQL> select c,find_in_set('+1001 12:3:4',c) from for_variant_precision_convert;

C                        FIND_IN_SET('+1001 12:3:4',C)
------------------------ -----------------------------
+001001 12:03:04.000     0                            

1 rows fetched.

SQL> select c,find_in_set('+001001 12:03:04.000',c) from for_variant_precision_convert;

C                        FIND_IN_SET('+001001 12:03:04.000',C)
------------------------ -------------------------------------
+001001 12:03:04.000     1                                    

1 rows fetched.

SQL> select d,find_in_set('+101 12:3:4',d) from for_variant_precision_convert;

D                        FIND_IN_SET('+101 12:3:4',D)
------------------------ ----------------------------
+101 12:03:04.000000     0                           

1 rows fetched.

SQL> select d,find_in_set('+101 12:03:04.000000',d) from for_variant_precision_convert;

D                        FIND_IN_SET('+101 12:03:04.000000',D)
------------------------ -------------------------------------
+101 12:03:04.000000     1                                    

1 rows fetched.

SQL> select e,find_in_set('+101 12:3:4',e) from for_variant_precision_convert;

E                        FIND_IN_SET('+101 12:3:4',E)
------------------------ ----------------------------
+101 12:03:04.000000     0                           

1 rows fetched.

SQL> select e,find_in_set('+101 12:03:04.000000',e) from for_variant_precision_convert;

E                        FIND_IN_SET('+101 12:03:04.000000',E)
------------------------ -------------------------------------
+101 12:03:04.000000     1                                    

1 rows fetched.

SQL> select f,find_in_set('2000-10-12 12:12:12.123',f) from for_variant_precision_convert;

F                                FIND_IN_SET('2000-10-12 12:12:12.123',F)
-------------------------------- ----------------------------------------
2000-10-12 12:12:12.123000       0                                       

1 rows fetched.

SQL> select f,find_in_set('2000-10-12 12:12:12.123000',f) from for_variant_precision_convert;

F                                FIND_IN_SET('2000-10-12 12:12:12.123000',F)
-------------------------------- -------------------------------------------
2000-10-12 12:12:12.123000       1                                          

1 rows fetched.

SQL> select g,find_in_set('2019-12-12 12:12:12.123',g) from for_variant_precision_convert;

G                                FIND_IN_SET('2019-12-12 12:12:12.123',G)
-------------------------------- ----------------------------------------
2019-12-12 12:12:12.123          1                                       

1 rows fetched.

SQL> select f,replace(f,'0','a') from for_variant_precision_convert;

F                                REPLACE(F,'0','A')                                              
-------------------------------- ----------------------------------------------------------------
2000-10-12 12:12:12.123000       2aaa-1a-12 12:12:12.123aaa                                      

1 rows fetched.

SQL> select g,replace(g,'0','a') from for_variant_precision_convert;

G                                REPLACE(G,'0','A')                                              
-------------------------------- ----------------------------------------------------------------
2019-12-12 12:12:12.123          2a19-12-12 12:12:12.123                                         

1 rows fetched.

SQL> select f,translate(f,'0','a') from for_variant_precision_convert;

F                                TRANSLATE(F,'0','A')                            
-------------------------------- ------------------------------------------------
2000-10-12 12:12:12.123000       2aaa-1a-12 12:12:12.123aaa                      

1 rows fetched.

SQL> select g,translate(g,'0','a') from for_variant_precision_convert;

G                                TRANSLATE(G,'0','A')                                            
-------------------------------- ----------------------------------------------------------------
2019-12-12 12:12:12.123          2a19-12-12 12:12:12.123                                         

1 rows fetched.

SQL> drop table for_variant_precision_convert;

Succeed.

SQL> 
SQL> 
SQL> drop table if exists case_t1;

Succeed.

SQL> create table case_t1(a varchar(5), b int, c int);

Succeed.

SQL> insert into case_t1 values(null, 1,1);

1 rows affected.

SQL> SELECT 
  2     MAX(
  3         CASE
  4             WHEN abs(case_t1.a) > 0 THEN
  5                 case_t1.a
  6             ELSE
  7                 0
  8         END
  9     ) OVER(
 10         PARTITION BY case_t1.b
 11     )  onway
 12 FROM case_t1;

ONWAY
-----
0    

1 rows fetched.

SQL> drop table case_t1;

Succeed.

SQL> 
SQL> drop table if exists case_t2;

Succeed.

SQL> create table case_t2(a varchar(5), b int, c int);

Succeed.

SQL> insert into case_t2 values ('123',1,1);

1 rows affected.

SQL> insert into case_t2 values ('23',1,1);

1 rows affected.

SQL> insert into case_t2 values ('3',1,1);

1 rows affected.

SQL> SELECT 
  2     MAX(
  3         CASE
  4             WHEN abs(case_t2.b) = 1 THEN
  5                 to_number(case_t2.a)
  6             ELSE
  7                 0
  8         END
  9     ) OVER(
 10         PARTITION BY case_t2.c
 11     )  onway
 12 FROM case_t2;

ONWAY                                               
----------------------------------------------------
123                                                 
123                                                 
123                                                 

3 rows fetched.

SQL> 
SQL> SELECT 
  2     MAX(
  3         CASE
  4             WHEN abs(case_t2.b) = 1 THEN
  5                 case_t2.a
  6             ELSE
  7                 0
  8         END
  9     ) OVER(
 10         PARTITION BY case_t2.c
 11     )  onway
 12 FROM case_t2;

ONWAY
-----
3    
3    
3    

3 rows fetched.

SQL> 
SQL> drop table case_t2;

Succeed.

SQL> 
SQL> --DTS2019090301787
SQL> select REPLACE(CONCAT( -1000.245 , 100.123 , -1000.245 , '11 JKLHGOSIJO JLASJ ' , '11 JKLHGOSIJO JLASJ ' , NULL , -1000.245 , '11 JKLHGOSIJO JLASJ ' , NULL ), CONCAT( 100.123 , -1000.245 ) , REVERSE('') ) from dual;

REPLACE(CONCAT( -1000.245 , 100.123 , -1000.245 , '11 JKLHGOSIJO
----------------------------------------------------------------
-1000.24511 JKLHGOSIJO JLASJ 11 JKLHGOSIJO JLASJ -1000.24511 JKLHGOSIJO JLASJ 

1 rows fetched.

SQL> drop table if exists tc;

Succeed.

SQL> create table tc(c clob default 'abcdefg' || lpad('你好', 80000, '中国'));

Succeed.

SQL> insert into tc values(default);

1 rows affected.

SQL> select length(c) from tc;

LENGTH(C)           
--------------------
2673                

1 rows fetched.

SQL> select lengthb(c) from tc;

LENGTHB(C)          
--------------------
8005                

1 rows fetched.

SQL> select length(lpad(c, '9000', '你好')) from tc;

LENGTH(LPAD(C, '9000', '你好'))
---------------------------------
2671                             

1 rows fetched.

SQL> select lengthb(lpad(c, '9000', '你好')) from tc;

LENGTHB(LPAD(C, '9000', '你好'))
----------------------------------
7999                              

1 rows fetched.

SQL> 
SQL> drop table if exists test_gs_hash_number;

Succeed.

SQL> create table test_gs_hash_number(id number(38)) partition by hash(id)
  2 (
  3 partition p1,
  4 partition p2,
  5 partition p3,
  6 partition p4
  7 );

Succeed.

SQL> insert into test_gs_hash_number values(1540075);

1 rows affected.

SQL> select ct_hash(id, 4) from test_gs_hash_number;

CT_HASH(ID, 4)
--------------
2             

1 rows fetched.

SQL> drop table test_gs_hash_number;

Succeed.

SQL> 
SQL> -- DTS2020011600302
SQL> drop table if exists em_fetch2_oxnjedml_006;

Succeed.

SQL> set serveroutput on;

ON
SQL> create table em_fetch2_oxnjedml_006
  2 (
  3 --em_fetch2_oxnjedml_006no int primary key,
  4 em_fetch2_oxnjedml_006no int,
  5 ename varchar(80),
  6 job varchar(80),
  7 sal number,
  8 primary key (em_fetch2_oxnjedml_006no)
  9 );

Succeed.

SQL> insert into em_fetch2_oxnjedml_006 values(1,'ddzhangsanyy','teacher',9800);

1 rows affected.

SQL> insert into em_fetch2_oxnjedml_006 values(2,'xiaowang','doctor',7900);

1 rows affected.

SQL> insert into em_fetch2_oxnjedml_006 values(3,'杨戬 ','artist',8200);

1 rows affected.

SQL> insert into em_fetch2_oxnjedml_006 values(4,' 杨依依','engineer',5600);

1 rows affected.

SQL> commit;

Succeed.

SQL> BEGIN
  2 for i in 1..2
  3 loop
  4 if i<=1 then
  5 FOR a IN(SELECT * FROM em_fetch2_oxnjedml_006 WHERE ename LIKE '%zhangsan%' AND sal > 9000 ORDER BY em_fetch2_oxnjedml_006no;)
  6 LOOP
  7 dbe_output.print_line('a is em_fetch2_oxnjedml_006:'||a.em_fetch2_oxnjedml_006no||' name:'||a.ename||' job:'||a.job||' sal:'||a.sal);
  8 END LOOP;
  9 else
 10 FOR a IN(SELECT * FROM em_fetch2_oxnjedml_006 WHERE ename LIKE '% 杨依依%' AND sal < 9000 ORDER BY em_fetch2_oxnjedml_006no)
 11 LOOP
 12 dbe_output.print_line(LTRIM(a.ename));
 13 END LOOP;
 14 end if;
 15 end loop;
 16 END;
 17 /

a is em_fetch2_oxnjedml_006:1 name:ddzhangsanyy job:teacher sal:9800
杨依依

PL/SQL procedure successfully completed.

SQL> 
SQL> SELECT REPLACE( TRIM( TRIM( ' abc' from ' abcdefghijklmnopqrs3211111122222333344444455555566667777788889999900000 ' ) from INSERT('12345678909876543211111122222333344444455555566667777788889999900000abcdefghijklmnopqrstuvwxyzaaaaaqabbbbbbbccccccc' , 3 , 6 , 'ltrvxxqpposmwvkgfrbgodlzmcunzdlpwwtn' ) ) , CONCAT( '11 JKLHGOSIJO JLASJ ')) FROM dual;

REPLACE( TRIM( TRIM( ' ABC' FROM ' ABCDEFGHIJKLMNOPQRS3211111122
----------------------------------------------------------------
trvxxqpposmwvkgfrbgodlzmcunzdlpwwtn909876543211111122222333344444455555566667777788889999900000abcdefghijklmnopqrstuvwxyzaaaaaqabbbbbbbccccccc

1 rows fetched.

SQL> 
SQL> --DTS2020020300260
SQL> create table dts_tin(i int not null primary key,j varchar(10));

Succeed.

SQL> select dts_tin.*from dts_tin left join dts_tin t1 on dts_tin.i=t1.i where dts_tin.i in (666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166) and dts_tin.i = to_char(1);

I            J         
------------ ----------

0 rows fetched.

SQL> drop table dts_tin;

Succeed.

SQL> 
SQL> -- test raw asciistr
SQL> drop table if exists asciistr001;

Succeed.

SQL> create table asciistr001( 
  2 COL_1 bigint, 
  3 COL_2 TIMESTAMP WITHOUT TIME ZONE, 
  4 COL_3 bool,
  5 COL_4 decimal,
  6 COL_5 text,
  7 COL_6 smallint,
  8 COL_7 char(30),
  9 COL_8 double precision,
 10 COL_9 longtext,
 11 COL_10 character varying(30),
 12 COL_11 bool ,
 13 COL_12 bytea ,
 14 COL_13 real ,
 15 COL_14 numeric ,
 16 COL_15 blob ,
 17 COL_16 integer ,
 18 COL_17 int ,
 19 COL_18 TIMESTAMP WITH TIME ZONE ,
 20 COL_19 binary_integer ,
 21 COL_20 interval day to second  ,
 22 COL_21 boolean, 
 23 COL_22 nchar(30),
 24 COL_23 binary_bigint,
 25 COL_24 nchar(100),
 26 COL_25 character(1000),
 27 COL_26 text,
 28 COL_27 float,
 29 COL_28 double,
 30 COL_29 bigint,
 31 COL_30 TIMESTAMP WITH LOCAL TIME ZONE ,
 32 COL_31 TIMESTAMP,
 33 COL_32 image,
 34 COL_33 interval year to month,
 35 COL_34 character(30),
 36 COL_35 smallint,
 37 COL_36 blob,
 38 COL_37 char(300),
 39 COL_38 float,
 40 COL_39 raw(100),
 41 COL_40 clob ,
 42 COL_41 binary_double,
 43 COL_42 number(6,2),
 44 COL_43 decimal(6,2),
 45 COL_44 varchar2(50),
 46 COL_45 varchar(30),
 47 COL_46 nvarchar2(100),
 48 COL_47 numeric(12,6),
 49 COL_48 nvarchar(30),
 50 COL_49 date,
 51 COL_50 image,
 52 COL_51 integer,
 53 COL_52 binary_double,
 54 COL_53 decimal(12,6),
 55 COL_54 raw(8000),
 56 COL_55 clob,
 57 COL_56 varchar2(8000),
 58 COL_57 datetime,
 59 COL_58 number(12,6),
 60 COL_59 nvarchar2(4000),
 61 COL_60 varbinary(2000) ,
 62 COL_61 binary(200),
 63 COL_62 datetime,
 64 COL_63 binary(100),
 65 COL_64 varchar(1000),
 66 COL_65 date,
 67 constraint fun_cst_id primary key(COL_1)
 68 );

Succeed.

SQL> 
SQL> -- 创建序列
SQL> drop sequence if exists fun_seq;

Succeed.

SQL> create sequence fun_seq increment by 1 start with 100000;

Succeed.

SQL> --清空数据
SQL> truncate table asciistr001;

Succeed.

SQL> 
SQL> --插入数据
SQL> begin
  2       for i in 1..1000 loop
  3       insert into asciistr001 values(
  4           fun_seq.nextval,
  5           TIMESTAMPADD(HOUR,i,'2019-01-03 14:14:12'),
  6           true,
  7           3.1415926+fun_seq.nextval,
  8           lpad('abc','5000','a@123&^%djgk'),
  9           i,
 10           lpad('abc','30','@'),
 11           i+1.456789445455,
 12           lpad('abc','5000','a@123&^%djgk'),
 13           lpad('abc','30','b'),
 14           false,
 15           lpad('10','5000','0101'),
 16           3.1415926+fun_seq.nextval,
 17           i/4,
 18           lpad('10','8000','01010'),
 19           i,
 20           i,
 21           TIMESTAMPADD(DAY,i,'2019-01-03 14:14:12'),
 22           '1',
 23           (INTERVAL '4 5:12:10.222' DAY TO SECOND(3)),
 24           0,
 25           rpad('abc','30','e'),
 26           fun_seq.nextval,
 27           rpad('abc','100','exc'),
 28           lpad('abc','1000','a@123&^%djgk'),
 29           lpad('abc','5000','a@123&^%djgk'),
 30           i/4,
 31           fun_seq.nextval-99,
 32           i*3.1415,
 33           TIMESTAMPADD(MINUTE,i,'2019-01-03 14:14:12'),
 34           to_timestamp('2019-01-03 14:58:54.000000','YYYY-MM-DD HH24:MI:SS.FFFFFF'),
 35 		  lpad('abc','5000','a@123&^%djgk'),
 36           (INTERVAL '12' YEAR),
 37           rpad('abc','30','&'),
 38           i,
 39           lpad('10',5000,'01010'),
 40           rpad('abc','300','exc'),
 41           i/2.15,
 42           rpad('0F',100,'AADB9'),
 43           lpad('abc','5000','a@123&^%djgk'),
 44           1.0E+100,
 45           3.14+i,
 46           i+445.255,
 47           rpad('abc','30','&'),
 48           lpad('abc','30','&'),
 49           rpad('abc','100','&GDsh'),
 50           125563.141592,
 51           rpad('abc','30','e'),
 52           TIMESTAMPADD(DAY,i,'2019-01-03 14:14:12'),
 53           lpad('abc','5000','a@123汉字&^%djgk'),
 54           fun_seq.nextval+2,
 55           -1.79E+100,98*0.99,
 56           lpad('10','8000','01010'),
 57           lpad('abc','5000','a@123&^%djgk'),
 58           rpad('abc','8000','a@123&^%djgk'),
 59           TIMESTAMPADD(SECOND,i,'2019-01-03 14:14:12'),
 60           25563.1415,
 61           lpad('abc','3000','a字符串@123&^%djgk'),
 62           lpad('10',2000,'01010'),
 63           lpad('10','200','01010'),
 64           TIMESTAMPADD(MONTH,i/100,'2019-01-03 14:14:12'),
 65           '010101111111100000000000000',
 66           rpad('abc','1000','&GDsh'),
 67           TIMESTAMPADD(SECOND,i,'2019-01-03 15:19:00')
 68           );
 69       commit;
 70     end loop;
 71 end;
 72 /

PL/SQL procedure successfully completed.

SQL> 
SQL> select distinct asciistr(COL_54),asciistr(COL_60),asciistr(COL_61),asciistr(COL_63) from asciistr001 where lengthb(COL_13)>=lengthb(COL_58) order by 1 limit 10;

ASCIISTR(COL_54)                                                 ASCIISTR(COL_60)                                                 ASCIISTR(COL_61)                                                 ASCIISTR(COL_63)                                                
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------


1 rows fetched.

SQL> 
SQL> drop sequence if exists fun_seq;

Succeed.

SQL> 
SQL> select regexp_replaceas new_str from dual;

CT-00635, [1:8]Value error: result string length is too long, beyond the max
SQL> -- regexp_like DTS2020031702725
SQL> drop table if exists zsharding_tbl1;

Succeed.

SQL> create table zsharding_tbl1(c_id int, c_char char(55), c_varchar varchar(100));

Succeed.

SQL> insert into zsharding_tbl1 values(1,'Fluffy','Fluffy');

1 rows affected.

SQL> insert into zsharding_tbl1 values(2,'Buffy','Buffy');

1 rows affected.

SQL> insert into zsharding_tbl1 values(3,'fluffy','fluffy');

1 rows affected.

SQL> insert into zsharding_tbl1 values(4,'buffy','buffy');

1 rows affected.

SQL> insert into zsharding_tbl1 values(5,'桂林山水abc高山流水','桂林山水abc高山流水');

1 rows affected.

SQL> insert into zsharding_tbl1 values(6,'aa abc zzzz','aa abc zzzz');

1 rows affected.

SQL> insert into zsharding_tbl1 values(7,'我的的的的 abcabcabcabcabcabcabcabcabcabcabcabc','我的的的的 abcabcabcabcabcabcabcabcabcabcabcabc');

1 rows affected.

SQL> insert into zsharding_tbl1 values(8,'abcbvbnb
  2 efgh
  3 ijjkkkkkkk','abcbvbnb
  4 efgh
  5 ijjkkkkkkk123');

1 rows affected.

SQL> insert into zsharding_tbl1 values(9,'abc efg','hgj khln');

1 rows affected.

SQL> insert into zsharding_tbl1 values(10,'abc\efg','hgj(khln');

1 rows affected.

SQL> insert into zsharding_tbl1 values(11,null,null);

1 rows affected.

SQL> insert into zsharding_tbl1 values(12,'\*+?|^$[](){}.','\*+?|^$[](){}.');

1 rows affected.

SQL> commit;

Succeed.

SQL> SELECT * FROM zsharding_tbl1 WHERE regexp_like('',c_varchar) ORDER BY 1;

CT-00681, Regular expression compiling error, errloc=8, errmsg=[missing closing parenthesis]
SQL> 
SQL> drop table if exists tbl_uuid;

Succeed.

SQL> create table tbl_uuid(f_id int, f_uuid varchar(50));

Succeed.

SQL> CREATE or replace procedure proc_uuid(startnum int,endall int) is
  2 i INT :=1;
  3 BEGIN
  4   FOR i IN startnum..endall LOOP
  5     insert into tbl_uuid values(i, uuid());
  6   END LOOP;
  7 END;
  8 /

Succeed.

SQL> call proc_uuid(1,100000);

PL/SQL procedure successfully completed.

SQL> commit;

Succeed.

SQL> select f_uuid, count(*) from tbl_uuid group by f_uuid having count(*)>1;

F_UUID                                             COUNT(*)            
-------------------------------------------------- --------------------

0 rows fetched.

SQL> drop table if exists tbl_uuid;

Succeed.

SQL> --20200724
SQL> drop table if exists test_concat;

Succeed.

SQL> create table test_concat(f1 bool);

Succeed.

SQL> insert into test_concat values(false);

1 rows affected.

SQL> select concat(f1) from test_concat;

CT-00614, [1:8]Parameter error: the separator argument of concat_ws or concat must be a string or number or date variant.
SQL> drop table test_concat;

Succeed.

SQL> --pending排查
SQL> drop table if exists t_pending_1;

Succeed.

SQL> drop table if exists t_pending_2;

Succeed.

SQL> create table t_pending_1(a int, b varchar(10));

Succeed.

SQL> create table t_pending_2(a int, b varchar(10));

Succeed.

SQL> insert into t_pending_1 values(1, 'u');

1 rows affected.

SQL> insert into t_pending_2 values(1, 'u');

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> SELECT * from t_pending_1 a join t_pending_2 b where DBE_RANDOM.GET_VALUE(b.a,b.a) is not null;

A            B          A            B         
------------ ---------- ------------ ----------
1            u          1            u         

1 rows fetched.

SQL> SELECT * from t_pending_1 a join t_pending_2 b where DBE_RANDOM.GET_STRING(b.b,b.a) is not null;

A            B          A            B         
------------ ---------- ------------ ----------
1            u          1            u         

1 rows fetched.

SQL> SELECT * from t_pending_1 a join t_pending_2 b where sha1(b.b) is not null;

A            B          A            B         
------------ ---------- ------------ ----------
1            u          1            u         

1 rows fetched.

SQL> SELECT * from t_pending_1 a join t_pending_2 b where get_lock(b.b, b.a) is not null;

A            B          A            B         
------------ ---------- ------------ ----------
1            u          1            u         

1 rows fetched.

SQL> SELECT * from t_pending_1 a join t_pending_2 b where try_get_lock(b.b) is not null ;

A            B          A            B         
------------ ---------- ------------ ----------
1            u          1            u         

1 rows fetched.

SQL> SELECT * from t_pending_1 a join t_pending_2 b where b.a is json;

A            B          A            B         
------------ ---------- ------------ ----------

0 rows fetched.

SQL> SELECT * from t_pending_1 a join t_pending_2 b where JSON_MERGEPATCH(b.a, '{"A":{"D":332}}')  is not null ;

A            B          A            B         
------------ ---------- ------------ ----------

0 rows fetched.

SQL> SELECT * from t_pending_1 a join t_pending_2 b where JSON_ARRAY(b.a) is not null;

A            B          A            B         
------------ ---------- ------------ ----------
1            u          1            u         

1 rows fetched.

SQL> SELECT * from t_pending_1 a join t_pending_2 b where JSON_ARRAY_LENGTH(b.a) is not null;

CT-02504, [1:73]JSON syntax error, unexpected 1 found
SQL> SELECT * from t_pending_1 a join t_pending_2 b where JSON_OBJECT(KEY 'u' is b.b ) is not null  ;

A            B          A            B         
------------ ---------- ------------ ----------
1            u          1            u         

1 rows fetched.

SQL> SELECT * from t_pending_1 a join t_pending_2 b where JSON_EXISTS('{"COUNTRY":0,"CITIES":["SUZHOU","SHANGHAI"],"CODES":{"SUZHOU":0,"SHANGHAI":0}}', b.b) is not null;

CT-02503, JSON path expression syntax error, path must start with $ character
SQL> SELECT * from t_pending_1 a join t_pending_2 b where JSON_VALUE(b.b,'$.A') is not null;

A            B          A            B         
------------ ---------- ------------ ----------

0 rows fetched.

SQL> SELECT * from t_pending_1 a join t_pending_2 b where JSON_VALUE('{"A":1234}',b.b) is not null;

CT-02503, JSON path expression syntax error, path must start with $ character
SQL> delete from t_pending_2;

1 rows affected.

SQL> insert into t_pending_2 values(1, 'a');

1 rows affected.

SQL> SELECT * from t_pending_1 a join t_pending_2 b where HEXTORAW(b.b) = 'a'  ;

A            B          A            B         
------------ ---------- ------------ ----------

0 rows fetched.

SQL> drop table t_pending_1;

Succeed.

SQL> drop table t_pending_2;

Succeed.

SQL> --20201112
SQL> drop table if exists temp_20201111_2;

Succeed.

SQL> drop table if exists temp_20201111_1;

Succeed.

SQL> create table temp_20201111_2(f1 varchar(32 byte));

Succeed.

SQL> create table temp_20201111_1(f1 varchar(32 byte));

Succeed.

SQL> insert into temp_20201111_2 values(0xffffffffffffffffffffffffffffffff);

1 rows affected.

SQL> commit;

Succeed.

SQL> select hex(f1) from temp_20201111_2;

HEX(F1)                                                         
----------------------------------------------------------------
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF                                

1 rows fetched.

SQL> insert into temp_20201111_1 select ltrim(rtrim(f1)) from temp_20201111_2;

CT-00217, Nls internal error, invalid utf-8 buffer
SQL> alter system set enable_permissive_unicode=true;

Succeed.

SQL> insert into temp_20201111_1 select ltrim(rtrim(f1)) from temp_20201111_2;

1 rows affected.

SQL> alter system set enable_permissive_unicode=false;

Succeed.

SQL> drop table if exists temp_20201111_2;

Succeed.

SQL> drop table if exists temp_20201111_1;
Succeed.




