

SQL> DROP TABLE IF EXISTS T_CONNECTBY_1;

Succeed.

SQL> DROP TABLE IF EXISTS T_CONNECTBY_2;

Succeed.

SQL> DROP TABLE IF EXISTS T_CONNECTBY_3;

Succeed.

SQL> CREATE TABLE T_CONNECTBY_1 (F_INT1 INT, F_INT2 INT, F_CHAR CHAR(16), F_DATE DATE);

Succeed.

SQL> CREATE TABLE T_CONNECTBY_2 (F_INT1 INT, F_INT2 INT, F_CHAR CHAR(16), F_DATE DATE);

Succeed.

SQL> CREATE TABLE T_CONNECTBY_3 (F_INT1 INT, F_INT2 INT, F_CHAR CHAR(16), F_DATE DATE);

Succeed.

SQL> 
SQL> --ERROR
SQL> select f_int1, f_int2, f_char, level  from T_CONNECTBY_1;

CT-00601, [1:32]Sql syntax error: CONNECT BY clause required in this query block
SQL> select f_int1, f_int2, f_char, connect_by_isleaf from T_CONNECTBY_1;

CT-00601, [1:32]Sql syntax error: CONNECT BY clause required in this query block
SQL> select f_int1, f_int2, f_char, connect_by_iscycle from T_CONNECTBY_1;

CT-00601, [1:32]Sql syntax error: CONNECT BY clause required in this query block
SQL> select f_int1, f_int2, f_char, connect_by_iscycle from T_CONNECTBY_1 connect by prior f_int2 = f_int1;

CT-00601, [1:32]Sql syntax error: NOCYCLE keyword is required with CONNECT_BY_ISCYCLE pseudocolumn
SQL> select f_int1 from T_CONNECTBY_1 where prior f_int1 = 1;

CT-00601, [1:40]Sql syntax error: 'prior' operator not allowed here
SQL> select f_int1 from T_CONNECTBY_1 group by f_int1 having prior f_int1 = 1;

CT-00601, [1:57]Sql syntax error: 'prior' operator not allowed here
SQL> select f_int1, f_int2, f_char, level, connect_by_isleaf, connect_by_iscycle from T_CONNECTBY_1 start with f_char = 'A';

CT-00601, [1:119]Sql syntax error: expect CONNECT BY.
SQL> select f_int1, f_int2, f_char, level, connect_by_isleaf, connect_by_iscycle from T_CONNECTBY_1 start with prior f_char = 'A' connect by nocycle prior f_int2 = f_int1 and f_date = prior f_date;

CT-00601, [1:107]Sql syntax error: 'prior' operator not allowed here
SQL> 
SQL> --EMPTY RECORD
SQL> select f_int1, f_int2, f_char, level, connect_by_isleaf, connect_by_iscycle from T_CONNECTBY_1 start with f_char = 'A' connect by nocycle prior f_int2 = f_int1 and f_date = prior f_date;

F_INT1       F_INT2       F_CHAR           LEVEL        CONNECT_BY_ISLEAF CONNECT_BY_ISCYCLE
------------ ------------ ---------------- ------------ ----------------- ------------------

0 rows fetched.

SQL> select T_CONNECTBY_1.F_INT1,T_CONNECTBY_1.F_INT2 from T_CONNECTBY_1,T_CONNECTBY_2,T_CONNECTBY_3 where T_CONNECTBY_1.F_INT1 in (T_CONNECTBY_2.F_INT1,T_CONNECTBY_2.F_INT1) connect by T_CONNECTBY_1.F_INT1 = T_CONNECTBY_1.F_INT2;

F_INT1       F_INT2      
------------ ------------

0 rows fetched.

SQL> 
SQL> INSERT INTO T_CONNECTBY_1 VALUES(1,2,'A','2018-01-11 14:08:00');

1 rows affected.

SQL> INSERT INTO T_CONNECTBY_1 VALUES(2,3,'B','2018-01-11 14:08:00');

1 rows affected.

SQL> INSERT INTO T_CONNECTBY_1 VALUES(3,2,'C','2018-01-11 14:08:00');

1 rows affected.

SQL> INSERT INTO T_CONNECTBY_1 VALUES(3,1,'D','2018-01-11 14:08:00');

1 rows affected.

SQL> INSERT INTO T_CONNECTBY_1 VALUES(1,6,'E','2018-01-11 14:08:00');

1 rows affected.

SQL> COMMIT;

Succeed.

SQL> 
SQL> 
SQL> --ERROR
SQL> select f_int1, f_int2, f_char, level, connect_by_isleaf, connect_by_iscycle from T_CONNECTBY_1 start with f_char = 'A' connect by prior f_int2 = f_int1;

CT-00601, [1:58]Sql syntax error: NOCYCLE keyword is required with CONNECT_BY_ISCYCLE pseudocolumn
SQL> 
SQL> 
SQL> select f_int1, f_int2, f_char, level, connect_by_isleaf from T_CONNECTBY_1 start with f_char = 'A' connect by nocycle prior f_int2 = f_int1 and f_date = prior f_date;

F_INT1       F_INT2       F_CHAR           LEVEL        CONNECT_BY_ISLEAF
------------ ------------ ---------------- ------------ -----------------
1            2            A                1            0                
2            3            B                2            0                
3            1            D                3            0                
1            6            E                4            1                

4 rows fetched.

SQL> select f_int1, f_int2, f_char, level, connect_by_isleaf,rownum from T_CONNECTBY_1 where rownum < 3 start with f_char = 'A' connect by nocycle prior f_int2 = f_int1 and f_date = prior f_date;

F_INT1       F_INT2       F_CHAR           LEVEL        CONNECT_BY_ISLEAF ROWNUM      
------------ ------------ ---------------- ------------ ----------------- ------------
1            2            A                1            0                 1           
2            3            B                2            0                 2           

2 rows fetched.

SQL> select f_int1, f_int2, f_char, level, connect_by_isleaf, connect_by_iscycle from T_CONNECTBY_1 start with f_char = 'A' connect by nocycle prior f_int2 = f_int1 and f_date = prior f_date;

F_INT1       F_INT2       F_CHAR           LEVEL        CONNECT_BY_ISLEAF CONNECT_BY_ISCYCLE
------------ ------------ ---------------- ------------ ----------------- ------------------
1            2            A                1            0                 0                 
2            3            B                2            0                 1                 
3            1            D                3            0                 1                 
1            6            E                4            1                 0                 

4 rows fetched.

SQL> select level, connect_by_isleaf, connect_by_iscycle,f_int1, f_int2, f_char  from T_CONNECTBY_1 start with f_char = 'A' connect by nocycle prior f_int2 = f_int1 and f_date = prior f_date;

LEVEL        CONNECT_BY_ISLEAF CONNECT_BY_ISCYCLE F_INT1       F_INT2       F_CHAR          
------------ ----------------- ------------------ ------------ ------------ ----------------
1            0                 0                  1            2            A               
2            0                 1                  2            3            B               
3            0                 1                  3            1            D               
4            1                 0                  1            6            E               

4 rows fetched.

SQL> 
SQL> select f_int1, f_int2, f_char, level, connect_by_isleaf, connect_by_iscycle from T_CONNECTBY_1 where f_int1 = 1 start with f_char = 'A' connect by nocycle prior f_int2 = f_int1;

F_INT1       F_INT2       F_CHAR           LEVEL        CONNECT_BY_ISLEAF CONNECT_BY_ISCYCLE
------------ ------------ ---------------- ------------ ----------------- ------------------
1            2            A                1            0                 0                 
1            6            E                4            1                 0                 

2 rows fetched.

SQL> select f_int1,f_int2,f_char,level,connect_by_isleaf,connect_by_iscycle from T_CONNECTBY_1 connect by nocycle prior f_int2 = f_int1 order by f_int1,f_int2,f_char,level,connect_by_isleaf,connect_by_iscycle;

F_INT1       F_INT2       F_CHAR           LEVEL        CONNECT_BY_ISLEAF CONNECT_BY_ISCYCLE
------------ ------------ ---------------- ------------ ----------------- ------------------
1            2            A                1            0                 0                 
1            2            A                2            0                 0                 
1            2            A                3            1                 1                 
1            6            E                1            1                 0                 
1            6            E                2            1                 0                 
1            6            E                3            1                 0                 
1            6            E                4            1                 0                 
1            6            E                4            1                 0                 
2            3            B                1            0                 0                 
2            3            B                2            0                 1                 
2            3            B                2            0                 1                 
2            3            B                3            1                 1                 
3            1            D                1            0                 0                 
3            1            D                2            0                 0                 
3            1            D                3            0                 1                 
3            1            D                3            0                 1                 
3            2            C                1            0                 0                 
3            2            C                2            1                 1                 

18 rows fetched.

SQL> select f_int1,f_int2,f_char,level,connect_by_isleaf,connect_by_iscycle from T_CONNECTBY_1 connect by nocycle prior f_int2 = f_int1 and level < 3 order by f_int1,f_int2,f_char,level,connect_by_isleaf,connect_by_iscycle;

F_INT1       F_INT2       F_CHAR           LEVEL        CONNECT_BY_ISLEAF CONNECT_BY_ISCYCLE
------------ ------------ ---------------- ------------ ----------------- ------------------
1            2            A                1            0                 0                 
1            2            A                2            1                 0                 
1            6            E                1            1                 0                 
1            6            E                2            1                 0                 
2            3            B                1            0                 0                 
2            3            B                2            1                 0                 
2            3            B                2            1                 0                 
3            1            D                1            0                 0                 
3            1            D                2            1                 0                 
3            2            C                1            0                 0                 
3            2            C                2            1                 0                 

11 rows fetched.

SQL> select f_int1,f_int2,f_char,level,connect_by_isleaf,connect_by_iscycle from T_CONNECTBY_1 where f_int2 > 2 connect by nocycle prior f_int2 = f_int1 order by f_int1,f_int2,f_char,level,connect_by_isleaf,connect_by_iscycle;

F_INT1       F_INT2       F_CHAR           LEVEL        CONNECT_BY_ISLEAF CONNECT_BY_ISCYCLE
------------ ------------ ---------------- ------------ ----------------- ------------------
1            6            E                1            1                 0                 
1            6            E                2            1                 0                 
1            6            E                3            1                 0                 
1            6            E                4            1                 0                 
1            6            E                4            1                 0                 
2            3            B                1            0                 0                 
2            3            B                2            0                 1                 
2            3            B                2            0                 1                 
2            3            B                3            1                 1                 

9 rows fetched.

SQL> select distinct f_int1,f_int2,f_char,level,connect_by_isleaf,connect_by_iscycle from T_CONNECTBY_1 connect by nocycle prior f_int2 = f_int1;

F_INT1       F_INT2       F_CHAR           LEVEL        CONNECT_BY_ISLEAF CONNECT_BY_ISCYCLE
------------ ------------ ---------------- ------------ ----------------- ------------------
1            2            A                1            0                 0                 
1            2            A                2            0                 0                 
1            2            A                3            1                 1                 
1            6            E                1            1                 0                 
1            6            E                2            1                 0                 
1            6            E                3            1                 0                 
1            6            E                4            1                 0                 
2            3            B                1            0                 0                 
2            3            B                2            0                 1                 
2            3            B                3            1                 1                 
3            1            D                1            0                 0                 
3            1            D                2            0                 0                 
3            1            D                3            0                 1                 
3            2            C                1            0                 0                 
3            2            C                2            1                 1                 

15 rows fetched.

SQL> select f_int1,f_int2,f_char,level,connect_by_isleaf,connect_by_iscycle from T_CONNECTBY_1 connect by nocycle prior f_int2 = f_int1 group by f_int1,f_int2,f_char,level,connect_by_isleaf,connect_by_iscycle order by 1,2,3,4,5,6;

F_INT1       F_INT2       F_CHAR           LEVEL        CONNECT_BY_ISLEAF CONNECT_BY_ISCYCLE
------------ ------------ ---------------- ------------ ----------------- ------------------
1            2            A                1            0                 0                 
1            2            A                2            0                 0                 
1            2            A                3            1                 1                 
1            6            E                1            1                 0                 
1            6            E                2            1                 0                 
1            6            E                3            1                 0                 
1            6            E                4            1                 0                 
2            3            B                1            0                 0                 
2            3            B                2            0                 1                 
2            3            B                3            1                 1                 
3            1            D                1            0                 0                 
3            1            D                2            0                 0                 
3            1            D                3            0                 1                 
3            2            C                1            0                 0                 
3            2            C                2            1                 1                 

15 rows fetched.

SQL> select f_int1,f_int2,f_char,level,connect_by_isleaf,connect_by_iscycle from T_CONNECTBY_1 connect by nocycle prior f_int2 = f_int1 group by f_int1,f_int2,f_char,level,connect_by_isleaf,connect_by_iscycle order by f_int1 desc, f_int2, f_char, level, connect_by_isleaf, connect_by_iscycle;

F_INT1       F_INT2       F_CHAR           LEVEL        CONNECT_BY_ISLEAF CONNECT_BY_ISCYCLE
------------ ------------ ---------------- ------------ ----------------- ------------------
3            1            D                1            0                 0                 
3            1            D                2            0                 0                 
3            1            D                3            0                 1                 
3            2            C                1            0                 0                 
3            2            C                2            1                 1                 
2            3            B                1            0                 0                 
2            3            B                2            0                 1                 
2            3            B                3            1                 1                 
1            2            A                1            0                 0                 
1            2            A                2            0                 0                 
1            2            A                3            1                 1                 
1            6            E                1            1                 0                 
1            6            E                2            1                 0                 
1            6            E                3            1                 0                 
1            6            E                4            1                 0                 

15 rows fetched.

SQL> select f_int1,f_int2,f_char,level,connect_by_isleaf,connect_by_iscycle from T_CONNECTBY_1 connect by nocycle prior f_int2 = f_int1 group by f_int1,f_int2,f_char,level,connect_by_isleaf,connect_by_iscycle order by connect_by_iscycle,f_int1 desc, f_int2, f_char, level, connect_by_isleaf;

F_INT1       F_INT2       F_CHAR           LEVEL        CONNECT_BY_ISLEAF CONNECT_BY_ISCYCLE
------------ ------------ ---------------- ------------ ----------------- ------------------
3            1            D                1            0                 0                 
3            1            D                2            0                 0                 
3            2            C                1            0                 0                 
2            3            B                1            0                 0                 
1            2            A                1            0                 0                 
1            2            A                2            0                 0                 
1            6            E                1            1                 0                 
1            6            E                2            1                 0                 
1            6            E                3            1                 0                 
1            6            E                4            1                 0                 
3            1            D                3            0                 1                 
3            2            C                2            1                 1                 
2            3            B                2            0                 1                 
2            3            B                3            1                 1                 
1            2            A                3            1                 1                 

15 rows fetched.

SQL> select f_int1,f_int2,f_char,level,connect_by_isleaf,connect_by_iscycle from T_CONNECTBY_1 connect by nocycle prior f_int2 = f_int1 start with f_char = 'A' or f_char = 'B' or f_char= 'C' group by f_int1,f_int2,f_char,level,connect_by_isleaf,connect_by_iscycle order by connect_by_iscycle,f_int1 desc, f_int2, f_char, level, connect_by_isleaf;

F_INT1       F_INT2       F_CHAR           LEVEL        CONNECT_BY_ISLEAF CONNECT_BY_ISCYCLE
------------ ------------ ---------------- ------------ ----------------- ------------------
3            1            D                2            0                 0                 
3            2            C                1            0                 0                 
2            3            B                1            0                 0                 
1            2            A                1            0                 0                 
1            6            E                3            1                 0                 
1            6            E                4            1                 0                 
3            1            D                3            0                 1                 
3            2            C                2            1                 1                 
2            3            B                2            0                 1                 
1            2            A                3            1                 1                 

10 rows fetched.

SQL> select f_int1,f_int2,f_char,level,connect_by_isleaf,connect_by_iscycle from T_CONNECTBY_1 connect by nocycle prior f_int2 = f_int1 start with f_char = 'A' or f_char = 'B' or f_char= 'C' group by f_int1,f_int2,f_char,level,connect_by_isleaf,connect_by_iscycle order by connect_by_iscycle,f_int1 desc, f_int2, f_char, level, connect_by_isleaf limit 2,2;

F_INT1       F_INT2       F_CHAR           LEVEL        CONNECT_BY_ISLEAF CONNECT_BY_ISCYCLE
------------ ------------ ---------------- ------------ ----------------- ------------------
2            3            B                1            0                 0                 
1            2            A                1            0                 0                 

2 rows fetched.

SQL> select f_int1,f_int2,f_char,level,connect_by_isleaf,connect_by_iscycle from T_CONNECTBY_1 where f_int1 > 1 connect by nocycle prior f_int2 = f_int1 start with f_char = 'A' or f_char = 'B' or f_char= 'C' group by f_int1,f_int2,f_char,level,connect_by_isleaf,connect_by_iscycle order by connect_by_iscycle,f_int1 desc, f_int2, f_char, level, connect_by_isleaf;

F_INT1       F_INT2       F_CHAR           LEVEL        CONNECT_BY_ISLEAF CONNECT_BY_ISCYCLE
------------ ------------ ---------------- ------------ ----------------- ------------------
3            1            D                2            0                 0                 
3            2            C                1            0                 0                 
2            3            B                1            0                 0                 
3            1            D                3            0                 1                 
3            2            C                2            1                 1                 
2            3            B                2            0                 1                 

6 rows fetched.

SQL> 
SQL> (select f_int1,f_int2,f_char,level,connect_by_isleaf,connect_by_iscycle from T_CONNECTBY_1 where f_int1 = 1 start with  f_char = 'A' connect by nocycle prior f_int2 = f_int1) union all (select f_int1,f_int2,f_char,level,connect_by_isleaf,connect_by_iscycle from T_CONNECTBY_1 start with  f_char = 'B' connect by nocycle prior f_int2 = f_int1) order by f_int2,f_char,level;

F_INT1       F_INT2       F_CHAR           LEVEL        CONNECT_BY_ISLEAF CONNECT_BY_ISCYCLE
------------ ------------ ---------------- ------------ ----------------- ------------------
3            1            D                2            0                 0                 
1            2            A                1            0                 0                 
1            2            A                3            1                 1                 
3            2            C                2            1                 1                 
2            3            B                1            0                 0                 
1            6            E                3            1                 0                 
1            6            E                4            1                 0                 

7 rows fetched.

SQL> (select f_int1,f_int2,f_char,level,connect_by_isleaf,connect_by_iscycle from T_CONNECTBY_1 where f_int1 = 1 start with  f_char = 'A' connect by nocycle prior f_int2 = f_int1) union (select f_int1,f_int2,f_char,level,connect_by_isleaf,connect_by_iscycle from T_CONNECTBY_1 start with  f_char = 'A' connect by nocycle prior f_int2 = f_int1) order by f_int2,f_char,level;

F_INT1       F_INT2       F_CHAR           LEVEL        CONNECT_BY_ISLEAF CONNECT_BY_ISCYCLE
------------ ------------ ---------------- ------------ ----------------- ------------------
3            1            D                3            0                 1                 
1            2            A                1            0                 0                 
2            3            B                2            0                 1                 
1            6            E                4            1                 0                 

4 rows fetched.

SQL> (select f_int1,f_int2,f_char,level,connect_by_isleaf,connect_by_iscycle from T_CONNECTBY_1 where f_int1 = 1 start with  f_char = 'A' connect by nocycle prior f_int2 = f_int1) union all (select f_int1,f_int2,f_char,level,connect_by_isleaf,connect_by_iscycle from T_CONNECTBY_1 start with  f_char = 'B' connect by nocycle prior f_int2 = f_int1) order by f_int2,f_char,level limit 1,1;

F_INT1       F_INT2       F_CHAR           LEVEL        CONNECT_BY_ISLEAF CONNECT_BY_ISCYCLE
------------ ------------ ---------------- ------------ ----------------- ------------------
1            2            A                1            0                 0                 

1 rows fetched.

SQL> (select f_int1,f_int2,f_char,level,connect_by_isleaf,connect_by_iscycle from T_CONNECTBY_1 where f_int1 = 1 start with  f_char = 'A' connect by nocycle prior f_int2 = f_int1) union (select f_int1,f_int2,f_char,level,connect_by_isleaf,connect_by_iscycle from T_CONNECTBY_1 start with  f_char = 'A' connect by nocycle prior f_int2 = f_int1) order by f_int2,f_char,level limit 1,1;

F_INT1       F_INT2       F_CHAR           LEVEL        CONNECT_BY_ISLEAF CONNECT_BY_ISCYCLE
------------ ------------ ---------------- ------------ ----------------- ------------------
1            2            A                1            0                 0                 

1 rows fetched.

SQL> 
SQL> select A.f_int1, A.f_int2, A.f_char,B.f_int1, B.f_int2, B.f_char,level,connect_by_isleaf,connect_by_iscycle from T_CONNECTBY_1 A inner join T_CONNECTBY_1 B on A.F_INT1 = B.F_INT1 start with A.f_char = 'A' connect by nocycle prior A.f_int2 = A.f_int1 order by level, connect_by_isleaf, connect_by_iscycle, B.f_char;

F_INT1       F_INT2       F_CHAR           F_INT1       F_INT2       F_CHAR           LEVEL        CONNECT_BY_ISLEAF CONNECT_BY_ISCYCLE
------------ ------------ ---------------- ------------ ------------ ---------------- ------------ ----------------- ------------------
1            2            A                1            2            A                1            0                 0                 
1            2            A                1            6            E                1            0                 0                 
2            3            B                2            3            B                2            0                 1                 
2            3            B                2            3            B                2            0                 1                 
3            1            D                3            2            C                3            0                 1                 
3            1            D                3            2            C                3            0                 1                 
3            1            D                3            1            D                3            0                 1                 
3            1            D                3            1            D                3            0                 1                 
1            6            E                1            2            A                4            1                 0                 
1            6            E                1            2            A                4            1                 0                 
1            6            E                1            2            A                4            1                 0                 
1            6            E                1            2            A                4            1                 0                 
1            6            E                1            6            E                4            1                 0                 
1            6            E                1            6            E                4            1                 0                 
1            6            E                1            6            E                4            1                 0                 
1            6            E                1            6            E                4            1                 0                 

16 rows fetched.

SQL> select A.f_int1, A.f_int2, A.f_char from T_CONNECTBY_1 A, T_CONNECTBY_1 B where A.F_INT1 = B.F_INT1 AND A.f_int1 = 1 start with A.f_char = 'A' connect by nocycle prior A.f_int2 = A.f_int1;

F_INT1       F_INT2       F_CHAR          
------------ ------------ ----------------
1            2            A               
1            6            E               
1            6            E               
1            6            E               
1            6            E               
1            2            A               
1            6            E               
1            6            E               
1            6            E               
1            6            E               

10 rows fetched.

SQL> select A.f_int1, A.f_int2, A.f_char from T_CONNECTBY_1 A inner join T_CONNECTBY_1 B on A.F_INT1 = B.F_INT1 where A.f_int1 = 1 start with A.f_char = 'A' connect by nocycle prior A.f_int2 = A.f_int1;

F_INT1       F_INT2       F_CHAR          
------------ ------------ ----------------
1            2            A               
1            6            E               
1            6            E               
1            6            E               
1            6            E               
1            2            A               
1            6            E               
1            6            E               
1            6            E               
1            6            E               

10 rows fetched.

SQL> select A.f_int1, A.f_int2, A.f_char from T_CONNECTBY_1 A inner join T_CONNECTBY_1 B on A.F_INT1 = B.F_INT1 where A.f_int1 = 1 and rownum < 2 start with A.f_char = 'A' connect by nocycle prior A.f_int2 = A.f_int1;

F_INT1       F_INT2       F_CHAR          
------------ ------------ ----------------
1            2            A               

1 rows fetched.

SQL> select A.f_int1, A.f_int2, A.f_char from T_CONNECTBY_1 A inner join T_CONNECTBY_1 B on A.F_INT1 = B.F_INT1 where A.f_int1 = 1 start with A.f_char = 'A' connect by nocycle prior A.f_int2 = B.f_int1;

F_INT1       F_INT2       F_CHAR          
------------ ------------ ----------------
1            2            A               
1            6            E               
1            6            E               
1            6            E               
1            6            E               
1            2            A               
1            6            E               
1            6            E               
1            6            E               
1            6            E               

10 rows fetched.

SQL> 
SQL> (select A.f_int1 AS F1, A.f_int2 AS F2, A.f_char AS F3 from T_CONNECTBY_1 A inner join T_CONNECTBY_1 B on A.F_INT1 = B.F_INT1 where A.f_int1 = 1 start with A.f_char = 'A' connect by nocycle prior A.f_int2 = A.f_int1) union (select A.f_int1, A.f_int2, A.f_char from T_CONNECTBY_1 A inner join T_CONNECTBY_1 B on A.F_INT1 = B.F_INT1 where A.f_int1 = 1 start with A.f_char = 'A' connect by nocycle prior A.f_int2 = A.f_int1) order by F1,F2,F3;

F1           F2           F3              
------------ ------------ ----------------
1            2            A               
1            6            E               

2 rows fetched.

SQL> (select A.f_int1 AS F1, A.f_int2 AS F2, A.f_char AS F3 from T_CONNECTBY_1 A inner join T_CONNECTBY_1 B on A.F_INT1 = B.F_INT1 where A.f_int1 = 1 start with A.f_char = 'A' connect by nocycle prior A.f_int2 = A.f_int1) union all (select A.f_int1, A.f_int2, A.f_char from T_CONNECTBY_1 A inner join T_CONNECTBY_1 B on A.F_INT1 = B.F_INT1 where A.f_int1 = 1 start with A.f_char = 'A' connect by nocycle prior A.f_int2 = A.f_int1) order by F1,F2,F3;

F1           F2           F3              
------------ ------------ ----------------
1            2            A               
1            2            A               
1            2            A               
1            2            A               
1            6            E               
1            6            E               
1            6            E               
1            6            E               
1            6            E               
1            6            E               
1            6            E               
1            6            E               
1            6            E               
1            6            E               
1            6            E               
1            6            E               
1            6            E               
1            6            E               
1            6            E               
1            6            E               

20 rows fetched.

SQL> 
SQL> --TEST EXCLUDE PRIOR
SQL> select f_char,level from T_CONNECTBY_1 connect by level < 1 order by f_char,level;

F_CHAR           LEVEL       
---------------- ------------
A                1           
B                1           
C                1           
D                1           
E                1           

5 rows fetched.

SQL> select f_char,level from T_CONNECTBY_1 connect by level < 2 order by f_char,level;

F_CHAR           LEVEL       
---------------- ------------
A                1           
B                1           
C                1           
D                1           
E                1           

5 rows fetched.

SQL> select f_char,level from T_CONNECTBY_1 connect by level < 3 order by f_char,level;

F_CHAR           LEVEL       
---------------- ------------
A                1           
A                2           
A                2           
A                2           
A                2           
A                2           
B                1           
B                2           
B                2           
B                2           
B                2           
B                2           
C                1           
C                2           
C                2           
C                2           
C                2           
C                2           
D                1           
D                2           
D                2           
D                2           
D                2           
D                2           
E                1           
E                2           
E                2           
E                2           
E                2           
E                2           

30 rows fetched.

SQL> select f_char,level,connect_by_isleaf,connect_by_iscycle from T_CONNECTBY_1 connect by nocycle level < 3 order by f_char,level;

F_CHAR           LEVEL        CONNECT_BY_ISLEAF CONNECT_BY_ISCYCLE
---------------- ------------ ----------------- ------------------
A                1            0                 0                 
A                2            1                 0                 
A                2            1                 0                 
A                2            1                 0                 
A                2            1                 0                 
A                2            1                 0                 
B                1            0                 0                 
B                2            1                 0                 
B                2            1                 0                 
B                2            1                 0                 
B                2            1                 0                 
B                2            1                 0                 
C                1            0                 0                 
C                2            1                 0                 
C                2            1                 0                 
C                2            1                 0                 
C                2            1                 0                 
C                2            1                 0                 
D                1            0                 0                 
D                2            1                 0                 
D                2            1                 0                 
D                2            1                 0                 
D                2            1                 0                 
D                2            1                 0                 
E                1            0                 0                 
E                2            1                 0                 
E                2            1                 0                 
E                2            1                 0                 
E                2            1                 0                 
E                2            1                 0                 

30 rows fetched.

SQL> 
SQL> select level from dual where level > 250 connect by level <= 257;

CT-00664, CONNECT BY level can not exceed 256
SQL> select level from dual where level > 250 connect by level <= 256;

LEVEL       
------------
251         
252         
253         
254         
255         
256         

6 rows fetched.

SQL> 
SQL> --TEST SEQ
SQL> create sequence seq_connect_by minvalue 1 maxvalue 256 start with 1 increment by 1;

Succeed.

SQL> select seq_connect_by.nextval  from dual connect by level < 10;

NEXTVAL             
--------------------
1                   
2                   
3                   
4                   
5                   
6                   
7                   
8                   
9                   

9 rows fetched.

SQL> drop sequence seq_connect_by;

Succeed.

SQL> 
SQL> update T_CONNECTBY_1 set f_int1 = connect_by_iscycle;

CT-00601, [1:35]Sql syntax error: CONNECT BY clause required in this query block
SQL> update T_CONNECTBY_1 set f_int1 = connect_by_isleaf;

CT-00601, [1:35]Sql syntax error: CONNECT BY clause required in this query block
SQL> 
SQL> --the test case is right in oracle 12c, but it is wrong in oracle 11g
SQL> DELETE FROM T_CONNECTBY_1;

5 rows affected.

SQL> insert into T_CONNECTBY_1 values (1, 0, 'A', '2018-01-11 14:08:00');

1 rows affected.

SQL> insert into T_CONNECTBY_1 values (2, 1, 'AA', '2018-01-11 14:08:00');

1 rows affected.

SQL> SELECT * FROM T_CONNECTBY_1 t, (SELECT F_INT2 FROM T_CONNECTBY_1) t1 START WITH t.f_int2 = 0 CONNECT BY PRIOR t.f_int1 = t.f_int2 order by t.f_int1,t.f_int2,t.f_char,t1.f_int2;

F_INT1       F_INT2       F_CHAR           F_DATE                 F_INT2      
------------ ------------ ---------------- ---------------------- ------------
1            0            A                2018-01-11 14:08:00    0           
1            0            A                2018-01-11 14:08:00    1           
2            1            AA               2018-01-11 14:08:00    0           
2            1            AA               2018-01-11 14:08:00    0           
2            1            AA               2018-01-11 14:08:00    1           
2            1            AA               2018-01-11 14:08:00    1           

6 rows fetched.

SQL> commit;

Succeed.

SQL>
SQL> -------------------------------------------------------------------------
SQL> --------------------------  CONNECT_BY_ROOT  ----------------------------
SQL> -------------------------------------------------------------------------
SQL> -- CONNECT_BY_ROOT USAGE��o
SQL> -- 1. Unary operator, only used in connect by statment
SQL> -- 2. Cannot used in TART WITH, CONNECT BY condition
SQL> -- 3. Nest usage should not allowed later
SQL> -- 4. Reference: https://docs.oracle.com/cd/B19306_01/server.102/b14200/operators004.htm#i1035022   
SQL> -------------------------------------------------------------------------
SQL> create table t (
  2     id   int,
  3     des  varchar(10),
  4     pid  int
  5 );   

Succeed.

SQL> create index idx_t_pid on t (pid);

Succeed.

SQL> truncate table t;

Succeed.

SQL> insert into t values (1, 'A', 0);

1 rows affected.

SQL> insert into t values (2, 'AA', 1);

1 rows affected.

SQL> insert into t values (3, 'AAA', 2);

1 rows affected.

SQL> insert into t values (4, 'AAAA', 3);

1 rows affected.

SQL> commit;   

Succeed.

SQL> 
SQL> ----------------------------------------------------
SQL> -- case 1
SQL> --   1. unary operator, only used in connect by statment
SQL> --   2. Cannot used in TART WITH, CONNECT BY condition
SQL> ----------------------------------------------------
SQL> SELECT CONNECT_BY_ROOT 1 FROM t;

CT-00601, [1:24]Sql syntax error: CONNECT BY clause required in this query block
SQL> 
SQL> SELECT abs(CONNECT_BY_ROOT 1) FROM t;

CT-00601, [1:28]Sql syntax error: CONNECT BY clause required in this query block
SQL> 
SQL> SELECT 1 FROM t where abs(CONNECT_BY_ROOT 1) > 1;

CT-00601, [1:43]Sql syntax error: CONNECT BY clause required in this query block
SQL> 
SQL> SELECT 1 FROM t group by abs(CONNECT_BY_ROOT 1);

CT-00601, [1:46]Sql syntax error: CONNECT BY clause required in this query block
SQL> 
SQL> SELECT 
  2     *
  3 FROM t
  4 START WITH CONNECT_BY_ROOT pid = 0
  5 CONNECT BY pid = PRIOR id; 

CT-00601, [4:28]Sql syntax error: CONNECT BY ROOT operator is not supported in the START WITH or in the CONNECT BY condition
SQL> 
SQL> SELECT 
  2     *
  3 FROM t
  4 START WITH pid = 0
  5 CONNECT BY CONNECT_BY_ROOT pid = id; 

CT-00601, [5:28]Sql syntax error: CONNECT BY ROOT operator is not supported in the START WITH or in the CONNECT BY condition
SQL> 
SQL> SELECT
  2     CONNECT_BY_ROOT c
  3 FROM
  4 (
  5     SELECT 
  6         CONNECT_BY_ROOT pid c
  7     FROM t
  8     START WITH pid = 0
  9     CONNECT BY PRIOR id = pid
 10 ) t1;

CT-00601, [2:17]Sql syntax error: CONNECT BY clause required in this query block
SQL> 
SQL> SELECT 
  2     (RPAD(' ', 2*(LEVEL-1), '  ' ) || des) des_tree 
  3     , LEVEL
  4     , id
  5     , pid
  6     , nvl(CONNECT_BY_ROOT NULL, 'NULL')    TEST1
  7     , CONNECT_BY_ROOT 1                    TEST2
  8     , CONNECT_BY_ROOT 1 + id               TEST3
  9     , CONNECT_BY_ROOT id                   TEST4
 10     , CONNECT_BY_ROOT id + 1               TEST5
 11     , CONNECT_BY_ROOT abs(id + pid + 1)    TEST6
 12     , CONNECT_BY_ROOT abs(id) + pid + 1    TEST7
 13     , abs(CONNECT_BY_ROOT id + pid + 1)    TEST8
 14     , abs(CONNECT_BY_ROOT (id + pid + 1))  TEST9
 15     , CONNECT_BY_ROOT (pid + id - pid) + CONNECT_BY_ROOT(id) * 10 + CONNECT_BY_ROOT id * 100  TEST10
 16     , CONNECT_BY_ROOT (pid + id - pid + id * 10 + id * 100)                                   TEST11
 17     , pid + CONNECT_BY_ROOT id - CONNECT_BY_ROOT pid + id * 10 + CONNECT_BY_ROOT id * 100     TEST12
 18 FROM t
 19 START WITH pid = 0
 20 CONNECT BY PRIOR id = pid; 

DES_TREE                                                         LEVEL        ID           PID          TEST1 TEST2        TEST3                TEST4        TEST5                TEST6                                    TEST7                                    TEST8                                    TEST9                                    TEST10               TEST11               TEST12              
---------------------------------------------------------------- ------------ ------------ ------------ ----- ------------ -------------------- ------------ -------------------- ---------------------------------------- ---------------------------------------- ---------------------------------------- ---------------------------------------- -------------------- -------------------- --------------------
A                                                                1            1            0            NULL  1            2                    1            2                    2                                        2                                        2                                        2                                        111                  111                  111                 
  AA                                                             2            2            1            NULL  1            3                    1            2                    2                                        3                                        3                                        2                                        111                  111                  122                 
    AAA                                                          3            3            2            NULL  1            4                    1            2                    2                                        4                                        4                                        2                                        111                  111                  133                 
      AAAA                                                       4            4            3            NULL  1            5                    1            2                    2                                        5                                        5                                        2                                        111                  111                  144                 

4 rows fetched.

SQL> 
SQL> SELECT 
  2     CONNECT_BY_ROOT id                     TEST4
  3 FROM t
  4 START WITH pid = 0
  5 CONNECT BY PRIOR id = pid; 

TEST4       
------------
1           
1           
1           
1           

4 rows fetched.

SQL> 
SQL> SELECT 
  2     (RPAD(' ', 2*(LEVEL-1), '  ' ) || des) des_tree 
  3     , LEVEL
  4     , id
  5     , pid
  6     , nvl(CONNECT_BY_ROOT NULL, 'NULL')    TEST1
  7     , CONNECT_BY_ROOT 1                    TEST2
  8     , CONNECT_BY_ROOT 1 + id               TEST3
  9     , CONNECT_BY_ROOT id                   TEST4
 10     , CONNECT_BY_ROOT id + 1               TEST5
 11     , CONNECT_BY_ROOT abs(id + pid + 1)    TEST6
 12     , CONNECT_BY_ROOT abs(id) + pid + 1    TEST7
 13     , abs(CONNECT_BY_ROOT id + pid + 1)    TEST8
 14     , abs(CONNECT_BY_ROOT (id + pid + 1))  TEST9
 15     , CONNECT_BY_ROOT (pid + id - pid) + CONNECT_BY_ROOT(id) * 10 + CONNECT_BY_ROOT id * 100  TEST10
 16     , CONNECT_BY_ROOT (pid + id - pid + id * 10 + id * 100)                                   TEST11
 17     , pid + CONNECT_BY_ROOT id - CONNECT_BY_ROOT pid + id * 10 + CONNECT_BY_ROOT id * 100     TEST12
 18 FROM t
 19 CONNECT BY 1 = -1;

DES_TREE                                                         LEVEL        ID           PID          TEST1 TEST2        TEST3                TEST4        TEST5                TEST6                                    TEST7                                    TEST8                                    TEST9                                    TEST10               TEST11               TEST12              
---------------------------------------------------------------- ------------ ------------ ------------ ----- ------------ -------------------- ------------ -------------------- ---------------------------------------- ---------------------------------------- ---------------------------------------- ---------------------------------------- -------------------- -------------------- --------------------
A                                                                1            1            0            NULL  1            2                    1            2                    2                                        2                                        2                                        2                                        111                  111                  111                 
AA                                                               1            2            1            NULL  1            3                    2            3                    4                                        4                                        4                                        4                                        222                  222                  222                 
AAA                                                              1            3            2            NULL  1            4                    3            4                    6                                        6                                        6                                        6                                        333                  333                  333                 
AAAA                                                             1            4            3            NULL  1            5                    4            5                    8                                        8                                        8                                        8                                        444                  444                  444                 

4 rows fetched.

SQL> 
SQL> -- CONNECT_BY_ROOT used in WHERE condition
SQL> insert into t values (5, 'B',    0);

1 rows affected.

SQL> insert into t values (6, 'BB',   5);

1 rows affected.

SQL> insert into t values (7, 'BBB',  6);

1 rows affected.

SQL> insert into t values (8, 'BBBB', 7);

1 rows affected.

SQL> commit; 

Succeed.

SQL> 
SQL> SELECT
  2     id,
  3     des,
  4     pid, 
  5     CONNECT_BY_ROOT (pid + id - pid) + CONNECT_BY_ROOT(id) * 10 + CONNECT_BY_ROOT id * 100 TEST
  6 FROM t
  7 WHERE CONNECT_BY_ROOT id > 1  -- Choose B
  8 START WITH pid = 0
  9 CONNECT BY PRIOR id = pid;

ID           DES        PID          TEST                
------------ ---------- ------------ --------------------
5            B          0            555                 
6            BB         5            555                 
7            BBB        6            555                 
8            BBBB       7            555                 

4 rows fetched.

SQL> 
SQL> SELECT
  2     id,
  3     des,
  4     pid, 
  5     CONNECT_BY_ROOT (pid + id - pid) + CONNECT_BY_ROOT(id) * 10 + CONNECT_BY_ROOT id * 100 TEST
  6 FROM t
  7 WHERE CONNECT_BY_ROOT id > 1  -- Choose B
  8 START WITH pid = 0
  9 CONNECT BY PRIOR id = pid
 10 ORDER BY mod(CONNECT_BY_ROOT id, pid), pid desc;

ID           DES        PID          TEST                
------------ ---------- ------------ --------------------
6            BB         5            555                 
8            BBBB       7            555                 
7            BBB        6            555                 
5            B          0            555                 

4 rows fetched.

SQL> 
SQL> SELECT
  2     id,
  3     des,
  4     pid, 
  5     CONNECT_BY_ROOT (pid + id - pid) + CONNECT_BY_ROOT(id) * 10 + CONNECT_BY_ROOT id * 100 TEST
  6 FROM t
  7 WHERE CONNECT_BY_ROOT id > 1  -- Choose B
  8 START WITH pid = 0
  9 CONNECT BY PRIOR id = pid
 10 ORDER BY mod(CONNECT_BY_ROOT id, CONNECT_BY_ROOT pid), pid desc;

ID           DES        PID          TEST                
------------ ---------- ------------ --------------------
8            BBBB       7            555                 
7            BBB        6            555                 
6            BB         5            555                 
5            B          0            555                 

4 rows fetched.

SQL> 
SQL> SELECT
  2     id,
  3     des,
  4     pid, 
  5     CONNECT_BY_ROOT (pid + id - pid) + CONNECT_BY_ROOT(id) * 10 + CONNECT_BY_ROOT id * 100 TEST
  6 FROM t
  7 WHERE CONNECT_BY_ROOT id > 1  -- Choose B
  8 START WITH pid = 0
  9 CONNECT BY PRIOR id = pid
 10 ORDER BY CONNECT_BY_ROOT (id + pid), pid desc;

ID           DES        PID          TEST                
------------ ---------- ------------ --------------------
8            BBBB       7            555                 
7            BBB        6            555                 
6            BB         5            555                 
5            B          0            555                 

4 rows fetched.

SQL> 
SQL> delete from t where id > 4;

4 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> ----------------------------------------------------
SQL> -- case 2: Nest CONNECT_BY_ROOT
SQL> --   1. Oracle nest CONNECT_BY_ROOT works ambiguous,
SQL> --   2. Zenith support nest CONNECT_BY_ROOT at present,
SQL> --      and will not support later.
SQL> ----------------------------------------------------
SQL> SELECT
  2     CONNECT_BY_ROOT CONNECT_BY_ROOT id
  3 FROM t
  4 CONNECT BY 1 = -1;  

CT-00601, [2:17]Sql syntax error: the word "CONNECT_BY_ROOT" is not correct
SQL> 
SQL> -- Oracle crash... 
SQL> --   ERROR at line 1:
SQL> --   ORA-03113: end-of-file on communication channel
SQL> --   Process ID: 22597
SQL> --   Session ID: 233 Serial number: 9431
SQL> -- Zenith works.
SQL> SELECT
  2     -- CONNECT_BY_ROOT (CONNECT_BY_ROOT (id) )
  3     CONNECT_BY_ROOT (CONNECT_BY_ROOT id) 
  4 FROM t
  5 CONNECT BY 1 = -1;  

ID          
------------
1           
2           
3           
4           

4 rows fetched.

SQL> 
SQL> -- Oracle:ORA-00932: inconsistent datatypes: expected NUMBER got - 
SQL> -- Zenith works.
SQL> SELECT
  2     CONNECT_BY_ROOT (1 + CONNECT_BY_ROOT id) TEST
  3 FROM t
  4 CONNECT BY 1 = -1; 

TEST                
--------------------
2                   
3                   
4                   
5                   

4 rows fetched.

SQL> 
SQL> -- Oracle: ORA-00932: inconsistent datatypes: expected NUMBER got -
SQL> -- Zenith works.
SQL> SELECT
  2     id, 
  3     CONNECT_BY_ROOT abs(CONNECT_BY_ROOT id) TEST
  4 FROM t
  5 CONNECT BY 1 = -1; 

ID           TEST                                    
------------ ----------------------------------------
1            1                                       
2            2                                       
3            3                                       
4            4                                       

4 rows fetched.

SQL> 
SQL> -- Oracle: crash...
SQL> -- Zenith works.
SQL> SELECT
  2     CONNECT_BY_ROOT id,
  3     CONNECT_BY_ROOT (CONNECT_BY_ROOT (CONNECT_BY_ROOT(CONNECT_BY_ROOT(id + 1) + 1) + 1) + 1) + 1 TEST
  4 FROM t
  5 CONNECT BY 1 = -1; 

ID           TEST                
------------ --------------------
1            6                   
2            7                   
3            8                   
4            9                   

4 rows fetched.

SQL> 
SQL> -- Oracle: ORA-00932: inconsistent datatypes: expected NUMBER got -
SQL> -- Zenith works.
SQL> SELECT
  2     CONNECT_BY_ROOT (1 + CONNECT_BY_ROOT id) TEST
  3 FROM t
  4 START WITH pid = 0
  5 CONNECT BY PRIOR id = pid;

TEST                
--------------------
2                   
2                   
2                   
2                   

4 rows fetched.

SQL> 
SQL> -- Oracle: ORA-00932: inconsistent datatypes: expected NUMBER got -
SQL> -- Zenith works.
SQL> SELECT
  2     CONNECT_BY_ROOT (1 + abs(CONNECT_BY_ROOT id)) TEST
  3 FROM t
  4 START WITH pid = 0
  5 CONNECT BY PRIOR id = pid;

TEST                                    
----------------------------------------
2                                       
2                                       
2                                       
2                                       

4 rows fetched.

SQL> 
SQL> -- Oracle: ORA-00932: inconsistent datatypes: expected NUMBER got -
SQL> -- Zenith works.
SQL> SELECT
  2     CONNECT_BY_ROOT abs(CONNECT_BY_ROOT id) TEST
  3 FROM t
  4 START WITH pid = 0
  5 CONNECT BY PRIOR id = pid;

TEST                                    
----------------------------------------
1                                       
1                                       
1                                       
1                                       

4 rows fetched.

SQL> 
SQL> 
SQL> ----------------------------------------------------
SQL> -- case 3: Used in DDL or DML
SQL> ----------------------------------------------------
SQL> create view v as SELECT CONNECT_BY_ROOT abs(id) TEST FROM t START WITH pid = 0 CONNECT BY PRIOR id = pid ORDER BY CONNECT_BY_ROOT id;

Succeed.

SQL> drop view v;

Succeed.

SQL> 
SQL> create view v as SELECT CONNECT_BY_ROOT abs(id) TEST FROM t;

CT-00601, [1:39]Sql syntax error: CONNECT BY clause required in this query block
SQL> 
SQL> create view v as select 1 a from t where CONNECT_BY_ROOT 1 < 2;

CT-00601, [1:56]Sql syntax error: CONNECT BY clause required in this query block
SQL> 
SQL> create table t1 as select CONNECT_BY_ROOT 1 a from t;

CT-00601, [1:43]Sql syntax error: CONNECT BY clause required in this query block
SQL> 
SQL> update t set id  = 
  2 (
  3     SELECT
  4             CONNECT_BY_ROOT abs(id) TEST
  5     FROM t
  6     where rownum = 1
  7     START WITH pid = 0
  8     CONNECT BY PRIOR id = pid
  9 );

4 rows affected.

SQL> select * from t;

ID           DES        PID         
------------ ---------- ------------
1            A          0           
1            AA         1           
1            AAA        2           
1            AAAA       3           

4 rows fetched.

SQL> rollback;

Succeed.

SQL> 
SQL> update t set id = CONNECT_BY_ROOT 1;

CT-00601, [1:19]Sql syntax error: CONNECT BY clause required in this query block
SQL> 
SQL> create table t1 (c1 int, c2 int default CONNECT_BY_ROOT 1);

CT-00601, [1:41]Sql syntax error: CONNECT BY clause required in this query block
SQL> 
SQL> declare
  2     i int;
  3 begin
  4     i := CONNECT_BY_ROOT 1;
  5 end;
  6 /

CT-00944, PL/SQL(SYS.ANONYMOUS BLOCK) terminated with compiling errors
[4:10] PLC-00601 Sql syntax error: CONNECT BY clause required in this query block

SQL> 
SQL> declare
  2     i int;
  3 begin
  4     i := CONNECT_BY_ROOT 1 + 1;
  5 end;
  6 /

CT-00944, PL/SQL(SYS.ANONYMOUS BLOCK) terminated with compiling errors
[4:10] PLC-00601 Sql syntax error: CONNECT BY clause required in this query block

SQL> 
SQL> set serveroutput on;

ON
SQL> declare
  2     i int;
  3 begin
  4     SELECT CONNECT_BY_ROOT pid INTO i FROM t WHERE ROWNUM = 1 START WITH pid = 0 CONNECT BY PRIOR id = pid;
  5     dbe_output.print_line('CONNECT_BY_ROOT pid: ' || i);
  6 end;
  7 /

CONNECT_BY_ROOT pid: 0

PL/SQL procedure successfully completed.

SQL> 
SQL> ----------------------------------------------------
SQL> -- case 4: more cases about CONNECT_BY_ROOT unary operator.
SQL> ----------------------------------------------------
SQL> SELECT
  2     CONNECT_BY_ROOT id TEST
  3 FROM t
  4 START WITH pid = 0
  5 CONNECT BY PRIOR id = pid;

TEST        
------------
1           
1           
1           
1           

4 rows fetched.

SQL> 
SQL> SELECT
  2     CONNECT_BY_ROOT -id TEST
  3 FROM t
  4 START WITH pid = 0
  5 CONNECT BY PRIOR id = pid;

CT-00601, [2:17]Sql syntax error: the word "-" is not correct
SQL> 
SQL> SELECT
  2     - CONNECT_BY_ROOT id TEST
  3 FROM t
  4 START WITH pid = 0
  5 CONNECT BY PRIOR id = pid;

CT-00601, [2:3]Sql syntax error: the word "CONNECT_BY_ROOT" is not correct
SQL> 
SQL> SELECT
  2     - (CONNECT_BY_ROOT id)    TEST
  3 FROM t
  4 START WITH pid = 0
  5 CONNECT BY PRIOR id = pid;

TEST                
--------------------
-1                  
-1                  
-1                  
-1                  

4 rows fetched.

SQL> 
SQL> SELECT
  2     CONNECT_BY_ROOT (- id) TEST
  3 FROM t
  4 START WITH pid = 0
  5 CONNECT BY PRIOR id =   pid;

TEST                
--------------------
-1                  
-1                  
-1                  
-1                  

4 rows fetched.

SQL> 
SQL> SELECT
  2     (-(CONNECT_BY_ROOT (- id))) TEST
  3 FROM t
  4 START WITH pid = 0
  5 CONNECT BY PRIOR id = pid;

TEST                
--------------------
1                   
1                   
1                   
1                   

4 rows fetched.

SQL> 
SQL> SELECT
  2     id, 
  3     (-(CONNECT_BY_ROOT (id) + id)) TEST
  4 FROM t
  5 START WITH pid = 0
  6 CONNECT BY PRIOR id = pid;

ID           TEST                
------------ --------------------
1            -2                  
2            -3                  
3            -4                  
4            -5                  

4 rows fetched.

SQL> 
SQL> SELECT
  2     id, 
  3     CONNECT_BY_ROOT(-(-(CONNECT_BY_ROOT (id))))  + id   TEST1,
  4     CONNECT_BY_ROOT(-(-(CONNECT_BY_ROOT (id) + id )))   TEST2,
  5     CONNECT_BY_ROOT (-(-(2+3)))                         TEST3,
  6     -(-(2+3))                                           TEST4
  7 FROM t
  8 START WITH pid = 0
  9 CONNECT BY PRIOR id = pid;

ID           TEST1                TEST2                TEST3                TEST4               
------------ -------------------- -------------------- -------------------- --------------------
1            2                    2                    5                    5                   
2            3                    2                    5                    5                   
3            4                    2                    5                    5                   
4            5                    2                    5                    5                   

4 rows fetched.

SQL> 
SQL> ----------------------------------------------------
SQL> -- case 5: other cases
SQL> ----------------------------------------------------
SQL> SELECT
  2     CONNECT_BY_ROOT(CONNECT_BY_ROOT id) TEST
  3 FROM t
  4 START WITH pid = 0
  5 CONNECT BY PRIOR id = pid;

TEST        
------------
1           
1           
1           
1           

4 rows fetched.

SQL> 
SQL> SELECT
  2     CONNECT_BY_ROOT(CONNECT_BY_ROOT id + CONNECT_BY_ROOT pid) TEST
  3 FROM t
  4 START WITH pid = 0
  5 CONNECT BY PRIOR id = pid;

TEST                
--------------------
1                   
1                   
1                   
1                   

4 rows fetched.

SQL> 
SQL> SELECT
  2     *
  3 FROM t, (SELECT CONNECT_BY_ROOT pid FROM t) t1
  4 START WITH t.pid = 0
  5 CONNECT BY PRIOR t.id = t.pid;

CT-00601, [3:33]Sql syntax error: CONNECT BY clause required in this query block
SQL> 
SQL> select 
  2     CONNECT_BY_ROOT pid  
  3 from 
  4 (
  5     SELECT
  6         *
  7     FROM t
  8     START WITH t.pid = 0
  9     CONNECT BY PRIOR t.id = t.pid
 10 );

CT-00601, [2:17]Sql syntax error: CONNECT BY clause required in this query block
SQL> 
SQL> SELECT
  2     c
  3 FROM
  4 (
  5     SELECT 
  6         CONNECT_BY_ROOT pid c
  7     FROM t
  8     START WITH pid = 0
  9     CONNECT BY PRIOR id = pid
 10 ) t1;

C           
------------
0           
0           
0           
0           

4 rows fetched.

SQL> 
SQL> SELECT
  2     CONNECT_BY_ROOT (1 + CONNECT_BY_ROOT id)  TEST
  3 FROM t
  4 CONNECT BY 1 = -1;

TEST                
--------------------
2                   
3                   
4                   
5                   

4 rows fetched.

SQL> 
SQL> drop table t;

Succeed.

SQL> 
SQL> --DTS2018091103096
SQL> drop table if exists T_CONNECTBY_A;

Succeed.

SQL> create table T_CONNECTBY_A(a int, b char(2));

Succeed.

SQL> 
SQL> insert into T_CONNECTBY_A
  2 with
  3 s1 as (select rownum c1 from dual connect by rownum <= 10),
  4 s2 as (select rownum c2 from dual connect by rownum <= 10)
  5 select a.c1, b.c2 from s1 a, s2 b;

100 rows affected.

SQL> select * from T_CONNECTBY_A order by a,b;

A            B 
------------ --
1            1 
1            10
1            2 
1            3 
1            4 
1            5 
1            6 
1            7 
1            8 
1            9 
2            1 
2            10
2            2 
2            3 
2            4 
2            5 
2            6 
2            7 
2            8 
2            9 
3            1 
3            10
3            2 
3            3 
3            4 
3            5 
3            6 
3            7 
3            8 
3            9 
4            1 
4            10
4            2 
4            3 
4            4 
4            5 
4            6 
4            7 
4            8 
4            9 
5            1 
5            10
5            2 
5            3 
5            4 
5            5 
5            6 
5            7 
5            8 
5            9 
6            1 
6            10
6            2 
6            3 
6            4 
6            5 
6            6 
6            7 
6            8 
6            9 
7            1 
7            10
7            2 
7            3 
7            4 
7            5 
7            6 
7            7 
7            8 
7            9 
8            1 
8            10
8            2 
8            3 
8            4 
8            5 
8            6 
8            7 
8            8 
8            9 
9            1 
9            10
9            2 
9            3 
9            4 
9            5 
9            6 
9            7 
9            8 
9            9 
10           1 
10           10
10           2 
10           3 
10           4 
10           5 
10           6 
10           7 
10           8 
10           9 

100 rows fetched.

SQL> 
SQL> select rownum c1 from dual connect by level <= 10;

C1          
------------
1           
2           
3           
4           
5           
6           
7           
8           
9           
10          

10 rows fetched.

SQL> select rownum c1 from dual connect by rownum <= 10;

C1          
------------
1           
2           
3           
4           
5           
6           
7           
8           
9           
10          

10 rows fetched.

SQL> 
SQL> drop table if exists T_CONNECTBY_B;

Succeed.

SQL> create table T_CONNECTBY_B(id char) ;

Succeed.

SQL> insert into T_CONNECTBY_B values ('a'),('b'),('c') ;

3 rows affected.

SQL> 
SQL> select id , 
  2  connect_by_root (id) ROOT, 
  3  level l, 
  4  rownum r
  5 from T_CONNECTBY_B
  6 connect by level <=2;

ID ROOT L            R           
-- ---- ------------ ------------
a  a    1            1           
a  a    2            2           
b  a    2            3           
c  a    2            4           
b  b    1            5           
a  b    2            6           
b  b    2            7           
c  b    2            8           
c  c    1            9           
a  c    2            10          
b  c    2            11          
c  c    2            12          

12 rows fetched.

SQL> 
SQL> select id , 
  2  connect_by_root (id) ROOT, 
  3  level l, 
  4  rownum r
  5 from T_CONNECTBY_B
  6 connect by rownum <=2;

ID ROOT L            R           
-- ---- ------------ ------------
a  a    1            1           
a  a    2            2           
b  b    1            3           
c  c    1            4           

4 rows fetched.

SQL> 
SQL> drop table T_CONNECTBY_A;

Succeed.

SQL> drop table T_CONNECTBY_B;

Succeed.

SQL> -------------------------------------------------------------------------
SQL> --DTS202101130DZ8T2P1N00
SQL> alter system set _MAX_CONNECT_BY_LEVEL = 7001;

Succeed.

SQL> 
SQL> drop table if exists proc_seq_conn_by_06_t; 

Succeed.

SQL> create table proc_seq_conn_by_06_t (
  2   id int not null,
  3   account int default null,
  4   money int default null,
  5   num int default null,
  6   primary key (id)
  7 );

Succeed.

SQL> 
SQL> drop sequence if exists proc_seq_conn_by_06_seq;

Succeed.

SQL> create sequence proc_seq_conn_by_06_seq start with 100 increment by 2;

Succeed.

SQL> insert into proc_seq_conn_by_06_t
  2     select proc_seq_conn_by_06_seq.nextval "a", proc_seq_conn_by_06_seq.nextval + 1 "a+1", proc_seq_conn_by_06_seq.nextval + 2 "a+2", rownum "b" from dual
  3     connect by rownum < 7001;  -- report error

CT-00027, Stack depth limit exceeded
SQL> 
SQL> alter system set _MAX_CONNECT_BY_LEVEL = 256;

Succeed.

SQL> drop table proc_seq_conn_by_06_t purge;

Succeed.

SQL> drop sequence proc_seq_conn_by_06_seq;

Succeed.

SQL> 
SQL> --sys_connect_by_path
SQL> drop table if exists employee_test;

Succeed.

SQL> create table employee_test(
  2        emp_id number(18),
  3        lead_id number(18),
  4        emp_name varchar2(200)
  5 );

Succeed.

SQL> insert into employee_test values('1',0,'king');

1 rows affected.

SQL> insert into employee_test values('2',1,'arise');

1 rows affected.

SQL> insert into employee_test values('3',1,'jack');

1 rows affected.

SQL> insert into employee_test values('4',2,'wudde');

1 rows affected.

SQL> insert into employee_test values('5',2,'joker');

1 rows affected.

SQL> insert into employee_test values('6',3,'annie');

1 rows affected.

SQL> insert into employee_test values('7',3,'tony');

1 rows affected.

SQL> insert into employee_test values('8',4,'juddy');

1 rows affected.

SQL> insert into employee_test values('9',6,'tom');

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> select sys_connect_by_path(emp_name,'>') tree from employee_test start with emp_id=1 connect by prior emp_id = lead_id; 

TREE                                                            
----------------------------------------------------------------
>king                                                           
>king>arise                                                     
>king>arise>wudde                                               
>king>arise>wudde>juddy                                         
>king>arise>joker                                               
>king>jack                                                      
>king>jack>annie                                                
>king>jack>annie>tom                                            
>king>jack>tony                                                 

9 rows fetched.

SQL> select sys_connect_by_path(emp_name,'>') tree from employee_test start with emp_id=1 connect by emp_id = prior lead_id;

TREE                                                            
----------------------------------------------------------------
>king                                                           

1 rows fetched.

SQL> select sys_connect_by_path(1,'>') tree from employee_test start with emp_id=1 connect by prior emp_id = lead_id; 

TREE                                                            
----------------------------------------------------------------
>1                                                              
>1>1                                                            
>1>1>1                                                          
>1>1>1>1                                                        
>1>1>1                                                          
>1>1                                                            
>1>1>1                                                          
>1>1>1>1                                                        
>1>1>1                                                          

9 rows fetched.

SQL> select emp_name, sys_connect_by_path(level,'/') tree from employee_test start with emp_id=1 connect by prior emp_id = lead_id;

EMP_NAME                                                         TREE                                                            
---------------------------------------------------------------- ----------------------------------------------------------------
king                                                             /1                                                              
arise                                                            /1/2                                                            
wudde                                                            /1/2/3                                                          
juddy                                                            /1/2/3/4                                                        
joker                                                            /1/2/3                                                          
jack                                                             /1/2                                                            
annie                                                            /1/2/3                                                          
tom                                                              /1/2/3/4                                                        
tony                                                             /1/2/3                                                          

9 rows fetched.

SQL> select lead_id, sys_connect_by_path(concat(emp_name, emp_id),'/') from employee_test start with emp_id=1 connect by prior emp_id =  lead_id;

LEAD_ID                                  SYS_CONNECT_BY_PATH(CONCAT(EMP_NAME, EMP_ID),'/')               
---------------------------------------- ----------------------------------------------------------------
0                                        /king1                                                          
1                                        /king1/arise2                                                   
2                                        /king1/arise2/wudde4                                            
4                                        /king1/arise2/wudde4/juddy8                                     
2                                        /king1/arise2/joker5                                            
1                                        /king1/jack3                                                    
3                                        /king1/jack3/annie6                                             
6                                        /king1/jack3/annie6/tom9                                        
3                                        /king1/jack3/tony7                                              

9 rows fetched.

SQL> SELECT LPAD(' ', 2*level-1)||SYS_CONNECT_BY_PATH(emp_name, '/') "Path" FROM employee_test  start with emp_id=1 connect by prior emp_id =  lead_id;

Path                                                            
----------------------------------------------------------------
 /king                                                          
   /king/arise                                                  
     /king/arise/wudde                                          
       /king/arise/wudde/juddy                                  
     /king/arise/joker                                          
   /king/jack                                                   
     /king/jack/annie                                           
       /king/jack/annie/tom                                     
     /king/jack/tony                                            

9 rows fetched.

SQL> SELECT substr(SYS_CONNECT_BY_PATH(emp_name, '/'), 4, 10) "Path" FROM employee_test  start with emp_id=1 connect by prior emp_id =  lead_id;

Path                                                            
----------------------------------------------------------------
ng                                                              
ng/arise                                                        
ng/arise/w                                                      
ng/arise/w                                                      
ng/arise/j                                                      
ng/jack                                                         
ng/jack/an                                                      
ng/jack/an                                                      
ng/jack/to                                                      

9 rows fetched.

SQL> select sys_connect_by_path(emp_name, ' ') tree from employee_test start with emp_id=1 connect by prior emp_id = lead_id;

TREE                                                            
----------------------------------------------------------------
 king                                                           
 king arise                                                     
 king arise wudde                                               
 king arise wudde juddy                                         
 king arise joker                                               
 king jack                                                      
 king jack annie                                                
 king jack annie tom                                            
 king jack tony                                                 

9 rows fetched.

SQL> 
SQL> select sys_connect_by_path(emp_name,'>') tree from employee_test; 

CT-00601, [1:8]Sql syntax error: CONNECT BY clause required in this query block
SQL> select lead_id, sys_connect_by_path(emp_name) from employee_test connect by prior emp_id =  lead_id;

CT-00615, [1:17]Invalid argument number for SYS_CONNECT_BY_PATH, min=2, max=2
SQL> select lead_id, sys_connect_by_path(emp_name, emp_id) from employee_test connect by prior emp_id =  lead_id;

CT-00251, [1:47]Invalid separator specified in "SYS_CONNECT_BY_PATH"
SQL> select sys_connect_by_path(emp_name, null) tree from employee_test start with emp_id=1 connect by prior emp_id = lead_id;

CT-00251, [1:38]Invalid separator specified in "SYS_CONNECT_BY_PATH"
SQL> select sys_connect_by_path(emp_name, '') tree from employee_test start with emp_id=1 connect by prior emp_id = lead_id;

CT-00251, [1:38]Invalid separator specified in "SYS_CONNECT_BY_PATH"
SQL> select lead_id, sys_connect_by_path(emp_name, 'a') from employee_test connect by prior emp_id = lead_id;

CT-00251, Invalid separator specified in "SYS_CONNECT_BY_PATH"
SQL> --DTS2019111413664
SQL> select emp_id from employee_test where sys_connect_by_path(emp_name,'>') IS NOT NULL start with emp_id=1 connect by prior emp_id = lead_id;

CT-00243, [1:40]SYS_CONNECT_BY_PATH function is not allowed here.
SQL> select 1 from employee_test start with emp_id=1 connect by prior emp_id = lead_id group by sys_connect_by_path(emp_name,'>');

CT-00243, [1:92]SYS_CONNECT_BY_PATH function is not allowed here.
SQL> select 1 from employee_test start with emp_id=1 connect by prior emp_id = lead_id group by lead_id having sys_connect_by_path(lead_id,'>')< 'aa';

CT-00243, [1:107]SYS_CONNECT_BY_PATH function is not allowed here.
SQL> select emp_id, sys_connect_by_path(emp_name,'>'), sys_connect_by_path(emp_id,'/') from employee_test start with emp_id=1 connect by prior emp_id = lead_id order by sys_connect_by_path(emp_name,'>');

EMP_ID                                   SYS_CONNECT_BY_PATH(EMP_NAME,'>')                                SYS_CONNECT_BY_PATH(EMP_ID,'/')                                 
---------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
1                                        >king                                                            /1                                                              
2                                        >king>arise                                                      /1/2                                                            
5                                        >king>arise>joker                                                /1/2/5                                                          
4                                        >king>arise>wudde                                                /1/2/4                                                          
8                                        >king>arise>wudde>juddy                                          /1/2/4/8                                                        
3                                        >king>jack                                                       /1/3                                                            
6                                        >king>jack>annie                                                 /1/3/6                                                          
9                                        >king>jack>annie>tom                                             /1/3/6/9                                                        
7                                        >king>jack>tony                                                  /1/3/7                                                          

9 rows fetched.

SQL> drop table employee_test;

Succeed.

SQL> 
SQL>
SQL> --PMS201910177718
SQL> DROP VIEW IF EXISTS PBI_EDITION_dync_view_CB;

Succeed.

SQL> DROP TABLE IF EXISTS PBI_EDITION_PMS201910177718;

Succeed.

SQL> DROP TABLE IF EXISTS PBI_OFFERING;

Succeed.

SQL> DROP TABLE IF EXISTS PBI_DYNAMIC_ATTRIBUTE_VALUE;

Succeed.

SQL> 
SQL> CREATE TABLE "PBI_EDITION_PMS201910177718"
  2 (
  3   "EDITION_ID" NUMBER(20) NOT NULL,
  4   "OFFERING_ID" NUMBER(20),
  5   "PARENT_ID" NUMBER(20),
  6   "NO" VARCHAR(45 BYTE) NOT NULL,
  7   "EDITION_CODE" VARCHAR(75 BYTE),
  8   "CATEGORY" VARCHAR(30 BYTE) NOT NULL,
  9   "STATUS" NUMBER(1) NOT NULL,
 10   "OFFERING_NAME" VARCHAR(768 BYTE),
 11   "ALIAS" VARCHAR(768 BYTE),
 12   "FOR_FINACE" NUMBER(1) NOT NULL,
 13   "LIFECYCLE_ID" VARCHAR(45 BYTE),
 14   "OLD_NO" VARCHAR(150 BYTE),
 15   "VERSION" VARCHAR(15 BYTE) NOT NULL,
 16   "CREATED_BY" VARCHAR(768 BYTE),
 17   "CREATION_DATE" DATE,
 18   "LAST_UPDATED_BY" VARCHAR(768 BYTE),
 19   "LAST_UPDATE_DATE" DATE,
 20   "DIFFICULTY_COEFFICIENT" VARCHAR(45 BYTE),
 21   "SPLIMIT" NUMBER(1),
 22   "SPNUM" NUMBER(5),
 23   "IFHISTORYCOA" NUMBER(1),
 24   "RESERVE11" VARCHAR(375 BYTE),
 25   "RESERVE12" VARCHAR(375 BYTE),
 26   "RESERVE13" VARCHAR(375 BYTE),
 27   "RESERVE14" VARCHAR(375 BYTE),
 28   "RESERVE15" VARCHAR(375 BYTE)
 29 );

Succeed.

SQL> 
SQL> ALTER TABLE PBI_EDITION_PMS201910177718 ADD CONSTRAINT PK_PBI_EDITION PRIMARY KEY(EDITION_ID);

Succeed.

SQL> CREATE INDEX IN_PBI_EDITIONPARENT ON PBI_EDITION_PMS201910177718(PARENT_ID);

Succeed.

SQL> CREATE INDEX IN_PBI_EDITIONOFFER ON PBI_EDITION_PMS201910177718(OFFERING_ID);

Succeed.

SQL> 
SQL> CREATE TABLE PBI_DYNAMIC_ATTRIBUTE_VALUE(
  2   OBJECTID NUMBER NOT NULL,
  3   PBITYPE VARCHAR(1500) NOT NULL,
  4   MAPPINGID NUMBER,
  5   ATTRIBUTENAME VARCHAR(1500),
  6   VALUE VARCHAR(6000),
  7   CREATION_DATE DATE,
  8   LAST_UPDATE_DATE DATE
  9 );

Succeed.

SQL> ALTER TABLE PBI_DYNAMIC_ATTRIBUTE_VALUE ADD CONSTRAINT PK_PBI_DYN_ATTR_VALUE PRIMARY KEY(OBJECTID, PBITYPE, ATTRIBUTENAME);

Succeed.

SQL> 
SQL> CREATE TABLE PBI_OFFERING(
  2   OFFERING_ID NUMBER(20) NOT NULL,
  3   ORG_ID NUMBER(20) NOT NULL,
  4   TYPE_ID VARCHAR(45),
  5   NO VARCHAR(45),
  6   NAME VARCHAR(384),
  7   STATUS VARCHAR(1),
  8   CATEGORY VARCHAR(30)
  9 );

Succeed.

SQL> ALTER TABLE PBI_OFFERING ADD CONSTRAINT PK_PBI_OFFERING PRIMARY KEY(OFFERING_ID);

Succeed.

SQL> 
SQL> CREATE VIEW PBI_EDITION_dync_view_CB AS
  2 select o."EDITION_ID",
  3        o."OFFERING_ID",
  4        o."PARENT_ID",
  5        o."NO",
  6        o."EDITION_CODE",
  7        o."CATEGORY",
  8        o."STATUS",
  9        o."OFFERING_NAME",
 10        o."ALIAS",
 11        o."FOR_FINACE",
 12        o."LIFECYCLE_ID",
 13        o."OLD_NO",
 14        o."VERSION",
 15        o."CREATED_BY",
 16        o."CREATION_DATE",
 17        o."LAST_UPDATED_BY",
 18        o."LAST_UPDATE_DATE",
 19        o."DIFFICULTY_COEFFICIENT",
 20        o."SPLIMIT",
 21        o."SPNUM",
 22        o."IFHISTORYCOA",
 23        o."RESERVE11",
 24        o."RESERVE12",
 25        o."RESERVE13",
 26        o."RESERVE14",
 27        o."RESERVE15",
 28        (SELECT VALUE
 29           FROM pbi_dynamic_attribute_value dync
 30          WHERE o.edition_id = dync.objectId
 31            AND dync.attributename = 'VERSION_CHARACTERISTIC') "VERSION_CHARACTERISTIC"
 32   from PBI_EDITION_PMS201910177718 o;

Succeed.

SQL>
SQL> DROP VIEW IF EXISTS PBI_EDITION_dync_view_CB;

Succeed.

SQL> DROP TABLE IF EXISTS PBI_EDITION_PMS201910177718;

Succeed.

SQL> DROP TABLE IF EXISTS PBI_OFFERING;

Succeed.

SQL> DROP TABLE IF EXISTS PBI_DYNAMIC_ATTRIBUTE_VALUE;

Succeed.

SQL> --DTS2020010910887
SQL> drop table if exists t_con_by_optimize_101;

Succeed.

SQL> create table t_con_by_optimize_101(
  2 id int,c_int int,c_real real,c_float float,c_decimal decimal,c_number number,
  3 c_char char(10),c_vchar varchar(10) not null,c_vchar2 varchar2(100),c_clob clob,
  4 c_long varchar(200),c_blob blob,c_raw raw(100),c_date date,c_timestamp timestamp);

Succeed.

SQL> insert into t_con_by_optimize_101 values(1,1000,100.123,100.456,100.789,100.123,'abc123','abcdefg',lpad('123abc',50,'abc'),lpad('123abc',50,'abc'),lpad('11100000',50,'1100'),lpad('11100001',50,'1100'),lpad('11100011',50,'1100'),to_timestamp(to_char('1800-01-01 10:51:47'),'yyyy-mm-dd hh24:mi:ss'),to_timestamp(to_char('1800-03-05 10:51:47'),'yyyy-mm-dd hh24:mi:ss'));

1 rows affected.

SQL> insert into t_con_by_optimize_101 values(-1,null,null,null,null,null,null,'M',null,null,null,null,null,null,null);	

1 rows affected.

SQL> commit;

Succeed.

SQL> drop table if exists t_con_by_optimize_001;

Succeed.

SQL> create table t_con_by_optimize_001(
  2 id int,c_int int,c_real real,c_float float,c_decimal decimal,c_number number,
  3 c_char char(10),c_vchar varchar(10) not null,c_vchar2 varchar2(100),c_clob clob,
  4 c_long varchar(200),c_blob blob,c_raw raw(100),c_date date,c_timestamp timestamp);

Succeed.

SQL> insert into t_con_by_optimize_001 values(1,1000,100.123,100.456,100.789,100.123,'abc123','abcdefg',lpad('123abc',50,'abc'),lpad('123abc',50,'abc'),lpad('11100000',50,'1100'),lpad('11100001',50,'1100'),lpad('11100011',50,'1100'),to_timestamp(to_char('1800-01-01 10:51:47'),'yyyy-mm-dd hh24:mi:ss'),to_timestamp(to_char('1800-03-05 10:51:47'),'yyyy-mm-dd hh24:mi:ss'));

1 rows affected.

SQL> insert into t_con_by_optimize_001 values(-1,null,null,null,null,null,null,'M',null,null,null,null,null,null,null);	

1 rows affected.

SQL> commit;

Succeed.

SQL> select SYS_CONNECT_BY_PATH(t1.id||prior t2.id ||CONNECT_BY_ISCYCLE||max(t2.id+1),'/') c from t_con_by_optimize_101 t1 join t_con_by_optimize_101 t2 on t1.id=t2.id connect by nocycle prior t2.id=t1.id group by rollup(t1.id,prior t2.id,CONNECT_BY_ISCYCLE);

CT-01317, [1:69]Unexpected aggregation 'MAX'
SQL> select SYS_CONNECT_BY_PATH('a'||max(t2.id+1) over(),'/') c from t_con_by_optimize_001 t1 join t_con_by_optimize_001 t2 on t1.id=t2.id connect by nocycle prior t2.id=t1.id;

CT-01316, [1:46]Unexpected windows sort analytic function
SQL> drop table t_con_by_optimize_001;

Succeed.

SQL> drop table t_con_by_optimize_101;

Succeed.

SQL> --connect by pushdown
SQL> drop table if exists t_connectby_1;

Succeed.

SQL> drop table if exists t_connectby_2;

Succeed.

SQL> create table t_connectby_1(f1 int, f2 int, f3 int);

Succeed.

SQL> create table t_connectby_2(f1 int, f2 int, f3 int);

Succeed.

SQL> insert into t_connectby_1 values(1,5,3);

1 rows affected.

SQL> insert into t_connectby_1 values(2,4,6);

1 rows affected.

SQL> insert into t_connectby_1 values(3,3,3);

1 rows affected.

SQL> insert into t_connectby_1 values(5,2,8);

1 rows affected.

SQL> insert into t_connectby_1 values(5,1,3);

1 rows affected.

SQL> insert into t_connectby_2 values(1,2,3);

1 rows affected.

SQL> insert into t_connectby_2 values(3,4,5);

1 rows affected.

SQL> insert into t_connectby_2 values(4,5,6);

1 rows affected.

SQL> insert into t_connectby_2 values(2,4,1);

1 rows affected.

SQL> insert into t_connectby_2 values(5,6,3);

1 rows affected.

SQL> commit;

Succeed.

SQL> drop view if exists v_connectby_1;

Succeed.

SQL> drop view if exists v_connectby_2;

Succeed.

SQL> create view v_connectby_1 as select f1, f2 ,(select count(f3) from t_connectby_2 t2 WHERE t1.f1 = t2.f1) f3 from t_connectby_1 t1;

Succeed.

SQL> create view v_connectby_2 as select f1, f2 ,rowid f3 from t_connectby_1 t1;

Succeed.

SQL> ---can not push down
SQL> select count(*) from (select f1, f2  from t_connectby_1 t1) t start with CONNECT_BY_ISLEAF = 1 connect by nocycle prior f2 = f1 ;

CT-00601, [1:74]Sql syntax error: CONNECT BY pseudocolumn not allowed here
SQL> select count(*) from (select f1, f2 ,(select count(f3) from t_connectby_2 t2 WHERE t1.f1 = t2.f1) f3 from t_connectby_1 t1) t
  2     START WITH rowid=1 connect by nocycle rowid=3;

COUNT(*)
--------------------
0

1 rows fetched.

SQL> SELECT ARRAY[SYS_CONNECT_BY_PATH(f1,'/'),f2] C FROM v_connectby_1 START WITH f1=1 CONNECT BY nocycle PRIOR f1 = f2 ;

C
----------------------------------------------------------------
{/1,5}
{/1/5,1}

2 rows fetched.

SQL> SELECT * FROM (select array[f1,f2] as C ,f1,f2 from t_connectby_1 t1) START WITH C[1] is not null  CONNECT BY nocycle PRIOR f1 = f2 order by f1,f2;

C                                                                F1           F2          
---------------------------------------------------------------- ------------ ------------
{1,5}                                                            1            5           
{1,5}                                                            1            5           
{1,5}                                                            1            5           
{1,5}                                                            1            5           
{2,4}                                                            2            4           
{3,3}                                                            3            3           
{5,1}                                                            5            1           
{5,1}                                                            5            1           
{5,2}                                                            5            2           
{5,2}                                                            5            2           

10 rows fetched.

SQL> SELECT * FROM (select array[f1,f2] as C ,f1,f2 from t_connectby_1 t1) START WITH f1 is not null  CONNECT BY nocycle PRIOR f1 = f2 order siblings by C[1];

C                                                                F1           F2
---------------------------------------------------------------- ------------ ------------
{1,5}                                                            1            5
{5,1}                                                            5            1
{2,4}                                                            2            4
{5,2}                                                            5            2
{1,5}                                                            1            5
{3,3}                                                            3            3
{5,2}                                                            5            2
{1,5}                                                            1            5
{5,1}                                                            5            1
{1,5}                                                            1            5

10 rows fetched.

SQL> SELECT ARRAY[level] C FROM v_connectby_1 START WITH f1=1 CONNECT BY nocycle PRIOR f1 = f2 ;

C
----------------------------------------------------------------
{1}
{2}

2 rows fetched.

SQL> ---can be pushed down
SQL> select f1, f2 from v_connectby_2 t start with f1 = 1 connect by nocycle prior f2 = f1 group by f1,f2 for update of f1;

F1           F2
------------ ------------
5            2
1            5
5            1
2            4

4 rows fetched.

SQL> select count(*) from v_connectby_2 where NVL(to_char(f1), case f2 when 1007 then to_char(f1) else '1' end)=to_char(f3) and SUBSTR(f3,2,3)='1'
  2     start with f2=3 connect by nocycle length(to_char(prior f1))=f1 order siblings by 1;

COUNT(*)
--------------------
0

1 rows fetched.

SQL> SELECT * FROM (select array[f1,f2] as C ,f1,f2 from t_connectby_1 t1) START WITH f1 is not null  CONNECT BY nocycle PRIOR f1 = f2 order by C[1];

C                                                                F1           F2
---------------------------------------------------------------- ------------ ------------
{1,5}                                                            1            5
{1,5}                                                            1            5
{1,5}                                                            1            5
{1,5}                                                            1            5
{2,4}                                                            2            4
{3,3}                                                            3            3
{5,1}                                                            5            1
{5,2}                                                            5            2
{5,2}                                                            5            2
{5,1}                                                            5            1

10 rows fetched.

SQL> SELECT * FROM v_connectby_1 where rownum < 5 START WITH exists(select * from v_connectby_1 start with f1 = 1 connect by nocycle f1 = f2 limit 1)  CONNECT BY nocycle PRIOR f1 = f2 ;

F1           F2           F3
------------ ------------ --------------------
1            5            1
5            1            1
2            4            1
5            2            1

4 rows fetched.

SQL> select f1,f2 from v_connectby_2 where 1 =1 start with f2=3 connect by nocycle length(to_char(prior f1))=f1 order siblings by level limit 3;

F1           F2
------------ ------------
3            3
1            5

2 rows fetched.

SQL> select f1,f2 from (select a.f1, (select count(f3) from t_connectby_2 t2 WHERE a.f1 = t2.f1) f2, b.f3 from t_connectby_1 a left join v_connectby_2 b on a.f1 = b.f1)
  2     where f1 = f2 start with f3 is not null connect by nocycle length(to_char(prior f1))=f1 order siblings by f1 DESC limit 3;

F1           F2
------------ --------------------
1            1
1            1
1            1

3 rows fetched.

SQL> select rownum, f1,f2 from (select a.f1, a.f2, b.f3 from t_connectby_1 a left join v_connectby_2 b on a.f1 = b.f1) where 1 =1
  2     start with f2=3 connect by nocycle length(to_char(prior f1))=f1 order siblings by f1 DESC;

ROWNUM       F1           F2
------------ ------------ ------------
1            3            3
2            1            5

2 rows fetched.

SQL>
SQL> drop table t_connectby_1;

Succeed.

SQL> drop table t_connectby_2;

Succeed.

SQL> drop view v_connectby_1;

Succeed.

SQL> drop view v_connectby_2;

Succeed.

SQL> ---PBI
SQL> DROP TABLE IF EXISTS "PBI_EDITION";

Succeed.

SQL> CREATE TABLE "PBI_EDITION"
  2 (
  3   "EDITION_ID" NUMBER(20) NOT NULL,
  4   "OFFERING_ID" NUMBER(20),
  5   "PARENT_ID" NUMBER(20),
  6   "CATEGORY" VARCHAR(30 BYTE) NOT NULL,
  7   "LIFECYCLE_ID" VARCHAR(45 BYTE),
  8   "RESERVE11" VARCHAR(375 BYTE)
  9 );

Succeed.

SQL> DROP TABLE IF EXISTS "HWF_DD_ITEM";

Succeed.

SQL> CREATE TABLE "HWF_DD_ITEM"
  2 (
  3   "ITEM_ID" VARCHAR(75 BYTE) NOT NULL,
  4   "ITEM_NAME" VARCHAR(150 BYTE) NOT NULL,
  5   "NLS_LANG" VARCHAR(15 BYTE) NOT NULL,
  6   "CLASSIFY_ID" VARCHAR(75 BYTE) NOT NULL,
  7   "PARENT_ITEM_ID" VARCHAR(75 BYTE),
  8   "ITEM_STATUS" NUMBER(38) NOT NULL
  9 );

Succeed.

SQL> DROP TABLE IF EXISTS "PBI_DYNAMIC_ATTRIBUTE_VALUE";

Succeed.

SQL> CREATE TABLE "PBI_DYNAMIC_ATTRIBUTE_VALUE"
  2 (
  3    "OBJECTID" NUMBER(20) NOT NULL,
  4    "VALUE" NUMBER(20),
  5    "ATTRIBUTENAME" VARCHAR(768 BYTE)
  6 );

Succeed.

SQL> DROP TABLE IF EXISTS "PBI_OFFERING";

Succeed.

SQL> CREATE TABLE "PBI_OFFERING"
  2 (
  3    "OFFERING_ID" NUMBER(20) NOT NULL,
  4    "CATEGORY" VARCHAR(30 BYTE) NOT NULL
  5 );

Succeed.

SQL>
SQL> ALTER TABLE "PBI_EDITION" ADD CONSTRAINT "PK_PBI_EDITION" PRIMARY KEY("EDITION_ID");

Succeed.

SQL> ALTER TABLE "PBI_OFFERING" ADD CONSTRAINT "PK_PBI_OFFERING" PRIMARY KEY("OFFERING_ID");

Succeed.

SQL> create index IN_PBI_EDITIONPARENT on PBI_EDITION(PARENT_ID);

Succeed.

SQL> create index IN_PBI_EDITIONOFFER on PBI_EDITION(OFFERING_ID);

Succeed.

SQL>
SQL> CREATE OR REPLACE VIEW PBI_EDITION_dync_view AS
  2 select
  3     o."EDITION_ID",
  4     o."OFFERING_ID",
  5     o."PARENT_ID",
  6     o."CATEGORY",
  7     o."LIFECYCLE_ID",
  8     (SELECT VALUE
  9         FROM pbi_dynamic_attribute_value dync
 10         WHERE o.edition_id = dync.objectId
 11         AND dync.attributename = 'VERSION_CHARACTERISTIC') "VERSION_CHARACTERISTIC"
 12  from pbi_edition o;

Succeed.

SQL>
SQL> DROP TABLE "PBI_EDITION";

Succeed.

SQL> DROP TABLE "HWF_DD_ITEM";

Succeed.

SQL> DROP TABLE "PBI_DYNAMIC_ATTRIBUTE_VALUE";

Succeed.

SQL> DROP TABLE "PBI_OFFERING";

Succeed.

SQL> DROP VIEW PBI_EDITION_dync_view;

Succeed.

SQL> 
SQL> -- prior node datatype = prior node->right datatype and no need to be numeric
SQL> drop table if exists prior_type_t;

Succeed.

SQL> create table prior_type_t(id number(8), c_binary varbinary(100), c_raw raw(100));

Succeed.

SQL> 
SQL> select * from prior_type_t as t1  start with t1.id > 1 connect by prior t1.c_binary = t1.c_raw;

ID                                       C_BINARY                                                         C_RAW                                                           
---------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> 
SQL> drop table prior_type_t;

Succeed.

SQL> 
SQL> -- core:union all connect by 
SQL> drop table if exists union_all_connect_by_t1;

Succeed.

SQL> drop table if exists union_all_connect_by_t2;

Succeed.

SQL> drop table if exists union_all_connect_by_t3;

Succeed.

SQL> 
SQL> create table union_all_connect_by_t1(id number(8), c_int number(8), c_str varchar(20));

Succeed.

SQL> create table union_all_connect_by_t2(id number(8), c_int number(8), c_str varchar(20));

Succeed.

SQL> create table union_all_connect_by_t3(id number(8), c_int number(8), c_str varchar(20));

Succeed.

SQL> insert into union_all_connect_by_t1 values(1,2,'test1');

1 rows affected.

SQL> insert into union_all_connect_by_t1 values(2,3,'test2');

1 rows affected.

SQL> insert into union_all_connect_by_t2 values(1,5,'test3');

1 rows affected.

SQL> insert into union_all_connect_by_t2 values(1,4,'test2');

1 rows affected.

SQL> insert into union_all_connect_by_t3 values(1,2,'test1');

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> (
  2 select 
  3     (select subq_0.c0 from union_all_connect_by_t2 ref_0 limit 1) as c0
  4 from 
  5     (select 
  6         c_str as c0
  7      from
  8         union_all_connect_by_t1 ref_1
  9      limit 10
 10     ) as subq_0
 11 connect by true
 12 limit 2
 13 )
 14 union all
 15 (
 16 select c_str
 17 from union_all_connect_by_t3 ref_2
 18 );

C0                  
--------------------
test1               
test1               
test1               

3 rows fetched.

SQL> 
SQL> drop table union_all_connect_by_t1;

Succeed.

SQL> drop table union_all_connect_by_t2;

Succeed.

SQL> drop table union_all_connect_by_t3;

Succeed.

SQL>                                                                                                                                                                                                                                           
SQL> drop table if exists SECTIONS_1;                                                                                                                                                                                                          
                                                                                                                                                                                                                                               
Succeed.                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                               
SQL> drop table if exists SALARIES_1;                                                                                                                                                                                                          
                                                                                                                                                                                                                                               
Succeed.                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                               
SQL> drop table if exists EMPLOYEES_1;                                                                                                                                                                                                         
                                                                                                                                                                                                                                               
Succeed.                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                               
SQL> CREATE TABLE "SECTIONS_1"                                                                                                                                                                                                                 
  2 (                                                                                                                                                                                                                                          
  3   "SECTION_ID" NUMBER(4) NOT NULL,                                                                                                                                                                                                         
  4   "SECTION_NAME" VARCHAR(30 BYTE),                                                                                                                                                                                                         
  5   "MANAGER_ID" NUMBER(6),                                                                                                                                                                                                                  
  6   "PLACE_ID" NUMBER(4)                                                                                                                                                                                                                     
  7 );                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                               
Succeed.                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                               
SQL> create table SALARIES_1(TO_DATE date, FROM_DATE date);                                                                                                                                                                                    
                                                                                                                                                                                                                                               
Succeed.                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                               
SQL> create table EMPLOYEES_1(HIRE_DATE date);                                                                                                                                                                                                 
                                                                                                                                                                                                                                               
Succeed.                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                               
SQL> INSERT INTO "SECTIONS_1"  values(10,'Administration',200,1700);                                                                                                                                                                           
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "SECTIONS_1"  values(20,'Marketing',201,1800);                                                                                                                                                                                
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "SECTIONS_1"  values(30,'Purchasing',114,1700);                                                                                                                                                                               
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "SECTIONS_1"  values(40,'Human Resources',203,2400);                                                                                                                                                                          
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "SECTIONS_1"  values(50,'Shipping',121,1500);                                                                                                                                                                                 
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "SECTIONS_1"  values(60,'IT',103,1400);                                                                                                                                                                                       
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "SECTIONS_1"  values(70,'Public Relations',204,2700);                                                                                                                                                                         
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "SECTIONS_1"  values(80,'Sales',145,2500);                                                                                                                                                                                    
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "SECTIONS_1"  values(90,'Executive',100,1700);                                                                                                                                                                                
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "SECTIONS_1"  values(100,'Finance',108,1700);                                                                                                                                                                                 
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "SECTIONS_1"  values(110,'Accounting',205,1700);                                                                                                                                                                              
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "EMPLOYEES_1" values('1986-06-26 00:00:00');                                                                                                                                                                                  
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "EMPLOYEES_1" values('1985-11-21 00:00:00');                                                                                                                                                                                  
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "EMPLOYEES_1" values('1986-08-28 00:00:00');                                                                                                                                                                                  
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "EMPLOYEES_1" values('1986-12-01 00:00:00');                                                                                                                                                                                  
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "EMPLOYEES_1" values('1989-09-12 00:00:00');                                                                                                                                                                                  
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "EMPLOYEES_1" values('1989-06-02 00:00:00');                                                                                                                                                                                  
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "EMPLOYEES_1" values('1989-02-10 00:00:00');                                                                                                                                                                                  
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "EMPLOYEES_1" values('1994-09-15 00:00:00');                                                                                                                                                                                  
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "EMPLOYEES_1" values('1985-02-18 00:00:00');                                                                                                                                                                                  
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "EMPLOYEES_1" values('1989-08-24 00:00:00');                                                                                                                                                                                  
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "SALARIES_1" values('1986-06-26 00:00:00','9999-01-01 00:00:00');                                                                                                                                                             
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "SALARIES_1" values('1996-08-03 00:00:00','9999-01-01 00:00:00');                                                                                                                                                             
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "SALARIES_1" values('1995-12-03 00:00:00','9999-01-01 00:00:00');                                                                                                                                                             
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "SALARIES_1" values('1986-12-01 00:00:00','9999-01-01 00:00:00');                                                                                                                                                             
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "SALARIES_1" values('1989-09-12 00:00:00','9999-01-01 00:00:00');                                                                                                                                                             
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "SALARIES_1" values('1990-08-05 00:00:00','9999-01-01 00:00:00');                                                                                                                                                             
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "SALARIES_1" values('1989-02-10 00:00:00','9999-01-01 00:00:00');                                                                                                                                                             
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "SALARIES_1" values('1998-03-11 00:00:00','2000-07-31 00:00:00');                                                                                                                                                             
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "SALARIES_1" values('1985-02-18 00:00:00','9999-01-01 00:00:00');                                                                                                                                                             
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "SALARIES_1" values('1996-11-24 00:00:00','2000-06-26 00:00:00');                                                                                                                                                             
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> INSERT INTO "SALARIES_1" values('2000-06-26 00:00:00','9999-01-01 00:00:00');                                                                                                                                                             
                                                                                                                                                                                                                                               
1 rows affected.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL> COMMIT;                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                               
Succeed.                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                               
SQL>                                                                                                                                                                                                                                           
SQL> SELECT                                                                                                                                                                                                                                    
  2   NULL AS C5                                                                                                                                                                                                                               
  3 FROM                                                                                                                                                                                                                                       
  4   (SELECT                                                                                                                                                                                                                                  
  5         CASE WHEN                                                                                                                                                                                                                          
  6             (                                                                                                                                                                                                                              
  7             CAST('154-1' AS INTERVAL YEAR(4) TO MONTH)) IN (                                                                                                                                                                               
  8             SELECT                                                                                                                                                                                                                         
  9                 CAST('2246-8' AS INTERVAL YEAR(4) TO MONTH) AS C3                                                                                                                                                                          
 10               FROM                                                                                                                                                                                                                         
 11                  SALARIES_1 AS REF_1                                                                                                                                                                                                       
 12               START WITH EXISTS (                                                                                                                                                                                                          
 13                   SELECT                                                                                                                                                                                                                   
 14                       1                                                                                                                                                                                                                    
 15                     FROM                                                                                                                                                                                                                   
 16                        SECTIONS_1 PIVOT(MAX(CAST(REF_1.FROM_DATE AS DATE)) AS AGGR_0                                                                                                                                                       
 17                          FOR (MANAGER_ID, SECTION_ID)                                                                                                                                                                                      
 18                         IN ((203, 40) AS PEXPR_0)) AS REF_2                                                                                                                                                                                
 19                   )                                                                                                                                                                                                                        
 20                 CONNECT BY REF_1.TO_DATE = PRIOR REF_1.FROM_DATE )                                                                                                                                                                         
 21           THEN                                                                                                                                                                                                                             
 22             NULL                                                                                                                                                                                                                           
 23           ELSE                                                                                                                                                                                                                             
 24             NULL                                                                                                                                                                                                                           
 25           END AS C2,                                                                                                                                                                                                                       
 26         CAST('679531 12:37:31' AS INTERVAL DAY(7) TO SECOND(6)) AS C4,                                                                                                                                                                     
 27         REF_0.HIRE_DATE AS C5,                                                                                                                                                                                                             
 28         CAST('701191 13:30:21' AS INTERVAL DAY TO SECOND) AS C10                                                                                                                                                                           
 29       FROM                                                                                                                                                                                                                                 
 30          EMPLOYEES_1 AS REF_0                                                                                                                                                                                                              
 31       GROUP BY                                                                                                                                                                                                                             
 32         GROUPING SETS(                                                                                                                                                                                                                     
 33             ROLLUP(                                                                                                                                                                                                                        
 34                 REF_0.HIRE_DATE))                                                                                                                                                                                                          
 35     ) AS SUBQ_0                                                                                                                                                                                                                            
 36   CONNECT BY SUBQ_0.C5 = PRIOR SUBQ_0.C2  OR SUBQ_0.C10 = PRIOR SUBQ_0.C4;                                                                                                                                                                 
                                                                                                                                                                                                                                               
C5                                                                                                                                                                                                                                             
--                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
11 rows fetched.                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
SQL>                                                                                                                                                                                                                                           
SQL> drop table SECTIONS_1;                                                                                                                                                                                                                    
                                                                                                                                                                                                                                               
Succeed.                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                               
SQL> drop table SALARIES_1;                                                                                                                                                                                                                    
                                                                                                                                                                                                                                               
Succeed.                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                               
SQL> drop table EMPLOYEES_1;                                                                                                                                                                                                                   
                                                                                                                                                                                                                                               
Succeed.                                                                                                                                                                                                                                       
    
SQL> 
SQL> -- DTS202012150EPWFRP1D00
SQL> drop table if exists connect_by_loop_error_t1;

Succeed.

SQL> drop table if exists connect_by_loop_error_t2;

Succeed.

SQL> drop table if exists connect_by_loop_error_t3;

Succeed.

SQL> 
SQL> create table connect_by_loop_error_t1(id number(8), c_int number(10));

Succeed.

SQL> create table connect_by_loop_error_t2(id number(8), c_int number(10));

Succeed.

SQL> create table connect_by_loop_error_t3(id number(8), c_str varchar(20));

Succeed.

SQL> 
SQL> insert into connect_by_loop_error_t1 values(1,1);

1 rows affected.

SQL> insert into connect_by_loop_error_t2 values(1,1);

1 rows affected.

SQL> insert into connect_by_loop_error_t3 values(1,'test');

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> SELECT
  2     NULL AS C0
  3 FROM
  4     (SELECT
  5         (SELECT REF_1.c_int AS C1 FROM connect_by_loop_error_t1 AS REF_1 CONNECT BY  PRIOR REF_1.id = REF_1.id limit 1) AS C0,
  6         (SELECT MAX(c_int) FROM connect_by_loop_error_t2) AS C1,
  7         REF_0.c_str AS C2
  8     FROM
  9         connect_by_loop_error_t3 AS REF_0
 10     ) AS SUBQ_0
 11 CONNECT BY SUBQ_0.C1 = PRIOR SUBQ_0.C0 OR PRIOR SUBQ_0.C1 = SUBQ_0.C0;

CT-00660, There was an infinite loop in CONNECT BY execution
SQL> 
SQL> drop table connect_by_loop_error_t1;

Succeed.

SQL> drop table connect_by_loop_error_t2;

Succeed.

SQL> drop table connect_by_loop_error_t3;

Succeed.

SQL> 
SQL> --bugfix: DTS202012070FD9PXP1L00
SQL> drop table if exists t_siblings_base_123;

Succeed.

SQL> drop table if exists t_ct_sub_110 ;

Succeed.

SQL> 
SQL> create table t_siblings_base_123(EMPNO NUMBER(4),ENAME VARCHAR2(10),MGR NUMBER(4));

Succeed.

SQL> insert into t_siblings_base_123 values (1,'M',NULL);

1 rows affected.

SQL> insert into t_siblings_base_123 values (2,'N',NULL);

1 rows affected.

SQL> insert into t_siblings_base_123 values (3,'A',NULL);

1 rows affected.

SQL> insert into t_siblings_base_123 values (4,'C',3);

1 rows affected.

SQL> insert into t_siblings_base_123 values (null,'C',3);

1 rows affected.

SQL> insert into t_siblings_base_123 values (5,'B',3);

1 rows affected.

SQL> insert into t_siblings_base_123 values (6,'F',4);

1 rows affected.

SQL> insert into t_siblings_base_123 values (7,'E',4);

1 rows affected.

SQL> insert into t_siblings_base_123 values (8,'D',5);

1 rows affected.

SQL> insert into t_siblings_base_123 values (9,'G',5);

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> create table t_ct_sub_110 as 
  2 select count(*) c
  3   from (select /*+ FULL +*/
  4          level c1,
  5          case
  6            when t1.ENAME = 'E' then
  7             null
  8            else
  9             t1.ename
 10          end c,
 11          PRIOR t1.ENAME PRIORENAME,
 12          t1.EMPNO,
 13          PRIOR t1.EMPNO PRIOREMPNO,
 14          t1.MGR
 15           from t_siblings_base_123 as of timestamp current_timestamp t1
 16           join t_siblings_base_123 t2
 17             on t1.ename != t2.ename
 18          start with exists (select *
 19                        from t_siblings_base_123
 20                       where t1.empno != t2.mgr)
 21                 and exists
 22          (select *
 23                        from t_siblings_base_123
 24                       where t1.empno != t2.empno)
 25         connect by nocycle PRIOR t1.empno = t2.mgr
 26          order siblings by c nulls last);

Succeed.

SQL> SELECT * FROM t_ct_sub_110;

C                   
--------------------
1768                

1 rows fetched.

SQL> 
SQL> drop table t_siblings_base_123;

Succeed.

SQL> drop table t_ct_sub_110 ;

Succeed.

SQL>
SQL> DROP TABLE IF EXISTS "SALARIES";

Succeed.

SQL> DROP TABLE IF EXISTS "STATES";

Succeed.

SQL> CREATE TABLE "SALARIES"
  2 (
  3   "EMP_NO" BINARY_INTEGER NOT NULL,
  4   "SALARY" BINARY_INTEGER NOT NULL,
  5   "FROM_DATE" DATE NOT NULL,
  6   "TO_DATE" DATE NOT NULL,
  7   "COL_12" INTERVAL DAY(2) TO SECOND(6)
  8 );

Succeed.

SQL> CREATE TABLE "STATES"
  2 (
  3   "STATE_ID" CHAR(2 BYTE) NOT NULL,
  4   "STATE_NAME" VARCHAR(40 BYTE),
  5   "AREA_ID" NUMBER
  6 );

Succeed.

SQL>
SQL> DROP TABLE "SALARIES";

Succeed.

SQL> DROP TABLE "STATES";

Succeed.

SQL>
SQL> DROP TABLE IF EXISTS "EMPLOYEES";

Succeed.

SQL> DROP TABLE IF EXISTS "SECTIONS";

Succeed.

SQL> DROP TABLE IF EXISTS "AREAS";

Succeed.

SQL> DROP TABLE IF EXISTS TBL_SUBPARTITION_RANGE2_25;

Succeed.

SQL> CREATE TABLE "EMPLOYEES"
  2 (
  3   "EMP_NO" BINARY_INTEGER NOT NULL,
  4   "BIRTH_DATE" DATE NOT NULL,
  5   "FIRST_NAME" VARCHAR(50 BYTE) NOT NULL,
  6   "LAST_NAME" VARCHAR(50 BYTE) NOT NULL,
  7   "GENDER" CHAR(1 BYTE) NOT NULL,
  8   "HIRE_DATE" DATE NOT NULL
  9 );

Succeed.

SQL> CREATE TABLE "AREAS"
  2 (
  3   "AREA_ID" NUMBER,
  4   "AREA_NAME" VARCHAR(25 BYTE)
  5 );

Succeed.

SQL> CREATE TABLE "SECTIONS"
  2 (
  3   "SECTION_ID" NUMBER(4) NOT NULL,
  4   "SECTION_NAME" VARCHAR(30 BYTE),
  5   "MANAGER_ID" NUMBER(6),
  6   "PLACE_ID" NUMBER(4)
  7 );

Succeed.

SQL> create table TBL_SUBPARTITION_RANGE2_25(C_DATE date, C_NUMERIC NUMBER(20, 10));

Succeed.

SQL> INSERT INTO EMPLOYEES values(10001,'1953-09-02 00:00:00','Georgi','Facello','M','1986-06-26 00:00:00');

1 rows affected.

SQL> INSERT INTO AREAS values(1,'Europe');

1 rows affected.

SQL> INSERT INTO SECTIONS values(10,'Administration',200,1700);

1 rows affected.

SQL> COMMIT;

Succeed.

SQL>
SQL> SELECT
  2   1
  3 FROM
  4   (SELECT
  5         (SELECT SECTION_ID FROM SECTIONS LIMIT 1 OFFSET 3) AS C4,
  6         CORR(
  7           CAST(REF_0.AREA_ID AS NUMBER),
  8           CAST((SELECT SECTION_ID FROM SECTIONS ) AS NUMBER(4,0))) AS C6
  9       FROM
 10         AREAS AS REF_0
 11       WHERE TRUE
 12       START WITH CAST('2020-12-15 02:37:41' AS TIMESTAMP(6) WITH LOCAL TIME ZONE) <> ALL(
 13           SELECT
 14               1
 15             FROM
 16               SECTIONS AS REF_5
 17             OFFSET 87)
 18         CONNECT BY REF_0.AREA_NAME IS NULL
 19     ) AS SUBQ_0 ;

1
------------
1

1 rows fetched.

SQL>
SQL> SELECT
  2   1
  3 FROM
  4   (SELECT
  5       (SELECT SECTION_ID FROM SECTIONS LIMIT 1 OFFSET 3) AS C4,
  6         CORR(
  7       CAST((SELECT SECTION_ID FROM SECTIONS LIMIT 1 OFFSET 4) AS NUMBER(20,0)),
  8       CAST(NULL AS NUMBER)) OVER (PARTITION BY REF_0.AREA_NAME ORDER BY REF_0.AREA_NAME DESC) AS C5
  9       FROM
 10         AREAS AS REF_0
 11       WHERE TRUE
 12       START WITH CAST('2020-12-15 02:37:41' AS TIMESTAMP(6) WITH LOCAL TIME ZONE) <> ALL(
 13           SELECT
 14               1
 15             FROM
 16               SECTIONS AS REF_5
 17             OFFSET 87)
 18         CONNECT BY REF_0.AREA_NAME IS NULL
 19     ) AS SUBQ_0;

1
------------
1

1 rows fetched.

SQL>
SQL> SELECT DISTINCT
  2   CASE WHEN
  3       CAST('638799 2:20:31' AS INTERVAL DAY TO SECOND(6)) > SOME(
  4       SELECT
  5           CAST('30512 18:19:39' AS INTERVAL DAY TO SECOND(6)) AS C1
  6         FROM
  7           TBL_SUBPARTITION_RANGE2_25 AS REF_2
  8         WHERE REGEXP_LIKE(REF_2.C_NUMERIC,'.*')
  9         LIMIT 30 OFFSET 13)
 10     THEN
 11       (SELECT C_DATE FROM TBL_SUBPARTITION_RANGE2_25 LIMIT 1 OFFSET 6)
 12     ELSE
 13       (SELECT C_DATE FROM TBL_SUBPARTITION_RANGE2_25 LIMIT 1 OFFSET 6)
 14     END AS C1
 15 FROM
 16   EMPLOYEES AS REF_1
 17 START WITH REF_1.BIRTH_DATE < SOME(
 18      (SELECT C_DATE FROM TBL_SUBPARTITION_RANGE2_25 LIMIT 1 OFFSET 5), CURRENT_TIMESTAMP())
 19   CONNECT BY REF_1.BIRTH_DATE = PRIOR REF_1.HIRE_DATE  AND REF_1.FIRST_NAME = PRIOR REF_1.LAST_NAME
 20 GROUP BY
 21   REF_1.HIRE_DATE,
 22   CUBE(
 23         REF_1.FIRST_NAME,
 24         REF_1.HIRE_DATE);

C1
----------------------


1 rows fetched.

SQL> 
SQL> -- DTS202012260G0L9GP0F00
SQL> SELECT 
  2   1 AS C1, 
  3   REF_1.EMP_NO AS C2
  4 FROM 
  5   (EMPLOYEES AS REF_0) INNER JOIN 
  6   (EMPLOYEES AS REF_1)
  7   ON (REF_1.EMP_NO <> ALL(
  8         SELECT 
  9             45 AS C1
 10         FROM 
 11             SECTIONS AS REF_2
 12         CONNECT BY PRIOR REF_2.SECTION_ID = REF_2.MANAGER_ID)
 13      )
 14 
 15 CONNECT BY PRIOR REF_0.BIRTH_DATE = REF_1.HIRE_DATE 
 16 GROUP BY REF_1.EMP_NO;

C1           C2          
------------ ------------
1            10001       

1 rows fetched.

SQL> 
SQL> DROP TABLE "EMPLOYEES";

Succeed.

SQL> DROP TABLE "SECTIONS";

Succeed.

SQL> DROP TABLE "AREAS";

Succeed.

SQL> DROP TABLE "TBL_SUBPARTITION_RANGE2_25";

Succeed.

SQL> 
SQL> -- DTS202012260720QYP1F00
SQL> DROP TABLE IF EXISTS CONNECT_BY_TEST_T1;

Succeed.

SQL> DROP TABLE IF EXISTS CONNECT_BY_TEST_T2;

Succeed.

SQL> DROP TABLE IF EXISTS CONNECT_BY_TEST_T3;

Succeed.

SQL> DROP TABLE IF EXISTS CONNECT_BY_TEST_T4;

Succeed.

SQL> DROP TABLE IF EXISTS CONNECT_BY_TEST_T5;

Succeed.

SQL> 
SQL> CREATE TABLE CONNECT_BY_TEST_T1(OBJECT_NAME VARCHAR(20));

Succeed.

SQL> CREATE TABLE CONNECT_BY_TEST_T2(USER_ID BINARY_INTEGER NOT NULL );

Succeed.

SQL> CREATE TABLE CONNECT_BY_TEST_T3(USER# BINARY_INTEGER NOT NULL, ID BINARY_INTEGER NOT NULL, NAME VARCHAR(64 BYTE) NOT NULL);

Succeed.

SQL> CREATE UNIQUE INDEX CONNECT_BY_TEST_T3_IDX1 ON CONNECT_BY_TEST_T3(USER#, NAME);

Succeed.

SQL> CREATE UNIQUE INDEX CONNECT_BY_TEST_T3_IDX2 ON CONNECT_BY_TEST_T3(USER#, ID);

Succeed.

SQL> 
SQL> CREATE TABLE CONNECT_BY_TEST_T4
  2 (
  3   USER# BINARY_INTEGER NOT NULL,
  4   TABLE# BINARY_INTEGER NOT NULL,
  5   ID BINARY_INTEGER NOT NULL,
  6   NAME VARCHAR(64 BYTE) NOT NULL,
  7   HIGH_VALUE VARCHAR(64 BYTE)
  8 );

Succeed.

SQL> CREATE UNIQUE INDEX CONNECT_BY_TEST_T4_IDX1 ON CONNECT_BY_TEST_T4(USER#, TABLE#, ID);

Succeed.

SQL> 
SQL> CREATE TABLE CONNECT_BY_TEST_T5(USER# BINARY_INTEGER, TAB# BINARY_INTEGER, COL# BINARY_INTEGER);

Succeed.

SQL> CREATE UNIQUE INDEX CONNECT_BY_TEST_T5_IDX1 ON CONNECT_BY_TEST_T5(USER#, TAB#, COL#);

Succeed.

SQL> 
SQL> INSERT INTO CONNECT_BY_TEST_T1 VALUES('TEST1');

1 rows affected.

SQL> INSERT INTO CONNECT_BY_TEST_T1 VALUES('TEST2');

1 rows affected.

SQL> INSERT INTO CONNECT_BY_TEST_T2 VALUES(0);

1 rows affected.

SQL> INSERT INTO CONNECT_BY_TEST_T2 VALUES(1);

1 rows affected.

SQL> INSERT INTO CONNECT_BY_TEST_T3 VALUES(0,1,'MY_TABLE');

1 rows affected.

SQL> INSERT INTO CONNECT_BY_TEST_T3 VALUES(1,1,'MY_TABLE2');

1 rows affected.

SQL> INSERT INTO CONNECT_BY_TEST_T4 VALUES(0,1,1,'COL_1','HIGH');

1 rows affected.

SQL> INSERT INTO CONNECT_BY_TEST_T4 VALUES(1,1,1,'COL_1','HIGH');

1 rows affected.

SQL> INSERT INTO CONNECT_BY_TEST_T5 VALUES(0, 1, 1);

1 rows affected.

SQL> INSERT INTO CONNECT_BY_TEST_T5 VALUES(1, 1, 1);

1 rows affected.

SQL> COMMIT;

Succeed.

SQL> 
SQL> CREATE OR REPLACE VIEW CONNECT_BY_TEST_VIEW
  2 (
  3   TABLE_NAME,
  4   COLUMN_NAME,
  5   HIGH_VALUE
  6 )
  7 AS
  8   SELECT T.NAME, C.NAME, C.HIGH_VALUE
  9   FROM CONNECT_BY_TEST_T2 M JOIN CONNECT_BY_TEST_T3 T ON T.USER# = M.USER_ID
 10   JOIN CONNECT_BY_TEST_T4 C ON T.ID = C.TABLE# AND T.USER# = C.USER#
 11   LEFT JOIN CONNECT_BY_TEST_T5 HH ON C.USER# = HH.USER# AND C.TABLE# = HH.TAB# AND C.ID = HH.COL#
 12 /

Succeed.

SQL> 
SQL> DECLARE
  2     v1 int;
  3 BEGIN
  4     FOR i in 1..10 LOOP
  5         BEGIN
  6             SELECT
  7                 C1 into v1
  8             FROM 
  9                 ((SELECT
 10                     2 AS C1
 11                  FROM
 12                     connect_by_test_view AS REF_1
 13                  START WITH 
 14                     REF_1.TABLE_NAME BETWEEN (SELECT MAX(OBJECT_NAME) FROM connect_by_test_t1) AND REF_1.HIGH_VALUE
 15                  CONNECT BY REF_1.COLUMN_NAME = PRIOR REF_1.TABLE_NAME
 16                  ) AS SUBQ_0
 17                 );
 18         EXCEPTION 
 19             WHEN NO_DATA_FOUND THEN v1 := 1;
 20         END;
 21     END LOOP;
 22 END;
 23 /

PL/SQL procedure successfully completed.

SQL> 
SQL> DROP VIEW CONNECT_BY_TEST_VIEW;

Succeed.

SQL> DROP TABLE CONNECT_BY_TEST_T1;

Succeed.

SQL> DROP TABLE CONNECT_BY_TEST_T2;

Succeed.

SQL> DROP TABLE CONNECT_BY_TEST_T3;

Succeed.

SQL> DROP TABLE CONNECT_BY_TEST_T4;

Succeed.

SQL> DROP TABLE CONNECT_BY_TEST_T5;
Succeed.

SQL> 
SQL> --AR.SR.IREQ02518205.001.004
SQL> --prior condition is null && multiple prior conditions
SQL> drop table if exists employee_null;

Succeed.

SQL> create table employee_null(
  2        emp_id number(18),
  3        lead_id number(18),
  4        emp_name varchar2(200),
  5        a number(18),
  6        b number(18)
  7 );

Succeed.

SQL> insert into employee_null values(1,0,'king', 3, NULL);

1 rows affected.

SQL> insert into employee_null values(2,1,'arise', 3, NULL);

1 rows affected.

SQL> insert into employee_null values(4,2,'bb', 3, NULL);

1 rows affected.

SQL> insert into employee_null values(1,4,'aa', 4, NULL);

1 rows affected.

SQL> insert into employee_null values(3,4,'cc', 3, NULL);

1 rows affected.

SQL> insert into employee_null values(2,0,'king2', 3, NULL);

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> select CONNECT_BY_ISCYCLE, CONNECT_BY_ISLEAF, emp_name, level, sys_connect_by_path(emp_name,'->') tree from employee_null start with lead_id=0 connect by NOCYCLE prior emp_id = prior lead_id;

CONNECT_BY_ISCYCLE CONNECT_BY_ISLEAF EMP_NAME                                                         LEVEL        TREE                                                            
------------------ ----------------- ---------------------------------------------------------------- ------------ ----------------------------------------------------------------
0                  1                 king                                                             1            ->king                                                          
0                  1                 king2                                                            1            ->king2                                                         

2 rows fetched.

SQL> 
SQL> select CONNECT_BY_ISCYCLE, CONNECT_BY_ISLEAF, emp_name, level, sys_connect_by_path(emp_name,'->') tree from employee_null start with lead_id=0 connect by NOCYCLE prior emp_id = lead_id and  prior a is not NULL;

CONNECT_BY_ISCYCLE CONNECT_BY_ISLEAF EMP_NAME                                                         LEVEL        TREE                                                            
------------------ ----------------- ---------------------------------------------------------------- ------------ ----------------------------------------------------------------
0                  0                 king                                                             1            ->king                                                          
0                  0                 arise                                                            2            ->king->arise                                                   
0                  0                 bb                                                               3            ->king->arise->bb                                               
1                  1                 aa                                                               4            ->king->arise->bb->aa                                           
0                  1                 cc                                                               4            ->king->arise->bb->cc                                           
0                  0                 king2                                                            1            ->king2                                                         
0                  0                 bb                                                               2            ->king2->bb                                                     
1                  1                 aa                                                               3            ->king2->bb->aa                                                 
0                  1                 cc                                                               3            ->king2->bb->cc                                                 

9 rows fetched.

SQL> 
SQL> delete from employee_null where a = 4;

1 rows affected.

SQL> insert into employee_null values(1,4,'aa', 3, NULL);

1 rows affected.

SQL> commit;

Succeed.

SQL> select CONNECT_BY_ISCYCLE, CONNECT_BY_ISLEAF, emp_name, level, sys_connect_by_path(emp_name,'->') tree from employee_null start with lead_id=0 connect by NOCYCLE prior emp_id = lead_id and  prior a is not NULL;

CONNECT_BY_ISCYCLE CONNECT_BY_ISLEAF EMP_NAME                                                         LEVEL        TREE                                                            
------------------ ----------------- ---------------------------------------------------------------- ------------ ----------------------------------------------------------------
0                  0                 king                                                             1            ->king                                                          
0                  0                 arise                                                            2            ->king->arise                                                   
1                  0                 bb                                                               3            ->king->arise->bb                                               
0                  1                 cc                                                               4            ->king->arise->bb->cc                                           
0                  0                 king2                                                            1            ->king2                                                         
0                  0                 bb                                                               2            ->king2->bb                                                     
0                  1                 cc                                                               3            ->king2->bb->cc                                                 
1                  1                 aa                                                               3            ->king2->bb->aa                                                 

8 rows fetched.

SQL> 
SQL> delete from employee_null;

6 rows affected.

SQL> insert into employee_null values(1,0,'king', NULL, NULL);

1 rows affected.

SQL> insert into employee_null values(2,1,'arise', NULL, NULL);

1 rows affected.

SQL> insert into employee_null values(4,2,'bb', NULL, NULL);

1 rows affected.

SQL> insert into employee_null values(1,4,'aa', NULL, NULL);

1 rows affected.

SQL> insert into employee_null values(3,4,'cc', 4, NULL);

1 rows affected.

SQL> insert into employee_null values(5,3,'dd', NULL, NULL);

1 rows affected.

SQL> insert into employee_null values(2,0,'king2', NULL, NULL);

1 rows affected.

SQL> commit;

Succeed.

SQL> select CONNECT_BY_ISCYCLE, CONNECT_BY_ISLEAF, emp_name, level, sys_connect_by_path(emp_name,'->') tree from employee_null start with lead_id=0 connect by NOCYCLE prior emp_id = lead_id and  prior a is NULL;

CONNECT_BY_ISCYCLE CONNECT_BY_ISLEAF EMP_NAME                                                         LEVEL        TREE                                                            
------------------ ----------------- ---------------------------------------------------------------- ------------ ----------------------------------------------------------------
0                  0                 king                                                             1            ->king                                                          
0                  0                 arise                                                            2            ->king->arise                                                   
1                  0                 bb                                                               3            ->king->arise->bb                                               
0                  1                 cc                                                               4            ->king->arise->bb->cc                                           
0                  0                 king2                                                            1            ->king2                                                         
0                  0                 bb                                                               2            ->king2->bb                                                     
1                  1                 aa                                                               3            ->king2->bb->aa                                                 
0                  1                 cc                                                               3            ->king2->bb->cc                                                 

8 rows fetched.

SQL> 
SQL> delete from employee_null;

7 rows affected.

SQL> insert into employee_null values(2,1,'arise',null, 1);

1 rows affected.

SQL> insert into employee_null values(5,2,'joker',5, null);

1 rows affected.

SQL> commit;

Succeed.

SQL> select emp_name, sys_connect_by_path(emp_name,'->') tree from employee_null start with lead_id = 1 connect by nocycle prior emp_id = lead_id and prior a = b;

EMP_NAME                                                         TREE                                                            
---------------------------------------------------------------- ----------------------------------------------------------------
arise                                                            ->arise                                                         

1 rows fetched.

SQL> 
SQL> delete from employee_null;

2 rows affected.

SQL> insert into employee_null values(5,2,'joker', NULL, NULL);

1 rows affected.

SQL> insert into employee_null values(1,0,'king', NULL, NULL);

1 rows affected.

SQL> insert into employee_null values(2,1,'arise', NULL, NULL);

1 rows affected.

SQL> insert into employee_null values(NULL,5,'adc', NULL, NULL);

1 rows affected.

SQL> insert into employee_null values(2,NULL,'ppl', NULL, NULL);

1 rows affected.

SQL> commit;

Succeed.

SQL> select emp_name, sys_connect_by_path(emp_name,'->') tree, connect_by_isleaf from employee_null start with emp_id = 1 connect by nocycle prior emp_id = lead_id;

EMP_NAME                                                         TREE                                                             CONNECT_BY_ISLEAF
---------------------------------------------------------------- ---------------------------------------------------------------- -----------------
king                                                             ->king                                                           0                
arise                                                            ->king->arise                                                    0                
joker                                                            ->king->arise->joker                                             0                
adc                                                              ->king->arise->joker->adc                                        1                

4 rows fetched.

SQL> 
SQL> delete from employee_null;

5 rows affected.

SQL> insert into employee_null values(1,0,'king', 9, NULL);

1 rows affected.

SQL> insert into employee_null values(2,1,'arise', 8, NULL);

1 rows affected.

SQL> insert into employee_null values(5,2,'joker', 3, NULL);

1 rows affected.

SQL> insert into employee_null values(4,2,'adc', 7, NULL);

1 rows affected.

SQL> insert into employee_null values(7,4,'ppl', 6, NULL);

1 rows affected.

SQL> insert into employee_null values(8,5,'tyu', 2, NULL);

1 rows affected.

SQL> insert into employee_null values(3,1,'iop', 2, NULL);

1 rows affected.

SQL> insert into employee_null values(6,3,'ght', 1, NULL);

1 rows affected.

SQL> commit;

Succeed.

SQL> select a, prior emp_id, connect_by_isleaf, connect_by_iscycle, sys_connect_by_path(emp_name,'/') tree from employee_null start with emp_id = 1 connect by nocycle prior emp_id = lead_id and prior emp_id < a order siblings by emp_id;

A                                        PRIOR EMP_ID                             CONNECT_BY_ISLEAF CONNECT_BY_ISCYCLE TREE                                                            
---------------------------------------- ---------------------------------------- ----------------- ------------------ ----------------------------------------------------------------
9                                                                                 0                 0                  /king                                                           
8                                        1                                        0                 0                  /king/arise                                                     
7                                        2                                        0                 0                  /king/arise/adc                                                 
6                                        4                                        1                 0                  /king/arise/adc/ppl                                             
3                                        2                                        1                 0                  /king/arise/joker                                               
2                                        1                                        1                 0                  /king/iop                                                       

6 rows fetched.

SQL> select prior emp_id, level, sys_connect_by_path(emp_name,'/') tree from employee_null start with emp_id = 1 connect by nocycle prior emp_id = lead_id and level < 4 order siblings by emp_id;

PRIOR EMP_ID                             LEVEL        TREE                                                            
---------------------------------------- ------------ ----------------------------------------------------------------
                                         1            /king                                                           
1                                        2            /king/arise                                                     
2                                        3            /king/arise/adc                                                 
2                                        3            /king/arise/joker                                               
1                                        2            /king/iop                                                       
3                                        3            /king/iop/ght                                                   

6 rows fetched.

SQL> select rownum, level, CONNECT_BY_ROOT(emp_id), sys_connect_by_path(emp_name,'/') tree from employee_null start with emp_id < 3 and rownum < 3 connect by nocycle prior emp_id = lead_id and rownum < 10 order siblings by emp_id;

ROWNUM       LEVEL        EMP_ID                                   TREE                                                            
------------ ------------ ---------------------------------------- ----------------------------------------------------------------
1            1            1                                        /king                                                           
2            2            1                                        /king/arise                                                     
3            2            1                                        /king/iop                                                       
4            3            1                                        /king/iop/ght                                                   
5            1            2                                        /arise                                                          
6            2            2                                        /arise/adc                                                      
7            3            2                                        /arise/adc/ppl                                                  
8            2            2                                        /arise/joker                                                    
9            3            2                                        /arise/joker/tyu                                                

9 rows fetched.

SQL> select emp_name, sys_connect_by_path(emp_name,'/') tree from employee_null start with emp_id < 3 connect by nocycle prior emp_id = lead_id and prior emp_id = (select emp_id from employee_null where emp_name='king') order siblings by emp_id;

EMP_NAME                                                         TREE                                                            
---------------------------------------------------------------- ----------------------------------------------------------------
king                                                             /king                                                           
arise                                                            /king/arise                                                     
iop                                                              /king/iop                                                       
arise                                                            /arise                                                          

4 rows fetched.

SQL> drop table employee_null;

Succeed.

SQL> 
SQL> drop table if exists t_lob_conn;

Succeed.

SQL> create table t_lob_conn(f1 clob, f2 clob);

Succeed.

SQL> insert into t_lob_conn values('clob1234567890987654321clob', '11111111112222222222');

1 rows affected.

SQL> insert into t_lob_conn values('clob88721837182611clob123', 'clob1234567890987654321clob');

1 rows affected.

SQL> commit;

Succeed.

SQL> select f1, f2, level from t_lob_conn start with f2='11111111112222222222' connect by NOCYCLE prior f1 = f2;

CT-00601, [1:94]Sql syntax error: unexpected lob column occurs
SQL> drop table t_lob_conn;

Succeed.

SQL> 
SQL> 
SQL> ALTER SYSTEM SET _MAX_CONNECT_BY_LEVEL=9200;

Succeed.

SQL> drop table if exists employee_depth;

Succeed.

SQL> create table employee_depth(emp_id number(18), lead_id number(18));

Succeed.

SQL> 
SQL> begin
  2 for i in 0 .. 9200 loop
  3   insert into employee_depth values(i+1, i);
  4 end loop;
  5 for i in 1 .. 9 loop
  6   insert into employee_depth values(i*10000, i*1000);
  7 end loop;
  8 end;
  9 /

PL/SQL procedure successfully completed.

SQL> commit;

Succeed.

SQL> 
SQL> select emp_id, level, connect_by_isleaf from employee_depth where connect_by_isleaf = 1 start with emp_id = 1 connect by nocycle prior emp_id = lead_id and level < 9201;

EMP_ID                                   LEVEL        CONNECT_BY_ISLEAF
---------------------------------------- ------------ -----------------
9200                                     9200         1                
90000                                    9001         1                
80000                                    8001         1                
70000                                    7001         1                
60000                                    6001         1                
50000                                    5001         1                
40000                                    4001         1                
30000                                    3001         1                
20000                                    2001         1                
10000                                    1001         1                

10 rows fetched.

SQL> 
SQL> --DTS202101070EMA6IP0K00-cycle check error
SQL> ALTER SYSTEM SET _MAX_CONNECT_BY_LEVEL=10000;

Succeed.

SQL> delete from employee_depth;

9210 rows affected.

SQL> begin
  2 for i in 0 .. 10000 loop
  3   insert into employee_depth values(i+1, i);
  4 end loop;
  5 for i in 1 .. 20 loop
  6   insert into employee_depth values(i*10000, i*500);
  7 end loop;
  8 end;
  9 /

PL/SQL procedure successfully completed.

SQL> commit;

Succeed.

SQL> select emp_id, level, connect_by_iscycle, connect_by_isleaf, CONNECT_BY_ROOT(EMP_ID) from employee_depth where connect_by_iscycle = 1 or level = 4096 start with emp_id <=3 connect by nocycle prior emp_id = lead_id and level < 10001 order by 5;

EMP_ID                                   LEVEL        CONNECT_BY_ISCYCLE CONNECT_BY_ISLEAF EMP_ID                                  
---------------------------------------- ------------ ------------------ ----------------- ----------------------------------------
4096                                     4096         0                  0                 1                                       
4097                                     4096         0                  0                 2                                       
4098                                     4096         0                  0                 3                                       

3 rows fetched.

SQL> drop table employee_depth;

Succeed.

SQL> ALTER SYSTEM SET _MAX_CONNECT_BY_LEVEL=256;

Succeed.

SQL> 
SQL> --DTS202101070JCQ0EP1I00-PLAN_NODE_CONNECT union all PLAN_NODE_CONNECT_HASH
SQL> drop table if exists dept_manager;

Succeed.

SQL> create table dept_manager( emp_no integer not null, a integer not null, b integer not null);

Succeed.

SQL> insert into dept_manager values(10017,1,0);

1 rows affected.

SQL> insert into dept_manager values(10020,2,1);

1 rows affected.

SQL> insert into dept_manager values(10024,3,2);

1 rows affected.

SQL> commit;

Succeed.

SQL> (SELECT emp_no, sys_connect_by_path(emp_no,'/') cpath FROM DEPT_MANAGER START WITH emp_no = 10017 CONNECT BY PRIOR a = b)
  2 UNION ALL
  3 (SELECT emp_no, sys_connect_by_path(emp_no,'/') cpath FROM DEPT_MANAGER START WITH emp_no = 10020 CONNECT BY PRIOR a = b)
  4 UNION ALL
  5 (SELECT emp_no, sys_connect_by_path(emp_no,'/') cpath FROM DEPT_MANAGER START WITH emp_no = 10017 CONNECT BY level < 3)
  6 UNION ALL
  7 (SELECT emp_no, sys_connect_by_path(emp_no,'/') cpath FROM DEPT_MANAGER START WITH emp_no = 10024 CONNECT BY PRIOR a = b);

EMP_NO       CPATH                                                           
------------ ----------------------------------------------------------------
10017        /10017                                                          
10020        /10017/10020                                                    
10024        /10017/10020/10024                                              
10020        /10020                                                          
10024        /10020/10024                                                    
10017        /10017                                                          
10017        /10017/10017                                                    
10020        /10017/10020                                                    
10024        /10017/10024                                                    
10024        /10024                                                          

10 rows fetched.

SQL> 
SQL> (SELECT emp_no, sys_connect_by_path(emp_no,'/') cpath FROM DEPT_MANAGER START WITH emp_no = 10017 CONNECT BY level < 2)
  2 UNION ALL
  3 (SELECT emp_no, sys_connect_by_path(emp_no,'/') cpath FROM DEPT_MANAGER START WITH emp_no = 10020 CONNECT BY level < 2)
  4 UNION ALL
  5 (SELECT emp_no, sys_connect_by_path(emp_no,'/') cpath FROM DEPT_MANAGER START WITH emp_no = 10020 CONNECT BY PRIOR a = b)
  6 UNION ALL
  7 (SELECT emp_no, sys_connect_by_path(emp_no,'/') cpath FROM DEPT_MANAGER START WITH emp_no = 10024 CONNECT BY level < 2);

EMP_NO       CPATH                                                           
------------ ----------------------------------------------------------------
10017        /10017                                                          
10020        /10020                                                          
10020        /10020                                                          
10024        /10020/10024                                                    
10024        /10024                                                          

5 rows fetched.

SQL> 
SQL> (SELECT emp_no FROM DEPT_MANAGER START WITH emp_no = 10017 CONNECT BY PRIOR a = b)
  2 UNION
  3 (SELECT emp_no FROM DEPT_MANAGER START WITH emp_no = 10020 CONNECT BY PRIOR a = b)
  4 UNION ALL
  5 (SELECT emp_no FROM DEPT_MANAGER START WITH emp_no = 10017 CONNECT BY level < 3)
  6 UNION
  7 (SELECT emp_no FROM DEPT_MANAGER START WITH emp_no = 10024 CONNECT BY PRIOR a = b);

EMP_NO      
------------
10024       
10017       
10020       

3 rows fetched.

SQL> drop table dept_manager;

Succeed.

SQL> 
SQL> --DTS202101050NGNP8P1100: prior nest
SQL> drop table if exists t_siblings_base;

Succeed.

SQL> create table t_siblings_base(EMPNO NUMBER(4),ENAME VARCHAR2(10),MGR NUMBER(4));

Succeed.

SQL> insert into t_siblings_base values (1,'M',NULL);

1 rows affected.

SQL> insert into t_siblings_base values (4,'C',3);

1 rows affected.

SQL> insert into t_siblings_base values (3,'A',NULL);

1 rows affected.

SQL> insert into t_siblings_base values (null,'R',3);

1 rows affected.

SQL> insert into t_siblings_base values (5,'B',3);

1 rows affected.

SQL> insert into t_siblings_base values (6,'F',4);

1 rows affected.

SQL> insert into t_siblings_base values (7,'E',4);

1 rows affected.

SQL> insert into t_siblings_base values (8,'D',5);

1 rows affected.

SQL> insert into t_siblings_base values (9,'G',5);

1 rows affected.

SQL> commit;

Succeed.

SQL> select prior (3 + prior empno) from t_siblings_base connect by PRIOR empno = mgr;

CT-00601, [1:19]Sql syntax error: 'prior' operator not allowed here
SQL> select prior 3 + (prior empno), empno from t_siblings_base start with ENAME = 'A' connect by PRIOR empno = mgr;

PRIOR 3 + (PRIOR EMPNO)                  EMPNO                                   
---------------------------------------- ----------------------------------------
                                         3                                       
6                                        4                                       
7                                        6                                       
7                                        7                                       
6                                        5                                       
8                                        8                                       
8                                        9                                       
6                                                                                

8 rows fetched.

SQL> select prior case when empno+prior empno+prior empno *  prior (empno+empno) >empno then empno else empno end c2 from t_siblings_base connect by PRIOR empno = mgr order by 1,2;

CT-00601, [1:30]Sql syntax error: 'prior' operator not allowed here
SQL> select case when empno+prior empno+prior empno *  prior (empno+empno) >empno then empno else prior empno end c, sys_connect_by_path(ENAME,'->'), level from t_siblings_base start with ENAME = 'A' connect by PRIOR empno = mgr order by 3,1;

C                                        SYS_CONNECT_BY_PATH(ENAME,'->')                                  LEVEL       
---------------------------------------- ---------------------------------------------------------------- ------------
                                         ->A                                                              1           
3                                        ->A->R                                                           2           
4                                        ->A->C                                                           2           
5                                        ->A->B                                                           2           
6                                        ->A->C->F                                                        3           
7                                        ->A->C->E                                                        3           
8                                        ->A->B->D                                                        3           
9                                        ->A->B->G                                                        3           

8 rows fetched.

SQL> drop table t_siblings_base;
Succeed.

SQL> --20210115
SQL> drop table if exists temp20210115;

Succeed.

SQL> create table temp20210115(f1 int, f2 int);

Succeed.

SQL> insert into temp20210115 values(1,2),(1,1);

2 rows affected.

SQL> commit;

Succeed.

SQL> select sys_connect_by_path(1,'/') from temp20210115 connect by nocycle prior f2= f1 order by f1,f2;

SYS_CONNECT_BY_PATH(1,'/')
----------------------------------------------------------------
/1
/1
/1/1

3 rows fetched.

SQL> select sys_connect_by_path(1,'/') from temp20210115 connect by nocycle prior f2= f1 group by f1,f2;

CT-00601, [1:8]Sql syntax error: sys_connect_by_path was not allowed in query containing group by clause
SQL> select 1 from temp20210115 connect by nocycle prior f2= f1 group by f1,f2 order by sys_connect_by_path(1,'/');

CT-00601, [1:84]Sql syntax error: sys_connect_by_path was not allowed in query containing group by clause
SQL> select count(*) from temp20210115 connect by nocycle prior f2= f1 order by sys_connect_by_path(1,'/');

COUNT(*)
--------------------
3

1 rows fetched.

SQL> select count(*),sys_connect_by_path(1,'/') from temp20210115 connect by nocycle prior f2= f1;

CT-00609, Expression not in group list
SQL> drop table temp20210115;

Succeed.

SQL>
SQL> drop table if exists t_or_expansion_1;

Succeed.

SQL> drop table if exists t_or_expansion_2;

Succeed.

SQL> drop table if exists "TBL_USER_GROUP";

Succeed.

SQL> CREATE TABLE "TBL_USER_GROUP"
  2 (
  3   "USER_ID" VARCHAR(36 BYTE) NOT NULL,
  4   "AUTH_GROUP_ID" VARCHAR(36 BYTE) NOT NULL
  5 );

Succeed.

SQL> INSERT INTO "TBL_USER_GROUP" ("USER_ID","AUTH_GROUP_ID") values ('20','9140679012041439197');

1 rows affected.

SQL> INSERT INTO "TBL_USER_GROUP" ("USER_ID","AUTH_GROUP_ID") values ('20','8925031671308011985');

1 rows affected.

SQL> INSERT INTO "TBL_USER_GROUP" ("USER_ID","AUTH_GROUP_ID") values ('20','7618566365643065757');

1 rows affected.

SQL> INSERT INTO "TBL_USER_GROUP" ("USER_ID","AUTH_GROUP_ID") values ('20','2367038580984590784');

1 rows affected.

SQL> INSERT INTO "TBL_USER_GROUP" ("USER_ID","AUTH_GROUP_ID") values ('111','1329901465855408487');

1 rows affected.

SQL> INSERT INTO "TBL_USER_GROUP" ("USER_ID","AUTH_GROUP_ID") values ('111','9140679012041439197');

1 rows affected.

SQL> INSERT INTO "TBL_USER_GROUP" ("USER_ID","AUTH_GROUP_ID") values ('111','8925031671308011985');

1 rows affected.

SQL> INSERT INTO "TBL_USER_GROUP" ("USER_ID","AUTH_GROUP_ID") values ('112','9140679012041439197');

1 rows affected.

SQL> INSERT INTO "TBL_USER_GROUP" ("USER_ID","AUTH_GROUP_ID") values ('112','8925031671308011985');

1 rows affected.

SQL> INSERT INTO "TBL_USER_GROUP" ("USER_ID","AUTH_GROUP_ID") values ('113','9140679012041439197');

1 rows affected.

SQL> INSERT INTO "TBL_USER_GROUP" ("USER_ID","AUTH_GROUP_ID") values ('113','8925031671308011985');

1 rows affected.

SQL> COMMIT;

Succeed.

SQL> create table t_or_expansion_1(f1 int,f2 int,f3 number,f4 varchar(40) not null,f5 timestamp);

Succeed.

SQL> insert into t_or_expansion_1 values(1,1,100.123,'abc',to_timestamp(to_char('1800-03-05 10:51:47'),'yyyy-mm-dd hh24:mi:ss'));

1 rows affected.

SQL> insert into t_or_expansion_1 values(10,null,null,'M',null);

1 rows affected.

SQL> create table t_or_expansion_2(f1 int,f2 int,f3 number,f4 varchar(10) not null,f5 timestamp);

Succeed.

SQL> insert into t_or_expansion_2 values(1,1,100.123,'abc',to_timestamp(to_char('1801-03-05 10:51:47'),'yyyy-mm-dd hh24:mi:ss'));

1 rows affected.

SQL> Declare
  2 i int;
  3 j int;
  4 k timestamp;
  5 begin
  6  i := 1;
  7 loop
  8  j := 1;
  9  loop
 10     k := ADD_MONTHS(to_timestamp(to_char('1800-03-05 10:51:47'),'yyyy-mm-dd hh24:mi:ss'), j);
 11     insert into t_or_expansion_1 values(i, j, 100.123 + j, 'abc' || j, k);
 12     j := j + 1;
 13  exit when j > 10;
 14  end loop;
 15 i := i+1;
 16  exit when i>5;
 17 end loop;
 18  commit;
 19  end;
 20 /

PL/SQL procedure successfully completed.

SQL>
SQL> create index ind_or_expand_11 on t_or_expansion_1(f1, f2);

Succeed.

SQL> analyze table t_or_expansion_1 compute statistics;

Succeed.

SQL>
SQL> SELECT
  2   1
  3 FROM
  4   (TBL_USER_GROUP AS REF_0)
  5     INNER JOIN (T_OR_EXPANSION_1 AS REF_1)
  6     ON (REF_1.F5 <= REF_1.F5)
  7 START WITH ((SELECT MAX(F5) FROM T_OR_EXPANSION_2) != CASE WHEN
  8           CAST('397CE349D5F58FC1' AS VARBINARY(100)) BETWEEN
  9           '0' AND
 10           NULL
 11         THEN
 12           REF_1.F5
 13         ELSE
 14           REF_1.F5
 15         END)
 16   CONNECT BY  PRIOR REF_1.F1 = REF_1.F2   ;

CT-00660, There was an infinite loop in CONNECT BY execution
SQL> drop table t_or_expansion_1;

Succeed.

SQL> drop table t_or_expansion_2;

Succeed.

SQL> drop table "TBL_USER_GROUP";

Succeed.

SQL> 
SQL> drop table if exists connect_by_mtrl_t;

Succeed.

SQL> create table connect_by_mtrl_t(c_id int, c_d_id int, c_first varchar(20), c_balance number(12,3));

Succeed.

SQL> insert into connect_by_mtrl_t values(1,2,'test1',123.456);

1 rows affected.

SQL> insert into connect_by_mtrl_t values(2,4,'test2',345.123);

1 rows affected.

SQL> insert into connect_by_mtrl_t values(3,6,'test3',9.201);

1 rows affected.

SQL> insert into connect_by_mtrl_t values(4,8,'test4',33.333);

1 rows affected.

SQL> insert into connect_by_mtrl_t values(5,10,'test5',22.222);

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> select
  2   subq_0.c1 as c0
  3 from
  4   (select
  5         cast('2021-05-08 23:29:54' as timestamp(6) with local time zone) as c0,
  6         case when ref_0.c_balance < 20 then null else null end as c1
  7       from
  8         (select c_id, c_d_id, c_balance from connect_by_mtrl_t order by 1 limit 5) as ref_0
  9       where true
 10     ) as subq_0
 11 connect by subq_0.c1 = prior subq_0.c0
 12 order by 1 desc;

C0
--
  
  
  
  
  

5 rows fetched.

SQL> drop table connect_by_mtrl_t;
Succeed.

SQL> 
SQL> drop table if exists t_con_by_strength_base;

Succeed.

SQL> create table t_con_by_strength_base(EMPNO NUMBER(4),ENAME VARCHAR2(10),MGR NUMBER(4));

Succeed.

SQL> insert into t_con_by_strength_base values (1,'M',NULL);

1 rows affected.

SQL> insert into t_con_by_strength_base values (2,'N',NULL);

1 rows affected.

SQL> insert into t_con_by_strength_base values (3,'A',NULL);

1 rows affected.

SQL> insert into t_con_by_strength_base values (4,'C',3);

1 rows affected.

SQL> insert into t_con_by_strength_base values (null,'C',3);

1 rows affected.

SQL> insert into t_con_by_strength_base values (5,'B',3);

1 rows affected.

SQL> insert into t_con_by_strength_base values (6,'F',4);

1 rows affected.

SQL> insert into t_con_by_strength_base values (7,'E',4);

1 rows affected.

SQL> insert into t_con_by_strength_base values (8,'D',5);

1 rows affected.

SQL> insert into t_con_by_strength_base values (9,'G',5);

1 rows affected.

SQL> insert into t_con_by_strength_base values (10,'H',5);

1 rows affected.

SQL> insert into t_con_by_strength_base values (12,'I',2);

1 rows affected.

SQL> insert into t_con_by_strength_base values (13,'I',2);

1 rows affected.

SQL> insert into t_con_by_strength_base values (14,'J',15);

1 rows affected.

SQL> commit;

Succeed.

SQL> create index idx_con_by_strength_base_01 on t_con_by_strength_base(EMPNO);

Succeed.

SQL> create index idx_con_by_strength_base_02 on t_con_by_strength_base(EMPNO,ENAME);

Succeed.

SQL> create index idx_con_by_strength_base_03 on t_con_by_strength_base(MGR);

Succeed.

SQL> 
SQL> select t2.EMPNO,t3.EMPNO from t_con_by_strength_base t1 left join t_con_by_strength_base t2 on t1.EMPNO=t2.EMPNO full join t_con_by_strength_base t3 on to_char(t1.EMPNO)=to_char(t3.EMPNO) inner join t_con_by_strength_base t4 on t2.EMPNO>t4.MGR+4
  2 start with t2.EMPNO=14 connect by nocycle t1.MGR not in(select t3.EMPNO+1 from dual) order by 1;

CT-00621, Too many material result sets
SQL> drop table t_con_by_strength_base;
Succeed.




