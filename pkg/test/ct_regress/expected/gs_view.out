

SQL> conn / as  sysdba

connected.

SQL> drop user if exists c##core_user2 cascade;

Succeed.

SQL> create user c##core_user2 identified by Cantian_234;

Succeed.

SQL> grant connect ,create table , create view, create trigger to c##core_user2;

Succeed.

SQL> drop user if exists c##core_user cascade;

Succeed.

SQL> create user c##core_user identified by Cantian_234;

Succeed.

SQL> grant connect ,create table , create view, create trigger to c##core_user;

Succeed.

SQL> conn  c##core_user/Cantian_234@127.0.0.1:1611

connected.

SQL> create table pri_tab(pri_id int primary key );

Succeed.

SQL> create table ref_tab(ref_id int REFERENCES pri_tab(pri_id)  );

Succeed.

SQL> select   CHILD_OWNER,CHILD_TABLE,CHILD_COLS,PARENT_OWNER,PARENT_TABLE,PARENT_COLS from MY_FOREIGN_DEPENDENCY;

CHILD_OWNER                                                      CHILD_TABLE                                                      CHILD_COLS                                                       PARENT_OWNER                                                     PARENT_TABLE                                                     PARENT_COLS
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
C##CORE_USER                                                     REF_TAB                                                          REF_ID                                                           C##CORE_USER                                                     PRI_TAB                                                          PRI_ID

1 rows fetched.

SQL> create table pri_tab1(pri_id int primary key );

Succeed.

SQL> grant REFERENCES on pri_tab1 to c##core_user2;

Succeed.

SQL> conn  c##core_user2/Cantian_234@127.0.0.1:1611

connected.

SQL> create table ref_tab1(ref_id int REFERENCES c##core_user.pri_tab1(pri_id)  );

Succeed.

SQL> select   CHILD_OWNER,CHILD_TABLE,CHILD_COLS,PARENT_OWNER,PARENT_TABLE,PARENT_COLS from MY_FOREIGN_DEPENDENCY;

CHILD_OWNER                                                      CHILD_TABLE                                                      CHILD_COLS                                                       PARENT_OWNER                                                     PARENT_TABLE                                                     PARENT_COLS
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
C##CORE_USER2                                                    REF_TAB1                                                         REF_ID                                                           C##CORE_USER                                                     PRI_TAB1                                                         PRI_ID

1 rows fetched.

SQL> conn / as sysdba

connected.

SQL> drop  table if exists table_pri1 cascade constraints;

Succeed.

SQL> create table table_pri1(priid int, priid2 int, priid3 int, name char(10));

Succeed.

SQL> alter table table_pri1 add constraint test_cons primary key(priid, priid2, priid3);

Succeed.

SQL> grant REFERENCES on table_pri1 to c##core_user2;

Succeed.

SQL> conn  c##core_user2/Cantian_234@127.0.0.1:1611

connected.

SQL> drop  table if exists ref_tab1 cascade constraints;

Succeed.

SQL> create table table_ref1(refid int, refid2 int, refid3 int, name char(10));

Succeed.

SQL> alter table table_ref1 add constraint test_cons_ref foreign key (refid, refid2, refid3)  REFERENCES sys.table_pri1(priid, priid2, priid3);

Succeed.

SQL> select   CHILD_OWNER,CHILD_TABLE,CHILD_COLS,PARENT_OWNER,PARENT_TABLE,PARENT_COLS from MY_FOREIGN_DEPENDENCY;

CHILD_OWNER                                                      CHILD_TABLE                                                      CHILD_COLS                                                       PARENT_OWNER                                                     PARENT_TABLE                                                     PARENT_COLS
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
C##CORE_USER2                                                    TABLE_REF1                                                       REFID, REFID2, REFID3                                            SYS                                                              TABLE_PRI1                                                       PRIID, PRIID2, PRIID3

1 rows fetched.

SQL> conn / as sysdba

connected.

SQL> drop  table if exists table_pri1 cascade constraints;

Succeed.

SQL> drop user if exists c##core_user2 cascade;

Succeed.

SQL> drop user if exists c##core_user cascade;

Succeed.

SQL> conn / as sysdba

connected.

SQL> drop user if exists test_column_user1 cascade;

Succeed.

SQL> create user test_column_user1 identified by Cantian_234;

Succeed.

SQL> grant connect, create table, create view to test_column_user1;

Succeed.

SQL> conn test_column_user1/Cantian_234@127.0.0.1:1611

connected.

SQL> create table test_column_type_tab(id int, name char(10));

Succeed.

SQL> create view view_test_column_type_tab as  select * from test_column_type_tab;

Succeed.

SQL> select table_name, column_name from USER_TAB_COLUMNS;

TABLE_NAME                                                       COLUMN_NAME
---------------------------------------------------------------- ----------------------------------------------------------------
TEST_COLUMN_TYPE_TAB                                             ID
TEST_COLUMN_TYPE_TAB                                             NAME
VIEW_TEST_COLUMN_TYPE_TAB                                        ID
VIEW_TEST_COLUMN_TYPE_TAB                                        NAME

4 rows fetched.

SQL> select table_name, column_name from USER_TAB_COLUMNS;

TABLE_NAME                                                       COLUMN_NAME
---------------------------------------------------------------- ----------------------------------------------------------------
TEST_COLUMN_TYPE_TAB                                             ID
TEST_COLUMN_TYPE_TAB                                             NAME
VIEW_TEST_COLUMN_TYPE_TAB                                        ID
VIEW_TEST_COLUMN_TYPE_TAB                                        NAME

4 rows fetched.

SQL> conn / as sysdba

connected.

SQL> drop user if exists test_column_user1 cascade;

Succeed.

SQL> conn / as  sysdba

connected.

SQL> drop user if exists c##core_user cascade;

Succeed.

SQL> create user c##core_user identified by Cantian_234;

Succeed.

SQL> grant connect ,create table , create view to c##core_user;

Succeed.

SQL> conn c##core_user/Cantian_234@127.0.0.1:1611

connected.

SQL> create table t1(id int,name VARCHAR2(10));

Succeed.

SQL> create view core_user_view1 as select * from t1;

Succeed.

SQL> select COLUMN_NAME,CHAR_LENGTH from DB_tab_columns where TABLE_NAME = 'CORE_USER_VIEW1';

COLUMN_NAME                                                      CHAR_LENGTH
---------------------------------------------------------------- ------------
ID                                                               0
NAME                                                             10

2 rows fetched.

SQL> select COLUMN_NAME,CHAR_LENGTH from all_tab_columns where TABLE_NAME = 'CORE_USER_VIEW1';

COLUMN_NAME                                                      CHAR_LENGTH
---------------------------------------------------------------- ------------
ID                                                               0
NAME                                                             10

2 rows fetched.

SQL> select COLUMN_NAME,CHAR_LENGTH from my_tab_columns where TABLE_NAME = 'CORE_USER_VIEW1';

COLUMN_NAME                                                      CHAR_LENGTH
---------------------------------------------------------------- ------------
ID                                                               0
NAME                                                             10

2 rows fetched.

SQL> select COLUMN_NAME,CHAR_LENGTH from user_tab_columns where TABLE_NAME = 'CORE_USER_VIEW1';

COLUMN_NAME                                                      CHAR_LENGTH
---------------------------------------------------------------- ------------
ID                                                               0
NAME                                                             10

2 rows fetched.

SQL> conn / as sysdba

connected.

SQL> select COLUMN_NAME,CHAR_LENGTH from adm_tab_columns where TABLE_NAME = 'CORE_USER_VIEW1';

COLUMN_NAME                                                      CHAR_LENGTH
---------------------------------------------------------------- ------------
ID                                                               0
NAME                                                             10

2 rows fetched.

SQL> select COLUMN_NAME,CHAR_LENGTH from dba_tab_columns where TABLE_NAME = 'CORE_USER_VIEW1';

COLUMN_NAME                                                      CHAR_LENGTH
---------------------------------------------------------------- ------------
ID                                                               0
NAME                                                             10

2 rows fetched.

SQL> conn / as  sysdba

connected.

SQL> drop user if exists c##core_user cascade;

Succeed.

SQL> conn / as sysdba

connected.

SQL> drop user if exists dbtabcolsuser cascade;

Succeed.

SQL> drop user if exists dbtabcolsuser3 cascade;

Succeed.

SQL> create user dbtabcolsuser identified by pwd102_pwd;

Succeed.

SQL> create user dbtabcolsuser3 identified by pwd102_pwd;

Succeed.

SQL> grant connect , resource  to dbtabcolsuser;

Succeed.

SQL> grant create table to dbtabcolsuser;

Succeed.

SQL> grant execute on DBE_MASK_DATA to dbtabcolsuser;

Succeed.

SQL> grant unlimited tablespace to dbtabcolsuser;

Succeed.

SQL> grant connect , resource to dbtabcolsuser3;

Succeed.

SQL> grant select any table  , create any table  to dbtabcolsuser3;

Succeed.

SQL> grant execute on DBE_DIAGNOSE  to dbtabcolsuser3;

Succeed.

SQL> conn dbtabcolsuser3/pwd102_pwd@127.0.0.1:1611

connected.

SQL> create table dbtabcolsuser.TT3 (id DOUBLE, id2 DOUBLE, id3 DOUBLE, id4 DOUBLE, id5 DOUBLE, id6 DOUBLE);

Succeed.

SQL> create table dbtabcolsuser.TT1 (id DOUBLE, id2 DOUBLE, id3 DOUBLE, id4 DOUBLE, id5 DOUBLE, id6 DOUBLE);

Succeed.

SQL> select count(*) from db_tab_cols where owner = 'DBTABCOLSUSER';

COUNT(*)
--------------------
12

1 rows fetched.

SQL> select count(*) from all_tab_cols where owner = 'DBTABCOLSUSER';

COUNT(*)
--------------------
12

1 rows fetched.

SQL> select DBE_DIAGNOSE.has_obj_privs('dbtabcolsuser3', 'dbtabcolsuser', 'TT3', 'TABLE') has_privs from dual;

HAS_PRIVS
---------
TRUE

1 rows fetched.

SQL> select DBE_DIAGNOSE.has_obj_privs('dbtabcolsuser3', 'dbtabcolsuser', 'tt3', 'TABLE') has_privs from dual;

HAS_PRIVS
---------
TRUE

1 rows fetched.

SQL> select DBE_DIAGNOSE.has_obj_privs('dbtabcolsuser3', 'dbtabcolsuser', "tt3", 'TABLE') has_privs from dual;

CT-00601, [1:70]Sql syntax error: invalid column name 'tt3'
SQL> conn / as sysdba

connected.

SQL> drop user if exists dbtabcolsuser cascade;

Succeed.

SQL> drop user if exists dbtabcolsuser3 cascade;

Succeed.

SQL> conn / as  sysdba

connected.

SQL> drop user if exists core_user cascade;

Succeed.

SQL> create user core_user identified by Cantian_234;

Succeed.

SQL> alter system set ENABLE_ACCESS_DC = FALSE;

Succeed.

SQL> grant connect ,create table , create view to core_user;

Succeed.

SQL> drop table if exists table_core1;

Succeed.

SQL> drop table if exists table_core2;

Succeed.

SQL> create table table_core1(id int);

Succeed.

SQL> create table table_core2(id int);

Succeed.

SQL> conn  core_user/Cantian_234@127.0.0.1:1611

connected.

SQL> create view view_tab1 as select id from sys.table_core1 union select id from sys.table_core2;

CT-01001, Permissions were insufficient
SQL> create table table_core1(id int);

Succeed.

SQL> create table table_core2(id int);

Succeed.

SQL> create view view_tab1 as select id from table_core1 union select id from table_core2;

Succeed.

SQL> conn / as  sysdba

connected.

SQL> drop user if exists core_user cascade;

Succeed.

SQL> alter system set ENABLE_ACCESS_DC = TRUE;

Succeed.

SQL> drop table if exists table_core1;

Succeed.

SQL> drop table if exists table_core2;

Succeed.

SQL> -- object privs
SQL> conn / as sysdba

connected.

SQL> drop user if exists all_obj_user cascade;

Succeed.

SQL> drop user if exists all_obj_user1 cascade;

Succeed.

SQL> drop user if exists all_obj_user2 cascade;

Succeed.

SQL> create user all_obj_user identified by Cantian_234;

Succeed.

SQL> grant connect,  create table to all_obj_user;

Succeed.

SQL> create user all_obj_user1 identified by Cantian_234;

Succeed.

SQL> grant connect,  create table to all_obj_user1;

Succeed.

SQL> grant dba to all_obj_user1;

Succeed.

SQL> create user all_obj_user2 identified by Cantian_234;

Succeed.

SQL> grant connect,  create table to all_obj_user2;

Succeed.

SQL> grant dba to all_obj_user2;

Succeed.

SQL> conn all_obj_user1/Cantian_234@127.0.0.1:1611

connected.

SQL> create table all_obj_user1_tt1 (id int);

Succeed.

SQL> create table all_obj_user1_tt2 (id int);

Succeed.

SQL> grant select on all_obj_user1_tt1 to all_obj_user;

Succeed.

SQL> grant insert on all_obj_user1_tt2 to all_obj_user;

Succeed.

SQL> conn all_obj_user2/Cantian_234@127.0.0.1:1611

connected.

SQL> create table all_obj_user2_tt1 (id int);

Succeed.

SQL> create table all_obj_user2_tt2 (id int);

Succeed.

SQL> conn all_obj_user/Cantian_234@127.0.0.1:1611

connected.

SQL> create table all_obj_user_tt1 ( name int);

Succeed.

SQL> conn / as sysdba

connected.

SQL> alter system set ENABLE_ACCESS_DC=TRUE;

Succeed.

SQL> conn all_obj_user/Cantian_234@127.0.0.1:1611

connected.

SQL> select owner,table_name  from DB_tables where owner like 'ALL_OBJ_USER%' or table_name = 'SYS_AUDIT'  order by 1,2;

OWNER                                                            TABLE_NAME
---------------------------------------------------------------- ----------------------------------------------------------------
ALL_OBJ_USER                                                     ALL_OBJ_USER_TT1
ALL_OBJ_USER1                                                    ALL_OBJ_USER1_TT1
ALL_OBJ_USER1                                                    ALL_OBJ_USER1_TT2

3 rows fetched.

SQL> select owner,table_name  from ALL_tables where owner like 'ALL_OBJ_USER%' or table_name = 'SYS_AUDIT' order by 1,2;

OWNER                                                            TABLE_NAME
---------------------------------------------------------------- ----------------------------------------------------------------
ALL_OBJ_USER                                                     ALL_OBJ_USER_TT1
ALL_OBJ_USER1                                                    ALL_OBJ_USER1_TT1
ALL_OBJ_USER1                                                    ALL_OBJ_USER1_TT2

3 rows fetched.

SQL> conn / as sysdba

connected.

SQL> alter system set ENABLE_ACCESS_DC=FALSE;

Succeed.

SQL> conn all_obj_user/Cantian_234@127.0.0.1:1611

connected.

SQL> select owner,table_name  from DB_tables where owner like 'ALL_OBJ_USER%' or table_name = 'SYS_AUDIT' order by 1,2;

OWNER                                                            TABLE_NAME
---------------------------------------------------------------- ----------------------------------------------------------------
ALL_OBJ_USER                                                     ALL_OBJ_USER_TT1
ALL_OBJ_USER1                                                    ALL_OBJ_USER1_TT1
ALL_OBJ_USER1                                                    ALL_OBJ_USER1_TT2

3 rows fetched.

SQL> select owner,table_name  from ALL_tables where owner like 'ALL_OBJ_USER%' or table_name = 'SYS_AUDIT' order by 1,2;

OWNER                                                            TABLE_NAME
---------------------------------------------------------------- ----------------------------------------------------------------
ALL_OBJ_USER                                                     ALL_OBJ_USER_TT1
ALL_OBJ_USER1                                                    ALL_OBJ_USER1_TT1        
ALL_OBJ_USER1                                                    ALL_OBJ_USER1_TT2

3 rows fetched.

SQL> -- select any table
SQL> conn / as sysdba

connected.

SQL> drop user if exists all_obj_user cascade;

Succeed.

SQL> drop user if exists all_obj_user1 cascade;

Succeed.

SQL> drop user if exists all_obj_user2 cascade;

Succeed.

SQL> create user all_obj_user identified by Cantian_234;

Succeed.

SQL> grant connect,  create table,select any table to all_obj_user;

Succeed.

SQL> create user all_obj_user1 identified by Cantian_234;

Succeed.

SQL> grant connect to all_obj_user1;

Succeed.

SQL> grant dba to all_obj_user1;

Succeed.

SQL> create user all_obj_user2 identified by Cantian_234;

Succeed.

SQL> grant connect to all_obj_user2;

Succeed.

SQL> grant dba to all_obj_user2;

Succeed.

SQL> conn all_obj_user1/Cantian_234@127.0.0.1:1611

connected.

SQL> create table all_obj_user1_tt1 (id int);

Succeed.

SQL> create table all_obj_user1_tt2 (id int);

Succeed.

SQL> conn all_obj_user2/Cantian_234@127.0.0.1:1611

connected.

SQL> create table all_obj_user2_tt1 (id int);

Succeed.

SQL> create table all_obj_user2_tt2 (id int);

Succeed.

SQL> conn all_obj_user/Cantian_234@127.0.0.1:1611

connected.

SQL> create table all_obj_user_tt1 ( name int);

Succeed.

SQL> conn / as sysdba

connected.

SQL> drop table if exists sys_t1;

Succeed.

SQL> create table sys_t1(id int);

Succeed.

SQL> alter system set ENABLE_ACCESS_DC=TRUE;

Succeed.

SQL> conn all_obj_user/Cantian_234@127.0.0.1:1611

connected.

SQL> select owner,table_name  from DB_tables where owner like 'ALL_OBJ_USER%' or table_name = 'SYS_AUDIT' order by 1,2;

OWNER                                                            TABLE_NAME
---------------------------------------------------------------- ----------------------------------------------------------------
ALL_OBJ_USER                                                     ALL_OBJ_USER_TT1
ALL_OBJ_USER1                                                    ALL_OBJ_USER1_TT1
ALL_OBJ_USER1                                                    ALL_OBJ_USER1_TT2
ALL_OBJ_USER2                                                    ALL_OBJ_USER2_TT1
ALL_OBJ_USER2                                                    ALL_OBJ_USER2_TT2
SYS                                                              SYS_AUDIT

6 rows fetched.

SQL> select owner,table_name  from ALL_tables where owner like 'ALL_OBJ_USER%' or table_name = 'SYS_AUDIT' order by 1,2;

OWNER                                                            TABLE_NAME
---------------------------------------------------------------- ----------------------------------------------------------------
ALL_OBJ_USER                                                     ALL_OBJ_USER_TT1
ALL_OBJ_USER1                                                    ALL_OBJ_USER1_TT1
ALL_OBJ_USER1                                                    ALL_OBJ_USER1_TT2
ALL_OBJ_USER2                                                    ALL_OBJ_USER2_TT1
ALL_OBJ_USER2                                                    ALL_OBJ_USER2_TT2
SYS                                                              SYS_AUDIT

6 rows fetched.

SQL> conn / as sysdba

connected.

SQL> alter system set ENABLE_ACCESS_DC=FALSE;

Succeed.

SQL> conn all_obj_user/Cantian_234@127.0.0.1:1611

connected.

SQL> select owner,table_name  from DB_tables where owner like 'ALL_OBJ_USER%' or table_name = 'SYS_AUDIT' order by 1,2;

OWNER                                                            TABLE_NAME
---------------------------------------------------------------- ----------------------------------------------------------------
ALL_OBJ_USER                                                     ALL_OBJ_USER_TT1
ALL_OBJ_USER1                                                    ALL_OBJ_USER1_TT1
ALL_OBJ_USER1                                                    ALL_OBJ_USER1_TT2
ALL_OBJ_USER2                                                    ALL_OBJ_USER2_TT1
ALL_OBJ_USER2                                                    ALL_OBJ_USER2_TT2

5 rows fetched.

SQL> select owner,table_name  from ALL_tables where owner like 'ALL_OBJ_USER%' or table_name = 'SYS_AUDIT' order by 1,2;

OWNER                                                            TABLE_NAME
---------------------------------------------------------------- ----------------------------------------------------------------
ALL_OBJ_USER                                                     ALL_OBJ_USER_TT1
ALL_OBJ_USER1                                                    ALL_OBJ_USER1_TT1
ALL_OBJ_USER1                                                    ALL_OBJ_USER1_TT2
ALL_OBJ_USER2                                                    ALL_OBJ_USER2_TT1
ALL_OBJ_USER2                                                    ALL_OBJ_USER2_TT2

5 rows fetched.

SQL> -- obj privs role
SQL> conn / as sysdba

connected.

SQL> drop user if exists all_obj_user cascade;

Succeed.

SQL> drop user if exists all_obj_user2 cascade;

Succeed.

SQL> drop user if exists all_obj_user1 cascade;

Succeed.

SQL> create user all_obj_user identified by Cantian_234;

Succeed.

SQL> grant connect,  create table  to all_obj_user;

Succeed.

SQL> create user all_obj_user1 identified by Cantian_234;

Succeed.

SQL> grant connect,create role ,create table  to all_obj_user1;

Succeed.

SQL> grant dba to all_obj_user1;

Succeed.

SQL> create user all_obj_user2 identified by Cantian_234;

Succeed.

SQL> grant connect ,create role ,create table to all_obj_user2;

Succeed.

SQL> conn all_obj_user2/Cantian_234@127.0.0.1:1611

connected.

SQL> create table tt1 (id int);

Succeed.

SQL> create role all_obj_role2;

Succeed.

SQL> grant select on tt1 to all_obj_role2;

Succeed.

SQL> grant all_obj_role2 to all_obj_user;

Succeed.

SQL> conn all_obj_user1/Cantian_234@127.0.0.1:1611

connected.

SQL> create table tt1 (id int);

Succeed.

SQL> create role all_obj_role1;

Succeed.

SQL> grant select on tt1 to all_obj_role1;

Succeed.

SQL> grant all_obj_role1 to all_obj_user;

Succeed.

SQL> conn all_obj_user/Cantian_234@127.0.0.1:1611

connected.

SQL> create table tt1 ( name int);

Succeed.

SQL> conn / as sysdba

connected.

SQL> alter system set ENABLE_ACCESS_DC=FALSE;

Succeed.

SQL> conn all_obj_user/Cantian_234@127.0.0.1:1611

connected.

SQL> select owner,table_name  from DB_tables where owner like 'ALL_OBJ_USER%' or table_name = 'SYS_AUDIT' order by 1,2;

OWNER                                                            TABLE_NAME
---------------------------------------------------------------- ----------------------------------------------------------------
ALL_OBJ_USER                                                     TT1
ALL_OBJ_USER1                                                    TT1
ALL_OBJ_USER2                                                    TT1

3 rows fetched.

SQL> select owner,table_name  from ALL_tables where owner like 'ALL_OBJ_USER%' or table_name = 'SYS_AUDIT' order by 1,2;

OWNER                                                            TABLE_NAME
---------------------------------------------------------------- ----------------------------------------------------------------
ALL_OBJ_USER                                                     TT1
ALL_OBJ_USER1                                                    TT1
ALL_OBJ_USER2                                                    TT1

3 rows fetched.

SQL> -- select any    role
SQL> conn / as sysdba

connected.

SQL> drop role all_obj_role1;

Succeed.

SQL> drop role all_obj_role2;

Succeed.

SQL> drop user if exists all_obj_user cascade;

Succeed.

SQL> drop user if exists all_obj_user1 cascade;

Succeed.

SQL> drop user if exists all_obj_user2 cascade;

Succeed.

SQL> create role all_obj_role_sys ;

Succeed.

SQL> grant select any table to all_obj_role_sys;

Succeed.

SQL> create user all_obj_user identified by Cantian_234;

Succeed.

SQL> grant connect,  create table to all_obj_user;

Succeed.

SQL> grant all_obj_role_sys to all_obj_user;

Succeed.

SQL> create user all_obj_user1 identified by Cantian_234;

Succeed.

SQL> grant connect to all_obj_user1;

Succeed.

SQL> grant dba to all_obj_user1;

Succeed.

SQL> create user all_obj_user2 identified by Cantian_234;

Succeed.

SQL> grant connect to all_obj_user2;

Succeed.

SQL> grant dba to all_obj_user2;

Succeed.

SQL> conn all_obj_user1/Cantian_234@127.0.0.1:1611

connected.

SQL> create table all_obj_user1_tt1 (id int);

Succeed.

SQL> create table all_obj_user1_tt2 (id int);

Succeed.

SQL> conn all_obj_user2/Cantian_234@127.0.0.1:1611

connected.

SQL> create table all_obj_user2_tt1 (id int);

Succeed.

SQL> create table all_obj_user2_tt2 (id int);

Succeed.

SQL> conn all_obj_user/Cantian_234@127.0.0.1:1611

connected.

SQL> create table all_obj_user_tt1 ( name int);

Succeed.

SQL> conn / as sysdba

connected.

SQL> alter system set ENABLE_ACCESS_DC=TRUE;

Succeed.

SQL> conn all_obj_user/Cantian_234@127.0.0.1:1611

connected.

SQL> select owner,table_name  from DB_tables where owner like 'ALL_OBJ_USER%' or table_name = 'SYS_AUDIT' order by 1,2;

OWNER                                                            TABLE_NAME
---------------------------------------------------------------- ----------------------------------------------------------------
ALL_OBJ_USER                                                     ALL_OBJ_USER_TT1
ALL_OBJ_USER1                                                    ALL_OBJ_USER1_TT1
ALL_OBJ_USER1                                                    ALL_OBJ_USER1_TT2
ALL_OBJ_USER2                                                    ALL_OBJ_USER2_TT1
ALL_OBJ_USER2                                                    ALL_OBJ_USER2_TT2
SYS                                                              SYS_AUDIT

6 rows fetched.

SQL> select owner,table_name  from ALL_tables where owner like 'ALL_OBJ_USER%' or table_name = 'SYS_AUDIT' order by 1,2;

OWNER                                                            TABLE_NAME
---------------------------------------------------------------- ----------------------------------------------------------------
ALL_OBJ_USER                                                     ALL_OBJ_USER_TT1
ALL_OBJ_USER1                                                    ALL_OBJ_USER1_TT1
ALL_OBJ_USER1                                                    ALL_OBJ_USER1_TT2
ALL_OBJ_USER2                                                    ALL_OBJ_USER2_TT1
ALL_OBJ_USER2                                                    ALL_OBJ_USER2_TT2
SYS                                                              SYS_AUDIT

6 rows fetched.

SQL> conn / as sysdba

connected.

SQL> alter system set ENABLE_ACCESS_DC=FALSE;

Succeed.

SQL> conn all_obj_user/Cantian_234@127.0.0.1:1611

connected.

SQL> select owner,table_name  from DB_tables where owner like 'ALL_OBJ_USER%' or table_name = 'SYS_AUDIT' order by 1,2;

OWNER                                                            TABLE_NAME
---------------------------------------------------------------- ----------------------------------------------------------------
ALL_OBJ_USER                                                     ALL_OBJ_USER_TT1
ALL_OBJ_USER1                                                    ALL_OBJ_USER1_TT1
ALL_OBJ_USER1                                                    ALL_OBJ_USER1_TT2
ALL_OBJ_USER2                                                    ALL_OBJ_USER2_TT1
ALL_OBJ_USER2                                                    ALL_OBJ_USER2_TT2

5 rows fetched.

SQL> select owner,table_name  from ALL_tables where owner like 'ALL_OBJ_USER%' or table_name = 'SYS_AUDIT' order by 1,2;

OWNER                                                            TABLE_NAME
---------------------------------------------------------------- ----------------------------------------------------------------
ALL_OBJ_USER                                                     ALL_OBJ_USER_TT1
ALL_OBJ_USER1                                                    ALL_OBJ_USER1_TT1
ALL_OBJ_USER1                                                    ALL_OBJ_USER1_TT2
ALL_OBJ_USER2                                                    ALL_OBJ_USER2_TT1
ALL_OBJ_USER2                                                    ALL_OBJ_USER2_TT2

5 rows fetched.

SQL> conn / as sysdba

connected.

SQL> drop role all_obj_role_sys;

Succeed.

SQL> drop user if exists all_obj_user cascade;

Succeed.

SQL> drop user if exists all_obj_user1 cascade;

Succeed.

SQL> drop user if exists all_obj_user2 cascade;

Succeed.

SQL> alter system set ENABLE_ACCESS_DC=TRUE;

Succeed.

SQL> --TEST VIEW
SQL> conn / as sysdba

connected.

SQL> drop user if exists A cascade;

Succeed.

SQL> create user A identified by Cantian_234;

Succeed.

SQL> grant connect to A;

Succeed.

SQL> drop user if exists B cascade;

Succeed.

SQL> create user B identified by Cantian_234;

Succeed.

SQL> grant all to B;

Succeed.

SQL> conn B/Cantian_234@127.0.0.1:1611

connected.

SQL> drop table if exists sections;

Succeed.

SQL> CREATE TABLE B.sections
  2 (
  3 section_id NUMBER(4) not null,
  4 section_name VARCHAR2(30),
  5 manager_id NUMBER(6),
  6 place_id NUMBER(4)
  7 ) ;

Succeed.

SQL> insert into B.sections (section_id, section_name, manager_id, place_id) values (10, 'Administration', 200, 1700);

1 rows affected.

SQL> commit;

Succeed.

SQL> drop view if exists view1;

Succeed.

SQL> CREATE VIEW view1(section_id, section_name) as select SECTION_ID,SECTION_NAME from sections;

Succeed.

SQL> conn / as sysdba

connected.

SQL> grant select on B.view1 to A;

Succeed.

SQL> conn A/Cantian_234@127.0.0.1:1611

connected.

SQL> select * from B.view1;

SECTION_ID                               SECTION_NAME
---------------------------------------- ------------------------------
10                                       Administration

1 rows fetched.

SQL> conn B/Cantian_234@127.0.0.1:1611

connected.

SQL> drop table if exists sections;

Succeed.

SQL> select * from B.view1;

CT-00843, [1:51]The table or view B.SECTIONS does not exist.
SQL> conn A/Cantian_234@127.0.0.1:1611

connected.

SQL> select * from B.view1;

CT-00600, View VIEW1 has errors
SQL> conn / as sysdba

connected.

SQL> drop user if exists A cascade;

Succeed.

SQL> drop user if exists B cascade;

Succeed.

SQL> select NAME,VALUE from v$parameter where NAME in ('MAX_WORKER_THREADS','WORKER_THREADS');

NAME                                                             VALUE                                                           
---------------------------------------------------------------- ----------------------------------------------------------------
MAX_WORKER_THREADS                                               100                                                             

1 rows fetched.

SQL> drop table if exists test_v_t1;

Succeed.

SQL> drop view if exists test_v1;

Succeed.

SQL> drop view if exists test_v2;

Succeed.

SQL> drop view if exists test_v3;

Succeed.

SQL> drop view if exists test_v4;

Succeed.

SQL> drop view if exists test_v5;

Succeed.

SQL> drop view if exists test_v6;

Succeed.

SQL> 
SQL> create view test_v1 as select * from test_v_t1;

CT-00843, [1:36]The table or view SYS.TEST_V_T1 does not exist.
SQL> 
SQL> create table test_v_t1(a int, b varchar(100), c float);

Succeed.

SQL> create view test_v1 as select * from test_v_t1;

Succeed.

SQL> select name from SYS_VIEWS where NAME='TEST_V1';

NAME                                                            
----------------------------------------------------------------
TEST_V1                                                         

1 rows fetched.

SQL> select * from test_v1;

A            B                                                                C                   
------------ ---------------------------------------------------------------- --------------------

0 rows fetched.

SQL> 
SQL> drop table test_v_t1;

Succeed.

SQL> select * from test_v1;

CT-00843, [1:39]The table or view SYS.TEST_V_T1 does not exist.
SQL> 
SQL> create table test_v_t1(a int, b varchar(100), c float);

Succeed.

SQL> insert into test_v_t1 values(1,'hello guass!', 10);

1 rows affected.

SQL> insert into test_v_t1 values(2,'hello huawei!', 20);

1 rows affected.

SQL> insert into test_v_t1 values(3,'hello china!', 30);

1 rows affected.

SQL> insert into test_v_t1 values(4,'hello world!', 40);

1 rows affected.

SQL> 
SQL> select * from test_v1;

A            B                                                                C                   
------------ ---------------------------------------------------------------- --------------------
1            hello guass!                                                     10                  
2            hello huawei!                                                    20                  
3            hello china!                                                     30                  
4            hello world!                                                     40                  

4 rows fetched.

SQL> 
SQL> drop view test_v1;

Succeed.

SQL> select * from test_v1;

CT-00843, [1:15]The table or view SYS.TEST_V1 does not exist.
SQL> 
SQL> create view test_v1 as select * from test_v_t1;

Succeed.

SQL> select * from test_v1;

A            B                                                                C                   
------------ ---------------------------------------------------------------- --------------------
1            hello guass!                                                     10                  
2            hello huawei!                                                    20                  
3            hello china!                                                     30                  
4            hello world!                                                     40                  

4 rows fetched.

SQL> 
SQL> create view test_v2 as select b,c from test_v_t1;

Succeed.

SQL> select name from SYS_VIEWS where NAME='TEST_V2';

NAME                                                            
----------------------------------------------------------------
TEST_V2                                                         

1 rows fetched.

SQL> select * from test_v2;

B                                                                C                   
---------------------------------------------------------------- --------------------
hello guass!                                                     10                  
hello huawei!                                                    20                  
hello china!                                                     30                  
hello world!                                                     40                  

4 rows fetched.

SQL> 
SQL> create view test_v3 as select b as bb, c as cc from test_v_t1;

Succeed.

SQL> select name from SYS_VIEWS where NAME='TEST_V3';

NAME                                                            
----------------------------------------------------------------
TEST_V3                                                         

1 rows fetched.

SQL> select * from test_v3;

BB                                                               CC                  
---------------------------------------------------------------- --------------------
hello guass!                                                     10                  
hello huawei!                                                    20                  
hello china!                                                     30                  
hello world!                                                     40                  

4 rows fetched.

SQL> 
SQL> create view test_v4(f1,f2,f3) as select * from test_v_t1;

Succeed.

SQL> select name from SYS_VIEWS where NAME='TEST_V4';

NAME                                                            
----------------------------------------------------------------
TEST_V4                                                         

1 rows fetched.

SQL> select * from test_v4;

F1           F2                                                               F3                  
------------ ---------------------------------------------------------------- --------------------
1            hello guass!                                                     10                  
2            hello huawei!                                                    20                  
3            hello china!                                                     30                  
4            hello world!                                                     40                  

4 rows fetched.

SQL> 
SQL> create view test_v5(f1,f2) as select c,b from test_v_t1;

Succeed.

SQL> select name from SYS_VIEWS where NAME='TEST_V5';

NAME                                                            
----------------------------------------------------------------
TEST_V5                                                         

1 rows fetched.

SQL> select * from test_v5;

F1                   F2                                                              
-------------------- ----------------------------------------------------------------
10                   hello guass!                                                    
20                   hello huawei!                                                   
30                   hello china!                                                    
40                   hello world!                                                    

4 rows fetched.

SQL> 
SQL> create or replace view test_v6(ff1,ff2,ff3) as select b,c,a from test_v_t1;

Succeed.

SQL> select name from SYS_VIEWS where NAME='TEST_V6';

NAME                                                            
----------------------------------------------------------------
TEST_V6                                                         

1 rows fetched.

SQL> select * from test_v6;

FF1                                                              FF2                  FF3         
---------------------------------------------------------------- -------------------- ------------
hello guass!                                                     10                   1           
hello huawei!                                                    20                   2           
hello china!                                                     30                   3           
hello world!                                                     40                   4           

4 rows fetched.

SQL> 
SQL> create or replace view test_v1(f1,f2,f3) as select a,b,c from test_v_t1;

Succeed.

SQL> select name from SYS_VIEWS where NAME='TEST_V1';

NAME                                                            
----------------------------------------------------------------
TEST_V1                                                         

1 rows fetched.

SQL> 
SQL> --SYSTEM VIEWS
SQL> select TABLE_NAME,TABLE_ID,TABLESPACE_NAME,COLUMN_COUNT,INDEX_COUNT from user_tables where table_name='SYS_TABLES';

TABLE_NAME                                                       TABLE_ID     TABLESPACE_NAME                                                  COLUMN_COUNT INDEX_COUNT 
---------------------------------------------------------------- ------------ ---------------------------------------------------------------- ------------ ------------
SYS_TABLES                                                       0            SYSTEM                                                           27           2           

1 rows fetched.

SQL> select * from USER_TAB_COLS where table_name='SYS_TABLES' order by COLUMN_NAME;

TABLE_NAME                                                       COLUMN_NAME                                                      DATA_TYPE                                                        DATA_LENGTH  DATA_PRECISION DATA_SCALE   NULLABLE COLUMN_ID    DATA_DEFAULT                                                     NUM_DISTINCT LOW_VALUE                                                        HIGH_VALUE                                                       CHAR_LENGTH  CHAR_USED HISTOGRAM                                                       
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ -------------- ------------ -------- ------------ ---------------------------------------------------------------- ------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------- ----------------------------------------------------------------
SYS_TABLES                                                       ANALYZETIME                                                      TIMESTAMP                                                        8            6                           Y        21                                                                                                                                                                                                                           0                                                                                      
SYS_TABLES                                                       APPENDONLY                                                       BINARY_INTEGER                                                   4                                        N        15                                                                                                                                                                                                                           0                                                                                      
SYS_TABLES                                                       AVG_ROW_LEN                                                      BINARY_BIGINT                                                    8                                        Y        19                                                                                                                                                                                                                           0                                                                                      
SYS_TABLES                                                       BLOCKS                                                           BINARY_INTEGER                                                   4                                        Y        17                                                                                                                                                                                                                           0                                                                                      
SYS_TABLES                                                       CHG_SCN                                                          BINARY_BIGINT                                                    8                                        N        5                                                                                                                                                                                                                            0                                                                                      
SYS_TABLES                                                       COLS                                                             BINARY_INTEGER                                                   4                                        N        7                                                                                                                                                                                                                            0                                                                                      
SYS_TABLES                                                       CR_MODE                                                          BINARY_INTEGER                                                   4                                        N        13                                                                                                                                                                                                                           0                                                                                                                                                                        
SYS_TABLES                                                       EMPTY_BLOCKS                                                     BINARY_INTEGER                                                   4                                        Y        18                                                                                                                                                                                                                           0                                                                                      
SYS_TABLES                                                       ENTRY                                                            BINARY_BIGINT                                                    8                                        N        10                                                                                                                                                                                                                           0 
SYS_TABLES                                                       FLAG                                                             BINARY_INTEGER                                                   4                                        Y        26                                                                                                                                                                                                                           0                                                                                         
SYS_TABLES                                                       ID                                                               BINARY_INTEGER                                                   4                                        N        1                                                                                                                                                                                                                            0                                                                                      
SYS_TABLES                                                       INDEXES                                                          BINARY_INTEGER                                                   4                                        N        8                                                                                                                                                                                                                            0                                                                                      
SYS_TABLES                                                       INITRANS                                                         BINARY_INTEGER                                                   4                                        N        11                                                                                                                                                                                                                           0                                                                                      
SYS_TABLES                                                       NAME                                                             VARCHAR                                                          64                                       N        2                                                                                                                                                                                                                            64           B                                                                         
SYS_TABLES                                                       NUM_ROWS                                                         BINARY_INTEGER                                                   4                                        Y        16                                                                                                                                                                                                                           0                                                                                      
SYS_TABLES                                                       OBJ#                                                             BINARY_INTEGER                                                   4                                        Y        24                                                                                                                                                                                                                           0                                                                                      
SYS_TABLES                                                       OPTIONS                                                          RAW                                                              16                                       Y        23                                                                                                                                                                                                                           0                                                                                      
SYS_TABLES                                                       ORG_SCN                                                          BINARY_BIGINT                                                    8                                        N        4                                                                                                                                                                                                                            0                                                                                      
SYS_TABLES                                                       PARTITIONED                                                      BINARY_INTEGER                                                   4                                        N        9                                                                                                                                                                                                                            0                                                                                      
SYS_TABLES                                                       PCTFREE                                                          BINARY_INTEGER                                                   4                                        N        12                                                                                                                                                                                                                           0                                                                                      
SYS_TABLES                                                       RECYCLED                                                         BINARY_INTEGER                                                   4                                        N        14                                                                                                                                                                                                                           0                                                                                      
SYS_TABLES                                                       SAMPLESIZE                                                       BINARY_INTEGER                                                   4                                        Y        20                                                                                                                                                                                                                           0                                                                                      
SYS_TABLES                                                       SERIAL_START                                                     BINARY_BIGINT                                                    8                                        N        22                                                                                                                                                                                                                           0                                                                                      
SYS_TABLES                                                       SPACE#                                                           BINARY_INTEGER                                                   4                                        N        3                                                                                                                                                                                                                            0                                                                                      
SYS_TABLES                                                       TYPE                                                             BINARY_INTEGER                                                   4                                        N        6                                                                                                                                                                                                                            0                                                                                      
SYS_TABLES                                                       USER#                                                            BINARY_INTEGER                                                   4                                        N        0                                                                                                                                                                                                                            0                                                                                      
SYS_TABLES                                                       VERSION                                                          BINARY_INTEGER                                                   4                                        Y        25                                                                                                                                                                                                                           0                                                                                      

27 rows fetched.

SQL> 
SQL> --FOR DTS ''
SQL> CREATE VIEW '' AS SELECT 1 FROM DUAL;

CT-00601, [1:13]Sql syntax error: invalid variant/object name was found
SQL> DROP VIEW '';

CT-00601, [1:11]Sql syntax error: invalid variant/object name was found
SQL> 
SQL> drop view if exists test_v7;

Succeed.

SQL> create view test_v7 as select 1 from dual where  
  2 '1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
  3  = 
  4 '1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
  5  and 
  6 '2aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
  7  = 
  8 '2aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
  9  and 
 10 '3aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
 11  = 
 12 '3aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
 13 and
 14 '4aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
 15  = 
 16 '4aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
 17  and 
 18 '5aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
 19  = 
 20 '5aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa';

Succeed.

SQL> select * from test_v7;

1           
------------
1           

1 rows fetched.

SQL> 
SQL> drop table if exists PFATBL_180315;

Succeed.

SQL> create table PFATBL_180315
  2 (id number(10),
  3 name varchar2(200),
  4 age number(3),
  5 c_time TIMESTAMP,
  6 constraint pk_PFATBL_180315 primary key(id,name,age,c_time)
  7 );

Succeed.

SQL> 
SQL> create index pk_PFATBL_180315_1 on PFATBL_180315(age,c_time,id,name);

Succeed.

SQL> 
SQL> select ID, NAME,DATATYPE,BYTES,PRECISION,SCALE,NULLABLE,FLAGS,DEFAULT_TEXT,DEFAULT_DATA,NUM_DISTINCT, LOW_VALUE,HIGH_VALUE , HISTOGRAM  from SYS_COLUMNS where  TABLE#=(select ID from SYS_TABLES where name='PFATBL_180315') ORDER BY SYS_COLUMNS.ID;

ID           NAME                                                             DATATYPE     BYTES        PRECISION    SCALE        NULLABLE     FLAGS        DEFAULT_TEXT                                                     DEFAULT_DATA                                                     NUM_DISTINCT LOW_VALUE                                                        HIGH_VALUE                                                       HISTOGRAM                                                       
------------ ---------------------------------------------------------------- ------------ ------------ ------------ ------------ ------------ ------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
0            ID                                                               20004        10           10           0            0            0                                                                                                                                                                                                                                                                                                                                                             
1            NAME                                                             20009        200                                    0            0                                                                                                                                                                                                                                                                                                                                                             
2            AGE                                                              20004        6            3            0            0            0                                                                                                                                                                                                                                                                                                                                                             
3            C_TIME                                                           20007        8            6                         0            0                                                                                                                                                                                                                                                                                                                                                             

4 rows fetched.

SQL> 
SQL> -- test USER_CONSTRAINTS view
SQL> DROP USER IF EXISTS USER_1 CASCADE;

Succeed.

SQL> CREATE USER USER_1 IDENTIFIED BY Root1234;

Succeed.

SQL> GRANT CREATE SESSION TO USER_1;

Succeed.

SQL> 
SQL> -- USER CONSTRAINTS
SQL> CREATE TABLE USER_1.USER_001_TAB001 (ID INT, NAME VARCHAR(30), F_ID INT, C_ID INT, CONSTRAINT P_CONS_001 PRIMARY KEY (ID), CONSTRAINT U_CONS_001 UNIQUE (NAME), CONSTRAINT C_CONS_001 CHECK (C_ID > 10));

Succeed.

SQL> CREATE TABLE USER_1.USER_001_TAB002 (ID INT, CONSTRAINT P_CONS_002 PRIMARY KEY (ID));

Succeed.

SQL> ALTER TABLE USER_1.USER_001_TAB001 ADD CONSTRAINT R_CONS_001 FOREIGN KEY (F_ID) REFERENCES USER_1.USER_001_TAB002 (ID);

Succeed.

SQL> 
SQL> connect USER_1/Root1234@127.0.0.1:1611

connected.

SQL> SELECT * FROM USER_CONSTRAINTS ORDER BY OWNER, CONSTRAINT_NAME, TABLE_NAME, INDEX_OWNER, INDEX_NAME;

OWNER                                                            CONSTRAINT_NAME                                                  CONSTRAINT_TYPE TABLE_NAME                                                       SEARCH_CONDITION                                                 R_OWNER                                                          R_TABLE_NAME                                                     R_CONSTRAINT_NAME                                                DELETE_RULE    STATUS   DEFERRABLE     DEFERRED  VALIDATED     BAD RELY INDEX_OWNER                                                      INDEX_NAME                                                       INVALID VIEW_RELATED CONS_COLS                                                        REF_COLS                                                         SYS_GENERATE IS_DUPLICATE

USER_1                                                           C_CONS_001                                                       C               USER_001_TAB001                                                  C_ID > 10                                                                                                                                                                                                                                                                          ENABLED  NOT DEFERRABLE IMMEDIATE VALIDATED                                                                                                                                                FALSE                C_ID                                                                                                                              N            N           
USER_1                                                           P_CONS_001                                                       P               USER_001_TAB001                                                                                                                                                                                                                                                                                                                                     ENABLED  NOT DEFERRABLE IMMEDIATE VALIDATED              USER_1                                                           P_CONS_001                                                       FALSE                ID                                                                                                                                N            N           
USER_1                                                           P_CONS_002                                                       P               USER_001_TAB002                                                                                                                                                                                                                                                                                                                                     ENABLED  NOT DEFERRABLE IMMEDIATE VALIDATED              USER_1                                                           P_CONS_002                                                       FALSE                ID                                                                                                                                N            N           
USER_1                                                           R_CONS_001                                                       R               USER_001_TAB001                                                                                                                   USER_1                                                           USER_001_TAB002                                                  P_CONS_002                                                       NOT ALLOWED    ENABLED  NOT DEFERRABLE IMMEDIATE VALIDATED                                                                                                                                                FALSE                F_ID                                                             ID                                                               N            N           
USER_1                                                           U_CONS_001                                                       U               USER_001_TAB001                                                                                                                                                                                                                                                                                                                                     ENABLED  NOT DEFERRABLE IMMEDIATE VALIDATED              USER_1                                                           U_CONS_001                                                       FALSE                NAME                                                                                                                              N            N           

5 rows fetched.

SQL> 
SQL> connect sys/Huawei@123@127.0.0.1:1611

connected.

SQL> 
SQL> DROP USER IF EXISTS USER_1 CASCADE;

Succeed.

SQL> 
SQL> --DTS2018062606533
SQL> drop table if exists T_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBB1;

Succeed.

SQL> drop view if exists T_VIEWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBB1;

Succeed.

SQL> 
SQL> create table T_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBB1(a int, comment varchar(100), c float);

Succeed.

SQL> create view  T_VIEWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBB1 as select * from T_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBB1;

Succeed.

SQL> insert into T_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBB1 values(1,'hello guass!', 10);

1 rows affected.

SQL> insert into T_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBB1 values(2,'hello huawei!', 20);

1 rows affected.

SQL> 
SQL> drop table T_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBB1;

Succeed.

SQL> create table T_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBB1(comment int);

Succeed.

SQL> select * from T_VIEWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBB1;

CT-00601, [1:22]Sql syntax error: invalid column name 'A'
SQL> 
SQL> insert into T_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBB1 values(1);

1 rows affected.

SQL> select * from T_VIEWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBB1;

CT-00601, [1:22]Sql syntax error: invalid column name 'A'
SQL> 
SQL> drop table T_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBB1;

Succeed.

SQL> create table T_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBB1(a varchar(32), comment int, c float);

Succeed.

SQL> select * from T_VIEWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBB1;

A                                COMMENT      C                   
-------------------------------- ------------ --------------------

0 rows fetched.

SQL> 
SQL> drop table if exists T_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBB1;

Succeed.

SQL> drop view if exists T_VIEWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBB1;

Succeed.

SQL> 
SQL> -- check drop view privilege for synonym
SQL> drop user if exists view_test_user_01 cascade;

Succeed.

SQL> create user view_test_user_01 identified by Root1234;

Succeed.

SQL> grant create session, create table, create view  to view_test_user_01;

Succeed.

SQL> grant EXECUTE on DBE_DIAGNOSE  to view_test_user_01;

Succeed.

SQL> create table view_test_tab_01 (id int);

Succeed.

SQL> create view view_test_view_01 as select * from view_test_tab_01;

Succeed.

SQL> 
SQL> create or replace public synonym view_test_tab_01 for sys.view_test_tab_01;

Succeed.

SQL> create or replace public synonym view_test_view_01 for sys.view_test_view_01;

Succeed.

SQL> 
SQL> conn view_test_user_01/Root1234@127.0.0.1:1611

connected.

SQL> create table view_test_tab_01 (id int);

Succeed.

SQL> create view view_test_view_01 as select * from view_test_tab_01;

Succeed.

SQL> 
SQL> drop view view_test_view_01;

Succeed.

SQL> select view_name from user_views;

VIEW_NAME                                                       
----------------------------------------------------------------

0 rows fetched.

SQL> drop view view_test_view_01;

CT-00843, The table or view VIEW_TEST_USER_01.VIEW_TEST_VIEW_01 does not exist.
SQL> drop view view_not_exist;

CT-00843, The table or view VIEW_TEST_USER_01.VIEW_NOT_EXIST does not exist.
SQL> 
SQL> alter table view_test_tab_01 add constraint abc unique (id);

Succeed.

SQL> select owner, constraint_name from user_constraints;

OWNER                                                            CONSTRAINT_NAME                                                 
---------------------------------------------------------------- ----------------------------------------------------------------
VIEW_TEST_USER_01                                                ABC                                                             

1 rows fetched.

SQL> drop table view_test_tab_01;

Succeed.

SQL> drop table view_test_tab_01;

CT-00843, The table or view VIEW_TEST_USER_01.VIEW_TEST_TAB_01 does not exist.
SQL> drop table tab_not_exist;

CT-00843, The table or view VIEW_TEST_USER_01.TAB_NOT_EXIST does not exist.
SQL> 
SQL> connect sys/Huawei@123@127.0.0.1:1611

connected.

SQL> grant dba to view_test_user_01;

Succeed.

SQL> select * from dba_ind_columns where table_name='SYS_PRIVS' order by COLUMN_POSITION;

INDEX_OWNER                                                      INDEX_NAME                                                       TABLE_OWNER                                                      TABLE_NAME                                                       COLUMN_NAME                                                      COLUMN_POSITION COLUMN_LENGTH
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- --------------- -------------
SYS                                                              IX_SYS_PRIVS$_001                                                SYS                                                              SYS_PRIVS                                                        GRANTEE_ID                                                       1               4            
SYS                                                              IX_SYS_PRIVS$_001                                                SYS                                                              SYS_PRIVS                                                        GRANTEE_TYPE                                                     2               4            
SYS                                                              IX_SYS_PRIVS$_001                                                SYS                                                              SYS_PRIVS                                                        PRIVILEGE                                                        3               4            

3 rows fetched.

SQL> 
SQL> conn view_test_user_01/Root1234@127.0.0.1:1611

connected.

SQL> 
SQL> drop table if exists test purge;

Succeed.

SQL> create table test (f1 int not null, f2 int, f3 varchar(100));

Succeed.

SQL> alter table test add constraint pk_f1 primary key (f1);

Succeed.

SQL> create index test_index_001 on test (f1, f2, f3);

Succeed.

SQL> create unique index test_index_002 on test (f2);

Succeed.

SQL> 
SQL> select is_primary, is_unique, columns, column_count from all_indexes where table_name='TEST' and owner=upper('view_test_user_01') order by index_name;

IS_PRIMARY IS_UNIQUE COLUMNS                                                          COLUMN_COUNT
---------- --------- ---------------------------------------------------------------- ------------
Y          N         F1                                                               1           
N          N         F1, F2, F3                                                       3           
N          Y         F2                                                               1           

3 rows fetched.

SQL> select column_name, column_position from dba_ind_columns where table_name='TEST' and table_owner=upper('view_test_user_01') order by index_name, column_name, column_position;

COLUMN_NAME                                                      COLUMN_POSITION
---------------------------------------------------------------- ---------------
F1                                                               1              
F1                                                               1              
F2                                                               2              
F3                                                               3              
F2                                                               1              

5 rows fetched.

SQL> 
SQL> drop table if exists test;

Succeed.

SQL> create table test (f1 int not null, f2 int, f3 varchar(100));

Succeed.

SQL> alter table test add constraint pk_f1 primary key (f1);

Succeed.

SQL> create index test_index_001 on test (f1, f2, f3);

Succeed.

SQL> create unique index test_index_002 on test (f2);

Succeed.

SQL> 
SQL> select is_primary, is_unique, columns, column_count from all_indexes where table_name='TEST' and owner=upper('view_test_user_01') order by index_name;

IS_PRIMARY IS_UNIQUE COLUMNS                                                          COLUMN_COUNT
---------- --------- ---------------------------------------------------------------- ------------
Y          N         F1                                                               1           
N          N         F1, F2, F3                                                       3           
N          Y         F2                                                               1           

3 rows fetched.

SQL> select column_name, column_position from dba_ind_columns where table_name='TEST' and table_owner=upper('view_test_user_01') order by index_name, column_name, column_position;

COLUMN_NAME                                                      COLUMN_POSITION
---------------------------------------------------------------- ---------------
F1                                                               1              
F1                                                               1              
F2                                                               2              
F3                                                               3              
F2                                                               1              

5 rows fetched.

SQL> 
SQL> -- select index_name, column_name, column_position from user_ind_columns where table_name='TEST' order by index_name, column_position;
SQL> select substr(index_name, 0, 7), column_name, column_position from user_ind_columns where table_name='TEST' order by index_name, column_position; 

SUBSTR(INDEX_NAME, 0, 7)                                         COLUMN_NAME                                                      COLUMN_POSITION
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------
PK_F1                                                            F1                                                               1              
TEST_IN                                                          F1                                                               1              
TEST_IN                                                          F2                                                               2              
TEST_IN                                                          F3                                                               3              
TEST_IN                                                          F2                                                               1              

5 rows fetched.

SQL> 
SQL> drop table if exists index_cols_test;

Succeed.

SQL> create table index_cols_test
  2 (
  3 f1 int,
  4 f2 int,
  5 f3 int,
  6 f4 int,
  7 f5 int,
  8 f6 int,
  9 f7 int,
 10 f8 int,
 11 f9 int,
 12 f10 int,
 13 f11 int,
 14 f12 int
 15 );

Succeed.

SQL> 
SQL> create index ix_cols_test on index_cols_test(f12, f2);

Succeed.

SQL> 
SQL> select index_name, column_name, column_position from user_ind_columns where table_name='INDEX_COLS_TEST' order by index_name, column_position;

INDEX_NAME                                                       COLUMN_NAME                                                      COLUMN_POSITION
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------
IX_COLS_TEST                                                     F12                                                              1              
IX_COLS_TEST                                                     F2                                                               2              

2 rows fetched.

SQL> drop table index_cols_test purge;

Succeed.

SQL> 
SQL> -- test DBE_DIAGNOSE.DBA_IND_POS function
SQL> select DBE_DIAGNOSE.DBA_IND_POS('1', '1') from dual; -- 1

DBE_DIAGNOSE.DBA_IND_POS('1', '1')
----------------------------------
1                                 

1 rows fetched.

SQL> select DBE_DIAGNOSE.DBA_IND_POS('1,2', '2') from dual; -- 2

DBE_DIAGNOSE.DBA_IND_POS('1,2', '2')
------------------------------------
2                                   

1 rows fetched.

SQL> select DBE_DIAGNOSE.DBA_IND_POS('1,2', '1') from dual; -- 1

DBE_DIAGNOSE.DBA_IND_POS('1,2', '1')
------------------------------------
1                                   

1 rows fetched.

SQL> select DBE_DIAGNOSE.DBA_IND_POS('2,1', '1') from dual; -- 2

DBE_DIAGNOSE.DBA_IND_POS('2,1', '1')
------------------------------------
2                                   

1 rows fetched.

SQL> select DBE_DIAGNOSE.DBA_IND_POS('2,20', '2') from dual; -- 1

DBE_DIAGNOSE.DBA_IND_POS('2,20', '2')
-------------------------------------
1                                    

1 rows fetched.

SQL> select DBE_DIAGNOSE.DBA_IND_POS('20,2', '2') from dual; -- 2

DBE_DIAGNOSE.DBA_IND_POS('20,2', '2')
-------------------------------------
2                                    

1 rows fetched.

SQL> select DBE_DIAGNOSE.DBA_IND_POS('12,32,3323,5,32', '5') from dual; -- 4

DBE_DIAGNOSE.DBA_IND_POS('12,32,3323,5,32', '5')
------------------------------------------------
4                                               

1 rows fetched.

SQL> 
SQL> connect sys/Huawei@123@127.0.0.1:1611

connected.

SQL> drop user view_test_user_01 cascade;

Succeed.

SQL> 
SQL> --test view dba_objects,dba_tables,user_cons_columns
SQL> select distinct a.object_name from dba_objects a where a.object_name = 'SYS_USERS';

OBJECT_NAME                                                     
----------------------------------------------------------------
SYS_USERS                                                       

1 rows fetched.

SQL> select distinct a.table_name from dba_tables a where a.table_name = 'SYS_USERS';

TABLE_NAME                                                      
----------------------------------------------------------------
SYS_USERS                                                       

1 rows fetched.

SQL> connect sys/Huawei@123@127.0.0.1:1611

connected.

SQL> drop table if exists sycg; 

Succeed.

SQL> drop table if exists sycghjlb;

Succeed.

SQL> create table sycg(
  2     stuNo number(10), --0
  3     cid number(4),
  4     stuName varchar2(100) 
  5 		constraint wg_2_notnull not null, --2
  6     stuCardId varchar2(20)  --3
  7 		constraint wg_3_check check(length(stuCardId)=18),
  8     sex varchar2(8) default 'man'  --4     
  9         constraint wg_4_check check( sex='man' or sex='women' ),
 10     stuAge number(3)   --5
 11         constraint wg_5_check check(stuAge between 12 and 30),
 12     stuTel varchar2(15),  --6		
 13     stuAddr varchar2(100),  --7
 14 	hjlbid varchar2(40),    --8
 15         constraint wg_7_8_check check(stuTel is not null or stuAddr is not null) 
 16 ); 

Succeed.

SQL> create table sycghjlb(
  2   hjlbid varchar2(40) primary key  
  3 ); 

Succeed.

SQL> alter table sycg add constraint wg_6_unique unique(stuTel);

Succeed.

SQL> alter table sycg add constraint wg_0_pk primary key(stuNo);

Succeed.

SQL> alter table sycg add constraint wg_9_foreignkey foreign key (hjlbid) references sycghjlb (hjlbid);

Succeed.

SQL> select * from USER_CONS_COLUMNS where TABLE_NAME = 'SYCG' order by OWNER,CONSTRAINT_NAME,TABLE_NAME,COLUMN_NAME,POSITION;

OWNER                                                            CONSTRAINT_NAME                                                  TABLE_NAME                                                       COLUMN_NAME                                                      POSITION    
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------
SYS                                                              WG_0_PK                                                          SYCG                                                             STUNO                                                            1                                       
SYS                                                              WG_3_CHECK                                                       SYCG                                                             STUCARDID                                                        1                                       
SYS                                                              WG_4_CHECK                                                       SYCG                                                             SEX                                                              1                                       
SYS                                                              WG_5_CHECK                                                       SYCG                                                             STUAGE                                                           1                                       
SYS                                                              WG_6_UNIQUE                                                      SYCG                                                             STUTEL                                                           1                                       
SYS                                                              WG_7_8_CHECK                                                     SYCG                                                             STUADDR                                                          2                                       
SYS                                                              WG_7_8_CHECK                                                     SYCG                                                             STUTEL                                                           1                                       
SYS                                                              WG_9_FOREIGNKEY                                                  SYCG                                                             HJLBID                                                           1                                       

8 rows fetched.

SQL> drop table if exists sycg; 

Succeed.

SQL> drop table if exists sycghjlb;

Succeed.

SQL> drop table if exists wg_commit_table;

Succeed.

SQL> create table wg_commit_table(id int); 

Succeed.

SQL> insert into wg_commit_table values(1);commit;select * from dual;

1 rows affected.


Succeed.


DUMMY
-----
X    

1 rows fetched.

SQL> select * from wg_commit_table;

ID          
------------
1           

1 rows fetched.

SQL> drop table if exists wg_commit_table;

Succeed.

SQL> create table wg_commit_table(id int); 

Succeed.

SQL> insert into wg_commit_table values(1);commit;

1 rows affected.


Succeed.

SQL> select * from wg_commit_table;

ID          
------------
1           

1 rows fetched.

SQL> 
SQL> --test view dba_tables,all_tables,user_tables
SQL> connect sys/Huawei@123@127.0.0.1:1611

connected.

SQL> drop table if exists t1;

Succeed.

SQL> create table t1  (id int ,a1 char(10),a2 char(10),a3 char(10));

Succeed.

SQL> select TEMPORARY,TABLE_TYPE from all_tables where table_name = 'T1';

TEMPORARY TABLE_TYPE  
--------- ------------
N         HEAP        

1 rows fetched.

SQL> select TEMPORARY,TABLE_TYPE from dba_tables where table_name = 'T1';

TEMPORARY TABLE_TYPE  
--------- ------------
N         HEAP        

1 rows fetched.

SQL> select TEMPORARY,TABLE_TYPE from user_tables where table_name = 'T1';

TEMPORARY TABLE_TYPE  
--------- ------------
N         HEAP        

1 rows fetched.

SQL> 
SQL> drop table if exists t1;

Succeed.

SQL> CREATE GLOBAL TEMPORARY TABLE t1(A INT);

Succeed.

SQL> select TEMPORARY,TABLE_TYPE from all_tables where table_name = 'T1';

TEMPORARY TABLE_TYPE  
--------- ------------
Y         TRANS_TEMP  

1 rows fetched.

SQL> select TEMPORARY,TABLE_TYPE from dba_tables where table_name = 'T1';

TEMPORARY TABLE_TYPE  
--------- ------------
Y         TRANS_TEMP  

1 rows fetched.

SQL> select TEMPORARY,TABLE_TYPE from user_tables where table_name = 'T1';

TEMPORARY TABLE_TYPE  
--------- ------------
Y         TRANS_TEMP  

1 rows fetched.

SQL> 
SQL> drop table if exists t1;

Succeed.

SQL> CREATE GLOBAL TEMPORARY TABLE t1(TBL_NAME VARCHAR(64)) ON COMMIT PRESERVE ROWS;

Succeed.

SQL> select TEMPORARY,TABLE_TYPE from all_tables where table_name = 'T1';

TEMPORARY TABLE_TYPE  
--------- ------------
Y         SESSION_TEMP

1 rows fetched.

SQL> select TEMPORARY,TABLE_TYPE from dba_tables where table_name = 'T1';

TEMPORARY TABLE_TYPE  
--------- ------------
Y         SESSION_TEMP

1 rows fetched.

SQL> select TEMPORARY,TABLE_TYPE from user_tables where table_name = 'T1';

TEMPORARY TABLE_TYPE  
--------- ------------
Y         SESSION_TEMP

1 rows fetched.

SQL> 
SQL> --test view dba_free_space/user_free_space
SQL> select distinct TABLESPACE_NAME FROM DBA_FREE_SPACE ORDER BY TABLESPACE_NAME;

TABLESPACE_NAME                                                 
----------------------------------------------------------------
SYSAUX
SYSTEM                                                          
TEMP                                                            
TEMP2                                                           
TEMP2_UNDO                                                      
UNDO                                                            
USERS                                                           

7 rows fetched.

SQL> create tablespace tablespace_ts1 datafile 'tablespace_ts_001' size 32M;

Succeed.

SQL> select tablespace_name,bytes,blocks from dba_free_space where tablespace_name = 'TABLESPACE_TS1';

TABLESPACE_NAME                                                  BYTES                BLOCKS              
---------------------------------------------------------------- -------------------- --------------------
TABLESPACE_TS1                                                   33538048             4094                

1 rows fetched.

SQL> select tablespace_name,bytes,blocks from user_free_space where tablespace_name = 'TABLESPACE_TS1';

TABLESPACE_NAME                                                  BYTES                BLOCKS              
---------------------------------------------------------------- -------------------- --------------------
TABLESPACE_TS1                                                   33538048             4094                

1 rows fetched.

SQL> drop tablespace tablespace_ts1 including contents and datafiles;

Succeed.

SQL> 
SQL> --test view dba_tab_columns,dba_indexes
SQL> DESC DBA_TAB_COLUMNS;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
OWNER                                        VARCHAR(64 BYTE)                    
TABLE_NAME                                   VARCHAR(64 BYTE)                    
COLUMN_NAME                                  VARCHAR(128 BYTE)                   
DATA_TYPE                                    VARCHAR(66 BYTE)                    
DATA_LENGTH                                  BINARY_INTEGER                      
DATA_PRECISION                               BINARY_INTEGER                      
DATA_SCALE                                   BINARY_INTEGER                      
NULLABLE                                     VARCHAR(1 BYTE)                     
COLUMN_ID                                    BINARY_INTEGER                      
DATA_DEFAULT                                 VARCHAR(1024 BYTE)                  
NUM_DISTINCT                                 BINARY_INTEGER                      
LOW_VALUE                                    VARCHAR(64 BYTE)                    
HIGH_VALUE                                   VARCHAR(64 BYTE)                    
NUM_NULLS                                    BINARY_INTEGER                      
NUM_BUCKETS                                  BINARY_INTEGER                      
CHAR_LENGTH                                  BINARY_INTEGER                      
CHAR_USED                                    VARCHAR(1 BYTE)                     
SAMPLE_SIZE                                  BINARY_BIGINT                      
LAST_ANALYZED                                TIMESTAMP(6)                        
HISTOGRAM                                    VARCHAR(64 BYTE)                    
AUTO_INCREMENT                               VARCHAR(1 BYTE)                     

SQL> DESC DBA_INDEXES;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
OWNER                               NOT NULL VARCHAR(64 BYTE)                    
INDEX_NAME                          NOT NULL VARCHAR(64 BYTE)                    
INDEX_TYPE                                   VARCHAR(6 BYTE)                     
TABLE_NAME                          NOT NULL VARCHAR(64 BYTE)                    
TABLESPACE_NAME                              VARCHAR(64 BYTE)                    
IS_PRIMARY                                   VARCHAR(1 BYTE)                     
IS_UNIQUE                                    VARCHAR(1 BYTE)                     
IS_DUPLICATE                                 VARCHAR(1 BYTE)                     
PARTITIONED                                  VARCHAR(1 BYTE)                     
STATUS                                       VARCHAR(7 BYTE)                     
INI_TRANS                           NOT NULL BINARY_INTEGER                      
MAX_TRANS                                    BINARY_INTEGER                      
PCT_FREE                            NOT NULL BINARY_INTEGER                      
COLUMN_COUNT                        NOT NULL BINARY_INTEGER                      
COLUMNS                                      VARCHAR(1088 BYTE)                  
BYTES                                        BINARY_BIGINT                       
PAGES                                        BINARY_BIGINT                       
EXTENTS                                      BINARY_BIGINT                       
BLEVEL                                       BINARY_INTEGER                      
LEAF_BLOCKS                                  BINARY_INTEGER                      
EMPTY_LEAF_BLOCKS                            BINARY_INTEGER                      
DISTINCT_KEYS                                BINARY_INTEGER                      
AVG_LEAF_BLOCKS_PER_KEY                      BINARY_DOUBLE                       
AVG_DATA_BLOCKS_PER_KEY                      BINARY_DOUBLE                       
CLUSTERING_FACTOR                            BINARY_INTEGER                              
NUM_ROWS                                     BINARY_INTEGER                      
SAMPLE_SIZE                                  BINARY_INTEGER                      
LAST_ANALYZED                                TIMESTAMP(6)                        
SYS_GENERATE                                 BINARY_BIGINT                       
CR_MODE                                      VARCHAR(4 BYTE)                     
IS_REVERSED                                  VARCHAR(1 BYTE)

SQL> DROP TABLE IF EXISTS VIEW_TEST1;

Succeed.

SQL> CREATE TABLE VIEW_TEST1(f1 int not null PRIMARY KEY, f2 int, f3 varchar(100));

Succeed.

SQL> SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE FROM DBA_TAB_COLUMNS WHERE TABLE_NAME = 'VIEW_TEST1' ORDER BY COLUMN_NAME;

TABLE_NAME                                                       COLUMN_NAME                                                      DATA_TYPE                                                       
---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
VIEW_TEST1                                                       F1                                                               BINARY_INTEGER                                                  
VIEW_TEST1                                                       F2                                                               BINARY_INTEGER                                                  
VIEW_TEST1                                                       F3                                                               VARCHAR                                                         

3 rows fetched.

SQL> SELECT OWNER, INDEX_TYPE, TABLE_NAME FROM DBA_INDEXES WHERE TABLE_NAME = 'VIEW_TEST1';

OWNER                                                            INDEX_TYPE TABLE_NAME                                                      
---------------------------------------------------------------- ---------- ----------------------------------------------------------------
SYS                                                              NORMAL     VIEW_TEST1                                                      

1 rows fetched.

SQL> CREATE INDEX f2_index ON VIEW_TEST1 (f2);

Succeed.

SQL> SELECT OWNER, INDEX_NAME, INDEX_TYPE, TABLE_NAME FROM DBA_INDEXES WHERE TABLE_NAME = 'VIEW_TEST1' AND INDEX_NAME = 'F2_INDEX';

OWNER                                                            INDEX_NAME                                                       INDEX_TYPE TABLE_NAME                                                      
---------------------------------------------------------------- ---------------------------------------------------------------- ---------- ----------------------------------------------------------------
SYS                                                              F2_INDEX                                                         NORMAL     VIEW_TEST1                                                      

1 rows fetched.

SQL> DROP TABLE IF EXISTS VIEW_TEST1;

Succeed.

SQL> 
SQL> -- test view dba_views
SQL> select VIEW_NAME,VIEW_TYPE from DBA_VIEWS where VIEW_NAME = 'DBA_VIEWS';

VIEW_NAME                                                        VIEW_TYPE
---------------------------------------------------------------- ---------
DBA_VIEWS                                                        NORMAL   

1 rows fetched.

SQL> 
SQL> drop view if exists v_C_NODEB2_C1;

Succeed.

SQL> create view v_C_NODEB2_C1  as select 1 from dual;

Succeed.

SQL> drop view  v_C_NODEB2_C1 cascade constraints;

Succeed.

SQL> 
SQL> -- test : user who has been granted privileges can access dba_* views WITHOUT schema name 'SYS'.
SQL> create user dba_view_test_user identified by Root1234;

Succeed.

SQL> grant create session, create sequence, select any table to dba_view_test_user;

Succeed.

SQL> grant dba to dba_view_test_user;

Succeed.

SQL> 
SQL> conn dba_view_test_user/Root1234@127.0.0.1:1611

connected.

SQL> declare -- succeed. 
  2         -- WARNING: if you add a new system view start with DBA_,
  3         -- then you should also add a synonym for the view in initdb.sql file.
  4         -- and do NOT grant the select privilege to PUBLIC user.
  5         -- e.g.  CREATE OR REPLACE PUBLIC SYNONYM DBA_XXX FOR SYS.DBA_XXX
  6     sqlstr varchar(128);
  7     cursor mycursor is select view_name from sys.dba_views where view_name like '%DBA_%';
  8 begin
  9     for name in mycursor
 10     loop
 11         sqlstr := 'select distinct 1 from ' || name.view_name;
 12         dbe_output.print_line(name.view_name);
 13         execute immediate sqlstr;
 14     end loop;
 15 end;
 16 /

PL/SQL procedure successfully completed.

SQL> create sequence seq_test_001 start with 100;

Succeed.

SQL> create sequence seq_test_002 start with 100;

Succeed.

SQL> select object_name, object_type, status from user_objects where object_type = 'SEQUENCE' order by object_name;

OBJECT_NAME                                                      OBJECT_TYPE     STATUS 
---------------------------------------------------------------- --------------- -------
SEQ_TEST_001                                                     SEQUENCE        VALID  
SEQ_TEST_002                                                     SEQUENCE        VALID  

2 rows fetched.

SQL> 
SQL> conn / as sysdba

connected.

SQL> select object_name, object_type, status from dba_objects where object_type = 'SEQUENCE' order by object_name;

OBJECT_NAME                                                      OBJECT_TYPE     STATUS 
---------------------------------------------------------------- --------------- -------
JOBSEQ                                                           SEQUENCE        VALID  
OBJECT_ID$                                                       SEQUENCE        VALID  
SEQ_PROC_001                                                     SEQUENCE        VALID  
SEQ_TEST_001                                                     SEQUENCE        VALID  
SEQ_TEST_002                                                     SEQUENCE        VALID  
SNAP_ID$                                                         SEQUENCE        VALID  

6 rows fetched.

SQL> drop user dba_view_test_user cascade;

Succeed.

SQL> drop table if exists t1;

Succeed.

SQL> drop table if exists t2;

Succeed.

SQL> drop table if exists t3;

Succeed.

SQL> drop table if exists t4;

Succeed.

SQL> drop table if exists "test";

Succeed.

SQL> drop view if exists v1;

Succeed.

SQL> create table t1(a int, b int, c int);

Succeed.

SQL> create table t2(f1 int, f2 int, f3 int);

Succeed.

SQL> create table t3(aa int, bb int, cc int);

Succeed.

SQL> create table t4(ff1 int, ff2 int, ff3 int);

Succeed.

SQL> create table "test"(n int, m int, k int);

Succeed.

SQL> create view v1 as select * from t1;

Succeed.

SQL> select * from v1;

A            B            C           
------------ ------------ ------------

0 rows fetched.

SQL> drop view if exists v1;

Succeed.

SQL> create view v1 as select "test".* from "test";

Succeed.

SQL> select * from v1;

N            M            K           
------------ ------------ ------------

0 rows fetched.

SQL> drop view if exists v1;

Succeed.

SQL> create view v1 as select sys."test".* from "test";

Succeed.

SQL> select * from v1;

N            M            K           
------------ ------------ ------------

0 rows fetched.

SQL> drop view if exists v1;

Succeed.

SQL> create view v1 as select "sys"."test".* from "test";

Succeed.

SQL> select * from v1;

N            M            K           
------------ ------------ ------------

0 rows fetched.

SQL> drop view if exists v1;

Succeed.

SQL> create view v1 as select * from (select a,b+c,c from t1) tt1;

Succeed.

SQL> select * from v1;

A            B+C                  C           
------------ -------------------- ------------

0 rows fetched.

SQL> drop view if exists v1;

Succeed.

SQL> create view v1 as select * from t1 where exists (select * from t2);

Succeed.

SQL> select * from v1;

A            B            C           
------------ ------------ ------------

0 rows fetched.

SQL> drop view if exists v1;

Succeed.

SQL> create view v1 as select * from t1 join t2 on t1.a=t2.f1;

Succeed.

SQL> select * from v1;

A            B            C            F1           F2           F3          
------------ ------------ ------------ ------------ ------------ ------------

0 rows fetched.

SQL> drop view if exists v1;

Succeed.

SQL> create view v1 as select t1.*, t2.* from t1 join t2 on t1.a=t2.f1;

Succeed.

SQL> select * from v1;

A            B            C            F1           F2           F3          
------------ ------------ ------------ ------------ ------------ ------------

0 rows fetched.

SQL> drop view if exists v1;

Succeed.

SQL> create view v1 as select * from (select a,b+c,c from t1) tt1  join t2 on tt1.a=t2.f1;

Succeed.

SQL> select * from v1;

A            B+C                  C            F1           F2           F3          
------------ -------------------- ------------ ------------ ------------ ------------

0 rows fetched.

SQL> drop view if exists v1;

Succeed.

SQL> create view v1 as select tt1.*, t2.* from (select a,b+c,c from t1) tt1 join t2 on tt1.a=t2.f1;

Succeed.

SQL> select * from v1;

A            B+C                  C            F1           F2           F3          
------------ -------------------- ------------ ------------ ------------ ------------

0 rows fetched.

SQL> drop view if exists v1;

Succeed.

SQL> create view v1 as select * from t1 union select * from t2 union select * from t3 union select * from t4;

Succeed.

SQL> select * from v1;

A            B            C           
------------ ------------ ------------

0 rows fetched.

SQL> drop view if exists v1;

Succeed.

SQL> create view v1 as (select * from (select a,b+c,c from t1) tt1 where tt1.a=10 order by tt1.a limit 10) union select * from t2 union select * from t3;

Succeed.

SQL> select * from v1;

A            B+C                  C           
------------ -------------------- ------------

0 rows fetched.

SQL> drop view if exists v1;

Succeed.

SQL> create view v1 as (select * from (select a,b+c,c from t1) tt1 where tt1.a=10 order by tt1.a limit 10) union select t2.* from t2 join t3 on t2.f1=t3.aa union select * from t4;

Succeed.

SQL> select * from v1;

A            B+C                  C           
------------ -------------------- ------------

0 rows fetched.

SQL> drop view if exists v1;

Succeed.

SQL> 
SQL> drop table if exists t1;

Succeed.

SQL> drop table if exists t2;

Succeed.

SQL> drop table if exists t3;

Succeed.

SQL> drop table if exists t4;

Succeed.

SQL> drop table if exists "test";

Succeed.

SQL> 
SQL> create table t1 (a int);

Succeed.

SQL> create view v1 as select * from t1;

Succeed.

SQL> select * from v1;

A           
------------

0 rows fetched.

SQL> drop table t1;

Succeed.

SQL> create table t1 (a int,b char);

Succeed.

SQL> select * from v1;

A           
------------

0 rows fetched.

SQL> drop table if exists t1;

Succeed.

SQL> drop view if exists v1;

Succeed.

SQL> 
SQL> create table t2 (a int);

Succeed.

SQL> create synonym t2_1 for t2;

Succeed.

SQL> create view v2 as select * from t2_1;

Succeed.

SQL> select * from v2;

A           
------------

0 rows fetched.

SQL> drop table t2;

Succeed.

SQL> create table t2(b char(3));

Succeed.

SQL> select * from v2;

CT-00601, [1:22]Sql syntax error: invalid column name 'A'
SQL> drop table if exists t2;

Succeed.

SQL> create table t2(a char(3));

Succeed.

SQL> select * from v2;

A  
---

0 rows fetched.

SQL> drop table if exists t2;

Succeed.

SQL> create table t2(b int, a char(3));

Succeed.

SQL> insert into t2 values(10,'abc');

1 rows affected.

SQL> select * from v2;

A  
---
abc

1 rows fetched.

SQL> drop table if exists t2;

Succeed.

SQL> drop view if exists v2;

Succeed.

SQL> drop synonym t2_1;

Succeed.

SQL> 
SQL> -- query plan
SQL> explain select * from dba_objects;

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
| Id  | Description                            | Owner | Name                | Rows | Cost | Bytes | Remark |
-------------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                       |       |                     |      |      |       |        |
| 1   |   VIEW                                 | SYS   | DBA_OBJECTS         |      |      |       |        |
| 2   |     UNION ALL                          |       |                     |      |      |       |        |
| 3   |       NESTED LOOPS                     |       |                     |      |      |       |        |
| 4   |         TABLE ACCESS FULL              | SYS   | SYS_USERS U         |      |      |       |        |
| 5   |         TABLE ACCESS BY INDEX ROWID    | SYS   | SYS_TABLES T        |      |      |       |        |
| 6   |           INDEX RANGE SCAN             | SYS   | IX_TABLE$001        |      |      |       |        |
| 7   |       NESTED LOOPS                     |       |                     |      |      |       |        |
| 8   |         NESTED LOOPS                   |       |                     |      |      |       |        |
| 9   |           TABLE ACCESS FULL            | SYS   | SYS_USERS U         |      |      |       |        |
| 10  |           TABLE ACCESS BY INDEX ROWID  | SYS   | SYS_TABLES T        |      |      |       |        |
| 11  |             INDEX RANGE SCAN           | SYS   | IX_TABLE$001        |      |      |       |        |
| 12  |         TABLE ACCESS BY INDEX ROWID    | SYS   | SYS_TABLE_PARTS P   |      |      |       |        |
| 13  |           INDEX RANGE SCAN             | SYS   | IX_TABLEPART$001    |      |      |       |        |
| 14  |       NESTED LOOPS                     |       |                     |      |      |       |        |
| 15  |         NESTED LOOPS                   |       |                     |      |      |       |        |
| 16  |           TABLE ACCESS FULL            | SYS   | SYS_USERS U         |      |      |       |        |
| 17  |           TABLE ACCESS BY INDEX ROWID  | SYS   | SYS_INDEXES I       |      |      |       |        |
| 18  |             INDEX RANGE SCAN           | SYS   | IX_INDEX$002        |      |      |       |        |
| 19  |         TABLE ACCESS BY INDEX ROWID    | SYS   | SYS_TABLES T        |      |      |       |        |
| 20  |           INDEX UNIQUE SCAN            | SYS   | IX_TABLE$002        |      |      |       |        |
| 21  |       NESTED LOOPS                     |       |                     |      |      |       |        |
| 22  |         TABLE ACCESS FULL              | SYS   | SYS_USERS U         |      |      |       |        |
| 23  |         TABLE ACCESS BY INDEX ROWID    | SYS   | SYS_VIEWS V         |      |      |       |        |
| 24  |           INDEX RANGE SCAN             | SYS   | IX_VIEW$001         |      |      |       |        |
| 25  |       TABLE ACCESS FULL                | SYS   | DV_DYNAMIC_VIEWS DV |      |      |       |        |
| 26  |       NESTED LOOPS                     |       |                     |      |      |       |        |
| 27  |         TABLE ACCESS FULL              | SYS   | SYS_USERS U         |      |      |       |        |
| 28  |         TABLE ACCESS BY INDEX ROWID    | SYS   | SYS_PROCS P         |      |      |       |        |
| 29  |           INDEX RANGE SCAN             | SYS   | IX_PROC_003         |      |      |       |        |
| 30  |       NESTED LOOPS                     |       |                     |      |      |       |        |
| 31  |         TABLE ACCESS FULL              | SYS   | SYS_USERS U         |      |      |       |        |
| 32  |         TABLE ACCESS BY INDEX ROWID    | SYS   | SYS_SEQUENCES S     |      |      |       |        |
| 33  |           INDEX RANGE SCAN             | SYS   | IX_SEQ$001          |      |      |       |        |
| 34  |       NESTED LOOPS                     |       |                     |      |      |       |        |
| 35  |         TABLE ACCESS FULL              | SYS   | SYS_USERS U         |      |      |       |        |
| 36  |         TABLE ACCESS BY INDEX ROWID    | SYS   | SYS_SYNONYMS Y      |      |      |       |        |
| 37  |           INDEX RANGE SCAN             | SYS   | IX_SYNONYM$001      |      |      |       |        |
| 38  |       NESTED LOOPS                     |       |                     |      |      |       |        |
| 39  |         TABLE ACCESS FULL              | SYS   | SYS_DIRECTORIES D   |      |      |       |        |
| 40  |         TABLE ACCESS BY INDEX ROWID    | SYS   | SYS_USERS U         |      |      |       |        |
| 41  |           INDEX UNIQUE SCAN            | SYS   | IX_USER$001         |      |      |       |        |
| 42  |       NESTED LOOPS                     |       |                     |      |      |       |        |
| 43  |         TABLE ACCESS FULL              | SYS   | SYS_USERS U         |      |      |       |        |
| 44  |         TABLE ACCESS BY INDEX ROWID    | SYS   | SYS_LIBRARIES L     |      |      |       |        |
| 45  |           INDEX RANGE SCAN             | SYS   | IDX_LIBRARY_001     |      |      |       |        |
-------------------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   6 - access: T.USER# = U.ID                                   
   11 - access: U.ID = T.USER#                                  
   13 - access: P.USER# = T.USER# AND P.TABLE# = T.ID AND U.ID = P.USER#
   18 - access: U.ID = I.USER#                                  
   19 - filter: U.ID = T.USER#                                  
   20 - access: T.USER# = I.USER# AND I.TABLE# = T.ID           
   24 - access: V.USER# = U.ID                                  
   29 - access: P.USER# = U.ID                                  
   33 - access: S.UID = U.ID                                    
   37 - access: Y.USER# = U.ID                                  
   41 - access: U.ID = D.USER#                                  
   45 - access: U.ID = L.USER#                                  

64 rows fetched.

SQL> explain select * from all_objects;

EXPLAIN PLAN OUTPUT
----------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
| Id  | Description                            | Owner | Name                | Rows | Cost | Bytes | Remark |
-------------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                       |       |                     |      |      |       |        |
| 1   |   VIEW                                 | SYS   | ALL_OBJECTS         |      |      |       |        |
| 2   |     UNION ALL                          |       |                     |      |      |       |        |
| 3   |       NESTED LOOPS                     |       |                     |      |      |       |        |
| 4   |         TABLE ACCESS FULL              | SYS   | SYS_USERS U         |      |      |       |        |
| 5   |         TABLE ACCESS BY INDEX ROWID    | SYS   | SYS_TABLES T        |      |      |       |        |
| 6   |           INDEX RANGE SCAN             | SYS   | IX_TABLE$001        |      |      |       |        |
| 7   |       NESTED LOOPS                     |       |                     |      |      |       |        |
| 8   |         NESTED LOOPS                   |       |                     |      |      |       |        |
| 9   |           TABLE ACCESS FULL            | SYS   | SYS_USERS U         |      |      |       |        |
| 10  |           TABLE ACCESS BY INDEX ROWID  | SYS   | SYS_TABLES T        |      |      |       |        |
| 11  |             INDEX RANGE SCAN           | SYS   | IX_TABLE$001        |      |      |       |        |
| 12  |         TABLE ACCESS BY INDEX ROWID    | SYS   | SYS_TABLE_PARTS P   |      |      |       |        |
| 13  |           INDEX RANGE SCAN             | SYS   | IX_TABLEPART$001    |      |      |       |        |
| 14  |       NESTED LOOPS                     |       |                     |      |      |       |        |
| 15  |         NESTED LOOPS                   |       |                     |      |      |       |        |
| 16  |           TABLE ACCESS FULL            | SYS   | SYS_USERS U         |      |      |       |        |
| 17  |           TABLE ACCESS BY INDEX ROWID  | SYS   | SYS_INDEXES I       |      |      |       |        |
| 18  |             INDEX RANGE SCAN           | SYS   | IX_INDEX$002        |      |      |       |        |
| 19  |         TABLE ACCESS BY INDEX ROWID    | SYS   | SYS_TABLES T        |      |      |       |        |
| 20  |           INDEX UNIQUE SCAN            | SYS   | IX_TABLE$002        |      |      |       |        |
| 21  |       NESTED LOOPS                     |       |                     |      |      |       |        |
| 22  |         TABLE ACCESS FULL              | SYS   | SYS_USERS U         |      |      |       |        |
| 23  |         TABLE ACCESS BY INDEX ROWID    | SYS   | SYS_VIEWS V         |      |      |       |        |
| 24  |           INDEX RANGE SCAN             | SYS   | IX_VIEW$001         |      |      |       |        |
| 25  |       TABLE ACCESS FULL                | SYS   | DV_DYNAMIC_VIEWS DV |      |      |       |        |
| 26  |       NESTED LOOPS                     |       |                     |      |      |       |        |
| 27  |         TABLE ACCESS FULL              | SYS   | SYS_USERS U         |      |      |       |        |
| 28  |         TABLE ACCESS BY INDEX ROWID    | SYS   | SYS_PROCS P         |      |      |       |        |
| 29  |           INDEX RANGE SCAN             | SYS   | IX_PROC_003         |      |      |       |        |
| 30  |       NESTED LOOPS                     |       |                     |      |      |       |        |
| 31  |         TABLE ACCESS FULL              | SYS   | SYS_USERS U         |      |      |       |        |
| 32  |         TABLE ACCESS BY INDEX ROWID    | SYS   | SYS_SEQUENCES S     |      |      |       |        |
| 33  |           INDEX RANGE SCAN             | SYS   | IX_SEQ$001          |      |      |       |        |
| 34  |       NESTED LOOPS                     |       |                     |      |      |       |        |
| 35  |         TABLE ACCESS FULL              | SYS   | SYS_USERS U         |      |      |       |        |
| 36  |         TABLE ACCESS BY INDEX ROWID    | SYS   | SYS_SYNONYMS Y      |      |      |       |        |
| 37  |           INDEX RANGE SCAN             | SYS   | IX_SYNONYM$001      |      |      |       |        |
| 38  |       NESTED LOOPS                     |       |                     |      |      |       |        |
| 39  |         TABLE ACCESS FULL              | SYS   | SYS_USERS U         |      |      |       |        |
| 40  |         TABLE ACCESS BY INDEX ROWID    | SYS   | SYS_SYNONYMS Y      |      |      |       |        |
| 41  |           INDEX RANGE SCAN             | SYS   | IX_SYNONYM$001      |      |      |       |        |
| 42  |       NESTED LOOPS                     |       |                     |      |      |       |        |
| 43  |         TABLE ACCESS FULL              | SYS   | SYS_USERS U         |      |      |       |        |
| 44  |         TABLE ACCESS BY INDEX ROWID    | SYS   | SYS_SYNONYMS Y      |      |      |       |        |
| 45  |           INDEX RANGE SCAN             | SYS   | IX_SYNONYM$001      |      |      |       |        |
| 46  |       NESTED LOOPS                     |       |                     |      |      |       |        |
| 47  |         TABLE ACCESS FULL              | SYS   | SYS_DIRECTORIES D   |      |      |       |        |
| 48  |         TABLE ACCESS BY INDEX ROWID    | SYS   | SYS_USERS U         |      |      |       |        |
| 49  |           INDEX UNIQUE SCAN            | SYS   | IX_USER$001         |      |      |       |        |
| 50  |       NESTED LOOPS                     |       |                     |      |      |       |        |
| 51  |         TABLE ACCESS FULL              | SYS   | SYS_USERS U         |      |      |       |        |
| 52  |         TABLE ACCESS BY INDEX ROWID    | SYS   | SYS_LIBRARIES L     |      |      |       |        |
| 53  |           INDEX RANGE SCAN             | SYS   | IDX_LIBRARY_001     |      |      |       |        |
-------------------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   5 - filter: T.RECYCLED = 0 AND U.NAME = USER OR USER = 'SYS' OR FALSE != HAS_OBJ_PRIVS(USER, U.NAME, 
               '"' || T.NAME || '"', 'TABLE')                   
   6 - access: T.USER# = U.ID                                   
   10 - filter: T.RECYCLED = 0 AND U.NAME = USER OR USER = 'SYS' OR FALSE != HAS_OBJ_PRIVS(USER, U.NAME, 
               '"' || T.NAME || '"', 'TABLE')                   
   11 - access: T.USER# = U.ID                                  
   13 - access: T.USER# = P.USER# AND P.TABLE# = T.ID AND P.USER# = U.ID
   18 - access: I.USER# = U.ID                                  
   19 - filter: T.RECYCLED = 0 AND U.NAME = USER OR USER = 'SYS' OR FALSE != HAS_OBJ_PRIVS(USER, U.NAME, 
               '"' || T.NAME || '"', 'TABLE') AND T.USER# = U.ID
   20 - access: I.USER# = T.USER# AND I.TABLE# = T.ID           
   23 - filter: U.NAME = USER OR USER = 'SYS' OR FALSE != HAS_OBJ_PRIVS(USER, U.NAME, '"' || V.NAME || 
               '"', 'VIEW')                                     
   24 - access: V.USER# = U.ID                                  
   25 - filter: DV.USER_NAME = USER OR USER = 'SYS' OR FALSE != HAS_OBJ_PRIVS(USER, 'SYS', '"' || DV.NAME || 
               '"', 'VIEW')                                     
   28 - filter: U.NAME = USER OR USER = 'SYS' OR FALSE != HAS_OBJ_PRIVS(USER, U.NAME, '"' || P.NAME || 
               '"', P.TYPE)                                     
   29 - access: P.USER# = U.ID                                  
   32 - filter: U.NAME = USER OR USER = 'SYS' OR FALSE != HAS_OBJ_PRIVS(USER, U.NAME, '"' || S.NAME || 
               '"', 'SEQUENCE')                                 
   33 - access: S.UID = U.ID                                    
   36 - filter: Y.TYPE = 0 AND U.NAME = USER OR U.NAME = 'PUBLIC' OR USER = 'SYS' OR FALSE != HAS_OBJ_PRIVS(USER, 
               Y.TABLE_OWNER, '"' || Y.TABLE_NAME || '"', 'TABLE')
   37 - access: Y.USER# = U.ID                                  
   40 - filter: Y.TYPE = 1 AND U.NAME = USER OR U.NAME = 'PUBLIC' OR USER = 'SYS' OR FALSE != HAS_OBJ_PRIVS(USER, 
               Y.TABLE_OWNER, '"' || Y.TABLE_NAME || '"', 'VIEW')
   41 - access: Y.USER# = U.ID                                  
   44 - filter: Y.TYPE = 8 AND U.NAME = USER OR U.NAME = 'PUBLIC' OR USER = 'SYS' OR FALSE != HAS_OBJ_PRIVS(USER, 
               Y.TABLE_OWNER, '"' || Y.SYNONYM_NAME || '"', 'FUNCTION')
   45 - access: Y.USER# = U.ID                                  
   48 - filter: U.NAME = USER OR USER = 'SYS' OR FALSE != HAS_OBJ_PRIVS(USER, U.NAME, '"' || D.DIRECTORY_NAME || 
               '"', 'DIRECTORY')                                
   49 - access: U.ID = D.USER#                                  
   52 - filter: U.NAME = USER OR USER = 'SYS' OR FALSE != HAS_OBJ_PRIVS(USER, U.NAME, '"' || L.NAME || 
               '"', 'LIBRARY')                                  
   53 - access: U.ID = L.USER#                                  

97 rows fetched.

SQL> explain select * from user_objects;

EXPLAIN PLAN OUTPUT                                             
----------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------
| Id  | Description                            | Owner | Name              | Rows | Cost | Bytes | Remark |
-----------------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                       |       |                   |      |      |       |        |
| 1   |   VIEW                                 | SYS   | USER_OBJECTS      |      |      |       |        |
| 2   |     UNION ALL                          |       |                   |      |      |       |        |
| 3   |       NESTED LOOPS                     |       |                   |      |      |       |        |
| 4   |         NESTED LOOPS                   |       |                   |      |      |       |        |
| 5   |           TABLE ACCESS FULL            | SYS   | DV_ME ME          |      |      |       |        |
| 6   |           TABLE ACCESS BY INDEX ONLY   | SYS   | SYS_TABLES T      |      |      |       |        |
| 7   |             INDEX RANGE SCAN           | SYS   | IX_TABLE$001      |      |      |       |        |
| 8   |         TABLE ACCESS BY ROWID          | SYS   | SYS_TABLES T      |      |      |       |        |
| 9   |           ROWID SCAN                   |       |                   |      |      |       |        |
| 10  |       NESTED LOOPS                     |       |                   |      |      |       |        |
| 11  |         NESTED LOOPS                   |       |                   |      |      |       |        |
| 12  |           TABLE ACCESS FULL            | SYS   | DV_ME ME          |      |      |       |        |
| 13  |           TABLE ACCESS BY INDEX ROWID  | SYS   | SYS_TABLES T      |      |      |       |        |
| 14  |             INDEX RANGE SCAN           | SYS   | IX_TABLE$001      |      |      |       |        |
| 15  |         TABLE ACCESS BY INDEX ROWID    | SYS   | SYS_TABLE_PARTS P |      |      |       |        |
| 16  |           INDEX RANGE SCAN             | SYS   | IX_TABLEPART$001  |      |      |       |        |
| 17  |       NESTED LOOPS                     |       |                   |      |      |       |        |
| 18  |         NESTED LOOPS                   |       |                   |      |      |       |        |
| 19  |           TABLE ACCESS FULL            | SYS   | DV_ME ME          |      |      |       |        |
| 20  |           TABLE ACCESS BY INDEX ROWID  | SYS   | SYS_INDEXES I     |      |      |       |        |
| 21  |             INDEX RANGE SCAN           | SYS   | IX_INDEX$002      |      |      |       |        |
| 22  |         TABLE ACCESS BY INDEX ROWID    | SYS   | SYS_TABLES T      |      |      |       |        |
| 23  |           INDEX UNIQUE SCAN            | SYS   | IX_TABLE$002      |      |      |       |        |
| 24  |       NESTED LOOPS                     |       |                   |      |      |       |        |
| 25  |         NESTED LOOPS                   |       |                   |      |      |       |        |
| 26  |           TABLE ACCESS FULL            | SYS   | DV_ME ME          |      |      |       |        |
| 27  |           TABLE ACCESS BY INDEX ONLY   | SYS   | SYS_VIEWS V       |      |      |       |        |
| 28  |             INDEX RANGE SCAN           | SYS   | IX_VIEW$001       |      |      |       |        |
| 29  |         TABLE ACCESS BY ROWID          | SYS   | SYS_VIEWS V       |      |      |       |        |
| 30  |           ROWID SCAN                   |       |                   |      |      |       |        |
| 31  |       NESTED LOOPS                     |       |                   |      |      |       |        |
| 32  |         NESTED LOOPS                   |       |                   |      |      |       |        |
| 33  |           TABLE ACCESS FULL            | SYS   | DV_ME ME          |      |      |       |        |
| 34  |           TABLE ACCESS BY INDEX ONLY   | SYS   | SYS_PROCS P       |      |      |       |        |
| 35  |             INDEX RANGE SCAN           | SYS   | IX_PROC_003       |      |      |       |        |
| 36  |         TABLE ACCESS BY ROWID          | SYS   | SYS_PROCS P       |      |      |       |        |
| 37  |           ROWID SCAN                   |       |                   |      |      |       |        |
| 38  |       NESTED LOOPS                     |       |                   |      |      |       |        |
| 39  |         NESTED LOOPS                   |       |                   |      |      |       |        |
| 40  |           TABLE ACCESS FULL            | SYS   | DV_ME ME          |      |      |       |        |
| 41  |           TABLE ACCESS BY INDEX ONLY   | SYS   | SYS_SEQUENCES S   |      |      |       |        |
| 42  |             INDEX RANGE SCAN           | SYS   | IX_SEQ$001        |      |      |       |        |
| 43  |         TABLE ACCESS BY ROWID          | SYS   | SYS_SEQUENCES S   |      |      |       |        |
| 44  |           ROWID SCAN                   |       |                   |      |      |       |        |
| 45  |       NESTED LOOPS                     |       |                   |      |      |       |        |
| 46  |         NESTED LOOPS                   |       |                   |      |      |       |        |
| 47  |           TABLE ACCESS FULL            | SYS   | DV_ME ME          |      |      |       |        |
| 48  |           TABLE ACCESS BY INDEX ONLY   | SYS   | SYS_SYNONYMS Y    |      |      |       |        |
| 49  |             INDEX RANGE SCAN           | SYS   | IX_SYNONYM$001    |      |      |       |        |
| 50  |         TABLE ACCESS BY ROWID          | SYS   | SYS_SYNONYMS Y    |      |      |       |        |
| 51  |           ROWID SCAN                   |       |                   |      |      |       |        |
| 52  |       HASH JOIN(L)                     |       |                   |      |      |       |        |
| 53  |         TABLE ACCESS FULL              | SYS   | DV_ME ME          |      |      |       |        |
| 54  |         TABLE ACCESS FULL              | SYS   | SYS_DIRECTORIES D |      |      |       |        |
| 55  |       NESTED LOOPS                     |       |                   |      |      |       |        |
| 56  |         NESTED LOOPS                   |       |                   |      |      |       |        |
| 57  |           TABLE ACCESS FULL            | SYS   | DV_ME ME          |      |      |       |        |
| 58  |           TABLE ACCESS BY INDEX ONLY   | SYS   | SYS_LIBRARIES L   |      |      |       |        |
| 59  |             INDEX RANGE SCAN           | SYS   | IDX_LIBRARY_001   |      |      |       |        |
| 60  |         TABLE ACCESS BY ROWID          | SYS   | SYS_LIBRARIES L   |      |      |       |        |
| 61  |           ROWID SCAN                   |       |                   |      |      |       |        |
-----------------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   7 - access: T.USER# = ME.USER_ID                             
   14 - access: ME.USER_ID = T.USER#                            
   16 - access: P.USER# = T.USER# AND P.TABLE# = T.ID AND ME.USER_ID = P.USER#
   21 - access: ME.USER_ID = I.USER#                            
   22 - filter: ME.USER_ID = T.USER#                            
   23 - access: T.USER# = I.USER# AND I.TABLE# = T.ID           
   28 - access: V.USER# = ME.USER_ID                            
   35 - access: P.USER# = ME.USER_ID                            
   42 - access: S.UID = ME.USER_ID                              
   49 - access: Y.USER# = ME.USER_ID                            
   52 - access: ME.USER_ID = D.USER#                            
   59 - access: ME.USER_ID = L.USER#                            

80 rows fetched.

SQL> explain select * from dba_indexes;

EXPLAIN PLAN OUTPUT
----------------------------------------------------------------
---------------------------------------------------------------------------------------------------
| Id  | Description                        | Owner | Name          | Rows | Cost | Bytes | Remark |
---------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                   |       |               |      |      |       |        |
| 1   |   NESTED LOOPS                     |       |               |      |      |       |        |
| 2   |     NESTED LOOPS                   |       |               |      |      |       |        |
| 3   |       TABLE ACCESS FULL            | SYS   | SYS_USERS U   |      |      |       |        |
| 4   |       TABLE ACCESS BY INDEX ROWID  | SYS   | SYS_INDEXES I |      |      |       |        |
| 5   |         INDEX RANGE SCAN           | SYS   | IX_INDEX$002  |      |      |       |        |
| 6   |     TABLE ACCESS BY INDEX ROWID    | SYS   | SYS_TABLES T  |      |      |       |        |
| 7   |       INDEX UNIQUE SCAN            | SYS   | IX_TABLE$002  |      |      |       |        |
---------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   5 - access: U.ID = I.USER#                                   
   6 - filter: T.RECYCLED = 0 AND I.USER# = T.USER#             
   7 - access: I.TABLE# = T.ID AND U.ID = T.USER#               

17 rows fetched.

SQL> explain select * from all_indexes;

EXPLAIN PLAN OUTPUT
----------------------------------------------------------------
---------------------------------------------------------------------------------------------------
| Id  | Description                        | Owner | Name          | Rows | Cost | Bytes | Remark |
---------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                   |       |               |      |      |       |        |
| 1   |   NESTED LOOPS                     |       |               |      |      |       |        |
| 2   |     NESTED LOOPS                   |       |               |      |      |       |        |
| 3   |       TABLE ACCESS FULL            | SYS   | SYS_USERS U   |      |      |       |        |
| 4   |       TABLE ACCESS BY INDEX ROWID  | SYS   | SYS_INDEXES I |      |      |       |        |
| 5   |         INDEX RANGE SCAN           | SYS   | IX_INDEX$002  |      |      |       |        |
| 6   |     TABLE ACCESS BY INDEX ROWID    | SYS   | SYS_TABLES T  |      |      |       |        |
| 7   |       INDEX UNIQUE SCAN            | SYS   | IX_TABLE$002  |      |      |       |        |
---------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   5 - access: U.ID = I.USER#                                   
   6 - filter: T.RECYCLED = 0 AND U.NAME = USER OR USER = 'SYS' OR FALSE != HAS_OBJ_PRIVS(USER, U.NAME, 
               '"' || T.NAME || '"', 'TABLE') AND I.USER# = T.USER#
   7 - access: I.TABLE# = T.ID AND U.ID = T.USER#               

18 rows fetched.

SQL> explain select * from user_indexes;

EXPLAIN PLAN OUTPUT
----------------------------------------------------------------
---------------------------------------------------------------------------------------------------
| Id  | Description                        | Owner | Name          | Rows | Cost | Bytes | Remark |
---------------------------------------------------------------------------------------------------
| 0   | SELECT STATEMENT                   |       |               |      |      |       |        |
| 1   |   NESTED LOOPS                     |       |               |      |      |       |        |
| 2   |     NESTED LOOPS                   |       |               |      |      |       |        |
| 3   |       TABLE ACCESS FULL            | SYS   | DV_ME ME      |      |      |       |        |
| 4   |       TABLE ACCESS BY INDEX ROWID  | SYS   | SYS_INDEXES I |      |      |       |        |
| 5   |         INDEX RANGE SCAN           | SYS   | IX_INDEX$002  |      |      |       |        |
| 6   |     TABLE ACCESS BY INDEX ROWID    | SYS   | SYS_TABLES T  |      |      |       |        |
| 7   |       INDEX UNIQUE SCAN            | SYS   | IX_TABLE$002  |      |      |       |        |
---------------------------------------------------------------------------------------------------
Predicate Information (identified by id):                       
-----------------------------------------                       
   5 - access: ME.USER_ID = I.USER#                             
   6 - filter: T.RECYCLED = 0 AND T.USER# = I.USER#             
   7 - access: I.TABLE# = T.ID AND ME.USER_ID = T.USER#         

17 rows fetched.

SQL> 
SQL> drop table if exists Utils_TableDef;

Succeed.

SQL> drop table if exists Utils_FieldDef;

Succeed.

SQL> create table Utils_TableDef(                   
  2      iTableId  number(10, 0) not null ,         
  3      sVersion  varchar2(113) not null ,         
  4      sTableName  varchar2(113) not null ,       
  5      sShortTableName  varchar2(113) null,       
  6      iLayer  number(10, 0) null,                
  7      iShareMode  number(10, 0) null,            
  8      iMode  number(3, 0) default 2 not null,    
  9       primary key  ( sVersion, iMode, iTableId )
 10  );  

Succeed.

SQL> 
SQL> create table Utils_FieldDef(                             
  2     iTableId  number(10, 0) not null ,                   
  3     iFieldId  number(10, 0) not null ,                   
  4     sVersion  varchar2(113) not null ,                   
  5     sFieldName  varchar2(113) not null ,                 
  6     sShortFieldName  varchar2(113) null,                 
  7     sDspName  varchar2(575) null,                        
  8     iFieldType  number(10, 0) default 0 not null,        
  9     sDefValue  varchar2(113) null,                       
 10     iEditType  number(10, 0) default 0 not null,         
 11     iVisible  number(10, 0) default 1 not null,          
 12     sTitle  varchar2(113) null,                          
 13     iModFlagOnNew  number(10, 0) default 1 not null,     
 14     iModFlagOnEdit  number(10, 0) default 1 not null,    
 15     iSortField  number(10, 0) default 999 not null,      
 16     ElementType  varchar2(113) null,                     
 17     Bound  varchar2(113) null,                           
 18     IsKey  number(10, 0) default 0 not null,             
 19     BulkFlag  number(10, 0) default 0 not null,          
 20     ModifyFlag  number(10, 0) default 1 not null,        
 21     CanDownload  number(10, 0) default 1 not null,       
 22     iMustGive  number(10, 0) default 0 null,             
 23     iRootFlag  number(10, 0) default 1 not null,         
 24     iSortIndex  number(10, 0) default  -1 not null,      
 25     iMode  number(3, 0) default 2 not null,              
 26      primary key  ( sVersion, iMode, iTableId, iFieldId )
 27 ); 

Succeed.

SQL> create or replace view view_FieldAllInfo as select a.sTableName, b.* from Utils_TableDef a, Utils_FieldDef b where a.sVersion = b.sVersion and a.iMode = b.iMode and a.iTableId = b.iTableId;    

Succeed.

SQL> select * from view_FieldAllInfo;

STABLENAME                                                       ITABLEID                                 IFIELDID                                 SVERSION                                                         SFIELDNAME                                                       SSHORTFIELDNAME                                                  SDSPNAME                                                         IFIELDTYPE                               SDEFVALUE                                                        IEDITTYPE                                IVISIBLE                                 STITLE                                                           IMODFLAGONNEW                            IMODFLAGONEDIT                           ISORTFIELD                               ELEMENTTYPE                                                      BOUND                                                            ISKEY                                    BULKFLAG                                 MODIFYFLAG                               CANDOWNLOAD                              IMUSTGIVE                                IROOTFLAG                                ISORTINDEX                               IMODE                                   


0 rows fetched.

SQL> drop table if exists Utils_TableDef;

Succeed.

SQL> drop table if exists Utils_FieldDef;

Succeed.

SQL> drop view if exists view_FieldAllInfo;

Succeed.

SQL> 
SQL> create user test_v identified by 'Huawei123';

Succeed.

SQL> grant dba to test_v;

Succeed.

SQL> create table test_v.Utils_TableDef(                   
  2      iTableId  number(10, 0) not null ,         
  3      sVersion  varchar2(113) not null ,         
  4      sTableName  varchar2(113) not null ,       
  5      sShortTableName  varchar2(113) null,       
  6      iLayer  number(10, 0) null,                
  7      iShareMode  number(10, 0) null,            
  8      iMode  number(3, 0) default 2 not null,    
  9       primary key  ( sVersion, iMode, iTableId )
 10  );  

Succeed.

SQL> 
SQL> 
SQL> create table test_v.Utils_FieldDef(                             
  2     iTableId  number(10, 0) not null ,                   
  3     iFieldId  number(10, 0) not null ,                   
  4     sVersion  varchar2(113) not null ,                   
  5     sFieldName  varchar2(113) not null ,                 
  6     sShortFieldName  varchar2(113) null,                 
  7     sDspName  varchar2(575) null,                        
  8     iFieldType  number(10, 0) default 0 not null,        
  9     sDefValue  varchar2(113) null,                       
 10     iEditType  number(10, 0) default 0 not null,         
 11     iVisible  number(10, 0) default 1 not null,          
 12     sTitle  varchar2(113) null,                          
 13     iModFlagOnNew  number(10, 0) default 1 not null,     
 14     iModFlagOnEdit  number(10, 0) default 1 not null,    
 15     iSortField  number(10, 0) default 999 not null,      
 16     ElementType  varchar2(113) null,                     
 17     Bound  varchar2(113) null,                           
 18     IsKey  number(10, 0) default 0 not null,             
 19     BulkFlag  number(10, 0) default 0 not null,          
 20     ModifyFlag  number(10, 0) default 1 not null,        
 21     CanDownload  number(10, 0) default 1 not null,       
 22     iMustGive  number(10, 0) default 0 null,             
 23     iRootFlag  number(10, 0) default 1 not null,         
 24     iSortIndex  number(10, 0) default  -1 not null,      
 25     iMode  number(3, 0) default 2 not null,              
 26      primary key  ( sVersion, iMode, iTableId, iFieldId )
 27 ); 

Succeed.

SQL> create or replace view view_FieldAllInfo as select a.sTableName, test_v.b.* from test_v.Utils_TableDef a, test_v.Utils_FieldDef b where a.sVersion = b.sVersion and a.iMode = b.iMode and a.iTableId = b.iTableId;    

Succeed.

SQL> select * from view_FieldAllInfo;

STABLENAME                                                       ITABLEID                                 IFIELDID                                 SVERSION                                                         SFIELDNAME                                                       SSHORTFIELDNAME                                                  SDSPNAME                                                         IFIELDTYPE                               SDEFVALUE                                                        IEDITTYPE                                IVISIBLE                                 STITLE                                                           IMODFLAGONNEW                            IMODFLAGONEDIT                           ISORTFIELD                               ELEMENTTYPE                                                      BOUND                                                            ISKEY                                    BULKFLAG                                 MODIFYFLAG                               CANDOWNLOAD                              IMUSTGIVE                                IROOTFLAG                                ISORTINDEX                               IMODE                                   


0 rows fetched.

SQL> drop user test_v cascade;

Succeed.

SQL> 
SQL> create table cols_pre_test_tab (
  2     f0 int,
  3     f1 float,
  4     f2 number,
  5     f3 number(10, 0),
  6     f4 timestamp(3),
  7     f5 decimal,
  8     f6 interval day(5) to second(1) not null,
  9     f7 varchar(30)
 10 );

Succeed.

SQL> 
SQL> select table_name, column_name, data_type, data_precision, data_scale from all_tab_columns where table_name=upper('cols_pre_test_tab') order by column_name;

TABLE_NAME                                                       COLUMN_NAME                                                      DATA_TYPE                                                        DATA_PRECISION DATA_SCALE  
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- -------------- ------------
COLS_PRE_TEST_TAB                                                F0                                                               BINARY_INTEGER                                                                              
COLS_PRE_TEST_TAB                                                F1                                                               BINARY_DOUBLE                                                                               
COLS_PRE_TEST_TAB                                                F2                                                               NUMBER                                                                                      
COLS_PRE_TEST_TAB                                                F3                                                               NUMBER                                                           10             0           
COLS_PRE_TEST_TAB                                                F4                                                               TIMESTAMP                                                        3                          
COLS_PRE_TEST_TAB                                                F5                                                               NUMBER                                                                                      
COLS_PRE_TEST_TAB                                                F6                                                               INTERVAL DAY TO SECOND                                           5              1           
COLS_PRE_TEST_TAB                                                F7                                                               VARCHAR                                                                                     

8 rows fetched.

SQL> 
SQL> create or replace view cols_pre_test_view
  2 as
  3  select * from cols_pre_test_tab;

Succeed.

SQL> 
SQL> select view_name, column_name, data_type, data_precision, data_scale from all_view_columns where view_name=upper('cols_pre_test_view') order by column_name;

VIEW_NAME                                                        COLUMN_NAME                                                      DATA_TYPE                                                        DATA_PRECISION DATA_SCALE  
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- -------------- ------------
COLS_PRE_TEST_VIEW                                               F0                                                               BINARY_INTEGER                                                                              
COLS_PRE_TEST_VIEW                                               F1                                                               BINARY_DOUBLE                                                                               
COLS_PRE_TEST_VIEW                                               F2                                                               NUMBER                                                                                      
COLS_PRE_TEST_VIEW                                               F3                                                               NUMBER                                                           10             0           
COLS_PRE_TEST_VIEW                                               F4                                                               TIMESTAMP                                                        3                          
COLS_PRE_TEST_VIEW                                               F5                                                               NUMBER                                                                                      
COLS_PRE_TEST_VIEW                                               F6                                                               INTERVAL DAY TO SECOND                                           5              1           
COLS_PRE_TEST_VIEW                                               F7                                                               VARCHAR                                                                                     

8 rows fetched.

SQL> 
SQL> drop table cols_pre_test_tab purge;

Succeed.

SQL> drop view cols_pre_test_view;

Succeed.

SQL> 
SQL> drop table if EXISTS RQG_ALL_TYPE_TABLE;

Succeed.

SQL> CREATE TABLE RQG_ALL_TYPE_TABLE( c_primary CHAR(20) PRIMARY KEY);

Succeed.

SQL> select OWNER,CONSTRAINT_TYPE,TABLE_NAME from SYS.USER_CONSTRAINTS where TABLE_NAME = 'RQG_ALL_TYPE_TABLE';

OWNER                                                            CONSTRAINT_TYPE TABLE_NAME                                                      
---------------------------------------------------------------- --------------- ----------------------------------------------------------------
SYS                                                              P               RQG_ALL_TYPE_TABLE                                              

1 rows fetched.

SQL> 
SQL> drop table  RQG_ALL_TYPE_TABLE;

Succeed.

SQL> CREATE TABLE RQG_ALL_TYPE_TABLE( c_unique int unique );

Succeed.

SQL> select OWNER,CONSTRAINT_TYPE,TABLE_NAME from SYS.USER_CONSTRAINTS where TABLE_NAME = 'RQG_ALL_TYPE_TABLE';

OWNER                                                            CONSTRAINT_TYPE TABLE_NAME                                                      
---------------------------------------------------------------- --------------- ----------------------------------------------------------------
SYS                                                              U               RQG_ALL_TYPE_TABLE                                              

1 rows fetched.

SQL> 
SQL> drop table  RQG_ALL_TYPE_TABLE purge;

Succeed.

SQL> 
SQL> drop user if exists user_test_index;

Succeed.

SQL> create user user_test_index identified by Root1234;

Succeed.

SQL> create table user_test_index.user_test_index_tab (id int constraint pk_id primary key, name varchar(30));

Succeed.

SQL> select OWNER, INDEX_NAME, INDEX_TYPE, TABLE_NAME, IS_PRIMARY from all_indexes where is_primary = 'Y' and table_name like upper('user_test_index_tab') and owner like '%';

OWNER                                                            INDEX_NAME                                                       INDEX_TYPE TABLE_NAME                                                       IS_PRIMARY
---------------------------------------------------------------- ---------------------------------------------------------------- ---------- ---------------------------------------------------------------- ----------
USER_TEST_INDEX                                                  PK_ID                                                            NORMAL     USER_TEST_INDEX_TAB                                              Y         

1 rows fetched.

SQL> drop user user_test_index cascade;

Succeed.

SQL> 
SQL> select object_name,object_type from all_objects where object_name='DBA_FREE_SPACE' order by object_type;

OBJECT_NAME                                                      OBJECT_TYPE    
---------------------------------------------------------------- ---------------
DBA_FREE_SPACE                                                   SYNONYM        
DBA_FREE_SPACE                                                   VIEW           

2 rows fetched.

SQL> select object_name,object_type from all_objects where object_name='NLS_SESSION_PARAMETERS' order by object_type;

OBJECT_NAME                                                      OBJECT_TYPE    
---------------------------------------------------------------- ---------------
NLS_SESSION_PARAMETERS                                           DYNAMIC VIEW   
NLS_SESSION_PARAMETERS                                           SYNONYM        

2 rows fetched.

SQL> drop user if exists user_stats;

Succeed.

SQL> create user user_stats identified by Root1234;

Succeed.

SQL> create user user_stats2 identified by Root1234;

Succeed.

SQL> create table user_stats.A (id1 int, id2 int) PARTITION BY RANGE(id2) (PARTITION P1 VALUES LESS THAN (10), PARTITION p2 VALUES LESS THAN (20),  PARTITION p3 VALUES LESS THAN (30));

Succeed.

SQL> insert into user_stats.A values ( 9,9);

1 rows affected.

SQL> commit;

Succeed.

SQL> select * from user_stats.A;

ID1          ID2         
------------ ------------
9            9           

1 rows fetched.

SQL> select * from V$segment_statistics where object_name = 'A' and owner = 'USER_STATS' and SUBOBJECT_NAME = 'P2';

OWNER                                                            OBJECT_NAME                                                      SUBOBJECT_NAME                                                   TS#          OBJECT_TYPE                                                      STATISTIC_NAME                                                   STATISTIC#   VALUE       
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------
USER_STATS                                                       A                                                                P2                                                               3            TABLE PART                                                       PHYSICAL READS                                                   0            0           
USER_STATS                                                       A                                                                P2                                                               3            TABLE PART                                                       PHYSICAL WRITE                                                   1            0           
USER_STATS                                                       A                                                                P2                                                               3            TABLE PART                                                       LOGICAL READS                                                    2            0           
USER_STATS                                                       A                                                                P2                                                               3            TABLE PART                                                       ITL WAITS                                                        3            0           
USER_STATS                                                       A                                                                P2                                                               3            TABLE PART                                                       BUFFER BUSY WAITS                                                4            0           
USER_STATS                                                       A                                                                P2                                                               3            TABLE PART                                                       ROW LOCK WAITS                                                   5            0           

6 rows fetched.

SQL> select * from V$segment_statistics where owner = 'USER_STATS2';

OWNER                                                            OBJECT_NAME                                                      SUBOBJECT_NAME                                                   TS#          OBJECT_TYPE                                                      STATISTIC_NAME                                                   STATISTIC#   VALUE       
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------

0 rows fetched.

SQL> drop user user_stats2 cascade;

Succeed.

SQL> select NAME from V$latch;

NAME                                                            
----------------------------------------------------------------
HEAP LATCH                                                      
BTREE LATCH                                                     
PAGE LATCH                                                      
LOB LATCH                                                       
INTERVAL LATCH                                                  

5 rows fetched.

SQL> select CLASS from V$waitstat;

CLASS                                                           
----------------------------------------------------------------
DATA BLOCK                                                      
SEGMENT HEADER                                                  
UNDO BLOCK                                                      
UNDO HEADER                                                     
FREE LIST                                                       

5 rows fetched.

SQL> drop user user_stats cascade;

Succeed.

SQL> 
SQL> drop user "public";

CT-00815, user PUBLIC is system user, can not drop
SQL> 
SQL> --TEST COLUMN AUTO_INCREMENT
SQL> drop table if exists TEST_AUTO_INCREMENT;

Succeed.

SQL> CREATE TABLE TEST_AUTO_INCREMENT(P_Id int NOT NULL AUTO_INCREMENT,City varchar(255),PRIMARY KEY (P_Id));

Succeed.

SQL> select AUTO_INCREMENT from ALL_TAB_COLUMNS where table_name=upper('TEST_AUTO_INCREMENT') and COLUMN_NAME='P_ID';

AUTO_INCREMENT
--------------
Y             

1 rows fetched.

SQL> select AUTO_INCREMENT from DBA_TAB_COLUMNS where table_name=upper('TEST_AUTO_INCREMENT') and COLUMN_NAME='P_ID';

AUTO_INCREMENT
--------------
Y             

1 rows fetched.

SQL> select AUTO_INCREMENT from USER_TAB_COLUMNS where table_name=upper('TEST_AUTO_INCREMENT') and COLUMN_NAME='P_ID';

AUTO_INCREMENT
--------------
Y             

1 rows fetched.

SQL> drop table TEST_AUTO_INCREMENT;

Succeed.

SQL> 
SQL> --test view user_tables
SQL> connect sys/Huawei@123@127.0.0.1:1611

connected.

SQL> drop table if exists test_view;

Succeed.

SQL> create table test_view  (id int ,a1 char(10),a2 char(10),a3 char(10));

Succeed.

SQL> select TABLE_TYPE,BLOCKS,EMPTY_BLOCKS from user_tables where table_name = 'test_view';

TABLE_TYPE   BLOCKS       EMPTY_BLOCKS
------------ ------------ ------------

0 rows fetched.

SQL> select TABLE_NAME,TABLE_ID,BLOCKS,EMPTY_BLOCKS from user_tables where table_name='SYS_TABLES';

TABLE_NAME                                                       TABLE_ID     BLOCKS       EMPTY_BLOCKS
---------------------------------------------------------------- ------------ ------------ ------------
SYS_TABLES                                                       0                                     

1 rows fetched.

SQL> select BLOCKS,EMPTY_BLOCKS from SYS_TABLES where 1 != 1;

BLOCKS       EMPTY_BLOCKS
------------ ------------

0 rows fetched.

SQL> 
SQL> drop table if exists test;

Succeed.

SQL> create table test (id int);

Succeed.

SQL> insert into test values (1),(2),(3),(4),(5);

5 rows affected.

SQL> commit;

Succeed.

SQL> drop view if exists v_test;

Succeed.

SQL> create view v_test as select * from test;

Succeed.

SQL> select * from v_test where id in

ID          
------------
1           

1 rows fetched.

SQL> drop table test;

Succeed.

SQL> drop view v_test;

Succeed.

SQL> 
SQL> drop table if exists t_sqlarea;

Succeed.

SQL> create table t_sqlarea(f1 int);

Succeed.

SQL> commit;

Succeed.

SQL> alter system set _prefetch_rows = 3;

Succeed.

SQL> alter system set sql_stat = true;

Succeed.

SQL> insert into t_sqlarea values(1),(2),(3),(4),(5);

5 rows affected.

SQL> select * from t_sqlarea;

F1          
------------
1           
2           
3           
4           
5           

5 rows fetched.

SQL> select PROCESSED_ROWS from v$sqlarea where sql_text ='select * from t_sqlarea';

PROCESSED_ROWS      
--------------------
5                   

1 rows fetched.

SQL> insert into t_sqlarea values(6);

1 rows affected.

SQL> select * from t_sqlarea;

F1          
------------
1           
2           
3           
4           
5           
6           

6 rows fetched.

SQL> select PROCESSED_ROWS from v$sqlarea where sql_text ='select * from t_sqlarea';

PROCESSED_ROWS      
--------------------
11                  

1 rows fetched.

SQL> alter system set _prefetch_rows = 100;

Succeed.

SQL> drop table t_sqlarea;

Succeed.

SQL> 
SQL> select count(*) from v$dc_pool;

COUNT(*)            
--------------------
1                   

1 rows fetched.

SQL> 
SQL> alter system set LOCAL_TEMPORARY_TABLE_ENABLED=true;

Succeed.

SQL> create temporary table #bms_30_401_2_76833(f1 int);

Succeed.

SQL> insert into #bms_30_401_2_76833 values(1);

1 rows affected.

SQL> select LMODE from v$locked_object where object_name = '#BMS_30_401_2_76833';

LMODE     
----------
S         

1 rows fetched.

SQL> alter system set LOCAL_TEMPORARY_TABLE_ENABLED=false;

Succeed.

SQL> drop table #bms_30_401_2_76833;

Succeed.

SQL> 
SQL> --test view USER_OBJECTS
SQL> connect sys/Huawei@123@127.0.0.1:1611

connected.

SQL> 
SQL> drop table if exists TEST0_USER_OBJECT$;

Succeed.

SQL> CREATE GLOBAL TEMPORARY TABLE TEST0_USER_OBJECT$
  2 (
  3   TEM0_NAME     VARCHAR(64),
  4   TEM0_LEVEL    BINARY_INTEGER
  5 ) ON COMMIT PRESERVE ROWS
  6 /

Succeed.

SQL> 
SQL> drop table if exists TEST1_USER_OBJECT;

Succeed.

SQL> create table TEST1_USER_OBJECT(f1 int);

Succeed.

SQL> 
SQL> select OBJECT_NAME,OBJECT_TYPE,TEMPORARY from USER_OBJECTS where OBJECT_NAME='TEST0_USER_OBJECT$' or OBJECT_NAME='TEST1_USER_OBJECT' order by OBJECT_NAME;

OBJECT_NAME                                                      OBJECT_TYPE     TEMPORARY
---------------------------------------------------------------- --------------- ---------
TEST0_USER_OBJECT$                                               TABLE           Y        
TEST1_USER_OBJECT                                                TABLE           N        

2 rows fetched.

SQL> 
SQL> drop table TEST0_USER_OBJECT$;

Succeed.

SQL> drop table TEST1_USER_OBJECT;

Succeed.

SQL> 
SQL> select count(*) from dv_buffer_index_stats;

COUNT(*)            
--------------------
2                  

1 rows fetched.

SQL> desc dv_buffer_pool_stats;

Name                                Null?    Type
----------------------------------- -------- ------------------------------------
ID                                  NOT NULL BINARY_INTEGER
NAME                                NOT NULL VARCHAR(64 BYTE)
SET_MSIZE                           NOT NULL BINARY_INTEGER
CNUM_REPL                           NOT NULL BINARY_INTEGER
CNUM_WRITE                          NOT NULL BINARY_INTEGER
CNUM_FREE                           NOT NULL BINARY_INTEGER
CNUM_PINNED                         NOT NULL BINARY_INTEGER
CNUM_RO                             NOT NULL BINARY_INTEGER
OLD_LEN                             NOT NULL BINARY_INTEGER
STATS_LEN                           NOT NULL BINARY_INTEGER
RECYCLED                            NOT NULL BINARY_INTEGER
WRITE_LEN                           NOT NULL BINARY_INTEGER
RECYCLE_GROUP                       NOT NULL BINARY_INTEGER
COLD_DIRTY_GROUP                    NOT NULL BINARY_INTEGER
TOTAL_GROUP                         NOT NULL BINARY_INTEGER

SQL> desc dv_buffer_page_stats;

Name                                Null?    Type
----------------------------------- -------- ------------------------------------
POOL_ID                             NOT NULL BINARY_INTEGER
TYPE                                NOT NULL VARCHAR(64 BYTE)
CNUM_TOTAL                          NOT NULL BINARY_INTEGER
CNUM_CLEAN                          NOT NULL BINARY_INTEGER
CNUM_DIRTY                          NOT NULL BINARY_INTEGER

SQL> desc dv_buffer_index_stats;

Name                                Null?    Type
----------------------------------- -------- ------------------------------------
POOL_ID                             NOT NULL BINARY_INTEGER
BLEVEL                              NOT NULL BINARY_INTEGER
CNUM                                NOT NULL BINARY_INTEGER

SQL> 
SQL> create user test_dc_rankings identified by Cantian_234;

Succeed.

SQL> grant dba to test_dc_rankings;

Succeed.

SQL> create or replace procedure test_dc_rankings() as 
  2     i int;
  3 begin	
  4 	for i in 1001 ..2500
  5 	loop
  6 	execute immediate 'create table test_dc_rankings.table_xxxxxxxxxxxxxxxxx_dc_rankings_'||i||'(id int)';
  7 	execute immediate 'select * from test_dc_rankings.table_xxxxxxxxxxxxxxxxx_dc_rankings_'||i||'';
  8 	end loop;
  9 end;
 10 /

Succeed.

SQL> call test_dc_rankings;

PL/SQL procedure successfully completed.

SQL> select USER_NAME from DV_DC_RANKINGS where USER_NAME='TEST_DC_RANKINGS' limit 1;

USER_NAME                                                       
----------------------------------------------------------------
TEST_DC_RANKINGS                                                

1 rows fetched.

SQL> --select count(*) from DV_DC_RANKINGS where OBJ_NAME='DV_DC_RANKINGS';
SQL> drop user test_dc_rankings cascade;

Succeed.

SQL> 
SQL> alter system set LOCAL_TEMPORARY_TABLE_ENABLED = true;

Succeed.

SQL> create temporary table #fvt_pragma_table_15(a int);

Succeed.

SQL> create view v_on_temp as select * from #fvt_pragma_table_15;

CT-00601, Sql syntax error: Prevent creating view of local temporary tables
SQL> alter system set LOCAL_TEMPORARY_TABLE_ENABLED = false;

Succeed.

SQL> 
SQL> drop user if exists cao1 cascade;

Succeed.

SQL> drop user if exists cao2 cascade;

Succeed.

SQL> create user cao1 identified by cao102_cao;

Succeed.

SQL> create user cao2 identified by cao102_cao;

Succeed.

SQL> grant connect to cao1;

Succeed.

SQL> grant connect, create table ,create view  to cao2;

Succeed.

SQL> conn cao2/cao102_cao@127.0.0.1:1611

connected.

SQL> create table t1 ( id int);

Succeed.

SQL> create table t2 ( name int);

Succeed.

SQL> insert into t1 values(10);

1 rows affected.

SQL> insert into t2 values(20);

1 rows affected.

SQL> create view view_t1 as select * from t1;

Succeed.

SQL> select * from cao2.view_t1;

ID          
------------
10          

1 rows fetched.

SQL> grant  select on view_t1 to cao1;

Succeed.

SQL> conn cao1/cao102_cao@127.0.0.1:1611

connected.

SQL> select * from cao2.view_t1;

ID          
------------
10          

1 rows fetched.

SQL> conn cao2/cao102_cao@127.0.0.1:1611

connected.

SQL> create or replace view view_t1 as select * from t2;

Succeed.

SQL> conn cao1/cao102_cao@127.0.0.1:1611

connected.

SQL> select * from cao2.view_t1;

NAME        
------------
20          

1 rows fetched.

SQL> 
SQL> 
SQL> --test view DV_WHITELIST
SQL> connect sys/Huawei@123@127.0.0.1:1611

connected.

SQL> alter system set TCP_INVITED_NODES = (127.0.0.1,192.168.1.1, 192.168.2.*, 192.168.40.*);

Succeed.

SQL> alter system set TCP_EXCLUDED_NODES = (192.168.10.*, 192.168.2.225);

Succeed.

SQL> alter system set TCP_VALID_NODE_CHECKING = TRUE;

Succeed.

SQL> \! touch ${CTDB_DATA}/cfg/cthba.conf


SQL> \! echo "" > ${CTDB_DATA}/cfg/cthba.conf


SQL> \! echo -e "host user 127.0.0.1,192.168.3.222,20AB::9217:acff:feab:fcd0/64" > ${CTDB_DATA}/cfg/cthba.conf


SQL> \! echo "hostssl user1 192.168.3.220,10df::9ffe:acff:feab:fcd0/64" >> ${CTDB_DATA}/cfg/cthba.conf


SQL> alter system reload hba config;

Succeed.

SQL> select * from dv_whitelist;

HOST_TYPE                                                        USER_NAME                                                        ADDRESS                                                          IP_TYPE
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
host                                                             *                                                                192.168.10.0/24                                                  IP_BLACK
host                                                             *                                                                192.168.2.225/32                                                 IP_BLACK
host                                                             *                                                                127.0.0.1/32                                                     IP_WHITE
host                                                             *                                                                192.168.1.1/32                                                   IP_WHITE
host                                                             *                                                                192.168.2.0/24                                                   IP_WHITE
host                                                             *                                                                192.168.40.0/24                                                  IP_WHITE
host                                                             USER                                                             127.0.0.1/32                                                     HBA_WHITE
host                                                             USER                                                             192.168.3.222/32                                                 HBA_WHITE
host                                                             USER                                                             20ab::9217:acff:feab:fcd0/64                                     HBA_WHITE
hostssl                                                          USER1                                                            192.168.3.220/32                                                 HBA_WHITE
hostssl                                                          USER1                                                            10df::9ffe:acff:feab:fcd0/64                                     HBA_WHITE

11 rows fetched.

SQL> alter system set TCP_VALID_NODE_CHECKING = FALSE;

Succeed.

SQL> select * from dv_whitelist;

HOST_TYPE                                                        USER_NAME                                                        ADDRESS                                                          IP_TYPE
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
host                                                             USER                                                             127.0.0.1/32                                                     HBA_WHITE
host                                                             USER                                                             192.168.3.222/32                                                 HBA_WHITE
host                                                             USER                                                             20ab::9217:acff:feab:fcd0/64                                     HBA_WHITE
hostssl                                                          USER1                                                            192.168.3.220/32                                                 HBA_WHITE
hostssl                                                          USER1                                                            10df::9ffe:acff:feab:fcd0/64                                     HBA_WHITE

5 rows fetched.

SQL> \! echo "" > ${CTDB_DATA}/cfg/cthba.conf


SQL> alter system reload hba config;

Succeed.

SQL> select * from dv_whitelist;

HOST_TYPE                                                        USER_NAME                                                        ADDRESS                                                          IP_TYPE
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> 
SQL> --test add hba 
SQL> \! rm -rf ${CTDB_DATA}/cfg/cthba.conf


SQL> \! echo "" > ${CTDB_DATA}/cfg/cthba.conf


SQL> alter system add hba entry "host user3 127.0.0.1,192.168.3.222,20AB::9217:acff:feab:fcd0/64";

Succeed.

SQL> alter system add hba entry (hostssl user4 192.168.3.19,10df::9ffe:acff::bbff/64);

CT-00330, Invalid IP address: 10df::9ffe:acff::bbff
SQL> alter system add hba entry (host FVT_SECURITY_ADD_HBA_ENTRY_001 10.251.100.101,10.251.100.102,10.251.100.103,10.251.100.104,10.251.100.105,10.251.100.106);

Succeed.

SQL> alter system add hba entry (host USER1 127.0.0.1);

Succeed.

SQL> alter system add hba entry (host USER1 192.168.7.0);

Succeed.

SQL> alter system add hba entry (host USER1 224.221.10.86,192.168.118.0,192.168.9.0);

Succeed.

SQL> alter system add hba entry (host USER1 192.168.118.0,192.168.9.0,192.168.89.0);

Succeed.

SQL> alter system add hba entry (host USER1 192.168.9.0);

Succeed.

SQL> alter system add hba entry (host USER1 192.168.128.0);

Succeed.

SQL> alter system add hba entry (host USER1 192.168.125.0/24);

Succeed.

SQL> alter system add hba entry (host USER1 192.168.124.0/24);

Succeed.

SQL> alter system add hba entry (host USER1 192.168.3.*);

Succeed.

SQL> select * from dv_hba;

TYPE                                                             USER_NAME                                                        ADDRESS
---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
host                                                             USER3                                                            127.0.0.1/32,192.168.3.222/32,20ab::9217:acff:feab:fcd0/64
host                                                             FVT_SECURITY_ADD_HBA_ENTRY_001                                   10.251.100.101/32,10.251.100.102/32,10.251.100.103/32,10.251.100.104/32,10.251.100.105/32,10.251.100.106/32
host                                                             USER1                                                            127.0.0.1/32
host                                                             USER1                                                            192.168.7.0/32
host                                                             USER1                                                            224.221.10.86/32,192.168.118.0/32,192.168.9.0/32
host                                                             USER1                                                            192.168.118.0/32,192.168.9.0/32,192.168.89.0/32
host                                                             USER1                                                            192.168.9.0/32
host                                                             USER1                                                            192.168.128.0/32
host                                                             USER1                                                            192.168.125.0/24
host                                                             USER1                                                            192.168.124.0/24
host                                                             USER1                                                            192.168.3.0/24

11 rows fetched.

SQL> alter system add hba entry 'hostssl user1 192.168.3.220,10df::9ffe:acff:feab:fcd0/64';

Succeed.

SQL> select * from dv_hba;

TYPE                                                             USER_NAME                                                        ADDRESS
---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
host                                                             USER3                                                            127.0.0.1/32,192.168.3.222/32,20ab::9217:acff:feab:fcd0/64
host                                                             FVT_SECURITY_ADD_HBA_ENTRY_001                                   10.251.100.101/32,10.251.100.102/32,10.251.100.103/32,10.251.100.104/32,10.251.100.105/32,10.251.100.106/32
host                                                             USER1                                                            127.0.0.1/32
host                                                             USER1                                                            192.168.7.0/32
host                                                             USER1                                                            224.221.10.86/32,192.168.118.0/32,192.168.9.0/32
host                                                             USER1                                                            192.168.118.0/32,192.168.9.0/32,192.168.89.0/32
host                                                             USER1                                                            192.168.9.0/32
host                                                             USER1                                                            192.168.128.0/32
host                                                             USER1                                                            192.168.125.0/24
host                                                             USER1                                                            192.168.124.0/24
host                                                             USER1                                                            192.168.3.0/24
hostssl                                                          USER1                                                            192.168.3.220/32,10df::9ffe:acff:feab:fcd0/64

12 rows fetched.

SQL> alter system add hba entry hostssl user1 19;

CT-00220, Hba line(1) format is not correct
SQL> alter system add hba entry 'hostssl user1 19';

CT-00330, Invalid IP address: 19
SQL> alter system add hba entry "host FVT_Security_Add_Hba_Entry_001 10.251.100.101,10.251.100.102,10.251.100.103,10.251.100.104,10.251.100.105,10.251.100.106";

CT-00601, [1:28]Sql syntax error: text is too long, max is 64
SQL> alter system add hba entry 'host FVT_Security_Add_Hba_Entry_001 10.251.100.101,10.251.100.102,10.251.100.103,10.251.100.104,10.251.100.105,10.251.100.106';

Succeed.

SQL>
SQL> --test delete hba
SQL> alter system delete hba entry (host USER2 192.168.118.0,192.168.9.0);

CT-00225, Hba entry modified failed, entry not found, input: host USER2 192.168.118.0,192.168.9.0
SQL> select * from dv_hba;

TYPE                                                             USER_NAME                                                        ADDRESS
---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
host                                                             USER3                                                            127.0.0.1/32,192.168.3.222/32,20ab::9217:acff:feab:fcd0/64
host                                                             FVT_SECURITY_ADD_HBA_ENTRY_001                                   10.251.100.101/32,10.251.100.102/32,10.251.100.103/32,10.251.100.104/32,10.251.100.105/32,10.251.100.106/32
host                                                             USER1                                                            127.0.0.1/32
host                                                             USER1                                                            192.168.7.0/32
host                                                             USER1                                                            224.221.10.86/32,192.168.118.0/32,192.168.9.0/32
host                                                             USER1                                                            192.168.118.0/32,192.168.9.0/32,192.168.89.0/32
host                                                             USER1                                                            192.168.9.0/32
host                                                             USER1                                                            192.168.128.0/32
host                                                             USER1                                                            192.168.125.0/24
host                                                             USER1                                                            192.168.124.0/24
host                                                             USER1                                                            192.168.3.0/24
hostssl                                                          USER1                                                            192.168.3.220/32,10df::9ffe:acff:feab:fcd0/64
host                                                             FVT_SECURITY_ADD_HBA_ENTRY_001                                   10.251.100.101/32,10.251.100.102/32,10.251.100.103/32,10.251.100.104/32,10.251.100.105/32,10.251.100.106/32

13 rows fetched.

SQL> alter system delete hba entry (host user1 192.168.118.0,192.168.9.0);

Succeed.

SQL> select * from dv_hba;

TYPE                                                             USER_NAME                                                        ADDRESS
---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
host                                                             USER3                                                            127.0.0.1/32,192.168.3.222/32,20ab::9217:acff:feab:fcd0/64
host                                                             FVT_SECURITY_ADD_HBA_ENTRY_001                                   10.251.100.101/32,10.251.100.102/32,10.251.100.103/32,10.251.100.104/32,10.251.100.105/32,10.251.100.106/32
host                                                             USER1                                                            127.0.0.1/32
host                                                             USER1                                                            192.168.7.0/32
host                                                             USER1                                                            224.221.10.86/32
host                                                             USER1                                                            192.168.89.0/32
host                                                             USER1                                                            192.168.128.0/32
host                                                             USER1                                                            192.168.125.0/24
host                                                             USER1                                                            192.168.124.0/24
host                                                             USER1                                                            192.168.3.0/24
hostssl                                                          USER1                                                            192.168.3.220/32,10df::9ffe:acff:feab:fcd0/64
host                                                             FVT_SECURITY_ADD_HBA_ENTRY_001                                   10.251.100.101/32,10.251.100.102/32,10.251.100.103/32,10.251.100.104/32,10.251.100.105/32,10.251.100.106/32

12 rows fetched.

SQL> alter system delete hba entry (host USER1 192.168.89.0);

Succeed.

SQL> select * from dv_hba;

TYPE                                                             USER_NAME                                                        ADDRESS
---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
host                                                             USER3                                                            127.0.0.1/32,192.168.3.222/32,20ab::9217:acff:feab:fcd0/64
host                                                             FVT_SECURITY_ADD_HBA_ENTRY_001                                   10.251.100.101/32,10.251.100.102/32,10.251.100.103/32,10.251.100.104/32,10.251.100.105/32,10.251.100.106/32
host                                                             USER1                                                            127.0.0.1/32
host                                                             USER1                                                            192.168.7.0/32
host                                                             USER1                                                            224.221.10.86/32
host                                                             USER1                                                            192.168.128.0/32
host                                                             USER1                                                            192.168.125.0/24
host                                                             USER1                                                            192.168.124.0/24
host                                                             USER1                                                            192.168.3.0/24
hostssl                                                          USER1                                                            192.168.3.220/32,10df::9ffe:acff:feab:fcd0/64
host                                                             FVT_SECURITY_ADD_HBA_ENTRY_001                                   10.251.100.101/32,10.251.100.102/32,10.251.100.103/32,10.251.100.104/32,10.251.100.105/32,10.251.100.106/32

11 rows fetched.

SQL> alter system delete hba entry (host * 192.168.125.0/24); -- FAIL

CT-00225, Hba entry modified failed, entry not found, input: host * 192.168.125.0/24
SQL> select * from dv_hba;

TYPE                                                             USER_NAME                                                        ADDRESS
---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
host                                                             USER3                                                            127.0.0.1/32,192.168.3.222/32,20ab::9217:acff:feab:fcd0/64
host                                                             FVT_SECURITY_ADD_HBA_ENTRY_001                                   10.251.100.101/32,10.251.100.102/32,10.251.100.103/32,10.251.100.104/32,10.251.100.105/32,10.251.100.106/32
host                                                             USER1                                                            127.0.0.1/32
host                                                             USER1                                                            192.168.7.0/32
host                                                             USER1                                                            224.221.10.86/32
host                                                             USER1                                                            192.168.128.0/32
host                                                             USER1                                                            192.168.125.0/24
host                                                             USER1                                                            192.168.124.0/24
host                                                             USER1                                                            192.168.3.0/24
hostssl                                                          USER1                                                            192.168.3.220/32,10df::9ffe:acff:feab:fcd0/64
host                                                             FVT_SECURITY_ADD_HBA_ENTRY_001                                   10.251.100.101/32,10.251.100.102/32,10.251.100.103/32,10.251.100.104/32,10.251.100.105/32,10.251.100.106/32

11 rows fetched.

SQL> alter system delete hba entry (host user1 192.168.125.0/24); -- OK

Succeed.

SQL> select * from dv_hba;

TYPE                                                             USER_NAME                                                        ADDRESS
---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
host                                                             USER3                                                            127.0.0.1/32,192.168.3.222/32,20ab::9217:acff:feab:fcd0/64
host                                                             FVT_SECURITY_ADD_HBA_ENTRY_001                                   10.251.100.101/32,10.251.100.102/32,10.251.100.103/32,10.251.100.104/32,10.251.100.105/32,10.251.100.106/32
host                                                             USER1                                                            127.0.0.1/32
host                                                             USER1                                                            192.168.7.0/32
host                                                             USER1                                                            224.221.10.86/32
host                                                             USER1                                                            192.168.128.0/32
host                                                             USER1                                                            192.168.124.0/24
host                                                             USER1                                                            192.168.3.0/24
hostssl                                                          USER1                                                            192.168.3.220/32,10df::9ffe:acff:feab:fcd0/64
host                                                             FVT_SECURITY_ADD_HBA_ENTRY_001                                   10.251.100.101/32,10.251.100.102/32,10.251.100.103/32,10.251.100.104/32,10.251.100.105/32,10.251.100.106/32

10 rows fetched.

SQL> alter system delete hba entry (host USER1 192.168.124.0/28); -- FAIL

CT-00225, Hba entry modified failed, entry not found, input: host USER1 192.168.124.0/28
SQL> select * from dv_hba;

TYPE                                                             USER_NAME                                                        ADDRESS
---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
host                                                             USER3                                                            127.0.0.1/32,192.168.3.222/32,20ab::9217:acff:feab:fcd0/64
host                                                             FVT_SECURITY_ADD_HBA_ENTRY_001                                   10.251.100.101/32,10.251.100.102/32,10.251.100.103/32,10.251.100.104/32,10.251.100.105/32,10.251.100.106/32
host                                                             USER1                                                            127.0.0.1/32
host                                                             USER1                                                            192.168.7.0/32
host                                                             USER1                                                            224.221.10.86/32
host                                                             USER1                                                            192.168.128.0/32
host                                                             USER1                                                            192.168.124.0/24
host                                                             USER1                                                            192.168.3.0/24
hostssl                                                          USER1                                                            192.168.3.220/32,10df::9ffe:acff:feab:fcd0/64
host                                                             FVT_SECURITY_ADD_HBA_ENTRY_001                                   10.251.100.101/32,10.251.100.102/32,10.251.100.103/32,10.251.100.104/32,10.251.100.105/32,10.251.100.106/32

10 rows fetched.

SQL> alter system delete hba entry (host USER1 192.168.0.0/16); -- FAIL

CT-00225, Hba entry modified failed, entry not found, input: host USER1 192.168.0.0/16
SQL> select * from dv_hba;

TYPE                                                             USER_NAME                                                        ADDRESS
---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
host                                                             USER3                                                            127.0.0.1/32,192.168.3.222/32,20ab::9217:acff:feab:fcd0/64
host                                                             FVT_SECURITY_ADD_HBA_ENTRY_001                                   10.251.100.101/32,10.251.100.102/32,10.251.100.103/32,10.251.100.104/32,10.251.100.105/32,10.251.100.106/32
host                                                             USER1                                                            127.0.0.1/32
host                                                             USER1                                                            192.168.7.0/32
host                                                             USER1                                                            224.221.10.86/32
host                                                             USER1                                                            192.168.128.0/32
host                                                             USER1                                                            192.168.124.0/24
host                                                             USER1                                                            192.168.3.0/24
hostssl                                                          USER1                                                            192.168.3.220/32,10df::9ffe:acff:feab:fcd0/64
host                                                             FVT_SECURITY_ADD_HBA_ENTRY_001                                   10.251.100.101/32,10.251.100.102/32,10.251.100.103/32,10.251.100.104/32,10.251.100.105/32,10.251.100.106/32

10 rows fetched.

SQL> alter system delete hba entry (host USER1 192.168.3.2); -- FAIL

CT-00225, Hba entry modified failed, entry not found, input: host USER1 192.168.3.2
SQL> select * from dv_hba;

TYPE                                                             USER_NAME                                                        ADDRESS
---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
host                                                             USER3                                                            127.0.0.1/32,192.168.3.222/32,20ab::9217:acff:feab:fcd0/64
host                                                             FVT_SECURITY_ADD_HBA_ENTRY_001                                   10.251.100.101/32,10.251.100.102/32,10.251.100.103/32,10.251.100.104/32,10.251.100.105/32,10.251.100.106/32
host                                                             USER1                                                            127.0.0.1/32
host                                                             USER1                                                            192.168.7.0/32
host                                                             USER1                                                            224.221.10.86/32
host                                                             USER1                                                            192.168.128.0/32
host                                                             USER1                                                            192.168.124.0/24
host                                                             USER1                                                            192.168.3.0/24
hostssl                                                          USER1                                                            192.168.3.220/32,10df::9ffe:acff:feab:fcd0/64
host                                                             FVT_SECURITY_ADD_HBA_ENTRY_001                                   10.251.100.101/32,10.251.100.102/32,10.251.100.103/32,10.251.100.104/32,10.251.100.105/32,10.251.100.106/32

10 rows fetched.

SQL> alter system delete hba entry (host USER1 192.168.3.*); -- OK

Succeed.

SQL> select * from dv_hba;

TYPE                                                             USER_NAME                                                        ADDRESS
---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
host                                                             USER3                                                            127.0.0.1/32,192.168.3.222/32,20ab::9217:acff:feab:fcd0/64
host                                                             FVT_SECURITY_ADD_HBA_ENTRY_001                                   10.251.100.101/32,10.251.100.102/32,10.251.100.103/32,10.251.100.104/32,10.251.100.105/32,10.251.100.106/32
host                                                             USER1                                                            127.0.0.1/32
host                                                             USER1                                                            192.168.7.0/32
host                                                             USER1                                                            224.221.10.86/32
host                                                             USER1                                                            192.168.128.0/32
host                                                             USER1                                                            192.168.124.0/24
hostssl                                                          USER1                                                            192.168.3.220/32,10df::9ffe:acff:feab:fcd0/64
host                                                             FVT_SECURITY_ADD_HBA_ENTRY_001                                   10.251.100.101/32,10.251.100.102/32,10.251.100.103/32,10.251.100.104/32,10.251.100.105/32,10.251.100.106/32

9 rows fetched.

SQL>
SQL> \! echo "" > ${CTDB_DATA}/cfg/cthba.conf


SQL> alter system reload hba config;

Succeed.

SQL>
SQL> -- DTS2019100907860
SQL> drop user if exists test_view_dual cascade;

Succeed.

SQL> CREATE USER test_view_dual IDENTIFIED BY Root1234;

Succeed.

SQL> grant connect to test_view_dual;

Succeed.

SQL> grant create view to test_view_dual ;

Succeed.

SQL> connect test_view_dual/Root1234@127.0.0.1:1611

connected.

SQL> select * from dual;

DUMMY
-----
X

1 rows fetched.

SQL> CREATE OR REPLACE VIEW S_V_TEST AS SELECT * FROM DUAL;

Succeed.

SQL> connect sys/Huawei@123@127.0.0.1:1611

connected.

SQL> drop user if exists test_view_dual cascade;

Succeed.

SQL> 
SQL> -- have_ssl
SQL> show parameter have_ssl;

NAME                                                             DATATYPE             VALUE                                                            RUNTIME_VALUE                                                    EFFECTIVE

---------------------------------------------------------------- -------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- --------------------
HAVE_SSL                                                         CT_TYPE_BOOLEAN      FALSE                                                            FALSE                                                            reboot



SQL> select NAME, VALUE, RUNTIME_VALUE, DEFAULT_VALUE from dv_parameters where name = 'HAVE_SSL';

NAME                                                             VALUE                                                            RUNTIME_VALUE                                                    DEFAULT_VALUE

---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
HAVE_SSL                                                         FALSE                                                            FALSE                                                            FALSE


1 rows fetched.

SQL> alter system set HAVE_SSL=FALSE;

CT-00203, HAVE_SSL is a readonly parameter
SQL> alter system set HAVE_SSL=TRUE;

CT-00203, HAVE_SSL is a readonly parameter
SQL>
SQL> desc dv_archived_logs;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
RECID                               NOT NULL BINARY_INTEGER                      
STAMP                               NOT NULL DATE                                
NAME                                NOT NULL VARCHAR(256 BYTE)                   
DEST_ID                             NOT NULL BINARY_INTEGER                      
THREAD#                             NOT NULL BINARY_INTEGER                      
SEQUENCE#                           NOT NULL BINARY_INTEGER                      
RESETLOGS_CHANGE#                   NOT NULL BINARY_INTEGER                      
RESETLOGS_TIME                      NOT NULL DATE                                
RESETLOGS_ID                        NOT NULL BINARY_INTEGER                      
FIRST_CHANGE#                       NOT NULL BINARY_BIGINT                       
FIRST_TIME                          NOT NULL DATE                                
NEXT_CHANGE#                        NOT NULL BINARY_BIGINT                       
NEXT_TIME                           NOT NULL DATE                                
BLOCKS                              NOT NULL BINARY_INTEGER                      
BLOCK_SIZE                          NOT NULL BINARY_INTEGER                      
CREATOR                             NOT NULL VARCHAR(8 BYTE)                     
REGISTRAR                           NOT NULL VARCHAR(8 BYTE)                     
STANDBY_DEST                        NOT NULL VARCHAR(4 BYTE)                     
ARCHIVED                            NOT NULL VARCHAR(4 BYTE)                     
APPLIED                             NOT NULL VARCHAR(4 BYTE)                     
DELETED                             NOT NULL VARCHAR(4 BYTE)                     
STATUS                              NOT NULL VARCHAR(4 BYTE)                     
COMPLETION_TIME                     NOT NULL DATE                                
DICTIONARY_BEGIN                    NOT NULL VARCHAR(4 BYTE)                     
DICTIONARY_END                      NOT NULL VARCHAR(4 BYTE)                     
END_OF_REDO                         NOT NULL VARCHAR(4 BYTE)                     
BACKUP_COUNT                        NOT NULL BINARY_INTEGER                      
ARCHIVAL_THREAD#                    NOT NULL BINARY_INTEGER                      
ACTIVATION#                         NOT NULL BINARY_INTEGER                      
IS_RECOVERY_DEST_FILE               NOT NULL VARCHAR(4 BYTE)                     
COMPRESSED                          NOT NULL VARCHAR(4 BYTE)                     
FAL                                 NOT NULL VARCHAR(4 BYTE)                     
END_OF_REDO_TYPE                    NOT NULL VARCHAR(10 BYTE)                    
BACKED_BY_VSS                       NOT NULL VARCHAR(4 BYTE)                     
CON_ID                              NOT NULL BINARY_INTEGER                      
REAL_SIZE                           NOT NULL BINARY_BIGINT

SQL> 
SQL> -- test view DV_TEMPTABLES
SQL> alter system set LOCAL_TEMPORARY_TABLE_ENABLED = true;

Succeed.

SQL> create temporary table #c1 (EMPNO NUMBER(4) NOT NULL, ENAME VARCHAR2(10));

Succeed.

SQL> create temporary table #c2(id int);

Succeed.

SQL> INSERT INTO #c1 VALUES(1, 'SMITH');

1 rows affected.

SQL> INSERT INTO #c2 VALUES(1);

1 rows affected.

SQL> select OWNER, TABLE_NAME, COLUMNT_COUNT, INDEX_COUNT, DATA_PAGES, INDEX_PAGES from dv_temptables order by TABLE_NAME;

OWNER                                                            TABLE_NAME                                                       COLUMNT_COUNT INDEX_COUNT  DATA_PAGES   INDEX_PAGES 
---------------------------------------------------------------- ---------------------------------------------------------------- ------------- ------------ ------------ ------------
SYS                                                              #C1                                                              2             0            1            0           
SYS                                                              #C2                                                              1             0            1            0           

2 rows fetched.

SQL> create index idx on #c1(EMPNO);

Succeed.

SQL> select OWNER, TABLE_NAME, COLUMNT_COUNT, INDEX_COUNT, DATA_PAGES, INDEX_PAGES from dv_temptables order by TABLE_NAME;

OWNER                                                            TABLE_NAME                                                       COLUMNT_COUNT INDEX_COUNT  DATA_PAGES   INDEX_PAGES 
---------------------------------------------------------------- ---------------------------------------------------------------- ------------- ------------ ------------ ------------
SYS                                                              #C1                                                              2             1            1            1           
SYS                                                              #C2                                                              1             0            1            0           

2 rows fetched.

SQL> select OWNER, TABLE_NAME, COLUMNT_COUNT, INDEX_COUNT, DATA_PAGES, INDEX_PAGES from dv_temptables WHERE TABLE_NAME = '#C1';

OWNER                                                            TABLE_NAME                                                       COLUMNT_COUNT INDEX_COUNT  DATA_PAGES   INDEX_PAGES 
---------------------------------------------------------------- ---------------------------------------------------------------- ------------- ------------ ------------ ------------
SYS                                                              #C1                                                              2             1            1            1           

1 rows fetched.

SQL> select OWNER, TABLE_NAME, COLUMNT_COUNT, INDEX_COUNT, DATA_PAGES, INDEX_PAGES from dv_temptables WHERE TABLE_NAME = '#C2';

OWNER                                                            TABLE_NAME                                                       COLUMNT_COUNT INDEX_COUNT  DATA_PAGES   INDEX_PAGES 
---------------------------------------------------------------- ---------------------------------------------------------------- ------------- ------------ ------------ ------------
SYS                                                              #C2                                                              1             0            1            0           

1 rows fetched.

SQL> drop table if exists #c1;

Succeed.

SQL> create temporary table #c1(ID INT, ENAME VARCHAR2(10));

Succeed.

SQL> INSERT INTO #c1 VALUES(1, 'SMITH');

1 rows affected.

SQL> create index idx1 on #c1(ENAME);

Succeed.

SQL> create index idx2 on #c1(ID);

Succeed.

SQL> select OWNER, TABLE_NAME, COLUMNT_COUNT, INDEX_COUNT, DATA_PAGES, INDEX_PAGES from dv_temptables order by TABLE_NAME;

OWNER                                                            TABLE_NAME                                                       COLUMNT_COUNT INDEX_COUNT  DATA_PAGES   INDEX_PAGES 
---------------------------------------------------------------- ---------------------------------------------------------------- ------------- ------------ ------------ ------------
SYS                                                              #C1                                                              2             2            1            2           
SYS                                                              #C2                                                              1             0            1            0           

2 rows fetched.

SQL> drop table #c1;

Succeed.

SQL> drop table #c2;

Succeed.

SQL> 
SQL> conn / as sysdba

connected.

SQL> create temporary table #c1 (EMPNO NUMBER(4) NOT NULL, ENAME VARCHAR2(10));

Succeed.

SQL> create temporary table #c2(id int);

Succeed.

SQL> INSERT INTO #c1 VALUES(1, 'SMITH');

1 rows affected.

SQL> INSERT INTO #c2 VALUES(1);

1 rows affected.

SQL> select OWNER, TABLE_NAME, COLUMNT_COUNT, INDEX_COUNT, DATA_PAGES, INDEX_PAGES from dv_temptables order by TABLE_NAME;

OWNER                                                            TABLE_NAME                                                       COLUMNT_COUNT INDEX_COUNT  DATA_PAGES   INDEX_PAGES 
---------------------------------------------------------------- ---------------------------------------------------------------- ------------- ------------ ------------ ------------
SYS                                                              #C1                                                              2             0            1            0           
SYS                                                              #C2                                                              1             0            1            0           

2 rows fetched.

SQL> create index idx on #c1(EMPNO);

Succeed.

SQL> select OWNER, TABLE_NAME, COLUMNT_COUNT, INDEX_COUNT, DATA_PAGES, INDEX_PAGES from dv_temptables order by TABLE_NAME;

OWNER                                                            TABLE_NAME                                                       COLUMNT_COUNT INDEX_COUNT  DATA_PAGES   INDEX_PAGES 
---------------------------------------------------------------- ---------------------------------------------------------------- ------------- ------------ ------------ ------------
SYS                                                              #C1                                                              2             1            1            1           
SYS                                                              #C2                                                              1             0            1            0           

2 rows fetched.

SQL> select OWNER, TABLE_NAME, COLUMNT_COUNT, INDEX_COUNT, DATA_PAGES, INDEX_PAGES from dv_temptables WHERE TABLE_NAME = '#C1';

OWNER                                                            TABLE_NAME                                                       COLUMNT_COUNT INDEX_COUNT  DATA_PAGES   INDEX_PAGES 
---------------------------------------------------------------- ---------------------------------------------------------------- ------------- ------------ ------------ ------------
SYS                                                              #C1                                                              2             1            1            1           

1 rows fetched.

SQL> select OWNER, TABLE_NAME, COLUMNT_COUNT, INDEX_COUNT, DATA_PAGES, INDEX_PAGES from dv_temptables WHERE TABLE_NAME = '#C2';

OWNER                                                            TABLE_NAME                                                       COLUMNT_COUNT INDEX_COUNT  DATA_PAGES   INDEX_PAGES 
---------------------------------------------------------------- ---------------------------------------------------------------- ------------- ------------ ------------ ------------
SYS                                                              #C2                                                              1             0            1            0           

1 rows fetched.

SQL> drop table if exists #c1;

Succeed.

SQL> create temporary table #c1(ID INT, ENAME VARCHAR2(10));

Succeed.

SQL> INSERT INTO #c1 VALUES(1, 'SMITH');

1 rows affected.

SQL> create index idx1 on #c1(ENAME);

Succeed.

SQL> create index idx2 on #c1(ID);

Succeed.

SQL> select OWNER, TABLE_NAME, COLUMNT_COUNT, INDEX_COUNT, DATA_PAGES, INDEX_PAGES from dv_temptables order by TABLE_NAME;

OWNER                                                            TABLE_NAME                                                       COLUMNT_COUNT INDEX_COUNT  DATA_PAGES   INDEX_PAGES 
---------------------------------------------------------------- ---------------------------------------------------------------- ------------- ------------ ------------ ------------
SYS                                                              #C1                                                              2             2            1            2           
SYS                                                              #C2                                                              1             0            1            0           

2 rows fetched.

SQL> drop table #c1;

Succeed.

SQL> drop table #c2;

Succeed.

SQL> connect sys/Huawei@123@127.0.0.1:1611

connected.

SQL> alter system set LOCAL_TEMPORARY_TABLE_ENABLED = false;

Succeed.

SQL> 
SQL> ----test for package view
SQL> conn / as sysdba

connected.

SQL> DROP USER IF EXISTS USER1 CASCADE;

Succeed.

SQL> DROP USER IF EXISTS USER2 CASCADE;

Succeed.

SQL> create user user1 identified by Cantian_234;

Succeed.

SQL> grant dba to user1;

Succeed.

SQL> create user user2 identified by Cantian_234;

Succeed.

SQL> grant connect to user2;

Succeed.

SQL> grant CREATE PROCEDURE to user2;

Succeed.

SQL>
SQL> ----create package for sys
SQL> DROP PACKAGE IF EXISTS sys.PAK1;

Succeed.

SQL> CREATE OR REPLACE PACKAGE sys.PAK1
  2 IS
  3  FUNCTION SYS_MYF RETURN INT;
  4  PROCEDURE SYS_MYP;
  5 END;
  6 /

Succeed.

SQL>
SQL> CREATE OR REPLACE PACKAGE BODY sys.PAK1
  2 IS
  3  FUNCTION SYS_MYF RETURN INT
  4 IS
  5  V1 INT := 10;
  6  BEGIN
  7   NULL;
  8   RETURN V1;
  9  END;
 10 PROCEDURE SYS_MYP IS
 11  V1 INT;
 12  BEGIN
 13   SELECT SYS_MYF INTO V1 FROM DUAL;
 14   DBE_OUTPUT.PRINT_LINE(V1);
 15  END;
 16 END;
 17 /

Succeed.

SQL>
SQL> ----create package for user1
SQL> DROP PACKAGE IF EXISTS user1.PAK2;

Succeed.

SQL> CREATE OR REPLACE PACKAGE user1.PAK2
  2 IS
  3  FUNCTION U1_MYF RETURN INT;
  4  PROCEDURE U1_MYP;
  5 END;
  6 /

Succeed.

SQL>
SQL> CREATE OR REPLACE PACKAGE BODY user1.PAK2
  2 IS
  3  FUNCTION U1_MYF RETURN INT
  4 IS
  5  V1 INT := 10;
  6  BEGIN
  7   NULL;
  8   RETURN V1;
  9  END;
 10 PROCEDURE U1_MYP IS
 11  V1 INT;
 12  BEGIN
 13   SELECT U1_MYF INTO V1 FROM DUAL;
 14   DBE_OUTPUT.PRINT_LINE(V1);
 15  END;
 16 END;
 17 /

Succeed.

SQL>
SQL> ----create package for user2
SQL> DROP PACKAGE IF EXISTS user2.PAK3;

Succeed.

SQL> CREATE OR REPLACE PACKAGE user2.PAK3
  2 IS
  3  FUNCTION U2_MYF RETURN INT;
  4  PROCEDURE U2_MYP;
  5 END;
  6 /

Succeed.

SQL>
SQL> CREATE OR REPLACE PACKAGE BODY user2.PAK3
  2 IS
  3  FUNCTION U2_MYF RETURN INT
  4 IS
  5  V1 INT := 10;
  6  BEGIN
  7   NULL;
  8   RETURN V1;
  9  END;
 10 PROCEDURE U2_MYP IS
 11  V1 INT;
 12  BEGIN
 13   SELECT U2_MYF INTO V1 FROM DUAL;
 14   DBE_OUTPUT.PRINT_LINE(V1);
 15  END;
 16 END;
 17 /

Succeed.

SQL>
SQL> conn / as sysdba

connected.

SQL> select user_name, package_name, object_name, object_type from my_packages order by user_name, package_name, object_name;

USER_NAME                                                        PACKAGE_NAME                                                     OBJECT_NAME                                                      OBJECT_TYPE
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------------------------
SYS                                                              PAK1                                                             SYS_MYF                                                          FUNCTION
SYS                                                              PAK1                                                             SYS_MYP                                                          PROCEDURE

2 rows fetched.

SQL> select user_name, package_name, object_name, object_type from db_packages order by user_name, package_name, object_name;

USER_NAME                                                        PACKAGE_NAME                                                     OBJECT_NAME                                                      OBJECT_TYPE
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------------------------
SYS                                                              PAK1                                                             SYS_MYF                                                          FUNCTION
SYS                                                              PAK1                                                             SYS_MYP                                                          PROCEDURE
USER1                                                            PAK2                                                             U1_MYF                                                           FUNCTION
USER1                                                            PAK2                                                             U1_MYP                                                           PROCEDURE
USER2                                                            PAK3                                                             U2_MYF                                                           FUNCTION                      
USER2                                                            PAK3                                                             U2_MYP                                                           PROCEDURE

6 rows fetched.

SQL> select user_name, package_name, object_name, object_type from adm_packages order by user_name, package_name, object_name;

USER_NAME                                                        PACKAGE_NAME                                                     OBJECT_NAME                                                      OBJECT_TYPE
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------------------------
SYS                                                              PAK1                                                             SYS_MYF                                                          FUNCTION
SYS                                                              PAK1                                                             SYS_MYP                                                          PROCEDURE
USER1                                                            PAK2                                                             U1_MYF                                                           FUNCTION
USER1                                                            PAK2                                                             U1_MYP                                                           PROCEDURE
USER2                                                            PAK3                                                             U2_MYF                                                           FUNCTION                      
USER2                                                            PAK3                                                             U2_MYP                                                           PROCEDURE

6 rows fetched.

SQL>
SQL> conn user1/Cantian_234@127.0.0.1:1611

connected.

SQL> select user_name, package_name, object_name, object_type from my_packages order by user_name, package_name, object_name;

USER_NAME                                                        PACKAGE_NAME                                                     OBJECT_NAME                                                      OBJECT_TYPE
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------------------------
USER1                                                            PAK2                                                             U1_MYF                                                           FUNCTION
USER1                                                            PAK2                                                             U1_MYP                                                           PROCEDURE

2 rows fetched.

SQL> select user_name, package_name, object_name, object_type from db_packages order by user_name, package_name, object_name;

USER_NAME                                                        PACKAGE_NAME                                                     OBJECT_NAME                                                      OBJECT_TYPE
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------------------------
USER1                                                            PAK2                                                             U1_MYF                                                           FUNCTION
USER1                                                            PAK2                                                             U1_MYP                                                           PROCEDURE
USER2                                                            PAK3                                                             U2_MYF                                                           FUNCTION                      
USER2                                                            PAK3                                                             U2_MYP                                                           PROCEDURE

4 rows fetched.

SQL> select user_name, package_name, object_name, object_type from adm_packages order by user_name, package_name, object_name;

USER_NAME                                                        PACKAGE_NAME                                                     OBJECT_NAME                                                      OBJECT_TYPE                   
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------------------------
SYS                                                              PAK1                                                             SYS_MYF                                                          FUNCTION                      
SYS                                                              PAK1                                                             SYS_MYP                                                          PROCEDURE                     
USER1                                                            PAK2                                                             U1_MYF                                                           FUNCTION                      
USER1                                                            PAK2                                                             U1_MYP                                                           PROCEDURE                     
USER2                                                            PAK3                                                             U2_MYF                                                           FUNCTION                      
USER2                                                            PAK3                                                             U2_MYP                                                           PROCEDURE                     

6 rows fetched.

SQL> 
SQL> conn user2/Cantian_234@127.0.0.1:1611

connected.

SQL> select user_name, package_name, object_name, object_type from my_packages order by user_name, package_name, object_name;

USER_NAME                                                        PACKAGE_NAME                                                     OBJECT_NAME                                                      OBJECT_TYPE
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------------------------
USER2                                                            PAK3                                                             U2_MYF                                                           FUNCTION                      
USER2                                                            PAK3                                                             U2_MYP                                                           PROCEDURE                     

2 rows fetched.

SQL> select user_name, package_name, object_name, object_type from db_packages order by user_name, package_name, object_name;

USER_NAME                                                        PACKAGE_NAME                                                     OBJECT_NAME                                                      OBJECT_TYPE
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------------------------
USER2                                                            PAK3                                                             U2_MYF                                                           FUNCTION                      
USER2                                                            PAK3                                                             U2_MYP                                                           PROCEDURE                     

2 rows fetched.

SQL> select user_name, package_name, object_name, object_type from adm_packages order by user_name, package_name, object_name;

CT-01001, Permissions were insufficient
SQL> 
SQL> conn / as sysdba

connected.

SQL> drop user if exists user1 cascade;

Succeed.

SQL> drop user if exists user2 cascade;

Succeed.

SQL> drop package if exists pak1;

Succeed.

SQL> 
SQL> --DTS202006120KGHJSP0K00 
SQL> create table if not exists tb_DTS202006120KGHJSP0K00(f1 int);

Succeed.

SQL> CREATE SYNONYM  sy_DTS202006120KGHJSP0K00 for tb_DTS202006120KGHJSP0K00;

Succeed.

SQL> drop table if exists tb_DTS202006120KGHJSP0K00;

Succeed.

SQL> select * from sy_DTS202006120KGHJSP0K00;

CT-00887, [1:15]The SYNONYM SYS.SY_DTS202006120KGHJSP0K00 is invalid
SQL> drop SYNONYM sy_DTS202006120KGHJSP0K00;

Succeed.

SQL> 
SQL> DROP TABLE IF EXISTS TEST_COMMENT_QUTOES_123;

Succeed.

SQL> create table TEST_COMMENT_QUTOES_123(c1 int);

Succeed.

SQL> comment on column TEST_COMMENT_QUTOES_123.c1 is 'ceshi''';

Succeed.

SQL> select * from ADM_COL_COMMENTS where TABLE_NAME='TEST_COMMENT_QUTOES_123';

OWNER                                                            TABLE_NAME                                                       COLUMN_NAME                                                      COMMENTS                                                        
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
SYS                                                              TEST_COMMENT_QUTOES_123                                          C1                                                               ceshi'                                                          

1 rows fetched.

SQL> DROP TABLE IF EXISTS TEST_COMMENT_QUTOES_123;

Succeed.

SQL> 
SQL> conn / as sysdba

connected.

SQL> drop user if exists test cascade;

Succeed.

SQL> create user test identified by Cantian_234 password expire;

Succeed.

SQL> alter user test identified by Cantian_234;

Succeed.

SQL> select NAME, ASTATUS, EXPTIME from sys_users where name = 'TEST';

NAME                                                             ASTATUS      EXPTIME
---------------------------------------------------------------- ------------ ----------------------
TEST                                                             0

1 rows fetched.

SQL> create profile pro1_test limit password_life_time unlimited;

Succeed.

SQL> alter user test profile pro1_test;

Succeed.

SQL> select USERNAME, CRYPTOPERIOD from db_users where username = 'TEST';

USERNAME                                                         CRYPTOPERIOD
---------------------------------------------------------------- ----------------------------------------------------------------
TEST                                                             UNLIMITED

1 rows fetched.

SQL> drop profile pro1_test cascade;

Succeed.

SQL> drop user test cascade;

Succeed.

SQL> 
SQL> --DTS20210427046LILP1K00 test if exists public synonym
SQL> CONN / AS SYSDBA

connected.

SQL> DROP USER IF EXISTS USER_DTS20210427046LILP1K00 CASCADE;

Succeed.

SQL> CREATE USER USER_DTS20210427046LILP1K00 IDENTIFIED BY Cantian_234;

Succeed.

SQL> GRANT DBA TO USER_DTS20210427046LILP1K00;

Succeed.

SQL> CONN USER_DTS20210427046LILP1K00/Cantian_234@127.0.0.1:1611

connected.

SQL> SELECT 1 FROM ADM_HIST_INSTANCE_SNAP WHERE 1=2;

1           
------------

0 rows fetched.

SQL> SELECT 1 FROM ADM_HIST_LOCK_OBJECT WHERE 1=2;

1           
------------

0 rows fetched.

SQL> SELECT 1 FROM ADM_HIST_SESSION_EVENTS WHERE 1=2;

1           
------------

0 rows fetched.

SQL> SELECT 1 FROM ADM_HIST_SESSION_SQL WHERE 1=2;

1           
------------

0 rows fetched.

SQL> SELECT 1 FROM ADM_HIST_SQLPLAN WHERE 1=2;

1           
------------

0 rows fetched.

SQL> SELECT 1 FROM ADM_HIST_SQLTEXT WHERE 1=2;

1           
------------

0 rows fetched.

SQL> SELECT 1 FROM ADM_HIST_TRANSACTION WHERE 1=2;

1           
------------

0 rows fetched.

SQL> SELECT 1 FROM ADM_HIST_TRANSACTION WHERE 1=2;

1           
------------

0 rows fetched.

SQL> SELECT 1 FROM ADM_PL_MANAGER WHERE 1=2;

1           
------------

0 rows fetched.

SQL> SELECT 1 FROM ADM_PACKAGES WHERE 1=2;

1           
------------

0 rows fetched.

SQL> CONN / AS SYSDBA

connected.

SQL> DROP USER IF EXISTS USER_DTS20210427046LILP1K00 CASCADE;
Succeed.




