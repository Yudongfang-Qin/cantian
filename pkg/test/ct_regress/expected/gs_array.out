

SQL> -- create table with array field
SQL> ALTER SESSION SET TIME_ZONE='+08:00';

Succeed.

SQL> 
SQL> drop table if exists array_test_1;

Succeed.

SQL> drop table if exists array_test_2;

Succeed.

SQL> drop table if exists array_test_3;

Succeed.

SQL> drop table if exists array_test_4;

Succeed.

SQL> create table array_test_1 (
  2     f1 integer[10],
  3     f2 binary_uint32[],
  4     f3 bigint[],
  5     f4 binary_double[],
  6     f5 double[],
  7     f6 float[],
  8     f7 real[],
  9     f8 number(12,3)[],
 10     f9 decimal(20,5)[],
 11     f10 char(30)[],
 12     f11 nchar(30)[],
 13     f12 varchar(30)[],
 14     f13 nvarchar(30)[],
 15     f14 date[],
 16     f15 datetime[],
 17     f16 timestamp[],
 18     f17 timestamp(3) with time zone[],
 19     f18 timestamp(3) with local time zone[],
 20     f19 boolean[],
 21     f20 interval year(4) to month[],
 22     f21 interval day(7) to second(6)[],
 23     f22 integer
 24 );

Succeed.

SQL> desc array_test_1

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
F1                                           BINARY_INTEGER[]                    
F2                                           BINARY_UINT32[]                     
F3                                           BINARY_BIGINT[]                     
F4                                           BINARY_DOUBLE[]                     
F5                                           BINARY_DOUBLE[]                     
F6                                           BINARY_DOUBLE[]                     
F7                                           BINARY_DOUBLE[]                     
F8                                           NUMBER(12, 3)[]                     
F9                                           NUMBER(20, 5)[]                     
F10                                          CHAR(30 BYTE)[]                     
F11                                          CHAR(30 CHAR)[]                     
F12                                          VARCHAR(30 BYTE)[]                  
F13                                          VARCHAR(30 CHAR)[]                  
F14                                          DATE[]                              
F15                                          DATE[]                              
F16                                          TIMESTAMP(6)[]                      
F17                                          TIMESTAMP(3) WITH TIME ZONE[]       
F18                                          TIMESTAMP(3) WITH LOCAL TIME ZONE[] 
F19                                          BOOLEAN[]                           
F20                                          INTERVAL YEAR(4) TO MONTH[]         
F21                                          INTERVAL DAY(7) TO SECOND(6)[]      
F22                                          BINARY_INTEGER                      

SQL> 
SQL> -- create table as select clause
SQL> create table array_test_2 as (select array[1,2,3]::int[] as f1 from dual);

Succeed.

SQL> desc array_test_2

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
F1                                           BINARY_INTEGER[]                    

SQL> select * from array_test_2;

F1                                                              
----------------------------------------------------------------
{1,2,3}                                                         

1 rows fetched.

SQL> 
SQL> create table array_test_3 as (select array[1,2,3] as f1 from dual); -- error

Succeed.

SQL> desc array_test_3

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
F1                                           BINARY_INTEGER[]                    

SQL> 
SQL> create table array_test_4 as (select * from array_test_1);

Succeed.

SQL> desc array_test_4

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
F1                                           BINARY_INTEGER[]                    
F2                                           BINARY_UINT32[]                     
F3                                           BINARY_BIGINT[]                     
F4                                           BINARY_DOUBLE[]                     
F5                                           BINARY_DOUBLE[]                     
F6                                           BINARY_DOUBLE[]                     
F7                                           BINARY_DOUBLE[]                     
F8                                           NUMBER(12, 3)[]                     
F9                                           NUMBER(20, 5)[]                     
F10                                          CHAR(30 BYTE)[]                     
F11                                          CHAR(30 CHAR)[]                     
F12                                          VARCHAR(30 BYTE)[]                  
F13                                          VARCHAR(30 CHAR)[]                  
F14                                          DATE[]                              
F15                                          DATE[]                              
F16                                          TIMESTAMP(6)[]                      
F17                                          TIMESTAMP(3) WITH TIME ZONE[]       
F18                                          TIMESTAMP(3) WITH LOCAL TIME ZONE[] 
F19                                          BOOLEAN[]                           
F20                                          INTERVAL YEAR(4) TO MONTH[]         
F21                                          INTERVAL DAY(7) TO SECOND(6)[]      
F22                                          BINARY_INTEGER                      

SQL> select * from array_test_4;

F1                                                               F2                                                               F3                                                               F4                                                               F5                                                               F6                                                               F7                                                               F8                                                               F9                                                               F10                                                              F11                                                              F12                                                              F13                                                              F14                                                              F15                                                              F16                                                              F17                                                              F18                                                              F19                                                              F20                                                              F21                                                              F22         


0 rows fetched.

SQL> 
SQL> drop table if exists t_test_array_008;

Succeed.

SQL> drop table if exists t_test_array_base;

Succeed.

SQL> create table t_test_array_base (id int[]);

Succeed.

SQL> insert into t_test_array_base values(array[1,2,2]);

1 rows affected.

SQL> insert into t_test_array_base values(array[5,3,2]);

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> create table t_test_array_008(c) as
  2     select id[3] from t_test_array_base union all select id[3] from t_test_array_base order by 1;

Succeed.

SQL> desc t_test_array_008

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C                                            BINARY_INTEGER                      

SQL> 
SQL> drop table if exists t_test_array_base2;

Succeed.

SQL> drop table if exists t_test_array_030;

Succeed.

SQL> create table t_test_array_base2(id int, id2 decimal(20,5), id3 int[], C_VCHAR varchar(100));

Succeed.

SQL> insert into t_test_array_base2 values(1,1234567.12345,array[1,2], 'aabbaaaaaaa');

1 rows affected.

SQL> create table t_test_array_030 as select array_agg(C_VCHAR||C_VCHAR||C_VCHAR) C_VCHAR from t_test_array_base2;

Succeed.

SQL> desc -q select array_agg(id) from t_test_array_base2;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
ARRAY_AGG(ID)                                BINARY_INTEGER[]                    

SQL> desc -q select array_agg(id2) from t_test_array_base2;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
ARRAY_AGG(ID2)                               NUMBER(20, 5)[]                     

SQL> desc t_test_array_030;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C_VCHAR                                      VARCHAR(300 BYTE)[]                 

SQL> 
SQL> -- expect failed when use data type unsupported for array
SQL> drop table if exists array_test_5;

Succeed.

SQL> create table array_test_5 (
  2     f1 clob[]
  3 );

CT-01365, Datatype CLOB does not support array type
SQL> 
SQL> create table array_test_5 (
  2     f1 blob[]
  3 );

CT-01365, Datatype BLOB does not support array type
SQL> 
SQL> create table array_test_5 (
  2     f1 image[]
  3 );

CT-01365, Datatype IMAGE does not support array type
SQL> 
SQL> create table array_test_5 (
  2     f1 abc[]
  3 );

CT-00601, [2:7]Sql syntax error: datatype expected, but got 'abc'
SQL> 
SQL> create table array_test_5 (
  2     f1 binary(20)[]
  3 );

CT-01365, Datatype BINARY does not support array type
SQL> 
SQL> create table array_test_5 (
  2     f1 varbinary(20)[]
  3 );

CT-01365, Datatype VARBINARY does not support array type
SQL> 
SQL> -- can not create index/primary key/unique/references key on column with array type
SQL> create index ix_array_test_1 on array_test_1 (f1);

CT-01364, Can not create index on column 'F1' with array type
SQL> alter table array_test_1 add constraint abc primary key(f1);

CT-01364, Can not create index on column 'F1' with array type
SQL> alter table array_test_1 add constraint abc unique(f1);

CT-01364, Can not create index on column 'F1' with array type
SQL> create table array_test_5 (f1 int[] primary key);

CT-01364, Can not create index on column 'F1' with array type
SQL> drop table if exists array_test_6;

Succeed.

SQL> drop table if exists array_test_7;

Succeed.

SQL> drop table if exists array_test_8;

Succeed.

SQL> drop table if exists array_test_9;

Succeed.

SQL> create table array_test_6 (c1 int, c2 int[]);

Succeed.

SQL> create table array_test_7 (c1 int, c2 int[]);

Succeed.

SQL> -- alter table add primary/references/unique constraint
SQL> alter table array_test_6 add constraint pk_a primary key(c1);

Succeed.

SQL> alter table array_test_6 add foreign key (c2) references array_test_7(c1);

CT-01368, Can not create reference for array column
SQL> create table array_test_8 (c1 int[] references array_test_6(c1)); -- error

CT-01368, Can not create reference for array column
SQL> alter table array_test_7  add constraint fk_a_b1 foreign key (c2) references array_test_6 (c1); --error

CT-01368, Can not create reference for array column
SQL>  -- outline primary/references key
SQL> create table array_test_9(c1 int, c2 int[], primary key(c2));

CT-01364, Can not create index on column 'C2' with array type
SQL> create table array_test_9(c1 int, c2 int[], foreign key (c2) references array_test_6(c1));

CT-01368, Can not create reference for array column
SQL> create table array_test_9(c1 int, c2 int[], foreign key (c1) references array_test_6(c2));

CT-00650, The column referenced by a foreign key was not the unique or primary key of the referenced table
SQL> create table array_test_9(c1, c2 references array_test_6(c1)) as select c1, c2 from array_test_7;

CT-01368, Can not create reference for array column
SQL> 
SQL> -- can not include array type columns in non-heap table
SQL> drop table if exists array_test_022;

Succeed.

SQL> create global TEMPORARY table array_test_022 (
  2     COL1 CHAR(200),
  3     COL2 VARCHAR(30),
  4     COL3 VARCHAR(8000)[],
  5     COL4 NCHAR(90)[20],
  6     COL5 NVARCHAR(200)[2147483647]
  7 );

CT-01375, Can not create array column in non-heap table
SQL> 
SQL> -- can not set default value for array column
SQL> create table t_test_array_017(c1 int default 2, c2 int[] default 2);

CT-01369, [1:67]Can not set default value for array column
SQL> create table t_test_array_018(c1 int, c2 int[] default array[2]);

CT-00601, [1:56]Sql syntax error: unexpected array expression
SQL> 
SQL> -- can not modify column to array type
SQL> alter table array_test_1 modify (f1 varchar(30)[]);

CT-01374, Can not modify column(F1)'s datatype
SQL> alter table array_test_1 modify (f1 integer);

CT-01373, Can not modify column(F1) to non-array type
SQL> alter table array_test_1 modify (f1 char(30));

CT-01373, Can not modify column(F1) to non-array type
SQL> alter table array_test_1 modify (f22 integer[]);

CT-01373, Can not modify column(F22) to array type
SQL> alter table array_test_1 modify (f22 varchar(30)[]);

CT-01373, Can not modify column(F22) to array type
SQL> 
SQL> --DTS2020020504429
SQL> select array[:] from dual;

CT-00601, [1:14]Sql syntax error: unexpected bind parameter in array
SQL> -- add array type columns
SQL> drop table if exists array_test_015;

Succeed.

SQL> create table array_test_015 (
  2     COL1 CHAR(200)[],
  3     COL2 VARCHAR(2000)[],
  4     COL3 NCHAR(9)[20],
  5     COL4 INT[],
  6     COL5 BIGINT[],
  7     COL6 BIGINT SIGNED[],
  8     COL7 REAL[],
  9     COL8 BINARY_DOUBLE[],
 10     COL9 DECIMAL[],
 11     COL10 DATE[],
 12     COL11 TIMESTAMP(6)[],
 13     COL12 INTERVAL YEAR(4) TO MONTH[],
 14     COL13 INTERVAL DAY(7) TO SECOND (6)[],
 15     COL14 BOOL
 16 );

Succeed.

SQL> 
SQL> alter table array_test_015 add COLUMN COL15 VARCHAR(2000)[767];

Succeed.

SQL> alter table array_test_015 add (COL16 int AUTO_INCREMENT unique,COL17 DECIMAL[]);

Succeed.

SQL> desc array_test_015

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
COL1                                         CHAR(200 BYTE)[]                    
COL2                                         VARCHAR(2000 BYTE)[]                
COL3                                         CHAR(9 CHAR)[]                      
COL4                                         BINARY_INTEGER[]                    
COL5                                         BINARY_BIGINT[]                     
COL6                                         BINARY_BIGINT[]                     
COL7                                         BINARY_DOUBLE[]                     
COL8                                         BINARY_DOUBLE[]                     
COL9                                         NUMBER[]                            
COL10                                        DATE[]                              
COL11                                        TIMESTAMP(6)[]                      
COL12                                        INTERVAL YEAR(4) TO MONTH[]         
COL13                                        INTERVAL DAY(7) TO SECOND(6)[]      
COL14                                        BOOLEAN                             
COL15                                        VARCHAR(2000 BYTE)[]                
COL16                                        BINARY_INTEGER                      
COL17                                        NUMBER[]                            

SQL> insert into array_test_015 (col15, col17) values (array['abc', 'def'], array[1,3]);

1 rows affected.

SQL> select col15, col17 from array_test_015 where col15 regexp 'abc';

COL15                                                            COL17                                                           
---------------------------------------------------------------- ----------------------------------------------------------------
{abc,def}                                                        {1,3}                                                           

1 rows fetched.

SQL> select col15, col17 from array_test_015 where col15 regexp 'def';

COL15                                                            COL17                                                           
---------------------------------------------------------------- ----------------------------------------------------------------
{abc,def}                                                        {1,3}                                                           

1 rows fetched.

SQL> select col15, col17 from array_test_015 where col15 regexp 'abc,def';

COL15                                                            COL17                                                           
---------------------------------------------------------------- ----------------------------------------------------------------
{abc,def}                                                        {1,3}                                                           

1 rows fetched.

SQL> select col15, col17 from array_test_015 where col15 regexp 'abc def';

COL15                                                            COL17                                                           
---------------------------------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> select col15, col17 from array_test_015 where regexp_like(col15, 'abc');

COL15                                                            COL17                                                           
---------------------------------------------------------------- ----------------------------------------------------------------
{abc,def}                                                        {1,3}                                                           

1 rows fetched.

SQL> select col15, col17 from array_test_015 where regexp_like(col15, 'abc,def');

COL15                                                            COL17                                                           
---------------------------------------------------------------- ----------------------------------------------------------------
{abc,def}                                                        {1,3}                                                           

1 rows fetched.

SQL> select col15, col17 from array_test_015 where regexp_like(col15, 'abc def');

COL15                                                            COL17                                                           
---------------------------------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> select col15, col17 from array_test_015 where col15 like '{abc%';

COL15                                                            COL17                                                           
---------------------------------------------------------------- ----------------------------------------------------------------
{abc,def}                                                        {1,3}                                                           

1 rows fetched.

SQL> select col15, col17 from array_test_015;

COL15                                                            COL17                                                           
---------------------------------------------------------------- ----------------------------------------------------------------
{abc,def}                                                        {1,3}                                                           

1 rows fetched.

SQL> alter table array_test_015 add col17 int[] default 10;

CT-01369, [1:54]Can not set default value for array column
SQL> 
SQL> -- array type expression test
SQL> select array[] from dual;

ARRAY[]                                                         
----------------------------------------------------------------
{}                                                              

1 rows fetched.

SQL> select array[1] from dual;

ARRAY[1]                                                        
----------------------------------------------------------------
{1}                                                             

1 rows fetched.

SQL> select array[1,] from dual;

CT-01362, [1:15]Invalid array format
SQL> select array[,1] from dual;

CT-00601, [1:14]Sql syntax error: invalid expression
SQL> select array[,1,] from dual;

CT-00601, [1:14]Sql syntax error: invalid expression
SQL> select array[1,2] from dual;

ARRAY[1,2]                                                      
----------------------------------------------------------------
{1,2}                                                           

1 rows fetched.

SQL> select array[null,1,2] from dual;

ARRAY[NULL,1,2]                                                 
----------------------------------------------------------------
{NULL,1,2}                                                      

1 rows fetched.

SQL> select array[1,2,null] from dual;

ARRAY[1,2,NULL]                                                 
----------------------------------------------------------------
{1,2,NULL}                                                      

1 rows fetched.

SQL> select array[null,1,2,null] from dual;

ARRAY[NULL,1,2,NULL]                                            
----------------------------------------------------------------
{NULL,1,2,NULL}                                                 

1 rows fetched.

SQL> select array[null,null,null] from dual;

ARRAY[NULL,NULL,NULL]                                           
----------------------------------------------------------------
{NULL,NULL,NULL}                                                

1 rows fetched.

SQL> select array[] from dual;

ARRAY[]                                                         
----------------------------------------------------------------
{}                                                              

1 rows fetched.

SQL> select array['abc', ''def', '''] from dual; -- error

CT-01362, [1:26]Invalid array format
SQL> select array['abc', 'def'abc, ''''] from dual; --error

CT-01362, [1:29]Invalid array format
SQL> select array['abc', 'def'', '''] from dual;

ARRAY['ABC', 'DEF'', ''']                                       
----------------------------------------------------------------
{abc,def', '}                                                   

1 rows fetched.

SQL> select array['abc', 'def', ''''] from dual;

ARRAY['ABC', 'DEF', '''']                                       
----------------------------------------------------------------
{abc,def,'}                                                     

1 rows fetched.

SQL> select array['abc', 'def,ghi', ''''] from dual;

ARRAY['ABC', 'DEF,GHI', '''']                                   
----------------------------------------------------------------
{abc,def,ghi,'}                                                 

1 rows fetched.

SQL> select array['abc', "abc", '\"'] from dual;

CT-00601, [1:21]Sql syntax error: invalid column name 'abc'
SQL> select array['abc', '""'] from dual;

ARRAY['ABC', '""']                                              
----------------------------------------------------------------
{abc,""}                                                        

1 rows fetched.

SQL> select array['abc', '"abc"'] from dual;

ARRAY['ABC', '"ABC"']                                           
----------------------------------------------------------------
{abc,"abc"}                                                     

1 rows fetched.

SQL> select case when cast('{1,2,3}' as int[]) is not null then array[1,2] else array[]::int[] end from dual;

CASE WHEN CAST('{1,2,3}' AS INT[]) IS NOT NULL THEN ARRAY[1,2] E
----------------------------------------------------------------
{1,2}                                                           

1 rows fetched.

SQL> 
SQL> drop table if exists t2;

Succeed.

SQL> create table t2 (f1 int, f2 int);

Succeed.

SQL> insert into t2 values (1,2),(1,1),(1,3),(2,4),(2,10),(4,100);

6 rows affected.

SQL> select decode(f1, 1, case when cast('{1,2,3}' as int[]) is not null then array[1,2,3] else '{1,2,3,4}' end, '2', '{1,3}', '{2,5}') from t2;

DECODE(F1, 1, CASE WHEN CAST('{1,2,3}' AS INT[]) IS NOT NULL THE
----------------------------------------------------------------
{1,2,3}                                                         
{1,2,3}                                                         
{1,2,3}                                                         
{1,3}                                                           
{1,3}                                                           
{2,5}                                                           

6 rows fetched.

SQL> select decode(f1, 1, case when cast('{1,2,3}' as int[]) is null then array[1,2,3] else '{1,2,3,4}' end, '2', '{1,3}', '{2,5}') from t2;

DECODE(F1, 1, CASE WHEN CAST('{1,2,3}' AS INT[]) IS NULL THEN AR
----------------------------------------------------------------
{1,2,3,4}                                                       
{1,2,3,4}                                                       
{1,2,3,4}                                                       
{1,3}                                                           
{1,3}                                                           
{2,5}                                                           

6 rows fetched.

SQL> 
SQL> -- select operation from array type table field
SQL> insert into array_test_1 values (
  2     array[1, '2'::integer, null],
  3     array[null, '2'::binary_uint32],
  4     '{null,1,2,3,null}',
  5     array[1.23, 3.2123, null, 0],
  6     array[null, '1.23', 3.2123, null],
  7     array[null, '1.23', 3.2123, null],
  8     array[null, '1.23', 3.2123, null],
  9     array[null, '1234567.89', 1234567.89, null],
 10     array[1234567.12345, '1234567.89', 1234567.89, null],
 11     array['abc', 'def', 'abc''def', null],
 12     array[],
 13     '{}',
 14     array['abc', 'def', 'abc''def', null],
 15     array[null, '0001-01-01 00:00:00', '9999-12-31 23:59:59', null],
 16     array['0001-01-01 00:00:00', null, '9999-12-31 23:59:59', null],
 17     array['0001-01-01 00:00:00.000000', null, '9999-12-31 23:59:59.999999', null],
 18     array['2019-06-15 14:36:25.046731'],
 19     array['2019-06-15 14:36:25.046731'],
 20     array[true, false, 1::bool, 0::bool, null],
 21     array['-9999-11', '+9999-11', null],
 22     array['-P99DT655M999.99999S', '1231 12:3:4.1234', 'P1231DT16H3.3333333S', '-0 00:19:7.7777777777', '-1234 0:0:0.0004', 'PT12H', null],
 23     1
 24 );

1 rows affected.

SQL> 
SQL> select * from array_test_1;

F1                                                               F2                                                               F3                                                               F4                                                               F5                                                               F6                                                               F7                                                               F8                                                               F9                                                               F10                                                              F11                                                              F12                                                              F13                                                              F14                                                              F15                                                              F16                                                              F17                                                              F18                                                              F19                                                              F20                                                              F21                                                              F22         
---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------
{1,2,NULL}                                                       {NULL,2}                                                         {NULL,1,2,3,NULL}                                                {1.23,3.2123,NULL,0}                                             {NULL,1.23,3.2123,NULL}                                          {NULL,1.23,3.2123,NULL}                                          {NULL,1.23,3.2123,NULL}                                          {NULL,1234567.89,1234567.89,NULL}                                {1234567.12345,1234567.89,1234567.89,NULL}                       {abc                           ,def                           ,abc'def                       ,NULL} {}                                                               {}                                                               {abc,def,abc'def,NULL}                                           {NULL,0001-01-01 00:00:00,9999-12-31 23:59:59,NULL}              {0001-01-01 00:00:00,NULL,9999-12-31 23:59:59,NULL}              {0001-01-01 00:00:00.000000,NULL,9999-12-31 23:59:59.999999,NULL} {2019-06-15 14:36:25.047 +08:00}                                 {2019-06-15 06:36:25.047}                                        {TRUE,FALSE,TRUE,FALSE,NULL}                                     {-9999-11,+9999-11,NULL}                                         {-0000099 11:11:39.999990,+0001231 12:03:04.123400,+0001231 16:00:03.333333,-0000000 00:19:07.777778,-0001234 00:00:00.000400,+0000000 12:00:00.000000,NULL} 1           

1 rows fetched.

SQL> select f21 from array_test_1;

F21                                                             
----------------------------------------------------------------
{-0000099 11:11:39.999990,+0001231 12:03:04.123400,+0001231 16:00:03.333333,-0000000 00:19:07.777778,-0001234 00:00:00.000400,+0000000 12:00:00.000000,NULL}

1 rows fetched.

SQL> select f22[1] from array_test_1;

CT-01371, [1:8]Can not subscript column F22 because it is not an array
SQL> select f21[0] from array_test_1;

CT-00601, [1:12]Sql syntax error: invalid array subscript
SQL> select f21[1] from array_test_1;

F21                     
------------------------
-0000099 11:11:39.999990

1 rows fetched.

SQL> select f21[1000] from array_test_1;

F21                     
------------------------
                        

1 rows fetched.

SQL> select f21[1:1000] from array_test_1;

F21                                                             
----------------------------------------------------------------
{-0000099 11:11:39.999990,+0001231 12:03:04.123400,+0001231 16:00:03.333333,-0000000 00:19:07.777778,-0001234 00:00:00.000400,+0000000 12:00:00.000000,NULL}

1 rows fetched.

SQL> select f21[1:2] from array_test_1;

F21                                                             
----------------------------------------------------------------
{-0000099 11:11:39.999990,+0001231 12:03:04.123400}             

1 rows fetched.

SQL> select f21[2:4] from array_test_1;

F21                                                             
----------------------------------------------------------------
{+0001231 12:03:04.123400,+0001231 16:00:03.333333,-0000000 00:19:07.777778}

1 rows fetched.

SQL> select f1[1], f21[2:4] from array_test_1 where f1[1] = 1;

F1           F21                                                             
------------ ----------------------------------------------------------------
1            {+0001231 12:03:04.123400,+0001231 16:00:03.333333,-0000000 00:19:07.777778}

1 rows fetched.

SQL> select f1[1], f21[2:4] from array_test_1 where f1[1] != 1;

F1           F21                                                             
------------ ----------------------------------------------------------------

0 rows fetched.

SQL> select f1[3], f21[2:4] from array_test_1 where f1[3] is null;

F1           F21                                                             
------------ ----------------------------------------------------------------
             {+0001231 12:03:04.123400,+0001231 16:00:03.333333,-0000000 00:19:07.777778}

1 rows fetched.

SQL> select f1[3], f21[2:4] from array_test_1 where f1[3] is not null;

F1           F21                                                             
------------ ----------------------------------------------------------------

0 rows fetched.

SQL> select f21[2:4]::varchar(3) from array_test_1;

F21[2:4]::VARCHAR(3)
--------------------
{+1                 

1 rows fetched.

SQL> select f21[2:4]::int from array_test_1;

CT-00606, [1:8]Inconsistent datatypes, expected BINARY_INTEGER - got INTERVAL DAY TO SECOND
SQL> select f1[1] + 3, f21[2:4] from array_test_1 where f1[1] = 1;

F1[1] + 3            F21                                                             
-------------------- ----------------------------------------------------------------
4                    {+0001231 12:03:04.123400,+0001231 16:00:03.333333,-0000000 00:19:07.777778}

1 rows fetched.

SQL> select * from (select f1[1] + 3, f21[2:4] from array_test_1 where f1[1] = 1);

F1[1] + 3            F21                                                             
-------------------- ----------------------------------------------------------------
4                    {+0001231 12:03:04.123400,+0001231 16:00:03.333333,-0000000 00:19:07.777778}

1 rows fetched.

SQL> select f1[1] from array_test_1 where array[] is null; -- no rows

F1          
------------

0 rows fetched.

SQL> with a as (select f1 from array_test_2) select f1 from a;

F1                                                              
----------------------------------------------------------------
{1,2,3}                                                         

1 rows fetched.

SQL> with a as (select f1::varchar(10)[] b from array_test_2) select b from a;

B                                                               
----------------------------------------------------------------
{1,2,3}                                                         

1 rows fetched.

SQL> -- union all/minus
SQL> select array[] from dual union all select '{1,2,3}' from dual;

CT-00601, [1:36]Sql syntax error: expression must have same datatype as corresponding expression
SQL> select array[] from dual union all select '{1,2,3}'::int[] from dual;

ARRAY[]                                                         
----------------------------------------------------------------
{}                                                              
{1,2,3}                                                         

2 rows fetched.

SQL> select '{1,2,3}' from dual union all select array[] from dual;

CT-00601, [1:38]Sql syntax error: expression must have same datatype as corresponding expression
SQL> select '{1,2,3}'::int[] from dual union all select array[] from dual;

'{1,2,3}'::INT[]                                                
----------------------------------------------------------------
{1,2,3}                                                         
{}                                                              

2 rows fetched.

SQL> select array[] from dual union all select array_agg(f2) from t2 group by f1;

ARRAY[]                                                         
----------------------------------------------------------------
{}                                                              
{100}                                                           
{4,10}                                                          
{2,1,3}                                                         

4 rows fetched.

SQL> select array_agg(f2) from t2 group by f1 union all select array[] from dual;

ARRAY_AGG(F2)                                                   
----------------------------------------------------------------
{100}                                                           
{4,10}                                                          
{2,1,3}                                                         
{}                                                              

4 rows fetched.

SQL> 
SQL> drop table if exists t_test_array_base;

Succeed.

SQL> create table t_test_array_base (id int,c_int int[],c_bigint bigint[],c_varchar varchar(200)[],c_char char(5)[],c_bool bool[],c_date date[],c_iym interval year to month[]);

Succeed.

SQL> insert into t_test_array_base values(2,array[1,2,null,10,11],array[1001,1002,1003,null,1004],array['abce','efgg','1233'],array['abcc','efgf','1233'],array[TRUE,FALSE,'f','t'],array['2013-10-01 10:10:10','2014-10-01 10:10:10'],array['50-0']);

1 rows affected.

SQL> insert into t_test_array_base values(2,array[1,2,2,10],array[2001,2002,1003,null,1004],array['abc','efg','123'],array['abc','efg','123'],array[TRUE,FALSE,'f','t'],array['2011-10-01 10:10:10','2012-10-01 10:10:10'],array['60-0']);

1 rows affected.

SQL> insert into t_test_array_base values(2,array[1,2,2,10],array[2001,2002,1003,null,1004],array['abc','efg','123'],array['abc','efg','123'],array[TRUE,FALSE,'f','t'],array['2011-10-01 10:10:10','2012-10-01 10:10:10'],array['60-0']);

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> select t1.c_int[1] from t_test_array_base t1 union all select t1.c_int from t_test_array_base t1;

CT-00601, [1:56]Sql syntax error: expression must have same datatype as corresponding expression
SQL> select t1.c_int from t_test_array_base t1 union all select t1.c_int[1] from t_test_array_base t1;

CT-00601, [1:53]Sql syntax error: expression must have same datatype as corresponding expression
SQL> 
SQL> -- not support union
SQL> select array_agg(f2) from t2 group by f1 union select array[1,2,3] from dual;

CT-00601, Sql syntax error: unexpected array expression
SQL> select * from ( select array[1,2] c_int from dual union all select array['abc','feg']::varchar(15) from dual) order by 1;

CT-00601, [1:61]Sql syntax error: expression must have same datatype as corresponding expression
SQL> 
SQL> -- not supported: group by expression(array type)
SQL> select f1 from array_test_1 group by f1;

CT-00601, [1:38]Sql syntax error: unexpected array expression
SQL> select f1 from array_test_1 group by array[1,2];

CT-00601, [1:38]Sql syntax error: unexpected array expression
SQL> select f1 from t2 group by array_agg(f2);

CT-01317, [1:28]Unexpected aggregation 'ARRAY_AGG'
SQL> 
SQL> -- not supported: order by expression(array type)
SQL> select f1 from array_test_1 order by f1;

CT-00601, [1:38]Sql syntax error: unexpected array expression
SQL> select f1 from array_test_1 order by array[1,2];

CT-00601, [1:38]Sql syntax error: unexpected array expression
SQL> select f1 from array_test_1 order by '{1}';

F1                                                              
----------------------------------------------------------------
{1,2,NULL}                                                      

1 rows fetched.

SQL> select f1 from t2 order by array_agg(f2);

CT-01317, [1:28]Unexpected aggregation 'ARRAY_AGG'
SQL> select f1 from array_test_1 order by '{1}'::int[];

F1                                                              
----------------------------------------------------------------
{1,2,NULL}                                                      

1 rows fetched.

SQL> 
SQL> drop table if exists orderby_array;

Succeed.

SQL> create table orderby_array (id int[],id1 bigint[],id3 varchar(20));

Succeed.

SQL> insert into orderby_array values(array[1,2,2],array[111,222,333],'jsfwo');

1 rows affected.

SQL> commit;

Succeed.

SQL> select id[3] a from orderby_array order by 1;

A           
------------
2           

1 rows fetched.

SQL> select id[3] a from orderby_array order by a;

A           
------------
2           

1 rows fetched.

SQL> select id[3] a from orderby_array order by id[3];

A           
------------
2           

1 rows fetched.

SQL> select id a from orderby_array order by a;

CT-00601, [1:41]Sql syntax error: unexpected array expression
SQL> select id[1:2] a from orderby_array order by a;

CT-00601, [1:46]Sql syntax error: unexpected array expression
SQL> 
SQL> -- update operation for array type table field
SQL> update array_test_1 set f1[-1] = 1;

CT-00601, [1:28]Sql syntax error: invalid array subscript
SQL> update array_test_1 set f1[0] = 1;

CT-00601, [1:28]Sql syntax error: invalid array subscript
SQL> update array_test_1 set f1[1:1] = 1;

CT-00606, Inconsistent datatypes, expected array - got BINARY_INTEGER
SQL> update array_test_1 set f1[1:2] = '{1,2,3}';

CT-01363, Source array elements count does not match
SQL> update array_test_1 set f1[1:2] = '{1}';

CT-01363, Source array elements count does not match
SQL> 
SQL> update array_test_1 set f11 = array['abc', 'def', 1, 1.2324];

1 rows affected.

SQL> select f11 from array_test_1;

F11                                                             
----------------------------------------------------------------
{abc                           ,def                           ,1                             ,1.2324                        }

1 rows fetched.

SQL> update array_test_1 set f11 = array['abc', 'def', 1, 1.2324]::varchar(5)[];

1 rows affected.

SQL> select f11 from array_test_1;

F11                                                             
----------------------------------------------------------------
{abc                           ,def                           ,1                             ,1.232                         }

1 rows fetched.

SQL> update array_test_1 set f11 = '{abc, def, 1, 1.2324}';

1 rows affected.

SQL> select f11 from array_test_1;

F11                                                             
----------------------------------------------------------------
{abc                           ,def                           ,1                             ,1.2324                        }

1 rows fetched.

SQL> 
SQL> update array_test_1 set f12[1] = 'abc';

1 rows affected.

SQL> update array_test_1 set f12[6] = 123;

1 rows affected.

SQL> update array_test_1 set f12[2] = 'def';

1 rows affected.

SQL> update array_test_1 set f12[2:3] = '{ghi, ddd}';

1 rows affected.

SQL> update array_test_1 set f12[4] = 'kkk';

1 rows affected.

SQL> select f12 from array_test_1;

F12                                                             
----------------------------------------------------------------
{abc,ghi,ddd,kkk,NULL,123}                                      

1 rows fetched.

SQL> update array_test_1 set f12 = null;

1 rows affected.

SQL> select f12 from array_test_1;

F12                                                             
----------------------------------------------------------------
                                                                

1 rows fetched.

SQL> update array_test_1 set f12[1] = null;

1 rows affected.

SQL> 
SQL> update array_test_1 set f1[1] = 2;

1 rows affected.

SQL> select f1[1] from array_test_1;

F1          
------------
2           

1 rows fetched.

SQL> update array_test_1 set f1[3] = 3;

1 rows affected.

SQL> select f1[1] from array_test_1;

F1          
------------
2           

1 rows fetched.

SQL> update array_test_1 set f1[100] = 100;

1 rows affected.

SQL> select f1 from array_test_1;

F1                                                              
----------------------------------------------------------------
{2,2,3,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,100}

1 rows fetched.

SQL> update array_test_1 set f1[101] = null;

1 rows affected.

SQL> select f1 from array_test_1;

F1                                                              
----------------------------------------------------------------
{2,2,3,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,100,NULL}

1 rows fetched.

SQL> 
SQL> update array_test_1 set f1[1:2] = '{100, 200}';

1 rows affected.

SQL> update array_test_1 set f10[1:2] = array['abc', 123];

1 rows affected.

SQL> update array_test_1 set f21[1] = '-0 00:19:7.7777777777';

1 rows affected.

SQL> select f1, f10, f21 from array_test_1;

F1                                                               F10                                                              F21                                                             
---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
{100,200,3,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,100,NULL} {abc                           ,123                           ,abc'def                       ,NULL} {-0000000 00:19:07.777778,+0001231 12:03:04.123400,+0001231 16:00:03.333333,-0000000 00:19:07.777778,-0001234 00:00:00.000400,+0000000 12:00:00.000000,NULL}

1 rows fetched.

SQL> 
SQL> -- update set col = select clause
SQL> update array_test_1 set f17[1] = (select '2019-06-16 15:36:25.046723' from dual);

1 rows affected.

SQL> update array_test_1 set f17[1:2] = (select '2019-06-16 15:36:25.046723' from dual);

CT-01362, Invalid array format
SQL> update array_test_1 set f17[1:2] = (select '{2019-06-16 15:36:25.046723, 2019-06-16 15:52:25.332612}' from dual);

1 rows affected.

SQL> update array_test_1 set f17[3] = (select null from dual);

1 rows affected.

SQL> 
SQL> update array_test_1 set f17[4] = (select '2019-08-16 15:36:25.046723' from dual) where f17[1] = '2019-06-16 15:36:25.046723';

0 rows affected.

SQL> update array_test_1 set f17[4] = (select '2019-08-16 15:36:25.046723' from dual) where f17[1] = '2019-06-16 15:36:25.047';

1 rows affected.

SQL> select f17 from array_test_1;

F17                                                             
----------------------------------------------------------------
{2019-06-16 15:36:25.047 +08:00,2019-06-16 15:52:25.333 +08:00,NULL,2019-08-16 15:36:25.047 +08:00}

1 rows fetched.

SQL> 
SQL> -- insert operation for array type table field
SQL> insert into array_test_1(f1, f2, f22) values (array[11,2], '{100,200}', 2);

1 rows affected.

SQL> insert into array_test_1(f1, f2, f22) values (array[100,1000], null, null);

1 rows affected.

SQL> insert into array_test_1(f1, f2, f22) values (array[11,2], null, 3);

1 rows affected.

SQL> 
SQL> insert into array_test_1 
  2     select array[1, '2'::integer, null],
  3         array[null, '2'::binary_uint32],
  4         '{null,1,2,3,null}',
  5         array[1.23, 3.2123, null, 0],
  6         array[null, '1.23', 3.2123, null],
  7         array[null, '1.23', 3.2123, null],
  8         array[null, '1.23', 3.2123, null],
  9         array[null, '1234567.89', 1234567.89, null],
 10         array[1234567.12345, '1234567.89', 1234567.89, null],
 11         array['abc', 'def', 'abc''def', null],
 12         array[],
 13         '{}',
 14         array['abc', 'def', 'abc''def', null],
 15         array[null, '0001-01-01 00:00:00', '9999-12-31 23:59:59', null],
 16         array['0001-01-01 00:00:00', null, '9999-12-31 23:59:59', null],
 17         array['0001-01-01 00:00:00.000000', null, '9999-12-31 23:59:59.999999', null],
 18         array['2019-06-15 14:36:25.046731'],
 19         array['2019-06-15 14:36:25.046731'],
 20         array[true, false, 1::boolean, 0::boolean, null],
 21         array['-9999-11', '+9999-11', null],
 22         array['-P99DT655M999.99999S', '1231 12:3:4.1234', 'P1231DT16H3.3333333S', '-0 00:19:7.7777777777', '-1234 0:0:0.0004', 'PT12H', null],
 23         5
 24             from dual;

1 rows affected.

SQL> 
SQL> select * from array_test_1;

F1                                                               F2                                                               F3                                                               F4                                                               F5                                                               F6                                                               F7                                                               F8                                                               F9                                                               F10                                                              F11                                                              F12                                                              F13                                                              F14                                                              F15                                                              F16                                                              F17                                                              F18                                                              F19                                                              F20                                                              F21                                                              F22         

{100,200,3,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,100,NULL} {NULL,2}                                                         {NULL,1,2,3,NULL}                                                {1.23,3.2123,NULL,0}                                             {NULL,1.23,3.2123,NULL}                                          {NULL,1.23,3.2123,NULL}                                          {NULL,1.23,3.2123,NULL}                                          {NULL,1234567.89,1234567.89,NULL}                                {1234567.12345,1234567.89,1234567.89,NULL}                       {abc                           ,123                           ,abc'def                       ,NULL} {abc                           ,def                           ,1                             ,1.2324                        } {NULL}                                                           {abc,def,abc'def,NULL}                                           {NULL,0001-01-01 00:00:00,9999-12-31 23:59:59,NULL}              {0001-01-01 00:00:00,NULL,9999-12-31 23:59:59,NULL}              {0001-01-01 00:00:00.000000,NULL,9999-12-31 23:59:59.999999,NULL} {2019-06-16 15:36:25.047 +08:00,2019-06-16 15:52:25.333 +08:00,NULL,2019-08-16 15:36:25.047 +08:00} {2019-06-15 06:36:25.047}                                        {TRUE,FALSE,TRUE,FALSE,NULL}                                     {-9999-11,+9999-11,NULL}                                         {-0000000 00:19:07.777778,+0001231 12:03:04.123400,+0001231 16:00:03.333333,-0000000 00:19:07.777778,-0001234 00:00:00.000400,+0000000 12:00:00.000000,NULL} 1           
{11,2}                                                           {100,200}
{100,1000}
{11,2}
{1,2,NULL}                                                       {NULL,2}                                                         {NULL,1,2,3,NULL}                                                {1.23,3.2123,NULL,0}                                             {NULL,1.23,3.2123,NULL}                                          {NULL,1.23,3.2123,NULL}                                          {NULL,1.23,3.2123,NULL}                                          {NULL,1234567.89,1234567.89,NULL}                                {1234567.12345,1234567.89,1234567.89,NULL}                       {abc                           ,def                           ,abc'def                       ,NULL} {}                                                               {}                                                               {abc,def,abc'def,NULL}                                           {NULL,0001-01-01 00:00:00,9999-12-31 23:59:59,NULL}              {0001-01-01 00:00:00,NULL,9999-12-31 23:59:59,NULL}              {0001-01-01 00:00:00.000000,NULL,9999-12-31 23:59:59.999999,NULL} {2019-06-15 14:36:25.047 +08:00}                                 {2019-06-15 06:36:25.047}                                        {TRUE,FALSE,TRUE,FALSE,NULL}                                     {-9999-11,+9999-11,NULL}                                         {-0000099 11:11:39.999990,+0001231 12:03:04.123400,+0001231 16:00:03.333333,-0000000 00:19:07.777778,-0001234 00:00:00.000400,+0000000 12:00:00.000000,NULL} 5           

5 rows fetched.

SQL> 
SQL> -- related array functions test
SQL> -- array_length(array express), arguments can be column, constant expression, variant array expression
SQL> -- constant expression as arguments
SQL> SELECT array_length(null) FROM dual;

CT-01362, Invalid array format
SQL> select array_length(1) from dual;

CT-00606, [1:8]Inconsistent datatypes, expected ARRAY - got BINARY_INTEGER
SQL> select array_length('abc') from dual;

CT-01362, Invalid array format
SQL> select array_length('{112,3,4') from dual;

CT-01362, Invalid array format
SQL> select array_length('{112,3,4}') from dual;

ARRAY_LENGTH('{112,3,4}')
-------------------------
3                        

1 rows fetched.

SQL> select array_length(array[112,3,4]) from dual;

ARRAY_LENGTH(ARRAY[112,3,4])
----------------------------
3                           

1 rows fetched.

SQL> select array_length('{}') from dual;

ARRAY_LENGTH('{}')
------------------
0                 

1 rows fetched.

SQL> select array_length(array[]) from dual;

ARRAY_LENGTH(ARRAY[])
---------------------
0                    

1 rows fetched.

SQL> select array_length('{1,2,3,4,1930,3023,111}'::int[]) from dual;

ARRAY_LENGTH('{1,2,3,4,1930,3023,111}'::INT[])
----------------------------------------------
7                                             

1 rows fetched.

SQL> select array_length('{1,2,3,4,1930,3023,111}'::varchar(30)[]) from dual;

ARRAY_LENGTH('{1,2,3,4,1930,3023,111}'::VARCHAR(30)[])
------------------------------------------------------
7                                                     

1 rows fetched.

SQL> 
SQL> -- column as arguments
SQL> delete from array_test_2;

1 rows affected.

SQL> select array_length(a.f1) from array_test_2 a;

ARRAY_LENGTH(A.F1)
------------------

0 rows fetched.

SQL> insert into array_test_2 values ('{1,2,null,4}'), (array[null, null, null]), ('{null,null,null,4}');

3 rows affected.

SQL> select array_length(f1) from array_test_2 a;

ARRAY_LENGTH(F1)
----------------
4               
3               
4               

3 rows fetched.

SQL> with a as (select f1 from array_test_2) select array_length(f1) from a;

ARRAY_LENGTH(F1)
----------------
4               
3               
4               

3 rows fetched.

SQL> 
SQL> -- variant array expression
SQL> update array_test_1 set f1[1] = 1;

5 rows affected.

SQL> select f1[1] + 3, array_length(f21[2:4]) from array_test_1 where f1[1] = 1;

F1[1] + 3            ARRAY_LENGTH(F21[2:4])
-------------------- ----------------------
4                    3                     
4                    0                     
4                    0                     
4                    0                     
4                    3                     

5 rows fetched.

SQL> select array_length(array_agg(f22)) from array_test_1;

ARRAY_LENGTH(ARRAY_AGG(F22))
----------------------------
4                           

1 rows fetched.

SQL> 
SQL> -- array_agg()
SQL> select array_agg((select 1 from dual)) from dual;

ARRAY_AGG((SELECT 1 FROM DUAL))                                 
----------------------------------------------------------------
{1}                                                             

1 rows fetched.

SQL> select array_agg((select 'abc' from dual)) from dual;

ARRAY_AGG((SELECT 'ABC' FROM DUAL))                             
----------------------------------------------------------------
{abc}                                                           

1 rows fetched.

SQL> desc -q select array_agg((select 'abc' from dual)) from dual;

Name                                   Null?    Type                                
-------------------------------------- -------- ------------------------------------
ARRAY_AGG((SELECT 'ABC' FROM DUAL))             CHAR(3 BYTE)[]                      

SQL> select array_agg((select array[1,2] from dual)) from dual;

CT-01366, [1:8]Invalid function argument type
SQL> select array_agg((select 'abc'::clob from dual)) from dual;

CT-01304, [1:33]Data type 'CLOB' is not supported
SQL> select array_agg((select 'abc'::image from dual)) from dual;

CT-01304, [1:33]Data type 'IMAGE' is not supported
SQL> select array_agg((select 'abc'::blob from dual)) from dual;

CT-01304, [1:33]Data type 'BLOB' is not supported
SQL> 
SQL> drop table if exists t2;

Succeed.

SQL> create table t2 (f1 int, f2 int);

Succeed.

SQL> insert into t2 values (1,1), (1,2), (1,3), (2, 100), (2,200), (2, 300), (3, 500), (3,600);

8 rows affected.

SQL> 
SQL> select array_agg(f2) from t2;

ARRAY_AGG(F2)                                                   
----------------------------------------------------------------
{1,2,3,100,200,300,500,600}                                     

1 rows fetched.

SQL> select array_agg(f2) from t2 group by f1;

ARRAY_AGG(F2)                                                   
----------------------------------------------------------------
{100,200,300}                                                   
{1,2,3}                                                         
{500,600}                                                       

3 rows fetched.

SQL> select array_agg(f2) from t2 group by f1 order by f1;

ARRAY_AGG(F2)                                                   
----------------------------------------------------------------
{1,2,3}                                                         
{100,200,300}                                                   
{500,600}                                                       

3 rows fetched.

SQL> select * from (select array_agg(f2) from t2 group by f1 order by f1);

ARRAY_AGG(F2)                                                   
----------------------------------------------------------------
{1,2,3}                                                         
{100,200,300}                                                   
{500,600}                                                       

3 rows fetched.

SQL> 
SQL> drop table if exists t_test_array_base2;

Succeed.

SQL> drop table if exists t_test_array_027;

Succeed.

SQL> create table t_test_array_base2(id int,c_long clob);

Succeed.

SQL> insert into t_test_array_base2 values(1,lpad('11100011',50,'1100'));

1 rows affected.

SQL> insert into t_test_array_base2 values(2,lpad('11100011',51,'1100'));

1 rows affected.

SQL> create table t_test_array_027 as select array_agg(c_long) c_long from t_test_array_base2;

CT-01366, [1:51]Invalid function argument type
SQL> 
SQL> drop table if exists t_test_array_base;

Succeed.

SQL> create table t_test_array_base (id int,c_int int[],c_bigint bigint[],c_varchar varchar(20)[],c_char char(5)[],c_bool bool[],c_date date[],c_iym interval year to month[]);

Succeed.

SQL> insert into t_test_array_base values(2,array[1,2,null,10,11],array[1001,1002,1003,null,1004],array['abce','efgg','1233'],array['abcc','efgf','1233'],array[TRUE,FALSE,'f','t'],array['2013-10-01 10:10:10','2014-10-01 10:10:10'],array['50-0']);

1 rows affected.

SQL> select array_agg(id+id+power(id,id)) from t_test_array_base;

ARRAY_AGG(ID+ID+POWER(ID,ID))                                   
----------------------------------------------------------------
{8}                                                             

1 rows fetched.

SQL> insert into t_test_array_base (id) values (1),(2),(3),(4),(4),(3),(0);

7 rows affected.

SQL> select array_agg(id+id+power(id,id)) from t_test_array_base group by id order by id;

ARRAY_AGG(ID+ID+POWER(ID,ID))                                   
----------------------------------------------------------------
{1}                                                             
{3}                                                             
{8,8}                                                           
{33,33}                                                         
{264,264}                                                       

5 rows fetched.

SQL> 
SQL> -- pl/function use array type as arguments and return value
SQL> set serveroutput on

ON
SQL> 
SQL> CREATE OR REPLACE PROCEDURE PLSQL_Zenith_Test_005 (param1 in int[])
  2 IS
  3     tmp varchar2(1000) :='';
  4 begin
  5     tmp := param1[2];
  6     dbe_output.print_line(tmp);
  7 end;
  8 /

Succeed.

SQL> 
SQL> call PLSQL_Zenith_Test_005(array[1,2]);

2

PL/SQL procedure successfully completed.

SQL> 
SQL> create or replace function plsql_ztest_f1(a int[], b varchar2)
  2 return int[]
  3 as
  4 c int[];
  5 begin
  6   c := a[1:2];
  7   return c;
  8 end plsql_ztest_f1;
  9 /

Succeed.

SQL> 
SQL> select plsql_ztest_f1(array[1,2,3], 'abc') from dual;

PLSQL_ZTEST_F1(ARRAY[1,2,3], 'ABC')                             
----------------------------------------------------------------
{1,2}                                                           

1 rows fetched.

SQL> 
SQL> create or replace function plsql_ztest_f2(a int[], b varchar2)
  2 return int[]
  3 as
  4 c int[];
  5 begin
  6   c := array[1,2,3,4,5];
  7   return c;
  8 end plsql_ztest_f2;
  9 /

Succeed.

SQL> 
SQL> declare
  2     c int[];
  3 begin
  4     select plsql_ztest_f1(array[1,2,3], 'abc') into c from dual;
  5     dbe_output.print_line(c);
  6 end;
  7 /

{1,2}

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2     c int[];
  3 begin
  4     select plsql_ztest_f2(array[1,2,3], 'abc') into c from dual;
  5     dbe_output.print_line(c);
  6 end;
  7 /

{1,2,3,4,5}

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2     c int[];
  3 begin
  4     select array_agg(f2) into c from t2 group by f1 order by f1 limit 1;
  5     dbe_output.print_line(c);
  6 end;
  7 /

{1,2,3}

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2     c int[];
  3 begin
  4     begin
  5         select array_agg(f2) into c from t2 group by f1 order by f1 limit 1;
  6         dbe_output.print_line(c);
  7     end;
  8 end;
  9 /

{1,2,3}

PL/SQL procedure successfully completed.

SQL> 
SQL> set serveroutput off

OFF
SQL> drop table if exists array_test_1;

Succeed.

SQL> drop table if exists array_test_2;

Succeed.

SQL> drop table if exists array_test_3;

Succeed.

SQL> drop table if exists array_test_4;

Succeed.

SQL> drop table if exists array_test_5;

Succeed.

SQL> 
SQL> create table array_test_5 (a number(12,3)[]);

Succeed.

SQL> insert into array_test_5 values('{null,1234567.89,1234567.89,null}');

1 rows affected.

SQL> insert into array_test_5 values(array[null, '1234567.89', 1234567.89, null]);

1 rows affected.

SQL> select * from array_test_5;

A                                                               
----------------------------------------------------------------
{NULL,1234567.89,1234567.89,NULL}                               
{NULL,1234567.89,1234567.89,NULL}                               

2 rows fetched.

SQL> select array[null, '1234567.89', 1234567.89, null]::number(12,1)[] from dual;

ARRAY[NULL, '1234567.89', 1234567.89, NULL]::NUMBER(12,1)[]     
----------------------------------------------------------------
{NULL,1234567.9,1234567.9,NULL}                                 

1 rows fetched.

SQL> 
SQL> drop table if exists array_test_004_06;

Succeed.

SQL> create table array_test_004_06 (COL30 BOOL[]);

Succeed.

SQL> insert into array_test_004_06 values(array[1,0,'TRUE']); -- report error

1 rows affected.

SQL> insert into array_test_004_06 values(array['1',0,'TRUE', false]); -- ok

1 rows affected.

SQL> update array_test_004_06 set COL30[324346] = 0;

2 rows affected.

SQL> select COL30[324346] from array_test_004_06;

COL30 
------
FALSE 
FALSE 

2 rows fetched.

SQL> update array_test_004_06 set COL30[324346] = 1;

2 rows affected.

SQL> select COL30[324346] from array_test_004_06;

COL30 
------
TRUE  
TRUE  

2 rows fetched.

SQL> update array_test_004_06 set COL30[1:4] = array['1', 0, 'TRUE', false];

2 rows affected.

SQL> select COL30[1:4] from array_test_004_06;

COL30                                                           
----------------------------------------------------------------
{TRUE,FALSE,TRUE,FALSE}                                         
{TRUE,FALSE,TRUE,FALSE}                                         

2 rows fetched.

SQL> update array_test_004_06 set COL30[1:1] = array['FALSE'];

2 rows affected.

SQL> select COL30[1:4] from array_test_004_06;

COL30                                                           
----------------------------------------------------------------
{FALSE,FALSE,TRUE,FALSE}                                        
{FALSE,FALSE,TRUE,FALSE}                                        

2 rows fetched.

SQL> update array_test_004_06 set COL30[2:3] = array['TRUE', '0'];

2 rows affected.

SQL> select COL30[1:4] from array_test_004_06;

COL30                                                           
----------------------------------------------------------------
{FALSE,TRUE,FALSE,FALSE}                                        
{FALSE,TRUE,FALSE,FALSE}                                        

2 rows fetched.

SQL> 
SQL> DROP TABLE IF EXISTS t_varray_datatype1;

Succeed.

SQL> create table t_varray_datatype1(
  2  f12 varchar(30)[]
  3 );

Succeed.

SQL> insert into t_varray_datatype1 values('{DDDDDDDDDDDDDDDDDDDDDDDD}');

1 rows affected.

SQL> update t_varray_datatype1 set f12[1223232]='DDDDDDDDDDDDDDDDDDDDDDDDDDWEQWQEWQDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD';

CT-01346, The column "F12" length exceeded the maximum, (actual: 80, maximum: 30).
SQL> insert into t_varray_datatype1 (f12) values ('{DDDDDDDDDDDDDDDDDDDDDDDDDDWEQWQEWQDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD}');

CT-01346, The column "F12" length exceeded the maximum, (actual: 80, maximum: 30).
SQL> commit;

Succeed.

SQL> select f12[1223232] from t_varray_datatype1;

F12                           
------------------------------
                              

1 rows fetched.

SQL> 
SQL> drop table if exists SELECT_ARRAY_002;

Succeed.

SQL> create table SELECT_ARRAY_002 (id int[]);

Succeed.

SQL> insert into SELECT_ARRAY_002 values(array[1,2,2]);

1 rows affected.

SQL> insert into SELECT_ARRAY_002 values(array[5,3,2]);

1 rows affected.

SQL> commit;

Succeed.

SQL> select id[3] from SELECT_ARRAY_002;

ID          
------------
2           
2           

2 rows fetched.

SQL> select distinct id[3] from SELECT_ARRAY_002;

ID          
------------
2           

1 rows fetched.

SQL> 
SQL> drop table if exists array_test_029_1;

Succeed.

SQL> create table array_test_029_1 (COL1 BIGINT[]);

Succeed.

SQL> insert into array_test_029_1 values(array[2,0,2147483648]);

1 rows affected.

SQL> select * from array_test_029_1;

COL1                                                            
----------------------------------------------------------------
{2,0,2147483648}                                                

1 rows fetched.

SQL> 
SQL> drop table if exists t_test_array_base;

Succeed.

SQL> create table t_test_array_base (id int,c_int int[],c_bigint bigint[],c_varchar varchar(20)[],c_char char(5)[],c_bool bool[],c_date date[],c_iym interval year to month[]);

Succeed.

SQL> insert into t_test_array_base values(2,array[1,2,null,10,11],array[1001,1002,1003,null,1004],array['abce','efgg','1233'],array['abcc','efgf','1233'],array[TRUE,FALSE,'f','t'],array['2013-10-01 10:10:10','2014-10-01 10:10:10'],array['50-0']);

1 rows affected.

SQL> select 2 from t_test_array_base t1 for update of t1.c_int; --ok 

2           
------------
2           

1 rows fetched.

SQL> select 2 from t_test_array_base t1 order by 1 for update of t1.c_int;  --err

2           
------------
2           

1 rows fetched.

SQL> 
SQL> drop table if exists ARRAY_TAB_001;

Succeed.

SQL> create table ARRAY_TAB_001 (
  2     f1 integer[10]
  3 );

Succeed.

SQL> insert into ARRAY_TAB_001 values ('{10}');

1 rows affected.

SQL> 
SQL> create or replace procedure ARRAY_PRO_001 (ARRAY_C integer)
  2 as
  3     ARRAY_A integer[] :=array[1,2,3,4,5,6,7,8,9,10];
  4 begin
  5     for i in 1 .. ARRAY_C loop
  6         update ARRAY_TAB_001 set f1 = ARRAY_A where f1[1] = i;
  7     end loop;
  8 end;
  9 /

Succeed.

SQL> 
SQL> call ARRAY_PRO_001(11);

PL/SQL procedure successfully completed.

SQL> select f1 from ARRAY_TAB_001;

F1                                                              
----------------------------------------------------------------
{1,2,3,4,5,6,7,8,9,10}                                          

1 rows fetched.

SQL> 
SQL> set serveroutput on;

ON
SQL> drop table if exists array_test_034;

Succeed.

SQL> create table array_test_034 (COL1 int,COL2 INTERVAL YEAR TO MONTH[],COL3 number[]);

Succeed.

SQL> insert into array_test_034 values(1,array[(INTERVAL '12' YEAR(4)) , (INTERVAL '-99' YEAR(3)) , (INTERVAL '0' YEAR(2))],array[-0.9E128 , 1.0E126 -1 , -89.0000001]);

1 rows affected.

SQL> insert into array_test_034 values(2,array[(INTERVAL '12' YEAR(4)) , (INTERVAL '-99' YEAR(3)) , (INTERVAL '0' YEAR(2))],array[-1.0E127 , 1.0E28 , -1-128]);

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> CREATE OR REPLACE PROCEDURE PROC_ARRAY_TEST_005(P1 out real )
  2 AS
  3 V1 real;
  4 BEGIN
  5 	select COL3[2] into V1 from array_test_034 where COL1 = 2;
  6 	P1:= V1;
  7 	dbe_output.print_line(P1);
  8 EXCEPTION WHEN NO_DATA_FOUND THEN dbe_output.print_line('NO_DATA_FOUND');
  9 END;
 10 /

Succeed.

SQL> 
SQL> declare
  2   p real;
  3 begin
  4     begin PROC_ARRAY_TEST_005(p); end;
  5 end;
  6 /

1e+28

PL/SQL procedure successfully completed.

SQL> 
SQL> drop table if exists array_test_034;

Succeed.

SQL> create table array_test_034 (COL1 int,COL2 INTERVAL YEAR TO MONTH[],COL3 number2[]);

Succeed.

SQL> insert into array_test_034 values(1,array[(INTERVAL '12' YEAR(4)) , (INTERVAL '-99' YEAR(3)) , (INTERVAL '0' YEAR(2))],array[-0.9E128 , 1.0E126 -1 , -89.0000001]);

CT-01319, High-Precision numeric overflow
SQL> insert into array_test_034 values(1,array[(INTERVAL '12' YEAR(4)) , (INTERVAL '-99' YEAR(3)) , (INTERVAL '0' YEAR(2))],array[-0.9E126 , 1.0E125 -1 , -89.0000001]);

1 rows affected.

SQL> insert into array_test_034 values(2,array[(INTERVAL '12' YEAR(4)) , (INTERVAL '-99' YEAR(3)) , (INTERVAL '0' YEAR(2))],array[-1.0E125 , 1.0E26 , -1E-131]);

1 rows affected.

SQL> 
SQL> commit;

Succeed.

SQL> 
SQL> CREATE OR REPLACE PROCEDURE PROC_ARRAY_TEST_005(P1 out real )
  2 AS
  3 V1 real;
  4 BEGIN
  5 	select COL3[3] into V1 from array_test_034 where COL1 = 2;
  6 	P1:= V1;
  7 EXCEPTION WHEN NO_DATA_FOUND THEN dbe_output.print_line('NO_DATA_FOUND');
  8 END;
  9 /

Succeed.

SQL> 
SQL> declare
  2   p real;
  3 begin
  4     PROC_ARRAY_TEST_005(p);
  5     dbe_output.print_line(P);
  6 end;
  7 /

0

PL/SQL procedure successfully completed.

SQL> drop table if exists array_test_034;

Succeed.

SQL> 
SQL> -- DTS2019062205948
SQL> drop table if exists test1;

Succeed.

SQL> create table  test1 (c1 int,c2 int[] );

Succeed.

SQL> commit;

Succeed.

SQL> insert into  test1 values(123, NULL);

1 rows affected.

SQL> insert into  test1 values(123, array[NULL]);

1 rows affected.

SQL> insert into  test1 values(123, array[NULL]);

1 rows affected.

SQL> insert into  test1 values(123, array[NULL]);

1 rows affected.

SQL> insert into  test1 values(123, array[NULL]);

1 rows affected.

SQL> insert into  test1 values(123, array[NULL]);

1 rows affected.

SQL> insert into  test1 values(123, NULL);

1 rows affected.

SQL> insert into  test1 values(123, NULL);

1 rows affected.

SQL> insert into  test1 values(123, NULL);

1 rows affected.

SQL> select * from test1;

C1           C2                                                              
------------ ----------------------------------------------------------------
123                                                                          
123          {NULL}                                                          
123          {NULL}                                                          
123          {NULL}                                                          
123          {NULL}                                                          
123          {NULL}                                                          
123                                                                          
123                                                                          
123                                                                          

9 rows fetched.

SQL> 
SQL> -- DTS2019062507230
SQL> drop table if exists t_test_array_base;

Succeed.

SQL> create table t_test_array_base (id int,c_int int[],c_bigint bigint[],c_varchar varchar(200)[],c_char char(5)[],c_bool bool[],c_date date[],c_iym interval year to month[]);

Succeed.

SQL> insert into t_test_array_base values(2,array[1,2,null,10,11],array[1001,1002,1003,null,1004],array['abce','efgg','1233'],array['abcc','efgf','1233'],array[TRUE,FALSE,'f','t'],array['2013-10-01 10:10:10','2014-10-01 10:10:10'],array['50-0']);

1 rows affected.

SQL> insert into t_test_array_base values(2,array[1,2,2,10],array[2001,2002,1003,null,1004],array['abc','efg','123'],array['abc','efg','123'],array[TRUE,FALSE,'f','t'],array['2011-10-01 10:10:10','2012-10-01 10:10:10'],array['60-0']);

1 rows affected.

SQL> insert into t_test_array_base values(2,array[1,2,2,10],array[2001,2002,1003,null,1004],array['abc','efg','123'],array['abc','efg','123'],array[TRUE,FALSE,'f','t'],array['2011-10-01 10:10:10','2012-10-01 10:10:10'],array['60-0']);

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> drop table if exists t_test_array_base2;

Succeed.

SQL> create table t_test_array_base2(
  2 id int,c_int int,c_real real,c_float float,c_decimal decimal,c_number number,
  3 c_char char(10),c_vchar varchar(100),c_vchar2 varchar2(100),c_clob clob,
  4 c_long clob,c_blob blob,c_raw raw(100),c_date date,c_timestamp timestamp)
  5 PARTITION BY RANGE(id)
  6 (
  7 PARTITION id1 VALUES LESS than(10),
  8 PARTITION id2 VALUES LESS than(100),
  9 PARTITION id3 VALUES LESS than(1000),
 10 PARTITION id4 VALUES LESS than(MAXVALUE)
 11 );

Succeed.

SQL> insert into t_test_array_base2 values(1,1000,100.123,100.456,100.789,100.123,'abc123','abcdefg',lpad('123abc',50,'abc'),lpad('123abc',50,'abc'),lpad('11100000',50,'1100'),lpad('11100001',50,'1100'),lpad('11100011',50,'1100'),to_timestamp(to_char('1800-01-01 10:51:47'),'yyyy-mm-dd hh24:mi:ss'),to_timestamp(to_char('1800-01-01 10:51:47.123456'),'yyyy-mm-dd hh24:mi:ss.FF6'));

1 rows affected.

SQL> insert into t_test_array_base2 values(0,null,null,null,null,null,null,null,null,null,null,null,null,null,null);

1 rows affected.

SQL> 
SQL> CREATE or replace procedure proc_insert(tname varchar,startall int,endall int) as
  2 sqlst varchar(500);
  3 BEGIN
  4   FOR i IN startall..endall LOOP
  5         
  6         sqlst := 'insert into ' || tname ||' select id+'||i||',c_int+'||i||',c_real+'||i||',c_float+'||i||',c_decimal+'||i||',c_number+'||i||',c_char'||',c_vchar||'||i||',c_vchar2||'||i||',c_clob||'||i||',c_long||'||i||',c_blob'||',c_raw,c_date+TO_DSINTERVAL('''||i|| ' 00:00:00'''||'),c_timestamp+TO_DSINTERVAL('''||i|| ' 00:00:00'''||') from '||tname|| ' where id=1';
  7         --dbe_output.print_line(sqlst);
  8         execute immediate sqlst;
  9   END LOOP;
 10 END;
 11 /

Succeed.

SQL> 
SQL> exec proc_insert('t_test_array_base2',1,2000);

PL/SQL procedure successfully completed.

SQL> commit;

Succeed.

SQL> 
SQL> insert into t_test_array_base(c_varchar) select array_agg(c_vchar2||c_vchar2) from t_test_array_base2;

1 rows affected.

SQL> insert into t_test_array_base(c_varchar) select array_agg(c_vchar2||c_vchar2) from t_test_array_base2;

1 rows affected.

SQL> insert into t_test_array_base(c_varchar) select array_agg(c_vchar2||c_vchar2) from t_test_array_base2;

1 rows affected.

SQL> insert into t_test_array_base(c_varchar) select array_agg(c_vchar2||c_vchar2) from t_test_array_base2;

1 rows affected.

SQL> insert into t_test_array_base(c_varchar) select array_agg(c_vchar2||c_vchar2) from t_test_array_base2;

1 rows affected.

SQL> select array_length(c_varchar) from t_test_array_base order by 1;

ARRAY_LENGTH(C_VARCHAR)
-----------------------
3                      
3                      
3                      
2001                   
2001                   
2001                   
2001                   
2001                   

8 rows fetched.

SQL> 
SQL> -- DTS2019062713088
SQL> drop table if exists array_test_012_1;

Succeed.

SQL> create table array_test_012_1 (COL1 int,COL2 varchar(8000)[] null ,COL3 bigint,COL4 int[]);

Succeed.

SQL> insert into array_test_012_1 values(1,null,83678569,array[1234,0.00000001,2147483647]);

1 rows affected.

SQL> insert into array_test_012_1 values(1,array[' ','gdff',null,'12'],83678569,array[1234,0.00000001,2147483647]);

1 rows affected.

SQL> commit;

Succeed.

SQL> select * from array_test_012_1 order by col1;

COL1         COL2                                                             COL3                 COL4                                                            
------------ ---------------------------------------------------------------- -------------------- ----------------------------------------------------------------
1                                                                             83678569             {1234,0,2147483647}                                             
1            { ,gdff,NULL,12}                                                 83678569             {1234,0,2147483647}                                             

2 rows fetched.

SQL> 
SQL> -- DTS2019062700983
SQL> drop table if exists t_varray_array_agg;

Succeed.

SQL> create table t_varray_array_agg
  2 (
  3     f1 integer,
  4     f2 integer,
  5     f3 varchar(30)
  6 );

Succeed.

SQL> insert into t_varray_array_agg values (1,100,'fdfd1'), (1,100,'fdfd'), (2,200,'fdfd'), (2, 220,'fdfd'), (3,300,'fdfd'), (4, 300,'fdfd'), (4, 500,'fdfd'), (5,600,'fdfd');

8 rows affected.

SQL> commit;

Succeed.

SQL> select array_agg(f1),array_agg(f2),array_agg(f3) from t_varray_array_agg group by f1 order by f1;

ARRAY_AGG(F1)                                                    ARRAY_AGG(F2)                                                    ARRAY_AGG(F3)                                                   
---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
{1,1}                                                            {100,100}                                                        {fdfd1,fdfd}                                                    
{2,2}                                                            {200,220}                                                        {fdfd,fdfd}                                                     
{3}                                                              {300}                                                            {fdfd}                                                          
{4,4}                                                            {300,500}                                                        {fdfd,fdfd}                                                     
{5}                                                              {600}                                                            {fdfd}                                                          

5 rows fetched.

SQL> drop table if exists t_varray_array_agg5;

Succeed.

SQL> create table t_varray_array_agg5(f int, a int[],b bigint[],c varchar(50)[]);

Succeed.

SQL> insert into t_varray_array_agg5 select f1, array_agg(f1),array_agg(f2),array_agg(f3) from t_varray_array_agg group by f1 order by f1;

5 rows affected.

SQL> commit;

Succeed.

SQL> select * from t_varray_array_agg5 order by f;

F            A                                                                B                                                                C                                                               
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ----------------------------------------------------------------
1            {1,1}                                                            {100,100}                                                        {fdfd1,fdfd}                                                    
2            {2,2}                                                            {200,220}                                                        {fdfd,fdfd}                                                     
3            {3}                                                              {300}                                                            {fdfd}                                                          
4            {4,4}                                                            {300,500}                                                        {fdfd,fdfd}                                                     
5            {5}                                                              {600}                                                            {fdfd}                                                          

5 rows fetched.

SQL> 
SQL> -- DTS2019062700983
SQL> drop table if exists t_varray_array_agg;

Succeed.

SQL> create table t_varray_array_agg
  2 (
  3     f1 integer,
  4     f2 integer,
  5     f3 varchar(30)
  6 );

Succeed.

SQL> insert into t_varray_array_agg values (1,100,'fdfd1'), (1,100,'fdfd'), (2,200,'fdfd'), (2, 220,'fdfd'), (3,300,'fdfd'), (4, 300,'fdfd'), (4, 500,'fdfd'), (5,600,'fdfd');

8 rows affected.

SQL> commit;

Succeed.

SQL> select array_agg(f2) from t_varray_array_agg group by f1 order by f1;

ARRAY_AGG(F2)                                                   
----------------------------------------------------------------
{100,100}                                                       
{200,220}                                                       
{300}                                                           
{300,500}                                                       
{600}                                                           

5 rows fetched.

SQL> 
SQL> drop table if exists t_varray_array_agg5;

Succeed.

SQL> create table t_varray_array_agg5(a int, b bigint[]);

Succeed.

SQL> insert into t_varray_array_agg5 select f1, array_agg(f2) from t_varray_array_agg group by f1 order by f1;

5 rows affected.

SQL> commit;

Succeed.

SQL> select * from t_varray_array_agg5 order by a;

A            B                                                               
------------ ----------------------------------------------------------------
1            {100,100}                                                       
2            {200,220}                                                       
3            {300}                                                           
4            {300,500}                                                       
5            {600}                                                           

5 rows fetched.

SQL> 
SQL> -- DTS2019062700960
SQL> drop table if exists select_array_003;

Succeed.

SQL> create table select_array_003 (f1 integer, f2 integer, f3 integer[]);

Succeed.

SQL> insert into select_array_003 values (1,1,array[1,2]), (1,2,array[4,5,6]), (1,3,array[1,3]),
  2 (2,100,array[2,4]), (2,200,array[6,8]), (2, 300,array[7,9]), (3, 500,array[5,0]),
  3 (3,600,array[9,10]);

8 rows affected.

SQL> commit;

Succeed.

SQL> select f3,case when f3[1] = 1 then f3[2] else f3[1] end as a from select_array_003 order by a;

F3                                                               A           
---------------------------------------------------------------- ------------
{1,2}                                                            2           
{2,4}                                                            2           
{1,3}                                                            3           
{4,5,6}                                                          4           
{5,0}                                                            5           
{6,8}                                                            6           
{7,9}                                                            7           
{9,10}                                                           9           

8 rows fetched.

SQL> 
SQL> -- DTS2019062608595
SQL> drop table if exists select_array_003;

Succeed.

SQL> create table select_array_003 (f1 integer, f2 integer, f3 integer[]);

Succeed.

SQL> insert into select_array_003 values 
  2     (1,1,array[1,2]),
  3     (1,2,array[4,5,6]), 
  4     (1,3,array[1,3]),
  5     (2,100,array[2,4]), 
  6     (2,200,array[6,8]), 
  7     (2, 300,array[7,9]), 
  8     (3, 500,array[5,0]),
  9     (3,600,array[9,10]);

8 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> select f3,case when f3[2] = 3 then f3[2] else array[0,9999,8888] end from SELECT_ARRAY_003;

CT-00606, [1:11]Inconsistent datatypes, expected ARRAY - got BINARY_INTEGER
SQL> desc -q select f3,case when f3[2] = 3 then f3[2] else array[0,9999,8888] end from SELECT_ARRAY_003;

CT-00606, [1:11]Inconsistent datatypes, expected ARRAY - got BINARY_INTEGER

SQL> desc -q select f3,case when f3[2] = 3 then f3[2]::varchar(30) else array[0,9999,8888] end from SELECT_ARRAY_003;

Name                                                                Null?    Type                                
------------------------------------------------------------------- -------- ------------------------------------
F3                                                                           BINARY_INTEGER[]                    
CASE WHEN F3[2] = 3 THEN F3[2]::VARCHAR(30) ELSE ARRAY[0,9999,88             BINARY_INTEGER[]                    

SQL> desc -q select f3,case when f3[2] = 3 then f3[2] else '{0,9999,8888}' end from SELECT_ARRAY_003;

Name                                                       Null?    Type                                
---------------------------------------------------------- -------- ------------------------------------
F3                                                                  BINARY_INTEGER[]                    
CASE WHEN F3[2] = 3 THEN F3[2] ELSE '{0,9999,8888}' END             VARCHAR(13 BYTE)                    

SQL> 
SQL> -- DTS2019062602166
SQL> drop table if exists t_test_array_base;

Succeed.

SQL> create table t_test_array_base (id int,c_int int[],c_bigint bigint[],c_varchar varchar(200)[],c_char char(5)[],c_bool bool[],c_date date[],c_iym interval year to month[]);

Succeed.

SQL> insert into t_test_array_base values(2,array[1,2,null,10,11],array[1001,1002,1003,null,1004],array['abce','efgg','1233'],array['abcc','efgf','1233'],array[TRUE,FALSE,'f','t'],array['2013-10-01 10:10:10','2014-10-01 10:10:10'],array['50-0']);

1 rows affected.

SQL> insert into t_test_array_base values(2,array[1,2,2,10],array[2001,2002,1003,null,1004],array['abc','efg','123'],array['abc','efg','123'],array[TRUE,FALSE,'f','t'],array['2011-10-01 10:10:10','2012-10-01 10:10:10'],array['60-0']);

1 rows affected.

SQL> insert into t_test_array_base values(2,array[1,2,2,10],array[2001,2002,1003,null,1004],array['abc','efg','123'],array['abc','efg','123'],array[TRUE,FALSE,'f','t'],array['2011-10-01 10:10:10','2012-10-01 10:10:10'],array['60-0']);

1 rows affected.

SQL> commit;

Succeed.

SQL> select max(c_varchar[2]) from t_test_array_base;

MAX(C_VARCHAR[2])                                               
----------------------------------------------------------------
efgg                                                            

1 rows fetched.

SQL> select max(c_varchar) from t_test_array_base;

CT-01366, [1:8]Invalid function argument type
SQL> select left(c_varchar, 3) from t_test_array_base;

CT-01366, [1:8]Invalid function argument type
SQL> select upper(c_varchar) from t_test_array_base;

CT-01366, [1:8]Invalid function argument type
SQL> select substr(c_varchar,2) from t_test_array_base;

CT-01366, [1:8]Invalid function argument type
SQL> 
SQL> -- DTS2019062409547
SQL> ALTER SYSTEM SET LOCAL_TEMPORARY_TABLE_ENABLED=TRUE;

Succeed.

SQL> drop table if exists #array_test_023;

Succeed.

SQL> create TEMPORARY table #array_test_023 (
  2     col0 integer,
  3     COL1 CHAR(200)[],
  4     COL2 VARCHAR(2000)[],
  5     COL3 VARCHAR(8000)[],
  6     COL4 NCHAR(90)[20],
  7     COL5 NVARCHAR(200)[2147483647]
  8 ); -- report error

CT-01375, Can not create array column in non-heap table
SQL> alter table #array_test_023 modify (col0 integer); -- report error

CT-00130, Operation alter table is not supported on ltt(local temporary table)
SQL> 
SQL> drop table if exists t_test_array_base2;

Succeed.

SQL> create table t_test_array_base2(
  2 id int,c_int int,c_real real,c_float float,c_decimal decimal,c_number number,
  3 c_char char(10),c_vchar varchar(100),c_vchar2 varchar2(100),c_clob clob,
  4 c_long clob,c_blob blob,c_raw raw(100),c_date date,c_timestamp timestamp);

Succeed.

SQL> insert into t_test_array_base2 values(1,1000,100.123,100.456,100.789,100.123,'abc123','abcdefg',lpad('123abc',50,'abc'),lpad('123abc',50,'abc'),lpad('11100000',50,'1100'),lpad('11100001',50,'1100'),lpad('11100011',50,'1100'),to_timestamp(to_char('1800-01-01 10:51:47'),'yyyy-mm-dd hh24:mi:ss'),to_timestamp(to_char('1800-01-01 10:51:47.123456'),'yyyy-mm-dd hh24:mi:ss.FF6'));

1 rows affected.

SQL> insert into t_test_array_base2 values(0,null,null,null,null,null,null,null,null,null,null,null,null,null,null);

1 rows affected.

SQL> commit;

Succeed.

SQL> CREATE or replace procedure proc_insert(tname varchar,startall int,endall int) as
  2 sqlst varchar(500);
  3 BEGIN
  4   FOR i IN startall..endall LOOP
  5 
  6                 sqlst := 'insert into ' || tname ||' select id+'||i||',c_int+'||i||',c_real+'||i||',c_float+'||i||',c_decimal+'||i||',c_number+'||i||',c_char'||',c_vchar||'||i||',c_vchar2||'||i||',c_clob||'||i||',c_long||'||i||',c_blob'||',c_raw,c_date+TO_DSINTERVAL('''||i|| ' 00:00:00'''||'),c_timestamp+TO_DSINTERVAL('''||i|| ' 00:00:00'''||') from '||tname|| ' where id=1';
  7         execute immediate sqlst;
  8   END LOOP;
  9 END;
 10 /

Succeed.

SQL> 
SQL> exec proc_insert('t_test_array_base2',1,2000);

PL/SQL procedure successfully completed.

SQL> insert into t_test_array_base2(c_clob) select to_char(array_agg(c_vchar2)) from t_test_array_base2; -- the length of array can't be more than CT_CONVERT_BUFFER_SIZE for to_char

CT-00107, Current text buffer is 53, longer than the maximum 22
SQL> rollback;

Succeed.

SQL> exec proc_insert('t_test_array_base2',1,200);

PL/SQL procedure successfully completed.

SQL> insert into t_test_array_base2(c_clob) select to_char(array_agg(c_vchar2)) from t_test_array_base2;

1 rows affected.

SQL> drop table t_test_array_base2;

Succeed.

SQL> 
SQL> -- DTS2019070301771
SQL> drop table if exists t_test_array_base2;

Succeed.

SQL> create table t_test_array_base2(id int,c_timestamp timestamp);

Succeed.

SQL> insert into t_test_array_base2 values(1,to_timestamp(to_char('1800-01-01 10:51:47.123456'),'yyyy-mm-dd hh24:mi:ss.FF6'));

1 rows affected.

SQL> select c_timestamp,array_agg(c_timestamp) c_timestamp from t_test_array_base2 group by c_timestamp;

C_TIMESTAMP                      C_TIMESTAMP                                                     
-------------------------------- ----------------------------------------------------------------
1800-01-01 10:51:47.123456       {1800-01-01 10:51:47.123456}                                    

1 rows fetched.

SQL> 
SQL> -- DTS2019062111454
SQL> select array[CAST(-1234.567 AS NUMBER(6, 2)),CAST(-0.001234 AS NUMBER(2,4))] from dual;

ARRAY[CAST(-1234.567 AS NUMBER(6, 2)),CAST(-0.001234 AS NUMBER(2
----------------------------------------------------------------
{-1234.57,-.0012}                                               

1 rows fetched.

SQL> select array[TO_DATE('2018-08-08', 'YYYY-MM-DD'),TO_DATE('1990-08-08', 'YYYY-MM-DD')] from dual;

ARRAY[TO_DATE('2018-08-08', 'YYYY-MM-DD'),TO_DATE('1990-08-08', 
----------------------------------------------------------------
{2018-08-08 00:00:00,1990-08-08 00:00:00}                       

1 rows fetched.

SQL> select array[rpad('abc','8000','a@123&^%djgk'),lpad('abc','3000','a@123&^%djgk')] from dual;

ARRAY[RPAD('ABC','8000','A@123&^%DJGK'),LPAD('ABC','3000','A@123
----------------------------------------------------------------
{abca@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123,a@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%djgka@123&^%dabc}

1 rows fetched.

SQL> 
SQL> -- DTS2019070507999
SQL> drop table if exists array_test_009;

Succeed.

SQL> create table array_test_009 (f0 int,f1 varchar(8000)[]);

Succeed.

SQL> 
SQL> insert into array_test_009 values (0, array['1','jgf''hjgf','"agfdgd"','{}']);

1 rows affected.

SQL> insert into array_test_009 values (4, '{1,jgf''hjgf,[fdab],''}''}');

1 rows affected.

SQL> insert into array_test_009 values (1, array['1','jgf''hjgf','abc','{}']);

1 rows affected.

SQL> insert into array_test_009 values (3, '{1,jgf''hjgf,bdef,''}''}');

1 rows affected.

SQL> insert into array_test_009 values (4, '{1,jgf''hjgf,bdeg,''}''}');

1 rows affected.

SQL> insert into array_test_009 values (3, '{1,jgf''hjgf,bdaf,''}''}');

1 rows affected.

SQL> insert into array_test_009 values (1, '{1,jgf''hjgf,"adb",''{''}');

1 rows affected.

SQL> 
SQL> commit;

Succeed.

SQL> select * from array_test_009 order by f0, f1[3];

F0           F1                                                              
------------ ----------------------------------------------------------------
0            {1,jgf'hjgf,"agfdgd",{}}                                        
1            {1,jgf'hjgf,abc,{}}                                             
1            {1,jgf'hjgf,adb,'{'}                                            
3            {1,jgf'hjgf,bdaf,'}'}                                           
3            {1,jgf'hjgf,bdef,'}'}                                           
4            {1,jgf'hjgf,[fdab],'}'}                                         
4            {1,jgf'hjgf,bdeg,'}'}                                           

7 rows fetched.

SQL> select f0, f1 from array_test_009 order by f0, f1[3];

F0           F1                                                              
------------ ----------------------------------------------------------------
0            {1,jgf'hjgf,"agfdgd",{}}                                        
1            {1,jgf'hjgf,abc,{}}                                             
1            {1,jgf'hjgf,adb,'{'}                                            
3            {1,jgf'hjgf,bdaf,'}'}                                           
3            {1,jgf'hjgf,bdef,'}'}                                           
4            {1,jgf'hjgf,[fdab],'}'}                                         
4            {1,jgf'hjgf,bdeg,'}'}                                           

7 rows fetched.

SQL> select f0, f1[3] from array_test_009 order by 1, 2;

F0           F1                                                              
------------ ----------------------------------------------------------------
0            "agfdgd"                                                        
1            abc                                                             
1            adb                                                             
3            bdaf                                                            
3            bdef                                                            
4            [fdab]                                                          
4            bdeg                                                            

7 rows fetched.

SQL> 
SQL> -- DTS2019062203952
SQL> select c_int[2] from ( select array[1,2,4,5,6,7] c_int) t;

C_INT       
------------
2           

1 rows fetched.

SQL> select a from (select c_int[2] a from ( select array[1,2,4,5,6,7] c_int) t);

A           
------------
2           

1 rows fetched.

SQL> select 1 from dual where 1 < (select c_int[2] a from ( select array[1,2,4,5,6,7] c_int) t);

1           
------------
1           

1 rows fetched.

SQL> select 1 from dual where 1 in (select c_int[1] a from ( select array[1,2,4,5,6,7] c_int) t);

1           
------------
1           

1 rows fetched.

SQL> 
SQL> drop table if exists t_test_array_017;

Succeed.

SQL> create table t_test_array_017(c) as select c_int[2] from ( select array[1,2,4,5,6,7] c_int) t;

Succeed.

SQL> desc t_test_array_017;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C                                            BINARY_INTEGER                      

SQL> 
SQL> drop table if exists t_test_array_018;

Succeed.

SQL> create table t_test_array_018(c) as (select * from (select c_int[2] from ( select array[1,2,4,5,6,7] c_int) t));

Succeed.

SQL> desc t_test_array_018;

Name                                Null?    Type                                
----------------------------------- -------- ------------------------------------
C                                            BINARY_INTEGER                      

SQL> 
SQL> -- DTS2019062112485
SQL> drop table if exists SELECT_ARRAY_003;

Succeed.

SQL> CREATE TABLE SELECT_ARRAY_003 (f1 INTEGER, f2 INTEGER, f3 INTEGER[]);

Succeed.

SQL> INSERT INTO SELECT_ARRAY_003 VALUES 
  2     (1,1,array[1,2]),
  3     (1,2,array[4,5,6]),
  4     (1,3,array[1,3]),
  5     (2,100,array[2,4]),
  6     (2,200,array[6,8]),
  7     (2, 300,array[7,9]),
  8     (3, 500,array[5,0]),
  9     (3,600,array[9,10]);

8 rows affected.

SQL> commit;

Succeed.

SQL> drop table if exists SELECT_ARRAY_005;

Succeed.

SQL> CREATE TABLE SELECT_ARRAY_005 (f1 INTEGER,f2 INTEGER[]);

Succeed.

SQL> INSERT INTO SELECT_ARRAY_005 VALUES 
  2     (1,array[1,3]), 
  3     (2,array[4,6]), 
  4     (3,array[1,3]),
  5     (4,array[2,4]), 
  6     (5,array[6,8]), 
  7     (6,array[8,9]), 
  8     (7,array[5,0]);

7 rows affected.

SQL> commit;

Succeed.

SQL> select t1.f1,t1.f2,t1.f3 from SELECT_ARRAY_003 t1 inner join SELECT_ARRAY_005 t2 on t1.f3[2] = t2.f2[2] order by 1, 2;

F1           F2           F3                                                              
------------ ------------ ----------------------------------------------------------------
1            3            {1,3}                                                           
1            3            {1,3}                                                           
2            100          {2,4}                                                           
2            200          {6,8}                                                           
2            300          {7,9}                                                           
3            500          {5,0}                                                           

6 rows fetched.

SQL> select t1.f1,t1.f2,t1.f3[2] from SELECT_ARRAY_003 t1 inner join SELECT_ARRAY_005 t2 on t1.f1 = t2.f1 order by 1, 2, 3;

F1           F2           F3          
------------ ------------ ------------
1            1            2           
1            2            5           
1            3            3           
2            100          4           
2            200          8           
2            300          9           
3            500          0           
3            600          10          

8 rows fetched.

SQL> 
SQL> drop table if exists t_test_array_017;

Succeed.

SQL> create table t_test_array_017(col array[int]);

CT-00601, [1:35]Sql syntax error: datatype expected, but got 'array'
SQL> 
SQL> -- DTS2019071910525
SQL> drop table if exists t_order_base_000;

Succeed.

SQL> drop table if exists gt_order_base_000;

Succeed.

SQL> CREATE TABLE t_order_base_000("ID" INT NOT NULL, "CHR_FIELD" VARCHAR(30), "VALUE" NUMBER);

Succeed.

SQL> insert into t_order_base_000 select rownum, decode(mod(rownum, 2), 0, NULL, rpad('CHR_', 10, chr(rownum + 64))), decode(mod(rownum, 3), 0, NULL, rownum * 10000) from dual connect by rownum < 6;

5 rows affected.

SQL> insert into t_order_base_000 select rownum + 10, decode(mod(rownum, 2), 0, NULL, rpad('CHR_', 10, chr(rownum + 64))), decode(mod(rownum, 3), 1, NULL, rownum * 10000) from dual connect by rownum < 6;

5 rows affected.

SQL> insert into t_order_base_000 select rownum + 15, decode(mod(rownum, 2), 0, NULL, rpad('CHR_', 10, chr(rownum + 64))), decode(mod(rownum, 3), 2, '', rownum * 10) from dual connect by rownum < 6;

5 rows affected.

SQL> insert into t_order_base_000 select rownum + 15, decode(mod(rownum, 2), 0, NULL, rpad('CHR_', 10, chr(rownum + 64))), decode(mod(rownum, 3), 2, '', rownum * 10) from dual connect by rownum < 6;

5 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> create global temporary table gt_order_base_000 ON COMMIT PRESERVE ROWS as select * from t_order_base_000;

Succeed.

SQL> 
SQL> create or replace view v_test_view_002 as select c1,c2 from (select rowid c1,rownum c2,ID,CHR_FIELD,VALUE from gt_order_base_000 union select rowid,rownum,ID,CHR_FIELD,VALUE from t_order_base_000) t2 where exists(select * from gt_order_base_000 where t2.ID in(ID+15)) union select c1,c2 from (select rowid c1,rownum c2,ID,CHR_FIELD,VALUE from gt_order_base_000 union select rowid,rownum,ID,CHR_FIELD,VALUE from t_order_base_000) t2 where exists(select * from gt_order_base_000 where t2.ID in(ID+10));

Succeed.

SQL> 
SQL> CREATE OR REPLACE SYNONYM v_test_view_002_sys FOR v_test_view_002;

Succeed.

SQL> 
SQL> select t1.c2,t2.c2 from v_test_view_002_sys t1 join v_test_view_002_sys t2 on array_length(array[t1.c2,t2.c2])*3=t1.c2 order by 1,2;

C2           C2          
------------ ------------
6            6           
6            6           
6            6           
6            6           
6            7           
6            7           
6            7           
6            7           
6            8           
6            8           
6            8           
6            8           
6            9           
6            9           
6            9           
6            9           
6            10          
6            10          
6            10          
6            10          
6            11          
6            11          
6            11          
6            11          
6            12          
6            12          
6            12          
6            12          
6            13          
6            13          
6            13          
6            13          
6            14          
6            14          
6            14          
6            14          
6            15          
6            15          
6            15          
6            15          
6            16          
6            16          
6            16          
6            16          
6            17          
6            17          
6            17          
6            17          
6            18          
6            18          
6            18          
6            18          
6            19          
6            19          
6            19          
6            19          
6            20          
6            20          
6            20          
6            20          

60 rows fetched.

SQL> 
SQL> -- DTS2019072316038
SQL> drop table if exists t_par_tab_idx_0001;

Succeed.

SQL> CREATE TABLE t_par_tab_idx_0001(
  2     id int,
  3     c_int int,
  4     c_int2 int,
  5     c_int3 int,
  6     c_vchar varchar(100),
  7     c_vchar2 varchar(100),
  8     c_vchar3 varchar(100),
  9     c_char char(100),
 10     c_char2 char(100),
 11     c_char3 char(850),
 12     c_clob clob,
 13     c_blob blob,
 14     c_date date)
 15 PARTITION BY RANGE (c_int)
 16 (
 17     partition t_par_tab_idx_0001_P_50 values less than (50),
 18     partition t_par_tab_idx_0001_P_100 values less than (2000),
 19     partition t_par_tab_idx_0001_P_150 values less than (100000)
 20 );

Succeed.

SQL> 
SQL> create index idx_par_tab_idx_0001 on t_par_tab_idx_0001(c_int,c_vchar,c_vchar2) local;

Succeed.

SQL> create index idx_par_tab_idx_0002 on t_par_tab_idx_0001(c_int,c_vchar,c_vchar2,c_vchar3);

Succeed.

SQL> create index idx_par_tab_idx_0003 on t_par_tab_idx_0001(c_int,c_char,c_vchar,c_char2,c_vchar2,c_char3,c_vchar3);

Succeed.

SQL> create index idx_par_tab_idx_1001 on t_par_tab_idx_0001(c_int) CRMODE PAGE local
  2 (
  3     partition idx_par_tab_idx_0001_P_50,
  4     partition idx_par_tab_idx_0001_P_100,
  5     partition idx_par_tab_idx_0001_P_150);

Succeed.

SQL> 
SQL> insert into t_par_tab_idx_0001 values(1,
  2 100,110,120,
  3 lpad('123abc',20,'abc'),lpad('11100011',20,'1100'),lpad('21100011',20,'1100'),
  4 lpad('123abc',20,'abc'),lpad('11100011',20,'1100'),lpad('21100011',20,'1100'),
  5 lpad('123abc',20,'abc'),lpad('11100011',20,'1100'),to_timestamp(to_char('1800-01-01 10:51:47'),'yyyy-mm-dd hh24:mi:ss'));

1 rows affected.

SQL> 
SQL> CREATE or replace procedure proc_insert(tname varchar,startall int,endall int) as
  2     sqlst varchar(500);
  3 BEGIN
  4   FOR i IN startall..endall LOOP
  5         sqlst := 'insert into ' || tname ||' select id+'||i||',c_int+'||i||',c_int2+'||i||',c_int2+'||i||',c_vchar||'||i||',c_vchar2||'||i||',c_vchar3||'||i||',c_char'||',c_char2'||',c_char3'||',c_clob||'||i||',c_blob'||',c_date from '||tname|| ' where id=1';
  6         execute immediate sqlst;
  7   END LOOP;
  8 END;
  9 /

Succeed.

SQL> 
SQL> commit;

Succeed.

SQL> 
SQL> exec proc_insert('t_par_tab_idx_0001',1,500);

PL/SQL procedure successfully completed.

SQL> insert into t_par_tab_idx_0001 select * from t_par_tab_idx_0001;

501 rows affected.

SQL> insert into t_par_tab_idx_0001 select * from t_par_tab_idx_0001;

1002 rows affected.

SQL> insert into t_par_tab_idx_0001 select * from t_par_tab_idx_0001;

2004 rows affected.

SQL> insert into t_par_tab_idx_0001 select * from t_par_tab_idx_0001;

4008 rows affected.

SQL> select count(c_int) from t_par_tab_idx_0001;

COUNT(C_INT)        
--------------------
8016                

1 rows fetched.

SQL> select array_agg(c_int) from t_par_tab_idx_0001 order by c_int;

ARRAY_AGG(C_INT)                                                
----------------------------------------------------------------
{100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,261,261,261,261,261,261,261,261,261,261,261,261,261,261,261,261,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,284,284,284,284,284,284,284,284,284,284,284,284,284,284,284,284,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,291,291,291,291,291,291,291,291,291,291,291,291,291,291,291,291,292,292,292,292,292,292,292,292,292,292,292,292,292,292,292,292,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,298,298,298,298,298,298,298,298,298,298,298,298,298,298,298,298,299,299,299,299,299,299,299,299,299,299,299,299,299,299,299,299,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,302,302,302,302,302,302,302,302,302,302,302,302,302,302,302,302,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,322,322,322,322,322,322,322,322,322,322,322,322,322,322,322,322,323,323,323,323,323,323,323,323,323,323,323,323,323,323,323,323,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,325,325,325,325,325,325,325,325,325,325,325,325,325,325,325,325,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,327,327,327,327,327,327,327,327,327,327,327,327,327,327,327,327,328,328,328,328,328,328,328,328,328,328,328,328,328,328,328,328,329,329,329,329,329,329,329,329,329,329,329,329,329,329,329,329,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,331,331,331,331,331,331,331,331,331,331,331,331,331,331,331,331,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,333,333,333,333,333,333,333,333,333,333,333,333,333,333,333,333,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,335,335,335,335,335,335,335,335,335,335,335,335,335,335,335,335,336,336,336,336,336,336,336,336,336,336,336,336,336,336,336,336,337,337,337,337,337,337,337,337,337,337,337,337,337,337,337,337,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,340,340,340,340,340,340,340,340,340,340,340,340,340,340,340,340,341,341,341,341,341,341,341,341,341,341,341,341,341,341,341,341,342,342,342,342,342,342,342,342,342,342,342,342,342,342,342,342,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,344,344,344,344,344,344,344,344,344,344,344,344,344,344,344,344,345,345,345,345,345,345,345,345,345,345,345,345,345,345,345,345,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,347,347,347,347,347,347,347,347,347,347,347,347,347,347,347,347,348,348,348,348,348,348,348,348,348,348,348,348,348,348,348,348,349,349,349,349,349,349,349,349,349,349,349,349,349,349,349,349,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,352,352,352,352,352,352,352,352,352,352,352,352,352,352,352,352,353,353,353,353,353,353,353,353,353,353,353,353,353,353,353,353,354,354,354,354,354,354,354,354,354,354,354,354,354,354,354,354,355,355,355,355,355,355,355,355,355,355,355,355,355,355,355,355,356,356,356,356,356,356,356,356,356,356,356,356,356,356,356,356,357,357,357,357,357,357,357,357,357,357,357,357,357,357,357,357,358,358,358,358,358,358,358,358,358,358,358,358,358,358,358,358,359,359,359,359,359,359,359,359,359,359,359,359,359,359,359,359,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,361,361,361,361,361,361,361,361,361,361,361,361,361,361,361,361,362,362,362,362,362,362,362,362,362,362,362,362,362,362,362,362,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,364,364,364,364,364,364,364,364,364,364,364,364,364,364,364,364,365,365,365,365,365,365,365,365,365,365,365,365,365,365,365,365,366,366,366,366,366,366,366,366,366,366,366,366,366,366,366,366,367,367,367,367,367,367,367,367,367,367,367,367,367,367,367,367,368,368,368,368,368,368,368,368,368,368,368,368,368,368,368,368,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,370,370,370,370,370,370,370,370,370,370,370,370,370,370,370,370,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,372,372,372,372,372,372,372,372,372,372,372,372,372,372,372,372,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,374,374,374,374,374,374,374,374,374,374,374,374,374,374,374,374,375,375,375,375,375,375,375,375,375,375,375,375,375,375,375,375,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,378,378,378,378,378,378,378,378,378,378,378,378,378,378,378,378,379,379,379,379,379,379,379,379,379,379,379,379,379,379,379,379,380,380,380,380,380,380,380,380,380,380,380,380,380,380,380,380,381,381,381,381,381,381,381,381,381,381,381,381,381,381,381,381,382,382,382,382,382,382,382,382,382,382,382,382,382,382,382,382,383,383,383,383,383,383,383,383,383,383,383,383,383,383,383,383,384,384,384,384,384,384,384,384,384,384,384,384,384,384,384,384,385,385,385,385,385,385,385,385,385,385,385,385,385,385,385,385,386,386,386,386,386,386,386,386,386,386,386,386,386,386,386,386,387,387,387,387,387,387,387,387,387,387,387,387,387,387,387,387,388,388,388,388,388,388,388,388,388,388,388,388,388,388,388,388,389,389,389,389,389,389,389,389,389,389,389,389,389,389,389,389,390,390,390,390,390,390,390,390,390,390,390,390,390,390,390,390,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,392,392,392,392,392,392,392,392,392,392,392,392,392,392,392,392,393,393,393,393,393,393,393,393,393,393,393,393,393,393,393,393,394,394,394,394,394,394,394,394,394,394,394,394,394,394,394,394,395,395,395,395,395,395,395,395,395,395,395,395,395,395,395,395,396,396,396,396,396,396,396,396,396,396,396,396,396,396,396,396,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,398,398,398,398,398,398,398,398,398,398,398,398,398,398,398,398,399,399,399,399,399,399,399,399,399,399,399,399,399,399,399,399,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,401,401,401,401,401,401,401,401,401,401,401,401,401,401,401,401,402,402,402,402,402,402,402,402,402,402,402,402,402,402,402,402,403,403,403,403,403,403,403,403,403,403,403,403,403,403,403,403,404,404,404,404,404,404,404,404,404,404,404,404,404,404,404,404,405,405,405,405,405,405,405,405,405,405,405,405,405,405,405,405,406,406,406,406,406,406,406,406,406,406,406,406,406,406,406,406,407,407,407,407,407,407,407,407,407,407,407,407,407,407,407,407,408,408,408,408,408,408,408,408,408,408,408,408,408,408,408,408,409,409,409,409,409,409,409,409,409,409,409,409,409,409,409,409,410,410,410,410,410,410,410,410,410,410,410,410,410,410,410,410,411,411,411,411,411,411,411,411,411,411,411,411,411,411,411,411,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,413,413,413,413,413,413,413,413,413,413,413,413,413,413,413,413,414,414,414,414,414,414,414,414,414,414,414,414,414,414,414,414,415,415,415,415,415,415,415,415,415,415,415,415,415,415,415,415,416,416,416,416,416,416,416,416,416,416,416,416,416,416,416,416,417,417,417,417,417,417,417,417,417,417,417,417,417,417,417,417,418,418,418,418,418,418,418,418,418,418,418,418,418,418,418,418,419,419,419,419,419,419,419,419,419,419,419,419,419,419,419,419,420,420,420,420,420,420,420,420,420,420,420,420,420,420,420,420,421,421,421,421,421,421,421,421,421,421,421,421,421,421,421,421,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,423,423,423,423,423,423,423,423,423,423,423,423,423,423,423,423,424,424,424,424,424,424,424,424,424,424,424,424,424,424,424,424,425,425,425,425,425,425,425,425,425,425,425,425,425,425,425,425,426,426,426,426,426,426,426,426,426,426,426,426,426,426,426,426,427,427,427,427,427,427,427,427,427,427,427,427,427,427,427,427,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,430,430,430,430,430,430,430,430,430,430,430,430,430,430,430,430,431,431,431,431,431,431,431,431,431,431,431,431,431,431,431,431,432,432,432,432,432,432,432,432,432,432,432,432,432,432,432,432,433,433,433,433,433,433,433,433,433,433,433,433,433,433,433,433,434,434,434,434,434,434,434,434,434,434,434,434,434,434,434,434,435,435,435,435,435,435,435,435,435,435,435,435,435,435,435,435,436,436,436,436,436,436,436,436,436,436,436,436,436,436,436,436,437,437,437,437,437,437,437,437,437,437,437,437,437,437,437,437,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,439,439,439,439,439,439,439,439,439,439,439,439,439,439,439,439,440,440,440,440,440,440,440,440,440,440,440,440,440,440,440,440,441,441,441,441,441,441,441,441,441,441,441,441,441,441,441,441,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,444,444,444,444,444,444,444,444,444,444,444,444,444,444,444,444,445,445,445,445,445,445,445,445,445,445,445,445,445,445,445,445,446,446,446,446,446,446,446,446,446,446,446,446,446,446,446,446,447,447,447,447,447,447,447,447,447,447,447,447,447,447,447,447,448,448,448,448,448,448,448,448,448,448,448,448,448,448,448,448,449,449,449,449,449,449,449,449,449,449,449,449,449,449,449,449,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,451,451,451,451,451,451,451,451,451,451,451,451,451,451,451,451,452,452,452,452,452,452,452,452,452,452,452,452,452,452,452,452,453,453,453,453,453,453,453,453,453,453,453,453,453,453,453,453,454,454,454,454,454,454,454,454,454,454,454,454,454,454,454,454,455,455,455,455,455,455,455,455,455,455,455,455,455,455,455,455,456,456,456,456,456,456,456,456,456,456,456,456,456,456,456,456,457,457,457,457,457,457,457,457,457,457,457,457,457,457,457,457,458,458,458,458,458,458,458,458,458,458,458,458,458,458,458,458,459,459,459,459,459,459,459,459,459,459,459,459,459,459,459,459,460,460,460,460,460,460,460,460,460,460,460,460,460,460,460,460,461,461,461,461,461,461,461,461,461,461,461,461,461,461,461,461,462,462,462,462,462,462,462,462,462,462,462,462,462,462,462,462,463,463,463,463,463,463,463,463,463,463,463,463,463,463,463,463,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,465,465,465,465,465,465,465,465,465,465,465,465,465,465,465,465,466,466,466,466,466,466,466,466,466,466,466,466,466,466,466,466,467,467,467,467,467,467,467,467,467,467,467,467,467,467,467,467,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,468,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,470,470,470,470,470,470,470,470,470,470,470,470,470,470,470,470,471,471,471,471,471,471,471,471,471,471,471,471,471,471,471,471,472,472,472,472,472,472,472,472,472,472,472,472,472,472,472,472,473,473,473,473,473,473,473,473,473,473,473,473,473,473,473,473,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,475,475,475,475,475,475,475,475,475,475,475,475,475,475,475,475,476,476,476,476,476,476,476,476,476,476,476,476,476,476,476,476,477,477,477,477,477,477,477,477,477,477,477,477,477,477,477,477,478,478,478,478,478,478,478,478,478,478,478,478,478,478,478,478,479,479,479,479,479,479,479,479,479,479,479,479,479,479,479,479,480,480,480,480,480,480,480,480,480,480,480,480,480,480,480,480,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,482,482,482,482,482,482,482,482,482,482,482,482,482,482,482,482,483,483,483,483,483,483,483,483,483,483,483,483,483,483,483,483,484,484,484,484,484,484,484,484,484,484,484,484,484,484,484,484,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,497,497,497,497,497,497,497,497,497,497,497,497,497,497,497,497,498,498,498,498,498,498,498,498,498,498,498,498,498,498,498,498,499,499,499,499,499,499,499,499,499,499,499,499,499,499,499,499,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,501,501,501,501,501,501,501,501,501,501,501,501,501,501,501,501,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,504,504,504,504,504,504,504,504,504,504,504,504,504,504,504,504,505,505,505,505,505,505,505,505,505,505,505,505,505,505,505,505,506,506,506,506,506,506,506,506,506,506,506,506,506,506,506,506,507,507,507,507,507,507,507,507,507,507,507,507,507,507,507,507,508,508,508,508,508,508,508,508,508,508,508,508,508,508,508,508,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,528,528,528,528,528,528,528,528,528,528,528,528,528,528,528,528,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,539,539,539,539,539,539,539,539,539,539,539,539,539,539,539,539,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,548,548,548,548,548,548,548,548,548,548,548,548,548,548,548,548,549,549,549,549,549,549,549,549,549,549,549,549,549,549,549,549,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,551,551,551,551,551,551,551,551,551,551,551,551,551,551,551,551,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,554,554,554,554,554,554,554,554,554,554,554,554,554,554,554,554,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,556,556,556,556,556,556,556,556,556,556,556,556,556,556,556,556,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,558,558,558,558,558,558,558,558,558,558,558,558,558,558,558,558,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,560,560,560,560,560,560,560,560,560,560,560,560,560,560,560,560,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562,563,563,563,563,563,563,563,563,563,563,563,563,563,563,563,563,564,564,564,564,564,564,564,564,564,564,564,564,564,564,564,564,565,565,565,565,565,565,565,565,565,565,565,565,565,565,565,565,566,566,566,566,566,566,566,566,566,566,566,566,566,566,566,566,567,567,567,567,567,567,567,567,567,567,567,567,567,567,567,567,568,568,568,568,568,568,568,568,568,568,568,568,568,568,568,568,569,569,569,569,569,569,569,569,569,569,569,569,569,569,569,569,570,570,570,570,570,570,570,570,570,570,570,570,570,570,570,570,571,571,571,571,571,571,571,571,571,571,571,571,571,571,571,571,572,572,572,572,572,572,572,572,572,572,572,572,572,572,572,572,573,573,573,573,573,573,573,573,573,573,573,573,573,573,573,573,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,576,576,576,576,576,576,576,576,576,576,576,576,576,576,576,576,577,577,577,577,577,577,577,577,577,577,577,577,577,577,577,577,578,578,578,578,578,578,578,578,578,578,578,578,578,578,578,578,579,579,579,579,579,579,579,579,579,579,579,579,579,579,579,579,580,580,580,580,580,580,580,580,580,580,580,580,580,580,580,580,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,582,582,582,582,582,582,582,582,582,582,582,582,582,582,582,582,583,583,583,583,583,583,583,583,583,583,583,583,583,583,583,583,584,584,584,584,584,584,584,584,584,584,584,584,584,584,584,584,585,585,585,585,585,585,585,585,585,585,585,585,585,585,585,585,586,586,586,586,586,586,586,586,586,586,586,586,586,586,586,586,587,587,587,587,587,587,587,587,587,587,587,587,587,587,587,587,588,588,588,588,588,588,588,588,588,588,588,588,588,588,588,588,589,589,589,589,589,589,589,589,589,589,589,589,589,589,589,589,590,590,590,590,590,590,590,590,590,590,590,590,590,590,590,590,591,591,591,591,591,591,591,591,591,591,591,591,591,591,591,591,592,592,592,592,592,592,592,592,592,592,592,592,592,592,592,592,593,593,593,593,593,593,593,593,593,593,593,593,593,593,593,593,594,594,594,594,594,594,594,594,594,594,594,594,594,594,594,594,595,595,595,595,595,595,595,595,595,595,595,595,595,595,595,595,596,596,596,596,596,596,596,596,596,596,596,596,596,596,596,596,597,597,597,597,597,597,597,597,597,597,597,597,597,597,597,597,598,598,598,598,598,598,598,598,598,598,598,598,598,598,598,598,599,599,599,599,599,599,599,599,599,599,599,599,599,599,599,599,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600}

1 rows fetched.

SQL> 
SQL> -- test views' columns data type
SQL> drop user if exists array_test_user;

Succeed.

SQL> create user array_test_user identified by Root1234;

Succeed.

SQL> grant connect, resource, create view to array_test_user;

Succeed.

SQL> grant select on ADM_TAB_COLS to array_test_user;

Succeed.

SQL> grant select on ADM_TAB_COLUMNS to array_test_user;

Succeed.

SQL> grant select on ADM_VIEW_COLUMNS to array_test_user;

Succeed.

SQL> 
SQL> conn array_test_user/Root1234@127.0.0.1:1611

connected.

SQL> drop table if exists tab_001;

Succeed.

SQL> create table tab_001 (f1 int, f2 int[], f3 varchar(30)[]);

Succeed.

SQL> create or replace view view_001 as select * from tab_001;

Succeed.

SQL> 
SQL> select column_name, data_type from ADM_TAB_COLS where owner = 'ARRAY_TEST_USER' and table_name = 'TAB_001' order by column_name;

COLUMN_NAME                                                      DATA_TYPE                                                       
---------------------------------------------------------------- ----------------------------------------------------------------
F1                                                               BINARY_INTEGER                                                  
F2                                                               BINARY_INTEGER[]                                                
F3                                                               VARCHAR[]                                                       

3 rows fetched.

SQL> select column_name, data_type from DB_TAB_COLS where owner = 'ARRAY_TEST_USER' and table_name = 'TAB_001' order by column_name;

COLUMN_NAME                                                      DATA_TYPE                                                       
---------------------------------------------------------------- ----------------------------------------------------------------
F1                                                               BINARY_INTEGER                                                  
F2                                                               BINARY_INTEGER[]                                                
F3                                                               VARCHAR[]                                                       

3 rows fetched.

SQL> select column_name, data_type from MY_TAB_COLS where table_name = 'TAB_001' order by column_name;

COLUMN_NAME                                                      DATA_TYPE                                                       
---------------------------------------------------------------- ----------------------------------------------------------------
F1                                                               BINARY_INTEGER                                                  
F2                                                               BINARY_INTEGER[]                                                
F3                                                               VARCHAR[]                                                       

3 rows fetched.

SQL> 
SQL> select column_name, data_type from ADM_TAB_COLUMNS where owner = 'ARRAY_TEST_USER' and table_name = 'TAB_001' order by column_name;

COLUMN_NAME                                                      DATA_TYPE                                                       
---------------------------------------------------------------- ----------------------------------------------------------------
F1                                                               BINARY_INTEGER                                                  
F2                                                               BINARY_INTEGER[]                                                
F3                                                               VARCHAR[]                                                       

3 rows fetched.

SQL> select column_name, data_type from DB_TAB_COLUMNS where owner = 'ARRAY_TEST_USER' and table_name = 'TAB_001' order by column_name;

COLUMN_NAME                                                      DATA_TYPE                                                       
---------------------------------------------------------------- ----------------------------------------------------------------
F1                                                               BINARY_INTEGER                                                  
F2                                                               BINARY_INTEGER[]                                                
F3                                                               VARCHAR[]                                                       

3 rows fetched.

SQL> select column_name, data_type from MY_TAB_COLUMNS where table_name = 'TAB_001' order by column_name;

COLUMN_NAME                                                      DATA_TYPE                                                       
---------------------------------------------------------------- ----------------------------------------------------------------
F1                                                               BINARY_INTEGER                                                  
F2                                                               BINARY_INTEGER[]                                                
F3                                                               VARCHAR[]                                                       

3 rows fetched.

SQL> 
SQL> select column_name, data_type from ADM_VIEW_COLUMNS where owner = 'ARRAY_TEST_USER' and view_name = 'VIEW_001' order by column_name;

COLUMN_NAME                                                      DATA_TYPE                                                       
---------------------------------------------------------------- ----------------------------------------------------------------
F1                                                               BINARY_INTEGER                                                  
F2                                                               BINARY_INTEGER[]                                                
F3                                                               VARCHAR[]                                                       

3 rows fetched.

SQL> select column_name, data_type from DB_VIEW_COLUMNS where owner = 'ARRAY_TEST_USER' and view_name = 'VIEW_001' order by column_name;

COLUMN_NAME                                                      DATA_TYPE                                                       
---------------------------------------------------------------- ----------------------------------------------------------------
F1                                                               BINARY_INTEGER                                                  
F2                                                               BINARY_INTEGER[]                                                
F3                                                               VARCHAR[]                                                       

3 rows fetched.

SQL> select column_name, data_type from MY_VIEW_COLUMNS where view_name = 'VIEW_001' order by column_name;

COLUMN_NAME                                                      DATA_TYPE                                                       
---------------------------------------------------------------- ----------------------------------------------------------------
F1                                                               BINARY_INTEGER                                                  
F2                                                               BINARY_INTEGER[]                                                
F3                                                               VARCHAR[]                                                       

3 rows fetched.

SQL> 
SQL> conn sys/Huawei@123@127.0.0.1:1611

connected.

SQL> drop user array_test_user cascade;

Succeed.

SQL> 
SQL> drop table if exists t_array;

Succeed.

SQL> create table t_array(id int);

Succeed.

SQL> insert into t_array values (1),(100),(1000);

3 rows affected.

SQL> select case array[1,2] when array_agg(t1.id) then array[1,2] else array[1,2] end c from t_array t1 group by t1.id;

CT-00607, Invalid datatype for comparision
SQL> 
SQL> drop table if exists t3;

Succeed.

SQL> drop table if exists t4;

Succeed.

SQL> create table t3(id int,f1 int[],f2 varchar(30)[],f3 date[]);

Succeed.

SQL> insert into t3 values(1,array[1,2,3],array['a','b','c'],array['2019-03-22 12:00:00']);

1 rows affected.

SQL> insert into t3 values(2,array[4,5,6],array['d','e','f'],array['2019-04-22 12:00:00']);

1 rows affected.

SQL> insert into t3 values(3,array[7,8,9],array['g','h','i'],array['2019-05-22 12:00:00']);

1 rows affected.

SQL> create table t4(id int,m1 int[],m2 varchar(30)[],m3 date[]);

Succeed.

SQL> insert into t4 values(1,array[1,3,5],array['a','d','c'],array['2019-03-22 12:00:00']);

1 rows affected.

SQL> insert into t4 values(3,array[4,6,5],array['a','d','c'],array['2019-05-22 12:00:00']);

1 rows affected.

SQL> insert into t4 values(5,array[7,8,9],array['a','d','e'],array['2019-07-22 12:00:00']);

1 rows affected.

SQL> select t3.id,t3.f1,t4.m3 from t3 left join t4 on t3.id=t4.id order by t3.id;

ID           F1                                                               M3                                                              
------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            {1,2,3}                                                          {2019-03-22 12:00:00}                                           
2            {4,5,6}                                                                                                                          
3            {7,8,9}                                                          {2019-05-22 12:00:00}                                           

3 rows fetched.

SQL> select t3.id,t3.f1,t4.m3 from t4 join t3 on t3.id=t4.id order by t3.id;

ID           F1                                                               M3                                                              
------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            {1,2,3}                                                          {2019-03-22 12:00:00}                                           
3            {7,8,9}                                                          {2019-05-22 12:00:00}                                           

2 rows fetched.

SQL> 
SQL> drop table if exists t_merge_join_explain_1;

Succeed.

SQL> drop table if exists t_merge_join_explain_2;

Succeed.

SQL> 
SQL> create table t_merge_join_explain_1( 
  2   COL_1 bigint, 
  3   COL_2 TIMESTAMP WITHOUT TIME ZONE, 
  4   COL_3 bool,
  5   COL_4 text,
  6   COL_5 char(30),
  7   COL_6 character varying(30),
  8   COL_7 char(60),
  9   COL_8 integer,
 10   COL_9 interval day to second,
 11   COL_10 decimal,
 12   COL_11 TIMESTAMP,
 13   COL_12 varchar(50),
 14   COL_13 date,
 15   COL_14 decimal(12,6),
 16   COL_15 char(60),
 17   COL_16 TIMESTAMP,
 18   COL_17 int[],
 19   COL_18 integer,
 20   COL_19 int,
 21   COL_20 bigint
 22 );

Succeed.

SQL> 
SQL> create table t_merge_join_explain_2( 
  2   COL_1 bigint, 
  3   COL_2 TIMESTAMP WITHOUT TIME ZONE, 
  4   COL_3 bool,
  5   COL_4 text,
  6   COL_5 char(30),
  7   COL_6 character varying(30),
  8   COL_7 char(60),
  9   COL_8 integer,
 10   COL_9 interval day to second,
 11   COL_10 decimal,
 12   COL_11 TIMESTAMP,
 13   COL_12 varchar(50),
 14   COL_13 date,
 15   COL_14 decimal(12,6),
 16   COL_15 char(60),
 17   COL_16 TIMESTAMP,
 18   COL_17 int[],
 19   COL_18 integer,
 20   COL_19 int,
 21   COL_20 bigint
 22 );

Succeed.

SQL> 
SQL> declare
  2     cnt int;
  3 begin
  4     for cnt in 1..6 loop
  5         insert into t_merge_join_explain_1 values(
  6           1,
  7           '2019-01-03 14:14:12',
  8           true,
  9           lpad('abc','10','a@123&^%djgk'), 
 10           lpad('abc','30','@'), 
 11           lpad('abc','30','b'),
 12           lpad('10','12','01010'),
 13           12,
 14           '4 5:12:10.222',
 15           12+445.255,
 16           '2019-01-03 14:58:54.000000',      
 17           rpad('abc','30','e'),
 18           '2018-11-03 14:14:12',
 19           98*0.99, 
 20           rpad('abc','9','a@123&^%djgk'),
 21           '2019-01-03 14:14:12',
 22           '{32,535,5645645,6767,76,67,56,48,979,978,7}',
 23           1+10,
 24           12+100,
 25           1-100
 26         );
 27         insert into t_merge_join_explain_2 values(
 28           1,
 29           '2019-01-03 14:14:12',
 30           true,
 31           lpad('abc','10','a@123&^%djgk'), 
 32           lpad('abc','30','@'), 
 33           lpad('abc','30','b'),
 34           lpad('10','12','01010'),
 35           12,
 36           '4 5:12:10.222',
 37           12+445.255,
 38           '2019-01-03 14:58:54.000000',      
 39           rpad('abc','30','e'),
 40           '2018-11-03 14:14:12',
 41           98*0.99, 
 42           rpad('abc','9','a@123&^%djgk'),
 43           '2019-01-03 14:14:12',
 44           '{32,535,5645645,6767,76,67,56,48,979,978,7}',
 45           1+10,
 46           12+100,
 47           1-100
 48         );
 49     end loop;
 50 end;
 51 /

PL/SQL procedure successfully completed.

SQL> 
SQL> SELECT t2.COL_17[1] FROM t_merge_join_explain_1 t1 JOIN t_merge_join_explain_2 t2 ON t1.COL_8<t2.COL_17[1];

COL_17      
------------
32          
32          
32          
32          
32          
32          
32          
32          
32          
32          
32          
32          
32          
32          
32          
32          
32          
32          
32          
32          
32          
32          
32          
32          
32          
32          
32          
32          
32          
32          
32          
32          
32          
32          
32          
32          

36 rows fetched.

SQL> SELECT t2.COL_17 FROM t_merge_join_explain_1 t1 JOIN t_merge_join_explain_2 t2 ON t1.COL_8<t2.COL_17[1];

COL_17                                                          
----------------------------------------------------------------
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     
{32,535,5645645,6767,76,67,56,48,979,978,7}                     

36 rows fetched.

SQL> 
SQL> --DTS2019091211735
SQL> drop table if exists t_count_base_001;

Succeed.

SQL> create table t_count_base_001(id int,deptno int,name varchar(20),sal int);

Succeed.

SQL> insert into t_count_base_001 values(1,1,'1aa',120);

1 rows affected.

SQL> insert into t_count_base_001 values(2,1,'2aa',300);

1 rows affected.

SQL> insert into t_count_base_001 values(3,1,'3aa',100);

1 rows affected.

SQL> insert into t_count_base_001 values(4,1,'4aa',99);

1 rows affected.

SQL> insert into t_count_base_001 values(5,1,'5aa',90);

1 rows affected.

SQL> insert into t_count_base_001 values(6,2,'6aa',87);

1 rows affected.

SQL> insert into t_count_base_001 values(7,2,'7aa',500);

1 rows affected.

SQL> insert into t_count_base_001 values(8,2,'8aa',200);

1 rows affected.

SQL> insert into t_count_base_001 values(9,2,'9aa',20);

1 rows affected.

SQL> insert into t_count_base_001 values(10,2,'10aa',30);

1 rows affected.

SQL> insert into t_count_base_001 values(null,2,'10aa',30);

1 rows affected.

SQL> insert into t_count_base_001 values(12,2,'10aa',null);

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> select array[count(sal) over()] c from t_count_base_001;

C                                                               
----------------------------------------------------------------
{11}                                                            
{11}                                                            
{11}                                                            
{11}                                                            
{11}                                                            
{11}                                                            
{11}                                                            
{11}                                                            
{11}                                                            
{11}                                                            
{11}                                                            
{11}                                                            

12 rows fetched.

SQL> select count(sal[2]) over(order by sal) c from (select array[sal,sal,sal] sal,deptno,deptno from t_count_base_001) as t order by 1;

CT-00607, [1:36]Invalid datatype for comparision
SQL> --DTS2019103109591
SQL> select count(ID) over(partition by array[deptno,2]) c from t_count_base_001 t1 order by 1;

CT-00607, [1:36]Invalid datatype for comparision
SQL> drop table if exists SELECT_ARRAY_003;

Succeed.

SQL> CREATE TABLE SELECT_ARRAY_003 (f1 INTEGER, f2 INTEGER, f3 INTEGER[]);

Succeed.

SQL> INSERT INTO SELECT_ARRAY_003 VALUES (1,1,array[1,2]), (1,2,array[4,5,6]), (1,3,array[1,3]),
  2 (2,100,array[2,4]), (2,200,array[6,8]), (2, 300,array[7,9]), (3, 500,array[5,0]),
  3 (3,600,array[9,10]);

8 rows affected.

SQL> commit;

Succeed.

SQL> select case when f3 = '{2,4}' then 'aa' else 'bb' end from SELECT_ARRAY_003 order by 1;

CT-00601, [1:18]Sql syntax error: unexpected array expression
SQL> drop table SELECT_ARRAY_003;

Succeed.

SQL> --DTS2019121609705
SQL> drop table if exists t_union_all_parallel_001;

Succeed.

SQL> create table t_union_all_parallel_001(
  2 id int,c_int int,c_real real,c_float float,c_decimal decimal,c_number number,
  3 c_char char(10),c_vchar varchar(10) not null,c_vchar2 varchar2(100),c_clob clob,
  4 c_long varchar(200),c_blob blob,c_raw raw(100),c_date date,c_timestamp timestamp);

Succeed.

SQL> insert into t_union_all_parallel_001 values(1,1000,100.123,100.456,100.789,100.123,'abc123','abcdefg',lpad('123abc',50,'abc'),lpad('123abc',50,'abc'),lpad('11100000',50,'1100'),lpad('11100001',50,'1100'),lpad('11100011',50,'1100'),to_timestamp(to_char('1800-01-01 10:51:47'),'yyyy-mm-dd hh24:mi:ss'),to_timestamp(to_char('1800-03-05 10:51:47'),'yyyy-mm-dd hh24:mi:ss'));

1 rows affected.

SQL>
SQL> CREATE or replace procedure proc_insert(tname varchar,startall int,endall int) as
  2 sqlst varchar(500);
  3 BEGIN
  4   FOR i IN startall..endall LOOP
  5                 sqlst := 'insert into ' || tname ||' select id+'||i||',c_int+'||i||',c_real+'||i||',c_float+'||i||',c_decimal+'||i||',c_number+'||i||',c_char'||',c_vchar||'||i||',c_vchar2||'||i||',c_clob||'||i||',c_long||'||i||',c_blob'||',c_raw,ADD_MONTHS(c_date,'||i||'),ADD_MONTHS(c_timestamp,'||i||') from '||tname|| ' where id=1';
  6         execute immediate sqlst;
  7   END LOOP;
  8 END;
  9 /

Succeed.

SQL> exec proc_insert('t_union_all_parallel_001',1,20);

PL/SQL procedure successfully completed.

SQL> commit;

Succeed.

SQL> select * from (select array[id,c_int] c from  t_union_all_parallel_001 t1 where id<=10 union all select array[id,to_char(c_int)] c from t_union_all_parallel_001 t1 where id<=10) order by c[1];

C
----------------------------------------------------------------
{1,1000}
{1,1000}
{10,1009}
{10,1009}
{2,1001}
{2,1001}
{3,1002}
{3,1002}
{4,1003}
{4,1003}
{5,1004}
{5,1004}
{6,1005}
{6,1005}
{7,1006}
{7,1006}
{8,1007}
{8,1007}
{9,1008}
{9,1008}

20 rows fetched.

SQL> drop table t_union_all_parallel_001;

Succeed.

SQL> --DTS2019121601548
SQL> drop table if exists parallelism_selct_t005;

Succeed.

SQL> create table parallelism_selct_t005(c1 INT, c14 int[])PARTITION BY RANGE(c1) interval(2)(PARTITION p1 VALUES LESS THAN(3));

Succeed.

SQL> insert into parallelism_selct_t005 values(1,array[1,2,3]);

1 rows affected.

SQL> insert into parallelism_selct_t005 values(2,array[1,2,3]);

1 rows affected.

SQL> insert into parallelism_selct_t005 values(3,array[1,2,3]);

1 rows affected.

SQL> select * from parallelism_selct_t005;

C1           C14
------------ ----------------------------------------------------------------
1            {1,2,3}
2            {1,2,3}
3            {1,2,3}

3 rows fetched.

SQL> drop table parallelism_selct_t005;

Succeed.

SQL> --DTS2019110500578
SQL> drop table if exists t_merge_join_explain_1;

Succeed.

SQL> create table t_merge_join_explain_1(
  2 COL_1 bigint,
  3 COL_2 TIMESTAMP WITHOUT TIME ZONE,
  4 COL_3 bool,
  5 COL_4 text,
  6 COL_5 char(30),
  7 COL_6 character varying(30),
  8 COL_7 blob,
  9 COL_8 integer,
 10 COL_9 interval day to second,
 11 COL_10 double,
 12 COL_11 TIMESTAMP,
 13 COL_12 varchar2(50),
 14 COL_13 date,
 15 COL_14 decimal(12,6),
 16 COL_15 clob,
 17 COL_16 datetime,
 18 COL_17 int[],
 19 COL_18 integer,
 20 COL_19 int,
 21 COL_20 bigint,
 22 constraint merge_join_pk_id1 primary key(COL_1)
 23 );

Succeed.

SQL> drop sequence if exists merge_join_seq_1;

Succeed.

SQL> create sequence merge_join_seq_1 increment by 1 start with 100000;

Succeed.

SQL> truncate table t_merge_join_explain_1;

Succeed.

SQL> begin
  2     for i in 1..60 loop
  3       insert into t_merge_join_explain_1 values(
  4       merge_join_seq_1.nextval,
  5       TIMESTAMPADD(HOUR,i,'2019-01-03 14:14:12'),
  6       true,
  7       lpad('abc','10','a@123&^%djgk'),
  8       lpad('abc','30','@')    ,
  9       lpad('abc','30','b'),
 10       lpad('10','12','01010'),
 11       i,
 12       (INTERVAL '4 5:12:10.222' DAY TO SECOND(3)),
 13       i+445.255,
 14       to_timestamp('2019-01-03 14:58:54.000000','YYYY-MM-DD HH24:MI:SS.FFFFFF'),
 15       rpad('abc','30','e'),
 16       TIMESTAMPADD(SECOND,i,'2018-11-03 14:14:12'),
 17       98*0.99,
 18       rpad('abc','9','a@123&^%djgk'),
 19       TIMESTAMPADD(SECOND,i,'2019-01-03 14:14:12'),
 20       '{32,535,5645645,6767,76,67,56,48,979,978,7}',
 21       merge_join_seq_1.nextval+10,
 22       i+100,
 23       merge_join_seq_1.nextval-100
 24       );
 25       commit;
 26     end loop;
 27 end;
 28 /

PL/SQL procedure successfully completed.

SQL> drop table if exists t_merge_join_explain_2;

Succeed.

SQL> create table t_merge_join_explain_2(
  2 COL_1 bigint,
  3 COL_2 TIMESTAMP WITHOUT TIME ZONE,
  4 COL_3 bool,
  5 COL_4 text,
  6 COL_5 char(30),
  7 COL_6 character varying(30),
  8 COL_7 blob,
  9 COL_8 integer,
 10 COL_9 interval day to second,
 11 COL_10 double,
 12 COL_11 TIMESTAMP,
 13 COL_12 varchar2(50),
 14 COL_13 date,
 15 COL_14 decimal(12,6),
 16 COL_15 clob,
 17 COL_16 datetime,
 18 COL_17 int[],
 19 COL_18 integer,
 20 COL_19 int,
 21 COL_20 bigint,
 22 constraint merge_join_pk_id2 primary key(COL_1)
 23 );

Succeed.

SQL> drop sequence if exists merge_join_seq_2;

Succeed.

SQL> create sequence merge_join_seq_2 increment by 1 start with 100000;

Succeed.

SQL> truncate table t_merge_join_explain_2;

Succeed.

SQL> begin
  2     for i in 1..60 loop
  3       insert into t_merge_join_explain_2 values(
  4       merge_join_seq_2.nextval,
  5       TIMESTAMPADD(HOUR,i,'2019-01-03 14:14:12'),
  6       true,
  7       lpad('abc','10','a@123&^%djgk'),
  8       lpad('abc','30','@')    ,
  9       lpad('abc','30','b'),
 10       lpad('10','12','01010'),
 11       i,
 12       (INTERVAL '4 5:12:10.222' DAY TO SECOND(3)),
 13       i+445.255,
 14       to_timestamp('2019-01-03 14:58:54.000000','YYYY-MM-DD HH24:MI:SS.FFFFFF'),
 15       rpad('abc','30','e'),
 16       TIMESTAMPADD(SECOND,i,'2018-11-03 14:14:12'),
 17       98*0.99,
 18       rpad('abc','9','a@123&^%djgk'),
 19       TIMESTAMPADD(SECOND,i,'2019-01-03 14:14:12'),
 20       '{32,535,5645645,6767,76,67,56,48,979,978,7}',
 21       merge_join_seq_2.nextval+10,
 22       i+100,
 23       merge_join_seq_2.nextval-100
 24       );
 25       commit;
 26     end loop;
 27 end;
 28 /

PL/SQL procedure successfully completed.

SQL> drop view if exists v_merge_join_explain_1;

Succeed.

SQL> drop view if exists v_merge_join_explain_2;

Succeed.

SQL> CREATE VIEW v_merge_join_explain_1 AS select * from t_merge_join_explain_1;

Succeed.

SQL> CREATE VIEW v_merge_join_explain_2 AS select * from t_merge_join_explain_2;

Succeed.

SQL> SELECT t1.COL_8
  2     FROM v_merge_join_explain_1 t1
  3     JOIN v_merge_join_explain_2 t2
  4 ON abs(ceil(t1.COL_8+50)) > floor(ceil(t2.COL_19))
  5 and abs(ceil(t2.COL_18+50)) > ln(floor(ceil(t2.COL_19)))
  6 where t2.COL_17[1]=32 OR t1.COL_14>=98*0.99
  7 group by t1.COL_8
  8 having abs(ceil(t1.COL_8+50)) > 10 order by 1;

COL_8
------------
52
53
54
55
56
57
58
59
60

9 rows fetched.

SQL>
SQL> SELECT t1.COL_8
  2     FROM t_merge_join_explain_1 t1
  3     JOIN t_merge_join_explain_2 t2
  4 ON abs(ceil(t1.COL_8+50)) > floor(ceil(t2.COL_19))
  5 and abs(ceil(t2.COL_18+50)) > ln(floor(ceil(t2.COL_19)))
  6 where t2.COL_17[1]=32 OR t1.COL_14>=98*0.99
  7 group by t1.COL_8
  8 having abs(ceil(t1.COL_8+50)) > 10 order by 1;

COL_8
------------
52
53
54
55
56
57
58
59
60

9 rows fetched.

SQL> SELECT t1.COL_8      FROM v_merge_join_explain_1 t1    JOIN v_merge_join_explain_2 t2 where t2.COL_17[1]=32 order by 1 LIMIT 10;

COL_8
------------
1
1
1
1
1
1
1
1
1
1

10 rows fetched.

SQL> SELECT t1.COL_8      FROM t_merge_join_explain_1 t1    JOIN t_merge_join_explain_2 t2 where t2.COL_17[1]=32 order by 1 LIMIT 1;\

COL_8
------------
1

1 rows fetched.

SQL> drop sequence merge_join_seq_2;

CT-00601, [1:1]Sql syntax error: text is incorrect
SQL> drop view v_merge_join_explain_1;

Succeed.

SQL> drop view v_merge_join_explain_2;

Succeed.

SQL> drop table t_merge_join_explain_1;

Succeed.

SQL> drop table t_merge_join_explain_2;

Succeed.

SQL> --DTS2019122400671
SQL> drop table if exists DTS2019122400671_test01;

Succeed.

SQL> drop table if exists DTS2019122400671_test02;

Succeed.

SQL> create table DTS2019122400671_test01(id int,c_long clob);

Succeed.

SQL> create table DTS2019122400671_test02 as select array_agg(c_long) c_long from DTS2019122400671_test01;

CT-01366, [1:58]Invalid function argument type
SQL> drop table DTS2019122400671_test01;

Succeed.

SQL> drop table if exists DTS2019122400671_test02;

Succeed.

SQL> 
SQL> --DTS2020020704297
SQL> drop table if exists t10000_20200207;

Succeed.

SQL> create table t10000_20200207(c int,c2 int);

Succeed.

SQL> insert into t10000_20200207 values(1,2);

1 rows affected.

SQL> insert into t10000_20200207 values(2,3);

1 rows affected.

SQL> commit;

Succeed.

SQL> select prior array[c,c2] from t10000_20200207 connect by nocycle prior c2=c order by c,c2;

PRIOR ARRAY[C,C2]                                               
----------------------------------------------------------------
                                                                
                                                                
{1,2}                                                           

3 rows fetched.

SQL> drop table t10000_20200207;

Succeed.

SQL> -- DTS2020011907113
SQL> drop table if exists test_values_t15;

Succeed.

SQL> create table test_values_t15 (
  2   c1 int primary key,
  3   c2 varchar(100)[],
  4   c3 varchar(100)[]
  5 );

Succeed.

SQL> 
SQL> insert into test_values_t15 values(
  2 -1110001,array['abc','qwerty','tyuiopbn'],array[lpad('a',100,'b'),lpad('a',100,'c'),lpad('a',100,'d'),lpad('a',100,'e')]);

1 rows affected.

SQL> 
SQL> 
SQL> select * from test_values_t15;

C1           C2                                                               C3                                                              
------------ ---------------------------------------------------------------- ----------------------------------------------------------------
-1110001     {abc,qwerty,tyuiopbn}                                            {bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbba,ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccca,ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddda,eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeea}

1 rows fetched.

SQL> insert into test_values_t15 select * from test_values_t15 on duplicate key update c2[2] = values(c3[3]);

2 rows affected.

SQL> select * from test_values_t15;

C1           C2                                                               C3                                                              
------------ ---------------------------------------------------------------- ----------------------------------------------------------------
-1110001     {abc,ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddda,tyuiopbn} {bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbba,ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccca,ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddda,eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeea}

1 rows fetched.

SQL> --20200211
SQL> DROP TABLE IF EXISTS T_20200211;

Succeed.

SQL> CREATE TABLE T_20200211(F1 VARCHAR(10));

Succeed.

SQL> INSERT INTO T_20200211 VALUES(NULL),('A');

2 rows affected.

SQL> COMMIT;

Succeed.

SQL> select 'a'||array_agg(f1) from T_20200211 group by f1 ORDER BY 1;

'A'||ARRAY_AGG(F1)
------------------
a{A}              
a{NULL}           

2 rows fetched.

SQL> DROP TABLE T_20200211;

Succeed.

SQL> --DTS2020032008928
SQL> drop table if exists t_DTS2020032008928_003;

Succeed.

SQL> create table t_DTS2020032008928_003(id int,deptno int,name varchar(20),sal int,
  2 id2 int,deptno2 int,name2 varchar(20),sal2 int,
  3 id3 int,deptno3 int,name3 varchar(20),sal3 int,
  4 id4 int,deptno4 int,name4 varchar(20),sal4 int);

Succeed.

SQL> insert into t_DTS2020032008928_003 values(1,1,'1aa',120,1,1,'1aa',120,1,1,'1aa',120,1,1,'1aa',120);

1 rows affected.

SQL> insert into t_DTS2020032008928_003 values(2,1,'2aa',300,2,1,'2aa',300,2,1,'2aa',300,2,1,'2aa',300);

1 rows affected.

SQL> insert into t_DTS2020032008928_003 values(3,1,'3aa',100,3,1,'3aa',100,3,1,'3aa',100,3,1,'3aa',100);

1 rows affected.

SQL> insert into t_DTS2020032008928_003 values(7,2,'7aa',500,7,2,'7aa',500,7,2,'7aa',500,7,2,'7aa',500);

1 rows affected.

SQL> insert into t_DTS2020032008928_003 values(8,2,'8aa',200,8,2,'8aa',200,8,2,'8aa',200,8,2,'8aa',200);

1 rows affected.

SQL> insert into t_DTS2020032008928_003 values(9,2,'9aa',20,9,2,'9aa',20,9,2,'9aa',20,9,2,'9aa',20);

1 rows affected.

SQL> insert into t_DTS2020032008928_003 values(null,2,'10aa',30,null,2,'10aa',30,null,2,'10aa',30,null,2,'10aa',30);

1 rows affected.

SQL> commit;

Succeed.

SQL> drop table if exists t_DTS2020032008928_004;

Succeed.

SQL> create table t_DTS2020032008928_004 (id int,c1 varchar(8000),c2 varchar(8000),c3 varchar(8000));

Succeed.

SQL> declare
  2 begin
  3 for i in 1..2000 loop
  4 insert into t_DTS2020032008928_004 values (i,rpad('abc',8000,2),rpad('abc',8000,i),rpad('abc',8000,i));
  5 end loop;
  6 for i in 2001..4000 loop
  7 insert into t_DTS2020032008928_004 values (i,rpad('abc',8000,2),rpad('abc',8000,2),rpad('abc',8000,i));
  8 end loop;
  9 for i in 4001..8000 loop
 10 insert into t_DTS2020032008928_004 values (i,rpad('abc',8000,2),rpad('abc',8000,2),rpad('abc',8000,2));
 11 end loop;
 12 end;
 13 /

PL/SQL procedure successfully completed.

SQL> commit;

Succeed.

SQL>

SQL> drop table t_DTS2020032008928_003;

Succeed.

SQL> drop table t_DTS2020032008928_004;

Succeed.

SQL> 
SQL> -- test array element cast
SQL> drop table if exists tab_array_cast_test;

Succeed.

SQL> create table tab_array_cast_test (f1 varchar(30)[]);

Succeed.

SQL> insert into tab_array_cast_test values (array['', null, 'abc']);

1 rows affected.

SQL> insert into tab_array_cast_test values ('{'''', null, ''abc''}');

1 rows affected.

SQL> update tab_array_cast_test set f1 = '{'''', null, ''def''}';

2 rows affected.

SQL> select '{'''', null, ''def''}'::varchar(30)[] from dual;

'{'''', NULL, ''DEF''}'::VARCHAR(30)[]                          
----------------------------------------------------------------
{'',NULL,'def'}                                                 

1 rows fetched.

SQL> 
SQL> drop table if exists trig_array_test;

Succeed.

SQL> create table trig_array_test(f1 int,f2 varchar(20)[],f3 varchar(8000));

Succeed.

SQL>
SQL> CREATE OR REPLACE TRIGGER TRIG_AFTER_INSERT before INSERT or update ON trig_array_test
  2 for each row
  3 declare
  4     tep varchar(800);
  5     temp varchar(880)[];
  6 BEGIN
  7     temp := :new.f2;
  8     tep := to_char(temp);
  9     :new.f3 :=tep;
 10 END;
 11 /

Succeed.

SQL>
SQL> insert into trig_array_test values (1, array['abc', 'gdsaf'], '');

1 rows affected.

SQL> select * from trig_array_test;

F1           F2                                                               F3
------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            {abc,gdsaf}                                                      {abc,gdsaf}

1 rows fetched.

SQL> update trig_array_test set f2 = array['213424'];

1 rows affected.

SQL> select * from trig_array_test;

F1           F2                                                               F3
------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            {213424}                                                         {213424}

1 rows fetched.

SQL>
SQL> drop table if exists array_test_041;

Succeed.

SQL> CREATE TABLE array_test_041(
  2   t_id  int primary key,
  3   t_name VARCHAR2(200)[],
  4   t_age int[],
  5   t_sex CHAR(110)[],
  6   t_address  number[],
  7   t_email date[],
  8   t_phonenum real[],
  9   t_remarks INTERVAL DAY(4) TO SECOND[6]
 10 );

Succeed.

SQL> insert into array_test_041 values(1,array['xiaoming','23'],array[1234567.67,12345.4567],array['m','huanpu','@123','1399','none'],array[58814,546223077,1234567.67],array['2012-10-31 10:16:52','2002-08-11','2000-03-01 15:42:21'],array[],array[(INTERVAL '4 5:12:10.222' DAY TO SECOND(3)),(INTERVAL '12 15:12:10.222' DAY TO SECOND(6))]);

1 rows affected.

SQL> commit;

Succeed.

SQL>
SQL> create or replace function FUNC_ARRAY_TEST_001() return date[]
  2 is
  3 V1 date[];
  4 begin
  5   select t_email into V1 from array_test_041 where t_id=1;
  6   return V1;
  7   EXCEPTION
  8 WHEN NO_DATA_FOUND THEN dbe_output.print_line('NO_DATA_FOUND');
  9 end;
 10 /

Succeed.

SQL>
SQL> select FUNC_ARRAY_TEST_001() from sys_dummy;

FUNC_ARRAY_TEST_001()
----------------------------------------------------------------
{2012-10-31 10:16:52,2002-08-11 00:00:00,2000-03-01 15:42:21}

1 rows fetched.

SQL> 
SQL> -- DTS202005270616KSP0G00
SQL> drop table if exists t_varray_array_agg;

Succeed.

SQL> create table t_varray_array_agg
  2 (
  3   f1 integer,
  4   f2 integer,
  5   f3 varchar(30)
  6 );

Succeed.

SQL> insert into t_varray_array_agg values (1,100,'fdfd1'), (1,100,'fdfd'), (2,200,'fdfd'), (2, 220,'fdfd'), (3,300,'fdfd'), (4, 300,'fdfd'), (4, 500,'fdfd'), (5,600,'fdfd');

8 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> select array_agg(f3) from t_varray_array_agg group by f1 union select array_agg(f3) from t_varray_array_agg group by f1;

CT-00601, Sql syntax error: unexpected array expression
SQL> select array_agg(f3) from t_varray_array_agg group by f1 union select array_agg(f3) from t_varray_array_agg group by f1;

CT-00601, Sql syntax error: unexpected array expression
SQL> drop table t_varray_array_agg;

Succeed.

SQL> 
SQL> drop table if exists t_varray_datatype;

Succeed.

SQL> create table t_varray_datatype(
  2     f1 integer[10],
  3     f2 binary_uint32[]
  4 );

Succeed.

SQL> insert into t_varray_datatype values (
  2     array[1, '2'::integer, null],
  3     array[null, '2'::binary_uint32]
  4 );

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> update t_varray_datatype t1 join t_varray_datatype t2 on t1.f1=t2.f1 set t1.f1[4]=12;

CT-00601, [1:58]Sql syntax error: unexpected array expression
SQL> drop table t_varray_datatype;

Succeed.

SQL> 
SQL> drop table if exists TAB_DCN_GBP_LOGIC_ROUTER;

Succeed.

SQL> CREATE TABLE "TAB_DCN_GBP_LOGIC_ROUTER"
  2 (
  3   "VPN_RT_IMPORT" VARCHAR(8000 BYTE)[]
  4 )
  5 INITRANS 2
  6 MAXTRANS 255
  7 PCTFREE 8;

Succeed.

SQL> 
SQL> CREATE OR REPLACE TRIGGER "DCN_DTAGENT_TAB_DCN_GBP_LOGIC_ROUTER_TRIGGER"
  2 before insert on TAB_DCN_GBP_LOGIC_ROUTER for each row  DECLARE TG_VALUE VARCHAR(16); N_VALUE varchar(1000); O_VALUE varchar(12);
  3 BEGIN
  4 TG_VALUE := 'INSERT';
  5 O_VALUE := NULL;
  6 N_VALUE := :new.VPN_RT_IMPORT;
  7 END;
  8 /

Succeed.

SQL> 
SQL> insert into TAB_DCN_GBP_LOGIC_ROUTER values(NULL);

1 rows affected.

SQL> 
SQL> -- datatype decision
SQL> drop table if exists t1;

Succeed.

SQL> create table t1 (f1 timestamp[]);

Succeed.

SQL> insert into t1 values (array[systimestamp]);

1 rows affected.

SQL> insert into t1 values (array[systimestamp, null]);

1 rows affected.

SQL> insert into t1 values (array[systimestamp, '2020-09-02 09:24:34.464515']); -- error

CT-00105, Invalid format of datetime
SQL>
SQL> alter session set NLS_TIMESTAMP_FORMAT = 'YYYY-MM-DD HH24:MI:SS.FF TZH:TZM';

Succeed.

SQL> insert into t1 values (array[systimestamp, '2020-09-02 09:24:34.464515']); -- ok

1 rows affected.

SQL>
SQL> alter session set NLS_TIMESTAMP_FORMAT = 'YYYY-MM-DD HH24:MI:SS.FF';

Succeed.

SQL> drop table if exists t2;

Succeed.

SQL> create table t2 (f1 timestamp);

Succeed.

SQL> insert into t2 values (systimestamp);

1 rows affected.

SQL> insert into t2 values (systimestamp::varchar(50)); -- error

CT-00105, Invalid format of datetime
SQL> alter session set NLS_TIMESTAMP_FORMAT = 'YYYY-MM-DD HH24:MI:SS.FF TZH:TZM';

Succeed.

SQL> insert into t2 values (systimestamp::varchar(50)); -- ok

1 rows affected.

SQL> drop table t1;

Succeed.

SQL> drop table t2;

Succeed.

SQL> desc -q select array[];

Name                                Null?    Type
----------------------------------- -------- ------------------------------------
ARRAY[]                                      VARCHAR[]

SQL> desc -q select array[null, null];

Name                                Null?    Type
----------------------------------- -------- ------------------------------------
ARRAY[NULL, NULL]                            VARCHAR[]

SQL>
SQL> -- array as partition key
SQL> create table test(id int[]) partition by hash(id)(partition p_1, partition p_2); -- failed

CT-00601, Sql syntax error: invalid partition key type - got ARRAY

SQL> 
SQL> -- test lob segment recycle
SQL> drop table if exists t1;

Succeed.

SQL> create table t1 (f1 varchar(5000)[]);

Succeed.

SQL> select segment_name, bytes, pages,extents from adm_segments where segment_name = 'LOB_T1_F1'; -- 0 pages

SEGMENT_NAME                                                     BYTES                PAGES                EXTENTS
---------------------------------------------------------------- -------------------- -------------------- --------------------
LOB_T1_F1                                                        0                    0                    0

1 rows fetched.

SQL> begin
  2     for i in 1..100 loop
  3       insert into t1 values(array['abc', 'def', 'kkk']);
  4       commit;
  5     end loop;
  6 end;
  7 /

PL/SQL procedure successfully completed.

SQL> truncate table t1;

Succeed.

SQL> select segment_name, bytes, pages,extents from adm_segments where segment_name = 'LOB_T1_F1'; -- 8 pages

SEGMENT_NAME                                                     BYTES                PAGES                EXTENTS
---------------------------------------------------------------- -------------------- -------------------- --------------------
LOB_T1_F1                                                        65536                8                    1

1 rows fetched.

SQL> drop table t1;

Succeed.

SQL> 
SQL> -- DTS202009210QMEFTP1G00
SQL> drop table if exists array_vm_t1;

Succeed.

SQL> drop table if exists array_vm_t2;

Succeed.

SQL> 
SQL> create table array_vm_t1
  2 (
  3     id number(5),
  4     int_arr int[]
  5 );

Succeed.

SQL> insert into array_vm_t1 values(1, array[1,2]);

1 rows affected.

SQL> insert into array_vm_t1 values(2, array[3,4]);

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> create table array_vm_t2
  2 (
  3     id number(5),
  4     int_arr int[]
  5 );

Succeed.

SQL> 
SQL> insert into array_vm_t2 values(1, array[10,20]);

1 rows affected.

SQL> insert into array_vm_t2 values(2, array[30,40]);

1 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> SELECT
  2   ref_0.id AS C0,
  3   (SELECT int_arr FROM array_vm_t1 LIMIT 1) AS C1
  4 FROM
  5   array_vm_t2 AS ref_0 order by c0;

C0                                       C1                                                              
---------------------------------------- ----------------------------------------------------------------
1                                        {1,2}                                                           
2                                        {1,2}                                                           

2 rows fetched.

SQL> 
SQL> drop table array_vm_t1;

Succeed.

SQL> drop table array_vm_t2;

Succeed.

SQL> 
SQL> DROP TABLE IF EXISTS "TAB_DCN_SVO_CROSS_ROUTER_INFO" CASCADE CONSTRAINTS;

Succeed.

SQL> CREATE TABLE "TAB_DCN_SVO_CROSS_ROUTER_INFO"
  2 (
  3   "ID" VARCHAR(36 BYTE) NOT NULL,
  4   "SFC_ID" VARCHAR(36 BYTE) NOT NULL,
  5   "NAME" VARCHAR(256 BYTE),
  6   "DESCRIPTION" VARCHAR(256 BYTE),
  7   "SRC_ROUTER_ID" VARCHAR(73 BYTE),
  8   "DST_ROUTER_ID" VARCHAR(73 BYTE),
  9   "SRC_LOGICVAS_ID" VARCHAR(73 BYTE),
 10   "DST_LOGICVAS_ID" VARCHAR(73 BYTE),
 11   "SRC_LOGICVAS_PORT_ID" VARCHAR(73 BYTE),
 12   "DST_LOGICVAS_PORT_ID" VARCHAR(73 BYTE),
 13   "TENANT_ID" VARCHAR(36 BYTE),
 14   "PEER_TENANT_ID" VARCHAR(36 CHAR),
 15   "SCENE_TYPE" BINARY_INTEGER,
 16   "VNI_RES_ARRAY" VARCHAR(8000 BYTE)[],
 17   "CONN_IP_ARRAY" VARCHAR(8000 BYTE)[],
 18   "VLAN_ARRAY" VARCHAR(8000 BYTE)[],
 19   "VRF0_ARRAY" VARCHAR(8000 BYTE)[],
 20   "CREATE_TIME" TIMESTAMP(6) DEFAULT current_timestamp,
 21   "UPDATE_TIME" TIMESTAMP(6) WITH TIME ZONE,
 22   "PRODUCER" VARCHAR(128 CHAR),
 23   "SRC_CIDRS" VARCHAR(8000 BYTE)[],
 24   "DST_CIDRS" VARCHAR(8000 BYTE)[],
 25   "DCI_GATEWAY_IDS" VARCHAR(8000 BYTE)[],
 26   "VRF0_KEY" VARCHAR(72 CHAR),
 27   "PRIORITY" BINARY_INTEGER,
 28   "LOCAL_EXTGW_IDS" VARCHAR(36 BYTE)[],
 29   "PEER_EXTGW_IDS" VARCHAR(36 BYTE)[],
 30   "CONNECT_RT" VARCHAR(36 BYTE),
 31   "LOCAL_ROUTER_TYPE" VARCHAR(36 BYTE),
 32   "PEER_ROUTER_TYPE" VARCHAR(36 BYTE)
 33 );

Succeed.

SQL> 
SQL> INSERT INTO "TAB_DCN_SVO_CROSS_ROUTER_INFO" ("ID","SFC_ID","NAME","DESCRIPTION","SRC_ROUTER_ID","DST_ROUTER_ID","SRC_LOGICVAS_ID","DST_LOGICVAS_ID","SRC_LOGICVAS_PORT_ID","DST_LOGICVAS_PORT_ID","TENANT_ID","PEER_TENANT_ID","SCENE_TYPE","VNI_RES_ARRAY","CONN_IP_ARRAY","VLAN_ARRAY","VRF0_ARRAY","CREATE_TIME","UPDATE_TIME","PRODUCER","SRC_CIDRS","DST_CIDRS","DCI_GATEWAY_IDS","VRF0_KEY","PRIORITY","LOCAL_EXTGW_IDS","PEER_EXTGW_IDS","CONNECT_RT","LOCAL_ROUTER_TYPE","PEER_ROUTER_TYPE") values
  2   ('bd123122-f76e-4437-956f-0d20d9042ee0','9ae4073e-39e6-477d-bd0b-5d4ca7581209','vpc_128','','bcf6f5f5-5d9f-4a9f-ab7e-4abbe5ba5d3b','b5691909-793c-431b-b075-a048acc0c0b8',null,null,null,null,'00000000-0000-0000-0000-000000000000','f76e49b3-22e6-4126-aa09-9b4d92852ffb',11,null,null,null,null,'2020-10-08 17:00:21.000000','2020-10-08 17:08:32.000000 +08:00','Agile-Controller-MDC',null,'{164:1:75::/64,164.1.25.0/24,164.1.14.0/24,164:1:104::/64,164.1.29.0/24,164.1.21.0/24,164:1:17::/64,164:1:46::/64,164:1:107::/64,164.1.10.0/24,164:1:13::/64,164:1:116::/64,164.1.111.0/24,164.1.48.0/24,164.1.24.0/24,164:1:68::/64,164.1.87.0/24,164.1.35.0/24,164:1:117::/64,164:1:33::/64,164:1:76::/64,164.1.12.0/24,164:1:72::/64,164.1.107.0/24,164.1.3.0/24,164:1:96::/64,164.1.40.0/24,164.1.28.0/24,164:1:100::/64,164.1.67.0/24,164.1.82.0/24,164.1.96.0/24,164.1.80.0/24,164.1.98.0/24,164.1.84.0/24,164:1:61::/64,164:1:66::/64,164:1:77::/64,164:1:26::/64,164:1:108::/64,164.1.76.0/24,164:1:106::/64,164.1.51.0/24,164:1:45::/64,164:1:95::/64,164.1.103.0/24,164.1.88.0/24,164.1.31.0/24,164:1:69::/64,164:1:19::/64,164.1.77.0/24,164:1:62::/64,164:1:58::/64,164:1:80::/64,164:1:20::/64,164.1.6.0/24,164.1.109.0/24,164.1.123.0/24,164.1.104.0/24,164.1.69.0/24,164:1:57::/64,164:1:82::/64,164:1:125::/64,164:1:60::/64,164:1:23::/64,164.1.36.0/24,164.1.54.0/24,164.1.61.0/24,164:1:64::/64,164.1.119.0/24,164.1.79.0/24,164.1.39.0/24,164.1.13.0/24,164.1.118.0/24,164:1:114::/64,164.1.15.0/24,164:1:15::/64,164:1:85::/64,164.1.90.0/24,164.1.114.0/24,164:1:38::/64,164:1:10::/64,164:1:124::/64,164.1.53.0/24,164:1:78::/64,164.1.30.0/24,164.1.33.0/24,164.1.32.0/24,164.1.45.0/24,164:1:52::/64,164:1:63::/64,164.1.50.0/24,164.1.60.0/24,164.1.97.0/24,164.1.78.0/24,164:1:27::/64,164:1:110::/64,164.1.102.0/24,164.1.81.0/24,164.1.19.0/24,164:1:87::/64,164.1.85.0/24,164:1:109::/64,164.1.38.0/24,164:1:34::/64,164:1:83::/64,164.1.47.0/24,164:1:115::/64,164.1.121.0/24,164:1:103::/64,164.1.20.0/24,164.1.100.0/24,164.1.112.0/24,164:1:43::/64,164.1.7.0/24,164:1:53::/64,164:1:8::/64,164.1.43.0/24,164:1:11::/64,164:1:4::/64,164:1:14::/64,164:1:9::/64,164:1:86::/64,164.1.89.0/24,164:1:93::/64,164:1:59::/64,164:1:32::/64,164:1:111::/64,164:1:51::/64,164:1:29::/64,164:1:16::/64,164.1.124.0/24,164:1:50::/64,164.1.16.0/24,164.1.44.0/24,164.1.12888888.0/24}',null,null,120,'{421fb4f2-6610-410c-bdd6-f0d646b2c805}','{421fb4f2-6610-410c-bdd6-f0d646b2c805}',null,'TransitRouter','LogicRouter');

1 rows affected.

SQL> COMMIT;

Succeed.

SQL> ALTER TABLE "TAB_DCN_SVO_CROSS_ROUTER_INFO" ADD PRIMARY KEY("ID");

Succeed.

SQL> select DST_CIDRS from tab_dcn_svo_cross_router_info where name = 'vpc_128';

DST_CIDRS                                                       
----------------------------------------------------------------
{164:1:75::/64,164.1.25.0/24,164.1.14.0/24,164:1:104::/64,164.1.29.0/24,164.1.21.0/24,164:1:17::/64,164:1:46::/64,164:1:107::/64,164.1.10.0/24,164:1:13::/64,164:1:116::/64,164.1.111.0/24,164.1.48.0/24,164.1.24.0/24,164:1:68::/64,164.1.87.0/24,164.1.35.0/24,164:1:117::/64,164:1:33::/64,164:1:76::/64,164.1.12.0/24,164:1:72::/64,164.1.107.0/24,164.1.3.0/24,164:1:96::/64,164.1.40.0/24,164.1.28.0/24,164:1:100::/64,164.1.67.0/24,164.1.82.0/24,164.1.96.0/24,164.1.80.0/24,164.1.98.0/24,164.1.84.0/24,164:1:61::/64,164:1:66::/64,164:1:77::/64,164:1:26::/64,164:1:108::/64,164.1.76.0/24,164:1:106::/64,164.1.51.0/24,164:1:45::/64,164:1:95::/64,164.1.103.0/24,164.1.88.0/24,164.1.31.0/24,164:1:69::/64,164:1:19::/64,164.1.77.0/24,164:1:62::/64,164:1:58::/64,164:1:80::/64,164:1:20::/64,164.1.6.0/24,164.1.109.0/24,164.1.123.0/24,164.1.104.0/24,164.1.69.0/24,164:1:57::/64,164:1:82::/64,164:1:125::/64,164:1:60::/64,164:1:23::/64,164.1.36.0/24,164.1.54.0/24,164.1.61.0/24,164:1:64::/64,164.1.119.0/24,164.1.79.0/24,164.1.39.0/24,164.1.13.0/24,164.1.118.0/24,164:1:114::/64,164.1.15.0/24,164:1:15::/64,164:1:85::/64,164.1.90.0/24,164.1.114.0/24,164:1:38::/64,164:1:10::/64,164:1:124::/64,164.1.53.0/24,164:1:78::/64,164.1.30.0/24,164.1.33.0/24,164.1.32.0/24,164.1.45.0/24,164:1:52::/64,164:1:63::/64,164.1.50.0/24,164.1.60.0/24,164.1.97.0/24,164.1.78.0/24,164:1:27::/64,164:1:110::/64,164.1.102.0/24,164.1.81.0/24,164.1.19.0/24,164:1:87::/64,164.1.85.0/24,164:1:109::/64,164.1.38.0/24,164:1:34::/64,164:1:83::/64,164.1.47.0/24,164:1:115::/64,164.1.121.0/24,164:1:103::/64,164.1.20.0/24,164.1.100.0/24,164.1.112.0/24,164:1:43::/64,164.1.7.0/24,164:1:53::/64,164:1:8::/64,164.1.43.0/24,164:1:11::/64,164:1:4::/64,164:1:14::/64,164:1:9::/64,164:1:86::/64,164.1.89.0/24,164:1:93::/64,164:1:59::/64,164:1:32::/64,164:1:111::/64,164:1:51::/64,164:1:29::/64,164:1:16::/64,164.1.124.0/24,164:1:50::/64,164.1.16.0/24,164.1.44.0/24,164.1.12888888.0/24}

1 rows fetched.

SQL> select dst_cidrs7_469_ from (
  2 select crossroute0_.dst_cidrs as dst_cidrs7_469_ from tab_dcn_svo_cross_router_info crossroute0_ where crossroute0_.name = 'vpc_128' order by crossroute0_.create_time desc) 
  3 where rownum <= 1;

DST_CIDRS7_469_                                                 
----------------------------------------------------------------
{164:1:75::/64,164.1.25.0/24,164.1.14.0/24,164:1:104::/64,164.1.29.0/24,164.1.21.0/24,164:1:17::/64,164:1:46::/64,164:1:107::/64,164.1.10.0/24,164:1:13::/64,164:1:116::/64,164.1.111.0/24,164.1.48.0/24,164.1.24.0/24,164:1:68::/64,164.1.87.0/24,164.1.35.0/24,164:1:117::/64,164:1:33::/64,164:1:76::/64,164.1.12.0/24,164:1:72::/64,164.1.107.0/24,164.1.3.0/24,164:1:96::/64,164.1.40.0/24,164.1.28.0/24,164:1:100::/64,164.1.67.0/24,164.1.82.0/24,164.1.96.0/24,164.1.80.0/24,164.1.98.0/24,164.1.84.0/24,164:1:61::/64,164:1:66::/64,164:1:77::/64,164:1:26::/64,164:1:108::/64,164.1.76.0/24,164:1:106::/64,164.1.51.0/24,164:1:45::/64,164:1:95::/64,164.1.103.0/24,164.1.88.0/24,164.1.31.0/24,164:1:69::/64,164:1:19::/64,164.1.77.0/24,164:1:62::/64,164:1:58::/64,164:1:80::/64,164:1:20::/64,164.1.6.0/24,164.1.109.0/24,164.1.123.0/24,164.1.104.0/24,164.1.69.0/24,164:1:57::/64,164:1:82::/64,164:1:125::/64,164:1:60::/64,164:1:23::/64,164.1.36.0/24,164.1.54.0/24,164.1.61.0/24,164:1:64::/64,164.1.119.0/24,164.1.79.0/24,164.1.39.0/24,164.1.13.0/24,164.1.118.0/24,164:1:114::/64,164.1.15.0/24,164:1:15::/64,164:1:85::/64,164.1.90.0/24,164.1.114.0/24,164:1:38::/64,164:1:10::/64,164:1:124::/64,164.1.53.0/24,164:1:78::/64,164.1.30.0/24,164.1.33.0/24,164.1.32.0/24,164.1.45.0/24,164:1:52::/64,164:1:63::/64,164.1.50.0/24,164.1.60.0/24,164.1.97.0/24,164.1.78.0/24,164:1:27::/64,164:1:110::/64,164.1.102.0/24,164.1.81.0/24,164.1.19.0/24,164:1:87::/64,164.1.85.0/24,164:1:109::/64,164.1.38.0/24,164:1:34::/64,164:1:83::/64,164.1.47.0/24,164:1:115::/64,164.1.121.0/24,164:1:103::/64,164.1.20.0/24,164.1.100.0/24,164.1.112.0/24,164:1:43::/64,164.1.7.0/24,164:1:53::/64,164:1:8::/64,164.1.43.0/24,164:1:11::/64,164:1:4::/64,164:1:14::/64,164:1:9::/64,164:1:86::/64,164.1.89.0/24,164:1:93::/64,164:1:59::/64,164:1:32::/64,164:1:111::/64,164:1:51::/64,164:1:29::/64,164:1:16::/64,164.1.124.0/24,164:1:50::/64,164.1.16.0/24,164.1.44.0/24,164.1.12888888.0/24}

1 rows fetched.

SQL> ALTER SYSTEM SET CBO = ON;

Succeed.

SQL> select dst_cidrs7_469_ from (
  2 select crossroute0_.dst_cidrs as dst_cidrs7_469_ from tab_dcn_svo_cross_router_info crossroute0_ where crossroute0_.name = 'vpc_128' order by crossroute0_.create_time desc) 
  3 where rownum <= 1;

DST_CIDRS7_469_                                                 
----------------------------------------------------------------
{164:1:75::/64,164.1.25.0/24,164.1.14.0/24,164:1:104::/64,164.1.29.0/24,164.1.21.0/24,164:1:17::/64,164:1:46::/64,164:1:107::/64,164.1.10.0/24,164:1:13::/64,164:1:116::/64,164.1.111.0/24,164.1.48.0/24,164.1.24.0/24,164:1:68::/64,164.1.87.0/24,164.1.35.0/24,164:1:117::/64,164:1:33::/64,164:1:76::/64,164.1.12.0/24,164:1:72::/64,164.1.107.0/24,164.1.3.0/24,164:1:96::/64,164.1.40.0/24,164.1.28.0/24,164:1:100::/64,164.1.67.0/24,164.1.82.0/24,164.1.96.0/24,164.1.80.0/24,164.1.98.0/24,164.1.84.0/24,164:1:61::/64,164:1:66::/64,164:1:77::/64,164:1:26::/64,164:1:108::/64,164.1.76.0/24,164:1:106::/64,164.1.51.0/24,164:1:45::/64,164:1:95::/64,164.1.103.0/24,164.1.88.0/24,164.1.31.0/24,164:1:69::/64,164:1:19::/64,164.1.77.0/24,164:1:62::/64,164:1:58::/64,164:1:80::/64,164:1:20::/64,164.1.6.0/24,164.1.109.0/24,164.1.123.0/24,164.1.104.0/24,164.1.69.0/24,164:1:57::/64,164:1:82::/64,164:1:125::/64,164:1:60::/64,164:1:23::/64,164.1.36.0/24,164.1.54.0/24,164.1.61.0/24,164:1:64::/64,164.1.119.0/24,164.1.79.0/24,164.1.39.0/24,164.1.13.0/24,164.1.118.0/24,164:1:114::/64,164.1.15.0/24,164:1:15::/64,164:1:85::/64,164.1.90.0/24,164.1.114.0/24,164:1:38::/64,164:1:10::/64,164:1:124::/64,164.1.53.0/24,164:1:78::/64,164.1.30.0/24,164.1.33.0/24,164.1.32.0/24,164.1.45.0/24,164:1:52::/64,164:1:63::/64,164.1.50.0/24,164.1.60.0/24,164.1.97.0/24,164.1.78.0/24,164:1:27::/64,164:1:110::/64,164.1.102.0/24,164.1.81.0/24,164.1.19.0/24,164:1:87::/64,164.1.85.0/24,164:1:109::/64,164.1.38.0/24,164:1:34::/64,164:1:83::/64,164.1.47.0/24,164:1:115::/64,164.1.121.0/24,164:1:103::/64,164.1.20.0/24,164.1.100.0/24,164.1.112.0/24,164:1:43::/64,164.1.7.0/24,164:1:53::/64,164:1:8::/64,164.1.43.0/24,164:1:11::/64,164:1:4::/64,164:1:14::/64,164:1:9::/64,164:1:86::/64,164.1.89.0/24,164:1:93::/64,164:1:59::/64,164:1:32::/64,164:1:111::/64,164:1:51::/64,164:1:29::/64,164:1:16::/64,164.1.124.0/24,164:1:50::/64,164.1.16.0/24,164.1.44.0/24,164.1.12888888.0/24}

1 rows fetched.

SQL> ALTER SYSTEM SET CBO = OFF;

Succeed.

SQL> 
SQL> declare 
  2 str varchar(100);
  3 str2 clob;
  4 begin
  5 for i in 1..4000 loop
  6     str := i*1000 || ',';
  7 	str2 := str2 || str ;
  8 end loop;
  9 str2 :=array[substr(str2,1,length(str2)-1)];
 10 dbe_output.print_line(str2);
 11 end;
 12 /

{1000,2000,3000,4000,5000,6000,7000,8000,9000,10000,11000,12000,13000,14000,15000,16000,17000,18000,19000,20000,21000,22000,23000,24000,25000,26000,27000,28000,29000,30000,31000,32000,33000,34000,35000,36000,37000,38000,39000,40000,41000,42000,43000,44000,45000,46000,47000,48000,49000,50000,51000,52000,53000,54000,55000,56000,57000,58000,59000,60000,61000,62000,63000,64000,65000,66000,67000,68000,69000,70000,71000,72000,73000,74000,75000,76000,77000,78000,79000,80000,81000,82000,83000,84000,85000,86000,87000,88000,89000,90000,91000,92000,93000,94000,95000,96000,97000,98000,99000,100000,101000,102000,103000,104000,105000,106000,107000,108000,109000,110000,111000,112000,113000,114000,115000,116000,117000,118000,119000,120000,121000,122000,123000,124000,125000,126000,127000,128000,129000,130000,131000,132000,133000,134000,135000,136000,137000,138000,139000,140000,141000,142000,143000,144000,145000,146000,147000,148000,149000,150000,151000,152000,153000,154000,155000,156000,157000,158000,159000,160000,161000,162000,163000,164000,165000,166000,167000,168000,169000,170000,171000,172000,173000,174000,175000,176000,177000,178000,179000,180000,181000,182000,183000,184000,185000,186000,187000,188000,189000,190000,191000,192000,193000,194000,195000,196000,197000,198000,199000,200000,201000,202000,203000,204000,205000,206000,207000,208000,209000,210000,211000,212000,213000,214000,215000,216000,217000,218000,219000,220000,221000,222000,223000,224000,225000,226000,227000,228000,229000,230000,231000,232000,233000,234000,235000,236000,237000,238000,239000,240000,241000,242000,243000,244000,245000,246000,247000,248000,249000,250000,251000,252000,253000,254000,255000,256000,257000,258000,259000,260000,261000,262000,263000,264000,265000,266000,267000,268000,269000,270000,271000,272000,273000,274000,275000,276000,277000,278000,279000,280000,281000,282000,283000,284000,285000,286000,287000,288000,289000,290000,291000,292000,293000,294000,295000,296000,297000,298000,299000,300000,301000,302000,303000,304000,305000,306000,307000,308000,309000,310000,311000,312000,313000,314000,315000,316000,317000,318000,319000,320000,321000,322000,323000,324000,325000,326000,327000,328000,329000,330000,331000,332000,333000,334000,335000,336000,337000,338000,339000,340000,341000,342000,343000,344000,345000,346000,347000,348000,349000,350000,351000,352000,353000,354000,355000,356000,357000,358000,359000,360000,361000,362000,363000,364000,365000,366000,367000,368000,369000,370000,371000,372000,373000,374000,375000,376000,377000,378000,379000,380000,381000,382000,383000,384000,385000,386000,387000,388000,389000,390000,391000,392000,393000,394000,395000,396000,397000,398000,399000,400000,401000,402000,403000,404000,405000,406000,407000,408000,409000,410000,411000,412000,413000,414000,415000,416000,417000,418000,419000,420000,421000,422000,423000,424000,425000,426000,427000,428000,429000,430000,431000,432000,433000,434000,435000,436000,437000,438000,439000,440000,441000,442000,443000,444000,445000,446000,447000,448000,449000,450000,451000,452000,453000,454000,455000,456000,457000,458000,459000,460000,461000,462000,463000,464000,465000,466000,467000,468000,469000,470000,471000,472000,473000,474000,475000,476000,477000,478000,479000,480000,481000,482000,483000,484000,485000,486000,487000,488000,489000,490000,491000,492000,493000,494000,495000,496000,497000,498000,499000,500000,501000,502000,503000,504000,505000,506000,507000,508000,509000,510000,511000,512000,513000,514000,515000,516000,517000,518000,519000,520000,521000,522000,523000,524000,525000,526000,527000,528000,529000,530000,531000,532000,533000,534000,535000,536000,537000,538000,539000,540000,541000,542000,543000,544000,545000,546000,547000,548000,549000,550000,551000,552000,553000,554000,555000,556000,557000,558000,559000,560000,561000,562000,563000,564000,565000,566000,567000,568000,569000,570000,571000,572000,573000,574000,575000,576000,577000,578000,579000,580000,581000,582000,583000,584000,585000,586000,587000,588000,589000,590000,591000,592000,593000,594000,595000,596000,597000,598000,599000,600000,601000,602000,603000,604000,605000,606000,607000,608000,609000,610000,611000,612000,613000,614000,615000,616000,617000,618000,619000,620000,621000,622000,623000,624000,625000,626000,627000,628000,629000,630000,631000,632000,633000,634000,635000,636000,637000,638000,639000,640000,641000,642000,643000,644000,645000,646000,647000,648000,649000,650000,651000,652000,653000,654000,655000,656000,657000,658000,659000,660000,661000,662000,663000,664000,665000,666000,667000,668000,669000,670000,671000,672000,673000,674000,675000,676000,677000,678000,679000,680000,681000,682000,683000,684000,685000,686000,687000,688000,689000,690000,691000,692000,693000,694000,695000,696000,697000,698000,699000,700000,701000,702000,703000,704000,705000,706000,707000,708000,709000,710000,711000,712000,713000,714000,715000,716000,717000,718000,719000,720000,721000,722000,723000,724000,725000,726000,727000,728000,729000,730000,731000,732000,733000,734000,735000,736000,737000,738000,739000,740000,741000,742000,743000,744000,745000,746000,747000,748000,749000,750000,751000,752000,753000,754000,755000,756000,757000,758000,759000,760000,761000,762000,763000,764000,765000,766000,767000,768000,769000,770000,771000,772000,773000,774000,775000,776000,777000,778000,779000,780000,781000,782000,783000,784000,785000,786000,787000,788000,789000,790000,791000,792000,793000,794000,795000,796000,797000,798000,799000,800000,801000,802000,803000,804000,805000,806000,807000,808000,809000,810000,811000,812000,813000,814000,815000,816000,817000,818000,819000,820000,821000,822000,823000,824000,825000,826000,827000,828000,829000,830000,831000,832000,833000,834000,835000,836000,837000,838000,839000,840000,841000,842000,843000,844000,845000,846000,847000,848000,849000,850000,851000,852000,853000,854000,855000,856000,857000,858000,859000,860000,861000,862000,863000,864000,865000,866000,867000,868000,869000,870000,871000,872000,873000,874000,875000,876000,877000,878000,879000,880000,881000,882000,883000,884000,885000,886000,887000,888000,889000,890000,891000,892000,893000,894000,895000,896000,897000,898000,899000,900000,901000,902000,903000,904000,905000,906000,907000,908000,909000,910000,911000,912000,913000,914000,915000,916000,917000,918000,919000,920000,921000,922000,923000,924000,925000,926000,927000,928000,929000,930000,931000,932000,933000,934000,935000,936000,937000,938000,939000,940000,941000,942000,943000,944000,945000,946000,947000,948000,949000,950000,951000,952000,953000,954000,955000,956000,957000,958000,959000,960000,961000,962000,963000,964000,965000,966000,967000,968000,969000,970000,971000,972000,973000,974000,975000,976000,977000,978000,979000,980000,981000,982000,983000,984000,985000,986000,987000,988000,989000,990000,991000,992000,993000,994000,995000,996000,997000,998000,999000,1000000,1001000,1002000,1003000,1004000,1005000,1006000,1007000,1008000,1009000,1010000,1011000,1012000,1013000,1014000,1015000,1016000,1017000,1018000,1019000,1020000,1021000,1022000,1023000,1024000,1025000,1026000,1027000,1028000,1029000,1030000,1031000,1032000,1033000,1034000,1035000,1036000,1037000,1038000,1039000,1040000,1041000,1042000,1043000,1044000,1045000,1046000,1047000,1048000,1049000,1050000,1051000,1052000,1053000,1054000,1055000,1056000,1057000,1058000,1059000,1060000,1061000,1062000,1063000,1064000,1065000,1066000,1067000,1068000,1069000,1070000,1071000,1072000,1073000,1074000,1075000,1076000,1077000,1078000,1079000,1080000,1081000,1082000,1083000,1084000,1085000,1086000,1087000,1088000,1089000,1090000,1091000,1092000,1093000,1094000,1095000,1096000,1097000,1098000,1099000,1100000,1101000,1102000,1103000,1104000,1105000,1106000,1107000,1108000,1109000,1110000,1111000,1112000,1113000,1114000,1115000,1116000,1117000,1118000,1119000,1120000,1121000,1122000,1123000,1124000,1125000,1126000,1127000,1128000,1129000,1130000,1131000,1132000,1133000,1134000,1135000,1136000,1137000,1138000,1139000,1140000,1141000,1142000,1143000,1144000,1145000,1146000,1147000,1148000,1149000,1150000,1151000,1152000,1153000,1154000,1155000,1156000,1157000,1158000,1159000,1160000,1161000,1162000,1163000,1164000,1165000,1166000,1167000,1168000,1169000,1170000,1171000,1172000,1173000,1174000,1175000,1176000,1177000,1178000,1179000,1180000,1181000,1182000,1183000,1184000,1185000,1186000,1187000,1188000,1189000,1190000,1191000,1192000,1193000,1194000,1195000,1196000,1197000,1198000,1199000,1200000,1201000,1202000,1203000,1204000,1205000,1206000,1207000,1208000,1209000,1210000,1211000,1212000,1213000,1214000,1215000,1216000,1217000,1218000,1219000,1220000,1221000,1222000,1223000,1224000,1225000,1226000,1227000,1228000,1229000,1230000,1231000,1232000,1233000,1234000,1235000,1236000,1237000,1238000,1239000,1240000,1241000,1242000,1243000,1244000,1245000,1246000,1247000,1248000,1249000,1250000,1251000,1252000,1253000,1254000,1255000,1256000,1257000,1258000,1259000,1260000,1261000,1262000,1263000,1264000,1265000,1266000,1267000,1268000,1269000,1270000,1271000,1272000,1273000,1274000,1275000,1276000,1277000,1278000,1279000,1280000,1281000,1282000,1283000,1284000,1285000,1286000,1287000,1288000,1289000,1290000,1291000,1292000,1293000,1294000,1295000,1296000,1297000,1298000,1299000,1300000,1301000,1302000,1303000,1304000,1305000,1306000,1307000,1308000,1309000,1310000,1311000,1312000,1313000,1314000,1315000,1316000,1317000,1318000,1319000,1320000,1321000,1322000,1323000,1324000,1325000,1326000,1327000,1328000,1329000,1330000,1331000,1332000,1333000,1334000,1335000,1336000,1337000,1338000,1339000,1340000,1341000,1342000,1343000,1344000,1345000,1346000,1347000,1348000,1349000,1350000,1351000,1352000,1353000,1354000,1355000,1356000,1357000,1358000,1359000,1360000,1361000,1362000,1363000,1364000,1365000,1366000,1367000,1368000,1369000,1370000,1371000,1372000,1373000,1374000,1375000,1376000,1377000,1378000,1379000,1380000,1381000,1382000,1383000,1384000,1385000,1386000,1387000,1388000,1389000,1390000,1391000,1392000,1393000,1394000,1395000,1396000,1397000,1398000,1399000,1400000,1401000,1402000,1403000,1404000,1405000,1406000,1407000,1408000,1409000,1410000,1411000,1412000,1413000,1414000,1415000,1416000,1417000,1418000,1419000,1420000,1421000,1422000,1423000,1424000,1425000,1426000,1427000,1428000,1429000,1430000,1431000,1432000,1433000,1434000,1435000,1436000,1437000,1438000,1439000,1440000,1441000,1442000,1443000,1444000,1445000,1446000,1447000,1448000,1449000,1450000,1451000,1452000,1453000,1454000,1455000,1456000,1457000,1458000,1459000,1460000,1461000,1462000,1463000,1464000,1465000,1466000,1467000,1468000,1469000,1470000,1471000,1472000,1473000,1474000,1475000,1476000,1477000,1478000,1479000,1480000,1481000,1482000,1483000,1484000,1485000,1486000,1487000,1488000,1489000,1490000,1491000,1492000,1493000,1494000,1495000,1496000,1497000,1498000,1499000,1500000,1501000,1502000,1503000,1504000,1505000,1506000,1507000,1508000,1509000,1510000,1511000,1512000,1513000,1514000,1515000,1516000,1517000,1518000,1519000,1520000,1521000,1522000,1523000,1524000,1525000,1526000,1527000,1528000,1529000,1530000,1531000,1532000,1533000,1534000,1535000,1536000,1537000,1538000,1539000,1540000,1541000,1542000,1543000,1544000,1545000,1546000,1547000,1548000,1549000,1550000,1551000,1552000,1553000,1554000,1555000,1556000,1557000,1558000,1559000,1560000,1561000,1562000,1563000,1564000,1565000,1566000,1567000,1568000,1569000,1570000,1571000,1572000,1573000,1574000,1575000,1576000,1577000,1578000,1579000,1580000,1581000,1582000,1583000,1584000,1585000,1586000,1587000,1588000,1589000,1590000,1591000,1592000,1593000,1594000,1595000,1596000,1597000,1598000,1599000,1600000,1601000,1602000,1603000,1604000,1605000,1606000,1607000,1608000,1609000,1610000,1611000,1612000,1613000,1614000,1615000,1616000,1617000,1618000,1619000,1620000,1621000,1622000,1623000,1624000,1625000,1626000,1627000,1628000,1629000,1630000,1631000,1632000,1633000,1634000,1635000,1636000,1637000,1638000,1639000,1640000,1641000,1642000,1643000,1644000,1645000,1646000,1647000,1648000,1649000,1650000,1651000,1652000,1653000,1654000,1655000,1656000,1657000,1658000,1659000,1660000,1661000,1662000,1663000,1664000,1665000,1666000,1667000,1668000,1669000,1670000,1671000,1672000,1673000,1674000,1675000,1676000,1677000,1678000,1679000,1680000,1681000,1682000,1683000,1684000,1685000,1686000,1687000,1688000,1689000,1690000,1691000,1692000,1693000,1694000,1695000,1696000,1697000,1698000,1699000,1700000,1701000,1702000,1703000,1704000,1705000,1706000,1707000,1708000,1709000,1710000,1711000,1712000,1713000,1714000,1715000,1716000,1717000,1718000,1719000,1720000,1721000,1722000,1723000,1724000,1725000,1726000,1727000,1728000,1729000,1730000,1731000,1732000,1733000,1734000,1735000,1736000,1737000,1738000,1739000,1740000,1741000,1742000,1743000,1744000,1745000,1746000,1747000,1748000,1749000,1750000,1751000,1752000,1753000,1754000,1755000,1756000,1757000,1758000,1759000,1760000,1761000,1762000,1763000,1764000,1765000,1766000,1767000,1768000,1769000,1770000,1771000,1772000,1773000,1774000,1775000,1776000,1777000,1778000,1779000,1780000,1781000,1782000,1783000,1784000,1785000,1786000,1787000,1788000,1789000,1790000,1791000,1792000,1793000,1794000,1795000,1796000,1797000,1798000,1799000,1800000,1801000,1802000,1803000,1804000,1805000,1806000,1807000,1808000,1809000,1810000,1811000,1812000,1813000,1814000,1815000,1816000,1817000,1818000,1819000,1820000,1821000,1822000,1823000,1824000,1825000,1826000,1827000,1828000,1829000,1830000,1831000,1832000,1833000,1834000,1835000,1836000,1837000,1838000,1839000,1840000,1841000,1842000,1843000,1844000,1845000,1846000,1847000,1848000,1849000,1850000,1851000,1852000,1853000,1854000,1855000,1856000,1857000,1858000,1859000,1860000,1861000,1862000,1863000,1864000,1865000,1866000,1867000,1868000,1869000,1870000,1871000,1872000,1873000,1874000,1875000,1876000,1877000,1878000,1879000,1880000,1881000,1882000,1883000,1884000,1885000,1886000,1887000,1888000,1889000,1890000,1891000,1892000,1893000,1894000,1895000,1896000,1897000,1898000,1899000,1900000,1901000,1902000,1903000,1904000,1905000,1906000,1907000,1908000,1909000,1910000,1911000,1912000,1913000,1914000,1915000,1916000,1917000,1918000,1919000,1920000,1921000,1922000,1923000,1924000,1925000,1926000,1927000,1928000,1929000,1930000,1931000,1932000,1933000,1934000,1935000,1936000,1937000,1938000,1939000,1940000,1941000,1942000,1943000,1944000,1945000,1946000,1947000,1948000,1949000,1950000,1951000,1952000,1953000,1954000,1955000,1956000,1957000,1958000,1959000,1960000,1961000,1962000,1963000,1964000,1965000,1966000,1967000,1968000,1969000,1970000,1971000,1972000,1973000,1974000,1975000,1976000,1977000,1978000,1979000,1980000,1981000,1982000,1983000,1984000,1985000,1986000,1987000,1988000,1989000,1990000,1991000,1992000,1993000,1994000,1995000,1996000,1997000,1998000,1999000,2000000,2001000,2002000,2003000,2004000,2005000,2006000,2007000,2008000,2009000,2010000,2011000,2012000,2013000,2014000,2015000,2016000,2017000,2018000,2019000,2020000,2021000,2022000,2023000,2024000,2025000,2026000,2027000,2028000,2029000,2030000,2031000,2032000,2033000,2034000,2035000,2036000,2037000,2038000,2039000,2040000,2041000,2042000,2043000,2044000,2045000,2046000,2047000,2048000,2049000,2050000,2051000,2052000,2053000,2054000,2055000,2056000,2057000,2058000,2059000,2060000,2061000,2062000,2063000,2064000,2065000,2066000,2067000,2068000,2069000,2070000,2071000,2072000,2073000,2074000,2075000,2076000,2077000,2078000,2079000,2080000,2081000,2082000,2083000,2084000,2085000,2086000,2087000,2088000,2089000,2090000,2091000,2092000,2093000,2094000,2095000,2096000,2097000,2098000,2099000,2100000,2101000,2102000,2103000,2104000,2105000,2106000,2107000,2108000,2109000,2110000,2111000,2112000,2113000,2114000,2115000,2116000,2117000,2118000,2119000,2120000,2121000,2122000,2123000,2124000,2125000,2126000,2127000,2128000,2129000,2130000,2131000,2132000,2133000,2134000,2135000,2136000,2137000,2138000,2139000,2140000,2141000,2142000,2143000,2144000,2145000,2146000,2147000,2148000,2149000,2150000,2151000,2152000,2153000,2154000,2155000,2156000,2157000,2158000,2159000,2160000,2161000,2162000,2163000,2164000,2165000,2166000,2167000,2168000,2169000,2170000,2171000,2172000,2173000,2174000,2175000,2176000,2177000,2178000,2179000,2180000,2181000,2182000,2183000,2184000,2185000,2186000,2187000,2188000,2189000,2190000,2191000,2192000,2193000,2194000,2195000,2196000,2197000,2198000,2199000,2200000,2201000,2202000,2203000,2204000,2205000,2206000,2207000,2208000,2209000,2210000,2211000,2212000,2213000,2214000,2215000,2216000,2217000,2218000,2219000,2220000,2221000,2222000,2223000,2224000,2225000,2226000,2227000,2228000,2229000,2230000,2231000,2232000,2233000,2234000,2235000,2236000,2237000,2238000,2239000,2240000,2241000,2242000,2243000,2244000,2245000,2246000,2247000,2248000,2249000,2250000,2251000,2252000,2253000,2254000,2255000,2256000,2257000,2258000,2259000,2260000,2261000,2262000,2263000,2264000,2265000,2266000,2267000,2268000,2269000,2270000,2271000,2272000,2273000,2274000,2275000,2276000,2277000,2278000,2279000,2280000,2281000,2282000,2283000,2284000,2285000,2286000,2287000,2288000,2289000,2290000,2291000,2292000,2293000,2294000,2295000,2296000,2297000,2298000,2299000,2300000,2301000,2302000,2303000,2304000,2305000,2306000,2307000,2308000,2309000,2310000,2311000,2312000,2313000,2314000,2315000,2316000,2317000,2318000,2319000,2320000,2321000,2322000,2323000,2324000,2325000,2326000,2327000,2328000,2329000,2330000,2331000,2332000,2333000,2334000,2335000,2336000,2337000,2338000,2339000,2340000,2341000,2342000,2343000,2344000,2345000,2346000,2347000,2348000,2349000,2350000,2351000,2352000,2353000,2354000,2355000,2356000,2357000,2358000,2359000,2360000,2361000,2362000,2363000,2364000,2365000,2366000,2367000,2368000,2369000,2370000,2371000,2372000,2373000,2374000,2375000,2376000,2377000,2378000,2379000,2380000,2381000,2382000,2383000,2384000,2385000,2386000,2387000,2388000,2389000,2390000,2391000,2392000,2393000,2394000,2395000,2396000,2397000,2398000,2399000,2400000,2401000,2402000,2403000,2404000,2405000,2406000,2407000,2408000,2409000,2410000,2411000,2412000,2413000,2414000,2415000,2416000,2417000,2418000,2419000,2420000,2421000,2422000,2423000,2424000,2425000,2426000,2427000,2428000,2429000,2430000,2431000,2432000,2433000,2434000,2435000,2436000,2437000,2438000,2439000,2440000,2441000,2442000,2443000,2444000,2445000,2446000,2447000,2448000,2449000,2450000,2451000,2452000,2453000,2454000,2455000,2456000,2457000,2458000,2459000,2460000,2461000,2462000,2463000,2464000,2465000,2466000,2467000,2468000,2469000,2470000,2471000,2472000,2473000,2474000,2475000,2476000,2477000,2478000,2479000,2480000,2481000,2482000,2483000,2484000,2485000,2486000,2487000,2488000,2489000,2490000,2491000,2492000,2493000,2494000,2495000,2496000,2497000,2498000,2499000,2500000,2501000,2502000,2503000,2504000,2505000,2506000,2507000,2508000,2509000,2510000,2511000,2512000,2513000,2514000,2515000,2516000,2517000,2518000,2519000,2520000,2521000,2522000,2523000,2524000,2525000,2526000,2527000,2528000,2529000,2530000,2531000,2532000,2533000,2534000,2535000,2536000,2537000,2538000,2539000,2540000,2541000,2542000,2543000,2544000,2545000,2546000,2547000,2548000,2549000,2550000,2551000,2552000,2553000,2554000,2555000,2556000,2557000,2558000,2559000,2560000,2561000,2562000,2563000,2564000,2565000,2566000,2567000,2568000,2569000,2570000,2571000,2572000,2573000,2574000,2575000,2576000,2577000,2578000,2579000,2580000,2581000,2582000,2583000,2584000,2585000,2586000,2587000,2588000,2589000,2590000,2591000,2592000,2593000,2594000,2595000,2596000,2597000,2598000,2599000,2600000,2601000,2602000,2603000,2604000,2605000,2606000,2607000,2608000,2609000,2610000,2611000,2612000,2613000,2614000,2615000,2616000,2617000,2618000,2619000,2620000,2621000,2622000,2623000,2624000,2625000,2626000,2627000,2628000,2629000,2630000,2631000,2632000,2633000,2634000,2635000,2636000,2637000,2638000,2639000,2640000,2641000,2642000,2643000,2644000,2645000,2646000,2647000,2648000,2649000,2650000,2651000,2652000,2653000,2654000,2655000,2656000,2657000,2658000,2659000,2660000,2661000,2662000,2663000,2664000,2665000,2666000,2667000,2668000,2669000,2670000,2671000,2672000,2673000,2674000,2675000,2676000,2677000,2678000,2679000,2680000,2681000,2682000,2683000,2684000,2685000,2686000,2687000,2688000,2689000,2690000,2691000,2692000,2693000,2694000,2695000,2696000,2697000,2698000,2699000,2700000,2701000,2702000,2703000,2704000,2705000,2706000,2707000,2708000,2709000,2710000,2711000,2712000,2713000,2714000,2715000,2716000,2717000,2718000,2719000,2720000,2721000,2722000,2723000,2724000,2725000,2726000,2727000,2728000,2729000,2730000,2731000,2732000,2733000,2734000,2735000,2736000,2737000,2738000,2739000,2740000,2741000,2742000,2743000,2744000,2745000,2746000,2747000,2748000,2749000,2750000,2751000,2752000,2753000,2754000,2755000,2756000,2757000,2758000,2759000,2760000,2761000,2762000,2763000,2764000,2765000,2766000,2767000,2768000,2769000,2770000,2771000,2772000,2773000,2774000,2775000,2776000,2777000,2778000,2779000,2780000,2781000,2782000,2783000,2784000,2785000,2786000,2787000,2788000,2789000,2790000,2791000,2792000,2793000,2794000,2795000,2796000,2797000,2798000,2799000,2800000,2801000,2802000,2803000,2804000,2805000,2806000,2807000,2808000,2809000,2810000,2811000,2812000,2813000,2814000,2815000,2816000,2817000,2818000,2819000,2820000,2821000,2822000,2823000,2824000,2825000,2826000,2827000,2828000,2829000,2830000,2831000,2832000,2833000,2834000,2835000,2836000,2837000,2838000,2839000,2840000,2841000,2842000,2843000,2844000,2845000,2846000,2847000,2848000,2849000,2850000,2851000,2852000,2853000,2854000,2855000,2856000,2857000,2858000,2859000,2860000,2861000,2862000,2863000,2864000,2865000,2866000,2867000,2868000,2869000,2870000,2871000,2872000,2873000,2874000,2875000,2876000,2877000,2878000,2879000,2880000,2881000,2882000,2883000,2884000,2885000,2886000,2887000,2888000,2889000,2890000,2891000,2892000,2893000,2894000,2895000,2896000,2897000,2898000,2899000,2900000,2901000,2902000,2903000,2904000,2905000,2906000,2907000,2908000,2909000,2910000,2911000,2912000,2913000,2914000,2915000,2916000,2917000,2918000,2919000,2920000,2921000,2922000,2923000,2924000,2925000,2926000,2927000,2928000,2929000,2930000,2931000,2932000,2933000,2934000,2935000,2936000,2937000,2938000,2939000,2940000,2941000,2942000,2943000,2944000,2945000,2946000,2947000,2948000,2949000,2950000,2951000,2952000,2953000,2954000,2955000,2956000,2957000,2958000,2959000,2960000,2961000,2962000,2963000,2964000,2965000,2966000,2967000,2968000,2969000,2970000,2971000,2972000,2973000,2974000,2975000,2976000,2977000,2978000,2979000,2980000,2981000,2982000,2983000,2984000,2985000,2986000,2987000,2988000,2989000,2990000,2991000,2992000,2993000,2994000,2995000,2996000,2997000,2998000,2999000,3000000,3001000,3002000,3003000,3004000,3005000,3006000,3007000,3008000,3009000,3010000,3011000,3012000,3013000,3014000,3015000,3016000,3017000,3018000,3019000,3020000,3021000,3022000,3023000,3024000,3025000,3026000,3027000,3028000,3029000,3030000,3031000,3032000,3033000,3034000,3035000,3036000,3037000,3038000,3039000,3040000,3041000,3042000,3043000,3044000,3045000,3046000,3047000,3048000,3049000,3050000,3051000,3052000,3053000,3054000,3055000,3056000,3057000,3058000,3059000,3060000,3061000,3062000,3063000,3064000,3065000,3066000,3067000,3068000,3069000,3070000,3071000,3072000,3073000,3074000,3075000,3076000,3077000,3078000,3079000,3080000,3081000,3082000,3083000,3084000,3085000,3086000,3087000,3088000,3089000,3090000,3091000,3092000,3093000,3094000,3095000,3096000,3097000,3098000,3099000,3100000,3101000,3102000,3103000,3104000,3105000,3106000,3107000,3108000,3109000,3110000,3111000,3112000,3113000,3114000,3115000,3116000,3117000,3118000,3119000,3120000,3121000,3122000,3123000,3124000,3125000,3126000,3127000,3128000,3129000,3130000,3131000,3132000,3133000,3134000,3135000,3136000,3137000,3138000,3139000,3140000,3141000,3142000,3143000,3144000,3145000,3146000,3147000,3148000,3149000,3150000,3151000,3152000,3153000,3154000,3155000,3156000,3157000,3158000,3159000,3160000,3161000,3162000,3163000,3164000,3165000,3166000,3167000,3168000,3169000,3170000,3171000,3172000,3173000,3174000,3175000,3176000,3177000,3178000,3179000,3180000,3181000,3182000,3183000,3184000,3185000,3186000,3187000,3188000,3189000,3190000,3191000,3192000,3193000,3194000,3195000,3196000,3197000,3198000,3199000,3200000,3201000,3202000,3203000,3204000,3205000,3206000,3207000,3208000,3209000,3210000,3211000,3212000,3213000,3214000,3215000,3216000,3217000,3218000,3219000,3220000,3221000,3222000,3223000,3224000,3225000,3226000,3227000,3228000,3229000,3230000,3231000,3232000,3233000,3234000,3235000,3236000,3237000,3238000,3239000,3240000,3241000,3242000,3243000,3244000,3245000,3246000,3247000,3248000,3249000,3250000,3251000,3252000,3253000,3254000,3255000,3256000,3257000,3258000,3259000,3260000,3261000,3262000,3263000,3264000,3265000,3266000,3267000,3268000,3269000,3270000,3271000,3272000,3273000,3274000,3275000,3276000,3277000,3278000,3279000,3280000,3281000,3282000,3283000,3284000,3285000,3286000,3287000,3288000,3289000,3290000,3291000,3292000,3293000,3294000,3295000,3296000,3297000,3298000,3299000,3300000,3301000,3302000,3303000,3304000,3305000,3306000,3307000,3308000,3309000,3310000,3311000,3312000,3313000,3314000,3315000,3316000,3317000,3318000,3319000,3320000,3321000,3322000,3323000,3324000,3325000,3326000,3327000,3328000,3329000,3330000,3331000,3332000,3333000,3334000,3335000,3336000,3337000,3338000,3339000,3340000,3341000,3342000,3343000,3344000,3345000,3346000,3347000,3348000,3349000,3350000,3351000,3352000,3353000,3354000,3355000,3356000,3357000,3358000,3359000,3360000,3361000,3362000,3363000,3364000,3365000,3366000,3367000,3368000,3369000,3370000,3371000,3372000,3373000,3374000,3375000,3376000,3377000,3378000,3379000,3380000,3381000,3382000,3383000,3384000,3385000,3386000,3387000,3388000,3389000,3390000,3391000,3392000,3393000,3394000,3395000,3396000,3397000,3398000,3399000,3400000,3401000,3402000,3403000,3404000,3405000,3406000,3407000,3408000,3409000,3410000,3411000,3412000,3413000,3414000,3415000,3416000,3417000,3418000,3419000,3420000,3421000,3422000,3423000,3424000,3425000,3426000,3427000,3428000,3429000,3430000,3431000,3432000,3433000,3434000,3435000,3436000,3437000,3438000,3439000,3440000,3441000,3442000,3443000,3444000,3445000,3446000,3447000,3448000,3449000,3450000,3451000,3452000,3453000,3454000,3455000,3456000,3457000,3458000,3459000,3460000,3461000,3462000,3463000,3464000,3465000,3466000,3467000,3468000,3469000,3470000,3471000,3472000,3473000,3474000,3475000,3476000,3477000,3478000,3479000,3480000,3481000,3482000,3483000,3484000,3485000,3486000,3487000,3488000,3489000,3490000,3491000,3492000,3493000,3494000,3495000,3496000,3497000,3498000,3499000,3500000,3501000,3502000,3503000,3504000,3505000,3506000,3507000,3508000,3509000,3510000,3511000,3512000,3513000,3514000,3515000,3516000,3517000,3518000,3519000,3520000,3521000,3522000,3523000,3524000,3525000,3526000,3527000,3528000,3529000,3530000,3531000,3532000,3533000,3534000,3535000,3536000,3537000,3538000,3539000,3540000,3541000,3542000,3543000,3544000,3545000,3546000,3547000,3548000,3549000,3550000,3551000,3552000,3553000,3554000,3555000,3556000,3557000,3558000,3559000,3560000,3561000,3562000,3563000,3564000,3565000,3566000,3567000,3568000,3569000,3570000,3571000,3572000,3573000,3574000,3575000,3576000,3577000,3578000,3579000,3580000,3581000,3582000,3583000,3584000,3585000,3586000,3587000,3588000,3589000,3590000,3591000,3592000,3593000,3594000,3595000,3596000,3597000,3598000,3599000,3600000,3601000,3602000,3603000,3604000,3605000,3606000,3607000,3608000,3609000,3610000,3611000,3612000,3613000,3614000,3615000,3616000,3617000,3618000,3619000,3620000,3621000,3622000,3623000,3624000,3625000,3626000,3627000,3628000,3629000,3630000,3631000,3632000,3633000,3634000,3635000,3636000,3637000,3638000,3639000,3640000,3641000,3642000,3643000,3644000,3645000,3646000,3647000,3648000,3649000,3650000,3651000,3652000,3653000,3654000,3655000,3656000,3657000,3658000,3659000,3660000,3661000,3662000,3663000,3664000,3665000,3666000,3667000,3668000,3669000,3670000,3671000,3672000,3673000,3674000,3675000,3676000,3677000,3678000,3679000,3680000,3681000,3682000,3683000,3684000,3685000,3686000,3687000,3688000,3689000,3690000,3691000,3692000,3693000,3694000,3695000,3696000,3697000,3698000,3699000,3700000,3701000,3702000,3703000,3704000,3705000,3706000,3707000,3708000,3709000,3710000,3711000,3712000,3713000,3714000,3715000,3716000,3717000,3718000,3719000,3720000,3721000,3722000,3723000,3724000,3725000,3726000,3727000,3728000,3729000,3730000,3731000,3732000,3733000,3734000,3735000,3736000,3737000,3738000,3739000,3740000,3741000,3742000,3743000,3744000,3745000,3746000,3747000,3748000,3749000,3750000,3751000,3752000,3753000,3754000,3755000,3756000,3757000,3758000,3759000,3760000,3761000,3762000,3763000,3764000,3765000,3766000,3767000,3768000,3769000,3770000,3771000,3772000,3773000,3774000,3775000,3776000,3777000,3778000,3779000,3780000,3781000,3782000,3783000,3784000,3785000,3786000,3787000,3788000,3789000,3790000,3791000,3792000,3793000,3794000,3795000,3796000,3797000,3798000,3799000,3800000,3801000,3802000,3803000,3804000,3805000,3806000,3807000,3808000,3809000,3810000,3811000,3812000,3813000,3814000,3815000,3816000,3817000,3818000,3819000,3820000,3821000,3822000,3823000,3824000,3825000,3826000,3827000,3828000,3829000,3830000,3831000,3832000,3833000,3834000,3835000,3836000,3837000,3838000,3839000,3840000,3841000,3842000,3843000,3844000,3845000,3846000,3847000,3848000,3849000,3850000,3851000,3852000,3853000,3854000,3855000,3856000,3857000,3858000,3859000,3860000,3861000,3862000,3863000,3864000,3865000,3866000,3867000,3868000,3869000,3870000,3871000,3872000,3873000,3874000,3875000,3876000,3877000,3878000,3879000,3880000,3881000,3882000,3883000,3884000,3885000,3886000,3887000,3888000,3889000,3890000,3891000,3892000,3893000,3894000,3895000,3896000,3897000,3898000,3899000,3900000,3901000,3902000,3903000,3904000,3905000,3906000,3907000,3908000,3909000,3910000,3911000,3912000,3913000,3914000,3915000,3916000,3917000,3918000,3919000,3920000,3921000,3922000,3923000,3924000,3925000,3926000,3927000,3928000,3929000,3930000,3931000,3932000,3933000,3934000,3935000,3936000,3937000,3938000,3939000,3940000,3941000,3942000,3943000,3944000,3945000,3946000,3947000,3948000,3949000,3950000,3951000,3952000,3953000,3954000,3955000,3956000,3957000,3958000,3959000,3960000,3961000,3962000,3963000,3964000,3965000,3966000,3967000,3968000,3969000,3970000,3971000,3972000,3973000,3974000,3975000,3976000,3977000,3978000,3979000,3980000,3981000,3982000,3983000,3984000,3985000,3986000,3987000,3988000,3989000,3990000,3991000,3992000,3993000,3994000,3995000,3996000,3997000,3998000,3999000,4000000}

PL/SQL procedure successfully completed.

SQL>
SQL> drop table if exists array_test_10;

Succeed.

SQL> create table array_test_10 (f1 int[]);

Succeed.

SQL> select distinct f1 from array_test_10;

CT-00601, Sql syntax error: unexpected array expression
SQL> select * from (select distinct f1 from array_test_10);

CT-00601, Sql syntax error: unexpected array expression
SQL> select f1 from array_test_10 minus select f1 from array_test_10;

CT-00601, Sql syntax error: unexpected array expression
SQL> select f1 from array_test_10 union select f1 from array_test_10;

CT-00601, Sql syntax error: unexpected array expression
SQL> 
SQL> declare
  2 var int[];
  3 x int;
  4 begin
  5 var:=array[1,2];
  6 x:=var[1];
  7 dbe_output.print_line(var[2]);
  8 END;
  9 /

2

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2 var int[];
  3 x int;
  4 begin
  5 x:=var[2];
  6 dbe_output.print_line(X);
  7 END;
  8 /



PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2 var int[];
  3 x int;
  4 begin
  5 var[1]:=2;
  6 END;
  7 /

CT-00932, [5:1] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[5:1] CT-00606, Inconsistent datatypes, expected ARRAY - got BINARY_INTEGER

SQL> 
SQL> declare
  2 var int[];
  3 x int;
  4 begin
  5 dbe_output.print_line(var[2:4]);
  6 END;
  7 /



PL/SQL procedure successfully completed.

SQL> 
SQL> CREATE OR REPLACE PROCEDURE MYPROC1_test1217(F1 INT[]) AS
  2 var int[];
  3 x int;
  4 begin
  5 var:=F1;
  6 x:=var[1];
  7 dbe_output.print_line(var[2]);
  8 dbe_output.print_line(F1[2]);
  9 END;
 10 /

Succeed.

SQL> 
SQL> CALL MYPROC1_test1217(ARRAY[1,2]);

2
2

PL/SQL procedure successfully completed.

SQL> 
SQL> CALL MYPROC1_test1217(ARRAY[1]);




PL/SQL procedure successfully completed.

SQL> 
SQL> CALL MYPROC1_test1217(1);

CT-00932, [1:2] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[1:19] CT-00606, Inconsistent datatypes, expected ARRAY - got BINARY_INTEGER

SQL> 
SQL> CREATE OR REPLACE FUNCTION MYFUNC1_test1217(F1 INT[]) RETURN INT[] AS
  2 var int[];
  3 x int;
  4 begin
  5 var:=F1;
  6 x:=var[1];
  7 RETURN VAR;
  8 END;
  9 /

Succeed.

SQL> 
SQL> DECLARE
  2 X INT[];
  3 Y INT:=1;
  4 BEGIN
  5 X:=MYFUNC1_test1217(Y);
  6 dbe_output.print_line(X);
  7 END;
  8 /

CT-00932, [5:1] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[5:21] CT-00606, Inconsistent datatypes, expected ARRAY - got BINARY_INTEGER

SQL> 
SQL> DECLARE
  2 X INT[];
  3 Z INT[];
  4 Y INT:=1;
  5 BEGIN
  6 X:=MYFUNC1_test1217(Z);
  7 dbe_output.print_line(X);
  8 Z:=ARRAY[1,2,3];
  9 X:=MYFUNC1_test1217(Z);
 10 dbe_output.print_line(X);
 11 dbe_output.print_line(X[5]);
 12 END;
 13 /


{1,2,3}


PL/SQL procedure successfully completed.

SQL> 
SQL> DECLARE
  2 X INT[];
  3 Z INT[];
  4 Y INT:=1;
  5 Q INT:=1;
  6 BEGIN
  7 Q:=MYFUNC1_test1217(Z);
  8 dbe_output.print_line(Q);
  9 Z:=ARRAY[1,2,3];
 10 Q:=MYFUNC1_test1217(Z);
 11 dbe_output.print_line(Q);
 12 END;
 13 /


CT-00932, [10:1] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[10:1] CT-00606, Inconsistent datatypes, expected BINARY_INTEGER - got ARRAY

SQL> 
SQL> 
SQL> CREATE OR REPLACE FUNCTION MYFUNC2_test1217(F1 INT[]) RETURN INT AS
  2 var int[];
  3 x int;
  4 begin
  5 var:=F1;
  6 x:=var[1];
  7 RETURN VAR;
  8 END;
  9 /

Succeed.

SQL> 
SQL> DECLARE
  2 X INT[];
  3 Y INT:=1;
  4 BEGIN
  5 Y:=MYFUNC2_test1217(X);
  6 dbe_output.print_line(Y);
  7 END;
  8 /



PL/SQL procedure successfully completed.

SQL> 
SQL> DECLARE
  2 Z INT[]:=ARRAY[1,234,5];
  3 Y INT:=1;
  4 BEGIN
  5 Y:=MYFUNC2_test1217(Z);
  6 dbe_output.print_line(Y);
  7 END;
  8 /

CT-00932, [5:1] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[4:1] PL/SQL(SYS.MYFUNC2_TEST1217) terminated with execute errors
[7:1] CT-00606, Inconsistent datatypes, expected BINARY_INTEGER - got ARRAY

SQL> 
SQL> CREATE OR REPLACE FUNCTION MYFUNC3_test1217(F1 INT[]) RETURN INT AS
  2 x int;
  3 begin
  4 RETURN F1[3];
  5 END;
  6 /

Succeed.

SQL> 
SQL> DECLARE
  2 Z INT[]:=ARRAY[1,234,5];
  3 A INT[];
  4 Y INT:=1;
  5 BEGIN
  6 A:=MYFUNC3_test1217(Z);
  7 dbe_output.print_line(A[1]);
  8 END;
  9 /

CT-00932, [6:1] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[6:1] CT-00606, Inconsistent datatypes, expected ARRAY - got BINARY_INTEGER

SQL> 
SQL> DECLARE
  2 Z INT[]:=ARRAY[1,234,5];
  3 A INT[];
  4 Y INT:=1;
  5 BEGIN
  6 Y:=MYFUNC3_test1217(Z);
  7 dbe_output.print_line(Y);
  8 Y:=MYFUNC3_test1217(Z[1:2]);
  9 dbe_output.print_line(Y);
 10 Z:=ARRAY[5,7];
 11 Y:=MYFUNC3_test1217(Z);
 12 dbe_output.print_line(Y);
 13 Z:=ARRAY[1,2,3,4,5,6,7,8,9];
 14 A:=Z[5:8];
 15 dbe_output.print_line(A);
 16 dbe_output.print_line(A[1]);
 17 dbe_output.print_line(A[5]);
 18 Y:=MYFUNC3_test1217(Z[5:8]);
 19 dbe_output.print_line(Y);
 20 END;
 21 /

5


{5,6,7,8}
5

7

PL/SQL procedure successfully completed.

SQL> create or replace function funcdsh(f1 int) return int[] as
  2 f2 int[];
  3 Begin
  4 F2:=array[3,9,13];
  5 return f2;
  6 end;
  7 /

Succeed.

SQL> select funcdsh(1) from sys_dummy;

FUNCDSH(1)                                                      
----------------------------------------------------------------
{3,9,13}                                                        

1 rows fetched.

SQL> 
SQL> create or replace function funcdsh4(f1 int) return int as
  2 f2 int[];
  3 Begin
  4 F2:=array[3,9,13];
  5 return f2[1];
  6 end;
  7 /

Succeed.

SQL> select funcdsh4(1) from sys_dummy;

FUNCDSH4(1) 
------------
3           

1 rows fetched.

SQL> 
SQL> create or replace function funcdsh2(f1 int) return int[] as
  2 f2 int[];
  3 x int;
  4 Begin
  5 F2:=array[3,9,13];
  6 x:=f2[2];
  7 return x;
  8 end;
  9 /

Succeed.
Warning:
PL/SQL(SYS.FUNCDSH2) terminated with compiling errors
[7:8] PLC-00606 Inconsistent datatypes, expected ARRAY - got BINARY_INTEGER


SQL> select funcdsh2(1) from sys_dummy;

CT-00944, [1:8]PL/SQL(SYS.FUNCDSH2) terminated with compiling errors
[7:8] PLC-00606 Inconsistent datatypes, expected ARRAY - got BINARY_INTEGER

SQL> 
SQL> create or replace function funcdsh3(f1 int) return int as
  2 f2 int[];
  3 Begin
  4 F2:=array[3,9,13];
  5 return f2;
  6 end;
  7 /

Succeed.

SQL> select funcdsh3(1) from sys_dummy;

CT-00932, [3:1] PL/SQL(SYS.FUNCDSH3) terminated with execute errors
[5:1] CT-00606, Inconsistent datatypes, expected BINARY_INTEGER - got ARRAY

SQL> 
SQL> declare
  2 f2 int[];
  3 x int;
  4 Begin
  5 F2:=array[3,9,13];
  6 x:=f2[2];
  7 F2[1]:=1;
  8 dbe_output.print_line(x);
  9 end;
 10 /

CT-00932, [7:1] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[7:1] CT-00606, Inconsistent datatypes, expected ARRAY - got BINARY_INTEGER

SQL> 
SQL> declare
  2 f2 int[]:=array[3,4,13];
  3 begin
  4 for i in f2[1]..f2[2]
  5 loop
  6 dbe_output.print_line(i);
  7 end loop;
  8 end;
  9 /

3
4

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2 f2 int[]:=array[3,4,13];
  3 x f2%type;
  4 begin
  5 x:=f2;
  6 dbe_output.print_line(x);
  7 end;
  8 /

CT-00944, PL/SQL(SYS.ANONYMOUS BLOCK) terminated with compiling errors
[3:3] PLC-01304 Data type 'ARRAY' is not supported

SQL> 
SQL> declare
  2 f2 int[]:=array[3,4,13];
  3 x f2[1]%type;
  4 begin
  5 x:=f2[1];
  6 end;
  7 /

CT-00944, PL/SQL(SYS.ANONYMOUS BLOCK) terminated with compiling errors
[3:3] PLC-00601 Sql syntax error: datatype expected, but got 'f2'

SQL> 
SQL> create or replace function funcdsh5(f1 varchar,f2 f1%type) return int[] as
  2 f3 int[];
  3 x int;
  4 Begin
  5 F2:=array[3,9,13];
  6 x:=f2[2];
  7 return f2;
  8 end;
  9 /

Succeed.
Warning:
PL/SQL(SYS.FUNCDSH5) terminated with compiling errors
[1:51] PLC-00941 'SYS.f1'.TYPE was not a variable, column, or attribute.


SQL> 
SQL> create or replace function funcdsh5(f1 varchar,f2 f1%rowtype) return int[] as
  2 f3 int[];
  3 x int;
  4 Begin
  5 F2:=array[3,9,13];
  6 x:=f2[2];
  7 return f2;
  8 end;
  9 /

Succeed.
Warning:
PL/SQL(SYS.FUNCDSH5) terminated with compiling errors
[1:51] PLC-00942 With ROWTYPE attribute, 'F1' must name a table, cursor or cursor-variable


SQL> 
SQL> declare
  2 type mytype is table of int[];
  3 x mytype;
  4 y x%type;
  5 begin
  6 x:=mytype(array[1,2]);
  7 dbe_output.print_line(x);
  8 end;
  9 /

CT-00944, PL/SQL(SYS.ANONYMOUS BLOCK) terminated with compiling errors
[2:25] PLC-01304 Data type 'ARRAY' is not supported

SQL> 
SQL> create table tb_test_arr_pl(f1 int[],f2 int);

Succeed.

SQL> insert into tb_test_arr_pl values(array[1,2,3],10);

1 rows affected.

SQL> declare
  2 x int[];
  3 y int;
  4 begin
  5 select f2 into x[1] from tb_test_arr_pl limit 1;
  6 dbe_output.print_line(x);
  7 end;
  8 /

CT-00932, [5:1] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[5:1] CT-01323, select into an array element is not supported in PL

SQL> declare
  2 x int[];
  3 y int;
  4 begin
  5 select f1 into x from tb_test_arr_pl limit 1;
  6 dbe_output.print_line(x);
  7 end;
  8 /

{1,2,3}

PL/SQL procedure successfully completed.

SQL> drop table if exists tb_test_arr_pl;

Succeed.

SQL> drop function if exists funcdsh5;

Succeed.

SQL> drop function if exists funcdsh4;

Succeed.

SQL> drop function if exists funcdsh3;

Succeed.

SQL> drop function if exists funcdsh2;

Succeed.

SQL> drop function if exists funcdsh;

Succeed.

SQL> drop FUNCTION if exists MYFUNC3_test1217;

Succeed.

SQL> drop FUNCTION if exists MYFUNC1_test1217;

Succeed.

SQL> drop FUNCTION if exists MYFUNC2_test1217;

Succeed.

SQL> drop PROCEDURE if exists MYPROC1_test1217;

Succeed.

SQL> --20210531
SQL> drop table if exists staffs_f;

Succeed.

SQL> create table staffs_f(id number(6), c_id int[], d date default current_timestamp);

Succeed.

SQL> ALTER TABLE staffs_f ADD CONSTRAINT CON check(array_length(c_id)>2);

Succeed.

SQL> select array_length(c_id) from staffs_f;

ARRAY_LENGTH(C_ID)
------------------

0 rows fetched.

SQL> drop table staffs_f;

Succeed.

SQL> --20210626
SQL> select array_agg(c) from (select cast(1.2 as number(10,5)) c from sys_dummy union all select cast(1.23 as number(10,4)) from sys_dummy union all select cast(1.233 as varchar(10)) from sys_dummy);

ARRAY_AGG(C)
----------------------------------------------------------------
{1.2,1.23,1.233}

1 rows fetched.


