

SQL> ---
SQL> --- SHRINK SPACE TEST
SQL> ---
SQL> CREATE TABLESPACE SHK_TBLSPC DATAFILE 'SHK001' SIZE 32M AUTOEXTEND ON NEXT 32M;

Succeed.

SQL> 
SQL> --SHRINK SYNTAX TEST
SQL> DROP TABLE IF EXISTS SHK_SYNTAX_001;

Succeed.

SQL> CREATE TABLE SHK_SYNTAX_001 (ID INT) TABLESPACE SHK_TBLSPC;

Succeed.

SQL> ALTER TABLE SHK_SYNTAX_001 SHRINK SPACE;

Succeed.

SQL> ALTER TABLE SHK_SYNTAX_001 SHRINK SPACE COMPACT;

Succeed.

SQL> ALTER TABLE SHK_SYNTAX_001 SHRINK SPACE COMPACT CASCADE;

CT-00101, Capability: shrink cascade not supported
SQL> ALTER TABLE SHK_SYNTAX_001 SHRINK SPACE CASCADE;

CT-00101, Capability: shrink cascade not supported
SQL> DROP TABLE SHK_SYNTAX_001 PURGE;

Succeed.

SQL> 
SQL> --[SHRINK SPACE COMPACT] NORMAL TABLE WITH NO DATA
SQL> DROP TABLE IF EXISTS SHK_SPC_CMP_001 PURGE;

Succeed.

SQL> CREATE TABLE SHK_SPC_CMP_001 (ID INT, NAME CHAR(200) DEFAULT 'SHRINK TEST', TT CLOB DEFAULT 'SHRINK CLOB') TABLESPACE SHK_TBLSPC;

Succeed.

SQL> ALTER TABLE SHK_SPC_CMP_001 SHRINK SPACE COMPACT;

Succeed.

SQL> 
SQL> --[SHRINK SPACE COMPACT] NORMAL TABLE WITH DATA, NO PAGE HOLE
SQL> INSERT INTO SHK_SPC_CMP_001 (ID) SELECT ID FROM SYS.SYS_TABLES WHERE USER# = 0 AND ID < 40; 

40 rows affected.

SQL> ALTER TABLE SHK_SPC_CMP_001 SHRINK SPACE COMPACT;

Succeed.

SQL> 
SQL> --[SHRINK SPACE COMPACT] NORMAL TABLE WITH DATA, HAS HOLE PAGE
SQL> DELETE FROM SHK_SPC_CMP_001 WHERE ID <= 20 OR ID >= 30;

31 rows affected.

SQL> ALTER TABLE SHK_SPC_CMP_001 SHRINK SPACE COMPACT;

Succeed.

SQL> 
SQL> DELETE FROM SHK_SPC_CMP_001;

9 rows affected.

SQL> ALTER TABLE SHK_SPC_CMP_001 SHRINK SPACE COMPACT;

Succeed.

SQL> 
SQL> --[SHRINK SPACE COMPACT] NORMAL TABLE WITH UNIQUE INDEX
SQL> CREATE UNIQUE INDEX SHK_SPC_CMP_IDX_001 ON SHK_SPC_CMP_001 (ID) TABLESPACE SHK_TBLSPC;;

Succeed.

ZS-00001: Nothing in SQL buffer to run
SQL> INSERT INTO SHK_SPC_CMP_001 (ID) SELECT ID FROM SYS.SYS_TABLES WHERE USER# = 0 AND ID < 40; 

40 rows affected.

SQL> 
SQL> DELETE FROM SHK_SPC_CMP_001 WHERE ID <= 20 OR ID >= 30;

31 rows affected.

SQL> ALTER TABLE SHK_SPC_CMP_001 SHRINK SPACE COMPACT;

Succeed.

SQL> 
SQL> DELETE FROM SHK_SPC_CMP_001;

9 rows affected.

SQL> ALTER TABLE SHK_SPC_CMP_001 SHRINK SPACE COMPACT;

Succeed.

SQL> 
SQL> DROP TABLE SHK_SPC_CMP_001 PURGE;

Succeed.

SQL> 
SQL> --[SHRINK SPACE COMPACT] PARTITION TABLE WITH NO DATA
SQL> DROP TABLE IF EXISTS SHK_SPC_CMP_002 PURGE;

Succeed.

SQL> CREATE TABLE SHK_SPC_CMP_002 (ID INT, NAME CHAR(200) DEFAULT 'SHRINK TEST', TT CLOB DEFAULT 'SHRINK CLOB')
  2 PARTITION BY RANGE (ID)
  3 (
  4 PARTITION P1 VALUES LESS THAN (15),
  5 PARTITION P2 VALUES LESS THAN (25),
  6 PARTITION P3 VALUES LESS THAN (MAXVALUE)
  7 )
  8 TABLESPACE SHK_TBLSPC;

Succeed.

SQL> ALTER TABLE SHK_SPC_CMP_002 SHRINK SPACE COMPACT;

Succeed.

SQL> 
SQL> --[SHRINK SPACE COMPACT] PARTITION TABLE WITH DATA, NO PAGE HOLE
SQL> INSERT INTO SHK_SPC_CMP_002 (ID) SELECT ID FROM SYS.SYS_TABLES WHERE USER# = 0 AND ID < 40; 

40 rows affected.

SQL> ALTER TABLE SHK_SPC_CMP_002 SHRINK SPACE COMPACT;

Succeed.

SQL> 
SQL> --[SHRINK SPACE COMPACT] PARTITION TABLE WITH DATA, HAS HOLE PAGE
SQL> DELETE FROM SHK_SPC_CMP_002 WHERE ID <= 20 OR ID >= 30;

31 rows affected.

SQL> ALTER TABLE SHK_SPC_CMP_002 SHRINK SPACE COMPACT;

Succeed.

SQL> 
SQL> DELETE FROM SHK_SPC_CMP_002;

9 rows affected.

SQL> ALTER TABLE SHK_SPC_CMP_002 SHRINK SPACE COMPACT;

Succeed.

SQL> 
SQL> --[SHRINK SPACE COMPACT] PARTITION TABLE WITH UNIQUE INDEX
SQL> CREATE UNIQUE INDEX SHK_SPC_CMP_IDX_002 ON SHK_SPC_CMP_002 (ID) LOCAL TABLESPACE SHK_TBLSPC;;

Succeed.

ZS-00001: Nothing in SQL buffer to run
SQL> INSERT INTO SHK_SPC_CMP_002 (ID) SELECT ID FROM SYS.SYS_TABLES WHERE USER# = 0 AND ID < 40; 

40 rows affected.

SQL> 
SQL> DELETE FROM SHK_SPC_CMP_002 WHERE ID <= 20 OR ID >= 30;

31 rows affected.

SQL> ALTER TABLE SHK_SPC_CMP_002 SHRINK SPACE COMPACT;

Succeed.

SQL> 
SQL> DELETE FROM SHK_SPC_CMP_002;

9 rows affected.

SQL> ALTER TABLE SHK_SPC_CMP_002 SHRINK SPACE COMPACT;

Succeed.

SQL> 
SQL> DROP TABLE SHK_SPC_CMP_002 PURGE;

Succeed.

SQL> 
SQL> --[SHRINK SPACE] NORMAL TABLE WITH NO DATA
SQL> DROP TABLE IF EXISTS SHK_SPC_001 PURGE;

Succeed.

SQL> CREATE TABLE SHK_SPC_001 (ID INT, NAME CHAR(200) DEFAULT 'SHRINK TEST', TT CLOB DEFAULT 'SHRINK CLOB') TABLESPACE SHK_TBLSPC;

Succeed.

SQL> ALTER TABLE SHK_SPC_001 SHRINK SPACE;

Succeed.

SQL> 
SQL> --[SHRINK SPACE] NORMAL TABLE WITH DATA, NO PAGE HOLE
SQL> INSERT INTO SHK_SPC_001 (ID) SELECT ID FROM SYS.SYS_TABLES WHERE USER# = 0 AND ID < 40; 

40 rows affected.

SQL> ALTER TABLE SHK_SPC_001 SHRINK SPACE;

Succeed.

SQL> 
SQL> --[SHRINK SPACE] NORMAL TABLE WITH DATA, HAS HOLE PAGE
SQL> DELETE FROM SHK_SPC_001 WHERE ID <= 20 OR ID >= 30;

31 rows affected.

SQL> ALTER TABLE SHK_SPC_001 SHRINK SPACE;

Succeed.

SQL> 
SQL> DELETE FROM SHK_SPC_001;

9 rows affected.

SQL> ALTER TABLE SHK_SPC_001 SHRINK SPACE;

Succeed.

SQL> 
SQL> --[SHRINK SPACE] NORMAL TABLE WITH UNIQUE INDEX
SQL> CREATE UNIQUE INDEX SHK_SPC_IDX_001 ON SHK_SPC_001 (ID) TABLESPACE SHK_TBLSPC;;

Succeed.

ZS-00001: Nothing in SQL buffer to run
SQL> INSERT INTO SHK_SPC_001 (ID) SELECT ID FROM SYS.SYS_TABLES WHERE USER# = 0 AND ID < 40; 

40 rows affected.

SQL> 
SQL> DELETE FROM SHK_SPC_001 WHERE ID <= 20 OR ID >= 30;

31 rows affected.

SQL> ALTER TABLE SHK_SPC_001 SHRINK SPACE;

Succeed.

SQL> 
SQL> DELETE FROM SHK_SPC_001;

9 rows affected.

SQL> ALTER TABLE SHK_SPC_001 SHRINK SPACE;

Succeed.

SQL> 
SQL> DROP TABLE SHK_SPC_001 PURGE;

Succeed.

SQL> 
SQL> --[SHRINK SPACE] PARTITION TABLE WITH NO DATA
SQL> DROP TABLE IF EXISTS SHK_SPC_002 PURGE;

Succeed.

SQL> CREATE TABLE SHK_SPC_002 (ID INT, NAME CHAR(200) DEFAULT 'SHRINK TEST', TT CLOB DEFAULT 'SHRINK CLOB')
  2 PARTITION BY RANGE (ID)
  3 (
  4 PARTITION P1 VALUES LESS THAN (15),
  5 PARTITION P2 VALUES LESS THAN (25),
  6 PARTITION P3 VALUES LESS THAN (MAXVALUE)
  7 )
  8 TABLESPACE SHK_TBLSPC;

Succeed.

SQL> ALTER TABLE SHK_SPC_002 SHRINK SPACE;

Succeed.

SQL> 
SQL> --[SHRINK SPACE] PARTITION TABLE WITH DATA, NO PAGE HOLE
SQL> INSERT INTO SHK_SPC_002 (ID) SELECT ID FROM SYS.SYS_TABLES WHERE USER# = 0 AND ID < 40; 

40 rows affected.

SQL> ALTER TABLE SHK_SPC_002 SHRINK SPACE;

Succeed.

SQL> 
SQL> --[SHRINK SPACE] PARTITION TABLE WITH DATA, HAS HOLE PAGE
SQL> DELETE FROM SHK_SPC_002 WHERE ID <= 20 OR ID >= 30;

31 rows affected.

SQL> ALTER TABLE SHK_SPC_002 SHRINK SPACE;

Succeed.

SQL> 
SQL> DELETE FROM SHK_SPC_002;

9 rows affected.

SQL> ALTER TABLE SHK_SPC_002 SHRINK SPACE;

Succeed.

SQL> 
SQL> --[SHRINK SPACE] PARTITION TABLE WITH UNIQUE INDEX
SQL> CREATE UNIQUE INDEX SHK_SPC_IDX_002 ON SHK_SPC_002 (ID) LOCAL TABLESPACE SHK_TBLSPC;;

Succeed.

ZS-00001: Nothing in SQL buffer to run
SQL> INSERT INTO SHK_SPC_002 (ID) SELECT ID FROM SYS.SYS_TABLES WHERE USER# = 0 AND ID < 40; 

40 rows affected.

SQL> 
SQL> DELETE FROM SHK_SPC_002 WHERE ID <= 20 OR ID >= 30;

31 rows affected.

SQL> ALTER TABLE SHK_SPC_002 SHRINK SPACE;

Succeed.

SQL> 
SQL> DELETE FROM SHK_SPC_002;

9 rows affected.

SQL> ALTER TABLE SHK_SPC_002 SHRINK SPACE;

Succeed.

SQL> 
SQL> DROP TABLE SHK_SPC_002 PURGE;

Succeed.

SQL> 
SQL> --[SHRINK SPACE AFTER COMPACT] NORMAL TABLE
SQL> DROP TABLE IF EXISTS SHK_SPC_AFT_CMP_001 PURGE;

Succeed.

SQL> CREATE TABLE SHK_SPC_AFT_CMP_001 (ID INT, NAME CHAR(200) DEFAULT 'SHRINK TEST', TT CLOB DEFAULT 'SHRINK CLOB') TABLESPACE SHK_TBLSPC;

Succeed.

SQL> CREATE UNIQUE INDEX SHK_SPC_AFT_CMP_IDX_001 ON SHK_SPC_AFT_CMP_001 (ID) TABLESPACE SHK_TBLSPC;;

Succeed.

ZS-00001: Nothing in SQL buffer to run
SQL> 
SQL> INSERT INTO SHK_SPC_AFT_CMP_001 (ID) SELECT ID FROM SYS.SYS_TABLES WHERE USER# = 0 AND ID < 40;

40 rows affected.

SQL> DELETE FROM SHK_SPC_AFT_CMP_001 WHERE ID <= 20 OR ID >= 30;

31 rows affected.

SQL> 
SQL> ALTER TABLE SHK_SPC_AFT_CMP_001 SHRINK SPACE COMPACT;

Succeed.

SQL> ALTER TABLE SHK_SPC_AFT_CMP_001 SHRINK SPACE COMPACT;

Succeed.

SQL> ALTER TABLE SHK_SPC_AFT_CMP_001 SHRINK SPACE;

Succeed.

SQL> ALTER TABLE SHK_SPC_AFT_CMP_001 SHRINK SPACE;

Succeed.

SQL> 
SQL> DROP TABLE SHK_SPC_AFT_CMP_001 PURGE;

Succeed.

SQL> 
SQL> --[SHRINK SPACE AFTER COMPACT] PARTITION TABLE
SQL> DROP TABLE IF EXISTS SHK_SPC_AFT_CMP_002 PURGE;

Succeed.

SQL> CREATE TABLE SHK_SPC_AFT_CMP_002 (ID INT, NAME CHAR(200) DEFAULT 'SHRINK TEST', TT CLOB DEFAULT 'SHRINK CLOB')
  2 PARTITION BY RANGE (ID)
  3 (
  4 PARTITION P1 VALUES LESS THAN (15),
  5 PARTITION P2 VALUES LESS THAN (25),
  6 PARTITION P3 VALUES LESS THAN (MAXVALUE)
  7 )
  8 TABLESPACE SHK_TBLSPC;

Succeed.

SQL> CREATE UNIQUE INDEX SHK_SPC_AFT_CMP_IDX_002 ON SHK_SPC_AFT_CMP_002 (ID) TABLESPACE SHK_TBLSPC;

Succeed.

SQL> 
SQL> INSERT INTO SHK_SPC_AFT_CMP_002 (ID) SELECT ID FROM SYS.SYS_TABLES WHERE USER# = 0 AND ID < 40;

40 rows affected.

SQL> DELETE FROM SHK_SPC_AFT_CMP_002 WHERE ID <= 20 OR ID >= 30;

31 rows affected.

SQL> 
SQL> ALTER TABLE SHK_SPC_AFT_CMP_002 SHRINK SPACE COMPACT;

Succeed.

SQL> ALTER TABLE SHK_SPC_AFT_CMP_002 SHRINK SPACE COMPACT;

Succeed.

SQL> ALTER TABLE SHK_SPC_AFT_CMP_002 SHRINK SPACE;

Succeed.

SQL> ALTER TABLE SHK_SPC_AFT_CMP_002 SHRINK SPACE;

Succeed.

SQL> 
SQL> DROP TABLE SHK_SPC_AFT_CMP_002 PURGE;

Succeed.

SQL> 
SQL> --[SHRINK CHAIN TABLE] SHRINK CHAIN ROW
SQL> DROP TABLE IF EXISTS SHK_CHAIN_TABLE_1;

Succeed.

SQL> CREATE TABLE SHK_CHAIN_TABLE_1(ID INT, A VARCHAR(4000), B VARCHAR(4000), C VARCHAR(4000), D VARCHAR(4000)) TABLESPACE SHK_TBLSPC;

Succeed.

SQL> 
SQL> INSERT INTO SHK_CHAIN_TABLE_1 VALUES(1, LPAD('A',4000,'A'), LPAD('B',4000,'B'), LPAD('C',4000,'C'),'D');

1 rows affected.

SQL> INSERT INTO SHK_CHAIN_TABLE_1 VALUES(2, LPAD('A',4000,'A'), LPAD('B',4000,'B'), LPAD('C',4000,'C'),'D');

1 rows affected.

SQL> INSERT INTO SHK_CHAIN_TABLE_1 VALUES(3, LPAD('A',4000,'A'), LPAD('B',4000,'B'), LPAD('C',4000,'C'),'D');

1 rows affected.

SQL> INSERT INTO SHK_CHAIN_TABLE_1 VALUES(4, LPAD('A',4000,'A'), LPAD('B',4000,'B'), LPAD('C',4000,'C'),'D');

1 rows affected.

SQL> INSERT INTO SHK_CHAIN_TABLE_1 VALUES(5, LPAD('A',4000,'A'), LPAD('B',4000,'B'), LPAD('C',4000,'C'),'D');

1 rows affected.

SQL> INSERT INTO SHK_CHAIN_TABLE_1 SELECT * FROM SHK_CHAIN_TABLE_1;

5 rows affected.

SQL> INSERT INTO SHK_CHAIN_TABLE_1 SELECT * FROM SHK_CHAIN_TABLE_1;

10 rows affected.

SQL> INSERT INTO SHK_CHAIN_TABLE_1 SELECT * FROM SHK_CHAIN_TABLE_1;

20 rows affected.

SQL> 
SQL> DELETE FROM SHK_CHAIN_TABLE_1 WHERE ID != 4;

32 rows affected.

SQL> ALTER TABLE SHK_CHAIN_TABLE_1 SHRINK SPACE COMPACT;

Succeed.

SQL> ALTER TABLE SHK_CHAIN_TABLE_1 SHRINK SPACE;

Succeed.

SQL> 
SQL> DROP TABLE SHK_CHAIN_TABLE_1 PURGE;

Succeed.

SQL> 
SQL> --[SHRINK CHAIN TABLE] SHRINK CHAIN ROW
SQL> DROP TABLE IF EXISTS SHK_CHAIN_TABLE_2;

Succeed.

SQL> CREATE TABLE SHK_CHAIN_TABLE_2(ID INT, A VARCHAR(4000), B VARCHAR(4000), C VARCHAR(4000), D VARCHAR(4000)) TABLESPACE SHK_TBLSPC;

Succeed.

SQL> 
SQL> INSERT INTO SHK_CHAIN_TABLE_2 VALUES(1, LPAD('A',4000,'A'), LPAD('B',4000,'B'), LPAD('C',4000,'C'),'D');

1 rows affected.

SQL> INSERT INTO SHK_CHAIN_TABLE_2 VALUES(2, LPAD('A',4000,'A'), LPAD('B',4000,'B'), LPAD('C',4000,'C'),'D');

1 rows affected.

SQL> INSERT INTO SHK_CHAIN_TABLE_2 VALUES(3, LPAD('A',4000,'A'), LPAD('B',4000,'B'), LPAD('C',4000,'C'),'D');

1 rows affected.

SQL> INSERT INTO SHK_CHAIN_TABLE_2 VALUES(4, LPAD('A',4000,'A'), LPAD('B',4000,'B'), LPAD('C',4000,'C'),'D');

1 rows affected.

SQL> INSERT INTO SHK_CHAIN_TABLE_2 VALUES(5, LPAD('A',4000,'A'), LPAD('B',4000,'B'), LPAD('C',4000,'C'),'D');

1 rows affected.

SQL> INSERT INTO SHK_CHAIN_TABLE_2 SELECT * FROM SHK_CHAIN_TABLE_2;

5 rows affected.

SQL> INSERT INTO SHK_CHAIN_TABLE_2 SELECT * FROM SHK_CHAIN_TABLE_2;

10 rows affected.

SQL> INSERT INTO SHK_CHAIN_TABLE_2 SELECT * FROM SHK_CHAIN_TABLE_2;

20 rows affected.

SQL> 
SQL> DELETE FROM SHK_CHAIN_TABLE_2 WHERE ID != 5;

32 rows affected.

SQL> ALTER TABLE SHK_CHAIN_TABLE_2 SHRINK SPACE COMPACT;

Succeed.

SQL> ALTER TABLE SHK_CHAIN_TABLE_2 SHRINK SPACE;

Succeed.

SQL> 
SQL> DROP TABLE SHK_CHAIN_TABLE_2 PURGE;

Succeed.

SQL> 
SQL> --[SHRINK WITH FLASHBACK]
SQL> DROP TABLE IF EXISTS SHK_SPC_FB_1;

Succeed.

SQL> CREATE TABLE SHK_SPC_FB_1 (ID INT PRIMARY KEY) TABLESPACE SHK_TBLSPC;

Succeed.

SQL> INSERT INTO SHK_SPC_FB_1 VALUES (10);

1 rows affected.

SQL> INSERT INTO SHK_SPC_FB_1 VALUES (20);

1 rows affected.

SQL> INSERT INTO SHK_SPC_FB_1 VALUES (30);

1 rows affected.

SQL> 
SQL> TRUNCATE TABLE SHK_SPC_FB_1;

Succeed.

SQL> 
SQL> INSERT INTO SHK_SPC_FB_1 VALUES (10);

1 rows affected.

SQL> ALTER TABLE SHK_SPC_FB_1 SHRINK SPACE COMPACT;

Succeed.

SQL> FLASHBACK TABLE SHK_SPC_FB_1 TO BEFORE TRUNCATE FORCE;

Succeed.

SQL> 
SQL> TRUNCATE TABLE SHK_SPC_FB_1;

Succeed.

SQL> 
SQL> INSERT INTO SHK_SPC_FB_1 VALUES (10);

1 rows affected.

SQL> ALTER TABLE SHK_SPC_FB_1 SHRINK SPACE;

Succeed.

SQL> FLASHBACK TABLE SHK_SPC_FB_1 TO BEFORE TRUNCATE FORCE;

CT-00732, The table definition of SYS.SHK_SPC_FB_1 has been changed.
SQL> 
SQL> DROP TABLE SHK_SPC_FB_1;

Succeed.

SQL> 
SQL> DROP TABLE IF EXISTS SHK_SPC_FB_2;

Succeed.

SQL> CREATE TABLE SHK_SPC_FB_2 (ID INT, FF INT)
  2 PARTITION BY RANGE (ID)
  3 (
  4 PARTITION P1 VALUES LESS THAN (20),
  5 PARTITION P2 VALUES LESS THAN (MAXVALUE)
  6 ) TABLESPACE SHK_TBLSPC;

Succeed.

SQL> CREATE UNIQUE INDEX IDX_SHK_SPC_FB_2_1 ON SHK_SPC_FB_2(ID) LOCAL TABLESPACE SHK_TBLSPC;

Succeed.

SQL> CREATE UNIQUE INDEX IDX_SHK_SPC_FB_2_2 ON SHK_SPC_FB_2(FF) TABLESPACE SHK_TBLSPC;

Succeed.

SQL> 
SQL> INSERT INTO SHK_SPC_FB_2 VALUES (10, 10);

1 rows affected.

SQL> INSERT INTO SHK_SPC_FB_2 VALUES (20, 20);

1 rows affected.

SQL> INSERT INTO SHK_SPC_FB_2 VALUES (30, 30);

1 rows affected.

SQL> 
SQL> ALTER TABLE SHK_SPC_FB_2 TRUNCATE PARTITION P1;

Succeed.

SQL> 
SQL> INSERT INTO SHK_SPC_FB_2 VALUES (10, 10);

CT-00823, Index IDX_SHK_SPC_FB_2_2 is unusable, need to rebuild index first.
SQL> 
SQL> ALTER INDEX IDX_SHK_SPC_FB_2_2 ON SHK_SPC_FB_2 REBUILD;

Succeed.

SQL> 
SQL> INSERT INTO SHK_SPC_FB_2 VALUES (10, 10);

1 rows affected.

SQL> ALTER TABLE SHK_SPC_FB_2 SHRINK SPACE COMPACT;

Succeed.

SQL> FLASHBACK TABLE SHK_SPC_FB_2 PARTITION P1 TO BEFORE TRUNCATE FORCE;

CT-01110, The operation flashback force when there is unique index was not allowed

SQL> 
SQL> ALTER TABLE SHK_SPC_FB_2 TRUNCATE PARTITION P1;

Succeed.

SQL> 
SQL> INSERT INTO SHK_SPC_FB_2 VALUES (10, 10);

CT-00823, Index IDX_SHK_SPC_FB_2_2 is unusable, need to rebuild index first.
SQL> 
SQL> ALTER INDEX IDX_SHK_SPC_FB_2_2 ON SHK_SPC_FB_2 REBUILD;

Succeed.

SQL> 
SQL> INSERT INTO SHK_SPC_FB_2 VALUES (10, 10);

1 rows affected.

SQL> ALTER TABLE SHK_SPC_FB_2 SHRINK SPACE;

Succeed.

SQL> FLASHBACK TABLE SHK_SPC_FB_2 PARTITION P1 TO BEFORE TRUNCATE FORCE;

CT-00732, The table definition of SYS.SHK_SPC_FB_2 has been changed.
SQL> 
SQL> DROP TABLE SHK_SPC_FB_2;

Succeed.

SQL> 
SQL> --CLEANUP
SQL> PURGE TABLESPACE SHK_TBLSPC;

Succeed.

SQL> ALTER SYSTEM CHECKPOINT;

Succeed.

SQL> 
SQL> --dts DTS2018091410246
SQL> drop table if exists hzy_shrink0; 

Succeed.

SQL> CREATE TABLE hzy_shrink0(C_ID INT,
  2 C_D_ID bigint NOT NULL,
  3 C_W_ID tinyint unsigned NOT NULL,
  4 C_FIRST VARCHAR(64) NOT NULL,
  5 C_MIDDLE CHAR(2),
  6 C_LAST VARCHAR(64) NOT NULL,
  7 C_STREET_1 VARCHAR(20) NOT NULL,
  8 C_STREET_2 VARCHAR(8000),
  9 C_CITY VARCHAR(20) NOT NULL,
 10 C_STATE CHAR(2) NOT NULL,
 11 C_ZIP CHAR(9) NOT NULL,
 12 C_PHONE CHAR(16) NOT NULL,
 13 C_SINCE TIMESTAMP,
 14 C_CREDIT CHAR(2) NOT NULL,
 15 C_CREDIT_LIM NUMERIC(12,2),
 16 C_DISCOUNT NUMERIC(4,4),
 17 C_BALANCE NUMERIC(12,2),
 18 C_YTD_PAYMENT REAL NOT NULL,
 19 C_PAYMENT_CNT NUMBER NOT NULL,
 20 C_DELIVERY_CNT BOOL NOT NULL,
 21 C_END DATE NOT NULL,
 22 C_VCHAR VARCHAR(1000),
 23 C_DATA LONG,
 24 C_TEXT BLOB,
 25 C_CLOB CLOB,
 26 primary key (c_id,c_d_id,c_w_id));

Succeed.

SQL> insert into  hzy_shrink0 select 0,0,0,'AA'||'is0cmvls','OE','AA'||'BAR0BARBAR','bkili'||'0'||'fcxcle'||'0','QNGGSMNTECC348493214893542NPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECC348493214893542NPFZCSYKXXYQNGGSMNTECC348493214893542NPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECC348493214893542NPFZCSYKXXYSQNGGSMNTECC348493214893542NPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECC348493214893542NPFZCSYKXXYSQNGGSMNTECC348493214893542NPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECC348493214893542NPFZCSYKXXYSQNGGSMNTECC348493214893542NPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECC348493214893542NPFZCSYKXXYSS','dyf'||'0'||'rya'||'0','uq',4800||'0',940||'0'||205||'0','2017-12-31 10:51:47','GC',50000.0,0.4361328,-10.0,10.0,1,true,'2017-12-31 10:51:47','QVLDETANRBRBURBMZQUJSHOQNGGSMNTECC348493214893542NPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECC348493214893542NPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECC348493214893542NPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECC348493214893542NPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECC348493214893542NPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECC348493214893542NPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECC348493214893542NPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECC348493214893542NPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECC348493214893542NPFZCSYKXXYSCDSFQVLDETANRBRBURBMZQUJSHOQNGGSMNTECC348493214893542NPFZCSYKXXYSCDSF'||

1 rows affected.

SQL> commit;

Succeed.

SQL> CREATE or replace procedure nebula_dml_interval_proc_001(startall int,endall int) as
  2 i INT;
  3 BEGIN
  4  if startall <= endall then
  5   FOR i IN startall..endall LOOP
  6         insert into hzy_shrink0 select c_id+i,c_d_id+i,c_w_id+i,'AA'||'iscmvls',c_middle,'AA'||'BAR'||i||'ddBARBAR',c_street_1,c_street_2,c_city,c_state,c_zip,c_phone,c_since+i,c_credit,c_credit_lim,c_discount,c_balance,c_ytd_payment,c_payment_cnt,c_delivery_cnt,c_end+i,c_vchar,c_data,c_text,c_clob from hzy_shrink0 where c_id=0;commit;
  7   END LOOP;
  8  end if;
  9 END;
 10 /

Succeed.

SQL> call nebula_dml_interval_proc_001(1,100);

PL/SQL procedure successfully completed.

SQL> delete from hzy_shrink0 where c_id=0;

1 rows affected.

SQL> commit;

Succeed.

SQL> select count(*) from hzy_shrink0;

COUNT(*)            
--------------------
100                 

1 rows fetched.

SQL> 
SQL> drop table if exists hzy_shrink1;

Succeed.

SQL> CREATE TABLE hzy_shrink1(C_ID INT,C_D_ID bigint NOT NULL,C_W_ID tinyint unsigned NOT NULL,C_FIRST VARCHAR(64) NOT NULL,C_MIDDLE CHAR(2),C_LAST VARCHAR(64) NOT NULL,C_STREET_1 VARCHAR(20) NOT NULL,C_STREET_2 VARCHAR(8000),C_CITY VARCHAR(20) NOT NULL,C_STATE CHAR(2) NOT NULL,C_ZIP CHAR(9) NOT NULL,C_PHONE CHAR(16) NOT NULL,C_SINCE TIMESTAMP,C_CREDIT CHAR(2) NOT NULL,C_CREDIT_LIM NUMERIC(12,2),C_DISCOUNT NUMERIC(4,4),C_BALANCE NUMERIC(12,2),C_YTD_PAYMENT REAL NOT NULL,C_PAYMENT_CNT NUMBER NOT NULL,C_DELIVERY_CNT BOOL NOT NULL,C_END DATE NOT NULL,C_VCHAR VARCHAR(1000) NOT NULL,C_DATA LONG,C_TEXT BLOB,C_CLOB CLOB)PARTITION BY RANGE(C_ID)INTERVAL(100)(PARTITION PART_1 VALUES LESS THAN (201),PARTITION PART_2 VALUES LESS THAN (401),PARTITION PART_3 VALUES LESS THAN (601),PARTITION PART_4 VALUES LESS THAN (801),PARTITION PART_5 VALUES LESS THAN (1001),PARTITION PART_6 VALUES LESS THAN (1201),PARTITION PART_7 VALUES LESS THAN (1401),PARTITION PART_8 VALUES LESS THAN (1601),PARTITION PART_9 VALUES LESS THAN (1801));

Succeed.

SQL> insert into hzy_shrink1(c_id,c_d_id,c_w_id,c_first,c_middle,c_last,c_street_1,c_street_2,c_city,c_state,c_zip,c_phone,c_since,c_credit,c_credit_lim,c_discount,c_balance,c_ytd_payment,c_payment_cnt,c_delivery_cnt,c_end,c_vchar,c_data,c_text,c_clob) select c_id,c_d_id,c_w_id,c_first,c_middle,c_last,c_street_1,c_street_2,c_city,c_state,c_zip,c_phone,c_since,c_credit,c_credit_lim,c_discount,c_balance,c_ytd_payment,c_payment_cnt,c_delivery_cnt,c_end,c_vchar,c_data,c_text,c_clob from hzy_shrink0;

100 rows affected.

SQL> alter table hzy_shrink1  add column  v_long long default lpad('sbfacwjdafgjyjhfpyxcpmnutcjxrbfgxxbm',500,'yxcfgdsgtcsdsjxrbxxbm');

Succeed.

SQL> update hzy_shrink1 set v_long=null;

100 rows affected.

SQL> alter table hzy_shrink1 shrink space;

Succeed.

SQL> 
SQL> --DTS2018120404387
SQL> CREATE TABLESPACE SHK_SPC_MAP DATAFILE 'SHKMAP' SIZE 32M AUTOEXTEND ON NEXT 32M;

Succeed.

SQL> CREATE TABLE SHK_MAP(order_index int, xx varchar(8000)) TABLESPACE SHK_SPC_MAP;

Succeed.

SQL> declare 
  2 i integer;
  3 begin
  4 for i in 1 .. 1019 loop
  5 insert into SHK_MAP values(1, lpad(' ', 8000, 'ab'));
  6 end loop;
  7 commit;
  8 end;
  9 /

PL/SQL procedure successfully completed.

SQL> insert into SHK_MAP values(2, lpad(' ', 6028, 'b'));

1 rows affected.

SQL> insert into SHK_MAP values(3, lpad(' ', 500, 'c'));

1 rows affected.

SQL> insert into SHK_MAP values(3, lpad(' ', 500, 'c'));

1 rows affected.

SQL> insert into SHK_MAP values(4, lpad(' ', 300, 'd'));

1 rows affected.

SQL> commit;

Succeed.

SQL> delete from SHK_MAP where order_index = 3;

2 rows affected.

SQL> commit;

Succeed.

SQL> ALTER TABLE SHK_MAP SHRINK SPACE;

Succeed.

SQL> commit;

Succeed.

SQL> insert into SHK_MAP values(5, lpad(' ', 7000, 'b'));

1 rows affected.

SQL> 
SQL> --ST1224-883
SQL> CREATE TABLE mini_table(c_id int, xx varchar(8000)) TABLESPACE SHK_SPC_MAP;

Succeed.

SQL> insert into mini_table values(1, lpad(' ', 8000, 'a'));

1 rows affected.

SQL> insert into mini_table values(2, lpad(' ', 8000, 'a'));

1 rows affected.

SQL> insert into mini_table values(3, lpad(' ', 8000, 'a'));

1 rows affected.

SQL> commit;

Succeed.

SQL> ALTER TABLE mini_table SHRINK SPACE;

Succeed.

SQL> insert into mini_table values(4, lpad(' ', 8000, 'a'));

1 rows affected.

SQL> insert into mini_table values(5, lpad(' ', 8000, 'a'));

1 rows affected.

SQL> insert into mini_table values(6, lpad(' ', 8000, 'a'));

1 rows affected.

SQL> insert into mini_table values(7, lpad(' ', 8000, 'a'));

1 rows affected.

SQL> select c_id from mini_table;

C_ID        
------------
1           
2           
3           
4           
5           
6           
7           

7 rows fetched.

SQL> 
SQL> DROP TABLESPACE SHK_SPC_MAP INCLUDING CONTENTS AND DATAFILES;

Succeed.

SQL> 
SQL> --shrink ratio
SQL> drop table if exists shrink_ratio;

Succeed.

SQL> create table shrink_ratio(i int,name varchar(8000));

Succeed.

SQL> create unique index shrink_ratio_idx on shrink_ratio(i);

Succeed.

SQL> declare 
  2 i integer;
  3 begin
  4 for i in 1 .. 10000 loop
  5 insert into shrink_ratio values(i, lpad(' ', 8000, 'ab'));
  6 end loop;
  7 commit;
  8 end;
  9 /

PL/SQL procedure successfully completed.

SQL> delete from shrink_ratio where mod(i,3)=0;

3333 rows affected.

SQL> alter table shrink_ratio shrink space percent -1;

CT-00601, [1:47]Sql syntax error: number expected but - found
SQL> alter table shrink_ratio shrink space percent 0;

CT-00601, Sql syntax error: the number must be an integer between 1 and 100
SQL> alter table shrink_ratio shrink space percent 101;

CT-00601, Sql syntax error: the number must be an integer between 1 and 100
SQL> alter table shrink_ratio shrink space percent 1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111;

CT-00601, Sql syntax error: the number must be an integer between 1 and 100
SQL> alter table shrink_ratio shrink space percent 50.5;

CT-00601, Sql syntax error: the number must be an integer between 1 and 100
SQL> alter table shrink_ratio shrink space compact percent 0;

CT-00601, Sql syntax error: the number must be an integer between 1 and 100
SQL> alter table shrink_ratio shrink space compact percent 101;

CT-00601, Sql syntax error: the number must be an integer between 1 and 100
SQL> alter table shrink_ratio shrink space compact percent 50.5;

CT-00601, Sql syntax error: the number must be an integer between 1 and 100
SQL> alter table shrink_ratio shrink space percent 50;

Succeed.

SQL> alter table shrink_ratio shrink space percent;

CT-00601, [1:46]Sql syntax error: number expected but  found
SQL> alter table shrink_ratio shrink space percent 100 100;

CT-00601, [1:51]Sql syntax error: expected end but 100 found
SQL> drop table shrink_ratio;

Succeed.

SQL> 
SQL> create tablespace test_space datafile 'test_datafile_1' size 8M, 'test_datafile_2' size 1G extent autoallocate encryption;

Succeed.

SQL> create table test_space(c_id int,c_d_id  bigint NOT NULL,c_w_id tinyint unsigned NOT NULL,c_first varchar(40) NOT NULL,c_long long,c_last varchar(50) NOT NULL,c_street_1 varchar(20) NOT NULL,c_street_2 varchar(20),c_city varchar(20) NOT NULL,c_state char(2) NOT NULL,c_zip char(9) NOT NULL,c_phone char(40) NOT NULL,c_since timestamp,c_credit char(2) NOT NULL,c_credit_lim numeric(12,2),c_discount numeric(4,4),c_balance numeric(12,2),c_ytd_payment real NOT NULL,c_payment_cnt number NOT NULL,c_delivery_cnt bool NOT NULL,c_end date NOT NULL,c_binary binary(1500),c_varbinary varbinary(7000),c_vchar varchar2(7000),c_raw raw(7000),c_blob blob,c_clob clob,c_image image,primary key(c_id,c_d_id,c_w_id))tablespace test_space;

Succeed.

SQL> insert into test_space select 0,0,0,'AA'||'is0cmvls',lpad('lonADFGgabcd1234VS',500,'abceEFG234styop'),'AA'||'BAR0BARBAR','bkilifcxcle'||'0','pmbwaj','dyfa','uq',4800||'0',940||'0'||205||'0','2017-12-30 10:51:47','GC',50000.0,0.4361328,-10.0,10.0,1,true,'2017-12-30 10:51:47',lpad('abcdefGHopqrs1234',500,'1234EDAVDSergad'),lpad('varbinary1234RAFTDS',500,'VARBIN6789ARYabceef'),lpad('1234ABCDRFGHopqrstuvwxyz8',500,'ABfgCDefgh'),lpad('abcdef1234456789',500,'123456789abcdef'),lpad('124324543256546324554354325',8000,'7687389015'),lpad('sbfacwjpbvpgthpyxcpmnutcjdfaxrbxxbm',8000,'yxcpmnutcjxrbxxbm'),lpad('image1234RASRabdeff',8000,'yxcfgdsgtcjxrbxxbm');

1 rows affected.

SQL> commit;

Succeed.

SQL> CREATE or replace procedure proc_test_space(startall int,endall int) as
  2 i INT;
  3 BEGIN
  4   FOR i IN startall..endall LOOP
  5         insert into test_space select c_id+i,c_d_id+i,c_w_id+100000*i,'AA'||'is'||i||'cmvls',c_long,'AA'||'BAR'||i||'ddBARBAR',c_street_1,c_street_2,c_city,c_state,c_zip,'940'||i||'205'||i,c_since+i,c_credit,c_credit_lim,c_discount,c_balance,c_ytd_payment,c_payment_cnt,c_delivery_cnt,c_end+i,c_binary,c_varbinary,c_vchar,c_raw,c_blob,c_clob,c_image from test_space where c_id=0;commit;
  6   END LOOP;
  7 END;
  8 /

Succeed.

SQL> call proc_test_space(1,1000);

PL/SQL procedure successfully completed.

SQL> create index index_test_space on test_space(c_id);

Succeed.

SQL> 
SQL> --delete+shrink
SQL> delete from test_space;

1001 rows affected.

SQL> alter tablespace test_space shrink space keep 2M;

CT-00134, Assert raised, expect: has error info at :0

SQL> 
SQL> --drop index+shrink
SQL> drop index index_test_space on test_space;

Succeed.

SQL> alter tablespace test_space shrink space keep 2M;

CT-00134, Assert raised, expect: has error info at :0

SQL> 
SQL> --drop table+shrink
SQL> drop table test_space;

Succeed.

SQL> alter tablespace test_space shrink space keep 2M;

CT-00134, Assert raised, expect: has error info at :0

SQL> 
SQL> --truncate table+shrink
SQL> drop tablespace test_space including contents and datafiles;

Succeed.

SQL> create tablespace test_space datafile 'test_datafile_1' size 8M, 'test_datafile_2' size 1G extent autoallocate encryption;

Succeed.

SQL> create table test_space(c_id int,c_d_id  bigint NOT NULL,c_w_id tinyint unsigned NOT NULL,c_first varchar(40) NOT NULL,c_long long,c_last varchar(50) NOT NULL,c_street_1 varchar(20) NOT NULL,c_street_2 varchar(20),c_city varchar(20) NOT NULL,c_state char(2) NOT NULL,c_zip char(9) NOT NULL,c_phone char(40) NOT NULL,c_since timestamp,c_credit char(2) NOT NULL,c_credit_lim numeric(12,2),c_discount numeric(4,4),c_balance numeric(12,2),c_ytd_payment real NOT NULL,c_payment_cnt number NOT NULL,c_delivery_cnt bool NOT NULL,c_end date NOT NULL,c_binary binary(1500),c_varbinary varbinary(7000),c_vchar varchar2(7000),c_raw raw(7000),c_blob blob,c_clob clob,c_image image,primary key(c_id,c_d_id,c_w_id)) partition by range(c_id) (partition p1 values less than(MAXVALUE))tablespace test_space;

Succeed.

SQL> insert into test_space select 0,0,0,'AA'||'is0cmvls',lpad('lonADFGgabcd1234VS',500,'abceEFG234styop'),'AA'||'BAR0BARBAR','bkilifcxcle'||'0','pmbwaj','dyfa','uq',4800||'0',940||'0'||205||'0','2017-12-30 10:51:47','GC',50000.0,0.4361328,-10.0,10.0,1,true,'2017-12-30 10:51:47',lpad('abcdefGHopqrs1234',500,'1234EDAVDSergad'),lpad('varbinary1234RAFTDS',500,'VARBIN6789ARYabceef'),lpad('1234ABCDRFGHopqrstuvwxyz8',500,'ABfgCDefgh'),lpad('abcdef1234456789',500,'123456789abcdef'),lpad('124324543256546324554354325',8000,'7687389015'),lpad('sbfacwjpbvpgthpyxcpmnutcjdfaxrbxxbm',8000,'yxcpmnutcjxrbxxbm'),lpad('image1234RASRabdeff',8000,'yxcfgdsgtcjxrbxxbm');

1 rows affected.

SQL> commit;

Succeed.

SQL> call proc_test_space(1,1000);

PL/SQL procedure successfully completed.

SQL> truncate table test_space;

Succeed.

SQL> alter tablespace test_space shrink space keep 2M;

CT-00134, Assert raised, expect: has error info at :0

SQL> 
SQL> --truncate partition + shrink
SQL> drop tablespace test_space including contents and datafiles;

Succeed.

SQL> create tablespace test_space datafile 'test_datafile_1' size 8M, 'test_datafile_2' size 1G extent autoallocate encryption;

Succeed.

SQL> create table test_space(c_id int,c_d_id  bigint NOT NULL,c_w_id tinyint unsigned NOT NULL,c_first varchar(40) NOT NULL,c_long long,c_last varchar(50) NOT NULL,c_street_1 varchar(20) NOT NULL,c_street_2 varchar(20),c_city varchar(20) NOT NULL,c_state char(2) NOT NULL,c_zip char(9) NOT NULL,c_phone char(40) NOT NULL,c_since timestamp,c_credit char(2) NOT NULL,c_credit_lim numeric(12,2),c_discount numeric(4,4),c_balance numeric(12,2),c_ytd_payment real NOT NULL,c_payment_cnt number NOT NULL,c_delivery_cnt bool NOT NULL,c_end date NOT NULL,c_binary binary(1500),c_varbinary varbinary(7000),c_vchar varchar2(7000),c_raw raw(7000),c_blob blob,c_clob clob,c_image image,primary key(c_id,c_d_id,c_w_id)) partition by range(c_id) (partition p1 values less than(MAXVALUE))tablespace test_space;

Succeed.

SQL> insert into test_space select 0,0,0,'AA'||'is0cmvls',lpad('lonADFGgabcd1234VS',500,'abceEFG234styop'),'AA'||'BAR0BARBAR','bkilifcxcle'||'0','pmbwaj','dyfa','uq',4800||'0',940||'0'||205||'0','2017-12-30 10:51:47','GC',50000.0,0.4361328,-10.0,10.0,1,true,'2017-12-30 10:51:47',lpad('abcdefGHopqrs1234',500,'1234EDAVDSergad'),lpad('varbinary1234RAFTDS',500,'VARBIN6789ARYabceef'),lpad('1234ABCDRFGHopqrstuvwxyz8',500,'ABfgCDefgh'),lpad('abcdef1234456789',500,'123456789abcdef'),lpad('124324543256546324554354325',8000,'7687389015'),lpad('sbfacwjpbvpgthpyxcpmnutcjdfaxrbxxbm',8000,'yxcpmnutcjxrbxxbm'),lpad('image1234RASRabdeff',8000,'yxcfgdsgtcjxrbxxbm');

1 rows affected.

SQL> commit;

Succeed.

SQL> call proc_test_space(1,1000);

PL/SQL procedure successfully completed.

SQL> alter table test_space truncate partition p1;

Succeed.

SQL> alter tablespace test_space shrink space keep 2M;

CT-00134, Assert raised, expect: has error info at :0

SQL> drop tablespace test_space including contents and datafiles;

Succeed.

SQL> drop procedure proc_test_space;

Succeed.

SQL> 
SQL> CREATE TABLESPACE TEST_SPC_ALTER DATAFILE 'test_df_alter' size 200M;

Succeed.

SQL> ALTER DATABASE  DATAFILE 'test_df_alter' RESIZE 50M;

Succeed.

SQL> ALTER DATABASE  DATAFILE 'test_df_alter' RESIZE 300M;

Succeed.


SQL> 


