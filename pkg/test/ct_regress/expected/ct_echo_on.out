

SQL> set echo on

ON
SQL> @./sql/ct_testsql.sql
@./sql/ct_testsql.sql

SQL> 
SQL> 
SQL> 
SQL> select * from dual
  2 where dual.x > 1;
select * from dual
where dual.x > 1

CT-00601, [2:7]Sql syntax error: invalid column name X
SQL> select * from dual;
select * from dual

DUMMY
-----
X    

1 rows fetched.

SQL> select * from duall;
select * from duall

CT-00843, [1:15]The table or view SYS.DUALL does not exist.
SQL> show
show

Show failed.

Usage:
SHOW AUTO[COMMIT]
SHOW EXITC[OMMIT]
SHOW CHARSET
SHOW HEA[DING]
SHOW SERVEROUT[PUT]
SHOW TRIMS[POOL]
SHOW SPOO[L]
SHOW LIN[ESIZE]
SHOW NUM[WIDTH]
SHOW PAGES[IZE]
SHOW TIM[ING]
SHOW FEED[BACK]
SHOW ECHO
SHOW VER[IFY]
SHOW TERM[OUT]
SHOW NEWP[AGE]
SHOW COLSEP
SHOW LONG
SHOW PARAMETER[S] [PARAMETER_NAME]
SHOW DEFINE
SHOW OPLOG
SHOW CONNECT[_TIMEOUT]
SHOW SOCKET[_TIMEOUT]
SHOW CTSQL_SSL[_MODE|_CA|_CERT|_KEY|_CRL|_KEY_PASSWD|_CIPHER]
SHOW UDS_SERVER_PATH
SHOW UDS_CLIENT_PATH
SHOW BIND
SHOW SHARD_RW_FLAG
SHOW HIST[ORY]
SHOW AUTOTRACE
SHOW TENANT_NAME
SHOW TENANT_ID
SHOW CREATE TABLE

SQL> set
set

Set failed.

Usage:
SET AUTO[COMMIT] {ON|OFF}
SET EXITC[OMMIT] {ON|OFF}
SET CHARSET {GBK|UTF8}
SET HEA[DING] {ON|OFF}
SET SERVEROUT[PUT] {ON|OFF}
SET TRIMS[POOOL] {ON|OFF}
SET LIN[ESIZE] {80|n}
SET NUM[WIDTH] {10|n}
SET PAGES[IZE] {14|n}
SET TIM[ING] {ON|OFF}
SET FEED[BACK] {n|ON|OFF}
SET ECHO {ON|OFF}
SET VER[IFY] {ON|OFF}
SET TERM[OUT] {ON|OFF}
SET NEWP[AGE] {1|n|NONE}
SET COLSEP {'text'|"text"|text}
SET LONG {n}
SET DEFINE {ON|OFF|ONE CHAR}
SET OPLOG {ON|OFF}
SET CONNECT[_TIMEOUT] {-1|n}
SET SOCKET[_TIMEOUT] {-1|n}
SET CTSQL_SSL_CA [=] {ca_file_path}
SET CTSQL_SSL_CERT [=] {cert_file_path}
SET CTSQL_SSL_KEY [=] {key_file_path}
SET CTSQL_SSL_MODE [=] {DISABLED|PREFERRED|REQUIRED|VERIFY_CA|VERIFY_FULL}
SET CTSQL_SSL_CRL [=] {crl_file_path}
SET CTSQL_SSL_KEY_PASSWD [=] {ssl_keypwd}
SET CTSQL_SSL_CIPHER [=] {ssl_cipher}
SET UDS_SERVER_PATH [=] {path}
SET UDS_CLIENT_PATH [=] {path}
SET BIND {ON|OFF}
SET SHARD_RW_FLAG {0|1|2|3}
SET HIST[ORY] {ON|OFF}
SET AUTOTRACE {ON|OFF|TRACEONLY}

SQL> 
SQL> drop function if exists f_tab_qr_getrownum1111; 
drop function if exists f_tab_qr_getrownum1111

Succeed.

SQL> create or replace funcTioN f_tab_qr_getrownum1111
  2 (
  3     str_in_schema       in            varchar2,
  4     str_in_tablename    in            varchar2,
  5     str_in_version      in            varchar2,
  6     i_o_rownum          out           integer
  7 )
  8 return integer
  9 as
 10 begin    
 11     if (str_in_version = '0') then--default
 12         i_o_rownum := null;    
 13     elsif (str_in_version = '1') then--music
 14         begin
 15             execute immediate 'select num_rows from ' || str_in_schema || '.t_tablestat where table_name = :1' into i_o_rownum using str_in_tablename;
 16         exception
 17             when no_data_found then
 18                 i_o_rownum := null;
 19         end;    
 20     elsif (str_in_version in ('2', '4')) then--telecom usdp
 21         begin
 22             execute immediate 'select num_rows from ' || str_in_schema || '.usdp$table_stats where table_name = :1' into i_o_rownum using str_in_tablename;
 23         exception
 24             when no_data_found then
 25                 i_o_rownum := null;
 26         end;
 27     end if;
 28     return 1;
 29 exception
 30     when others then
 31         p_in_procexceptionlog('');
 32         return 0;
 33 end f_tab_qr_getrownum1111;
 34 /
create or replace funcTioN f_tab_qr_getrownum1111
(
    str_in_schema       in            varchar2,
    str_in_tablename    in            varchar2,
    str_in_version      in            varchar2,
    i_o_rownum          out           integer
)
return integer
as
begin    
    if (str_in_version = '0') then--default
        i_o_rownum := null;    
    elsif (str_in_version = '1') then--music
        begin
            execute immediate 'select num_rows from ' || str_in_schema || '.t_tablestat where table_name = :1' into i_o_rownum using str_in_tablename;
        exception
            when no_data_found then
                i_o_rownum := null;
        end;    
    elsif (str_in_version in ('2', '4')) then--telecom usdp
        begin
            execute immediate 'select num_rows from ' || str_in_schema || '.usdp$table_stats where table_name = :1' into i_o_rownum using str_in_tablename;
        exception
            when no_data_found then
                i_o_rownum := null;
        end;
    end if;
    return 1;
exception
    when others then
        p_in_procexceptionlog('');
        return 0;
end f_tab_qr_getrownum1111;
/


Succeed.
Warning:
PL/SQL(SYS.F_TAB_QR_GETROWNUM1111) terminated with compiling errors
[31:9] PLC-00828 procedure SYS.P_IN_PROCEXCEPTIONLOG does not exist
[34:1] PLC-00954 more text expected but EOF found


SQL> --创建一个函数，用于把指定的SQL结果输出到指定的文件
SQL> drop function if exists f_exportdata_ronghe_201209; 
drop function if exists f_exportdata_ronghe_201209

Succeed.

SQL> create or replace procedure f_exportdata_ronghe_201209
  2 (
  3     str_in_sql                in            varchar2,
  4     str_in_filename           in            varchar2,
  5     str_o_error               out           varchar2,
  6     i_o_result                out           integer
  7 )
  8 as
  9     cur_l_result      pkg_type.refcur;
 10     str_l_record      varchar2(4000);
 11     v_file_handle     utl_file.file_type;
 12 begin
 13     v_file_handle := utl_file.fopen('EXPORT_DATA_PATH', str_in_filename, 'w');
 14 
 15     i_o_result := 1;
 16 
 17     open cur_l_result for str_in_sql;
 18 
 19     loop
 20         fetch cur_l_result into str_l_record;
 21 
 22         exit when cur_l_result%notfound;
 23 
 24         utl_file.put_line(v_file_handle, str_l_record);
 25 
 26     end loop;
 27 
 28     close cur_l_result;
 29     utl_file.fclose(v_file_handle);
 30     return;
 31     
 32 exception
 33     when others then      
 34         str_o_error := substr(SQL_ERR_MSG,1,2000);
 35         i_o_result := 0;    
 36         return; 
 37 end f_exportdata_ronghe_201209;
 38 /   
create or replace procedure f_exportdata_ronghe_201209
(
    str_in_sql                in            varchar2,
    str_in_filename           in            varchar2,
    str_o_error               out           varchar2,
    i_o_result                out           integer
)
as
    cur_l_result      pkg_type.refcur;
    str_l_record      varchar2(4000);
    v_file_handle     utl_file.file_type;
begin
    v_file_handle := utl_file.fopen('EXPORT_DATA_PATH', str_in_filename, 'w');

    i_o_result := 1;

    open cur_l_result for str_in_sql;

    loop
        fetch cur_l_result into str_l_record;

        exit when cur_l_result%notfound;

        utl_file.put_line(v_file_handle, str_l_record);

    end loop;

    close cur_l_result;
    utl_file.fclose(v_file_handle);
    return;
    
exception
    when others then      
        str_o_error := substr(SQL_ERR_MSG,1,2000);
        i_o_result := 0;    
        return; 
end f_exportdata_ronghe_201209;
/   


Succeed.
Warning:
PL/SQL(SYS.F_EXPORTDATA_RONGHE_201209) terminated with compiling errors
[9:23] PLC-00601 Sql syntax error: datatype expected, but got 'pkg_type'


SQL> 
SQL> 
SQL> 
SQL> 

SQL> set echo off

OFF
SQL> @./sql/ct_testsql.sql

SQL> 
SQL> 
SQL> 
SQL> select * from dual
  2 where dual.x > 1;

CT-00601, [2:7]Sql syntax error: invalid column name X
SQL> select * from dual;

DUMMY
-----
X    

1 rows fetched.

SQL> select * from duall;

CT-00843, [1:15]The table or view SYS.DUALL does not exist.
SQL> show

Show failed.

Usage:
SHOW AUTO[COMMIT]
SHOW EXITC[OMMIT]
SHOW CHARSET
SHOW HEA[DING]
SHOW SERVEROUT[PUT]
SHOW TRIMS[POOL]
SHOW SPOO[L]
SHOW LIN[ESIZE]
SHOW NUM[WIDTH]
SHOW PAGES[IZE]
SHOW TIM[ING]
SHOW FEED[BACK]
SHOW ECHO
SHOW VER[IFY]
SHOW TERM[OUT]
SHOW NEWP[AGE]
SHOW COLSEP
SHOW LONG
SHOW PARAMETER[S] [PARAMETER_NAME]
SHOW DEFINE
SHOW OPLOG
SHOW CONNECT[_TIMEOUT]
SHOW SOCKET[_TIMEOUT]
SHOW CTSQL_SSL[_MODE|_CA|_CERT|_KEY|_CRL|_KEY_PASSWD|_CIPHER]
SHOW UDS_SERVER_PATH
SHOW UDS_CLIENT_PATH
SHOW BIND
SHOW SHARD_RW_FLAG
SHOW HIST[ORY]
SHOW AUTOTRACE
SHOW TENANT_NAME
SHOW TENANT_ID
SHOW CREATE TABLE

SQL> set

Set failed.

Usage:
SET AUTO[COMMIT] {ON|OFF}
SET EXITC[OMMIT] {ON|OFF}
SET CHARSET {GBK|UTF8}
SET HEA[DING] {ON|OFF}
SET SERVEROUT[PUT] {ON|OFF}
SET TRIMS[POOOL] {ON|OFF}
SET LIN[ESIZE] {80|n}
SET NUM[WIDTH] {10|n}
SET PAGES[IZE] {14|n}
SET TIM[ING] {ON|OFF}
SET FEED[BACK] {n|ON|OFF}
SET ECHO {ON|OFF}
SET VER[IFY] {ON|OFF}
SET TERM[OUT] {ON|OFF}
SET NEWP[AGE] {1|n|NONE}
SET COLSEP {'text'|"text"|text}
SET LONG {n}
SET DEFINE {ON|OFF|ONE CHAR}
SET OPLOG {ON|OFF}
SET CONNECT[_TIMEOUT] {-1|n}
SET SOCKET[_TIMEOUT] {-1|n}
SET CTSQL_SSL_CA [=] {ca_file_path}
SET CTSQL_SSL_CERT [=] {cert_file_path}
SET CTSQL_SSL_KEY [=] {key_file_path}
SET CTSQL_SSL_MODE [=] {DISABLED|PREFERRED|REQUIRED|VERIFY_CA|VERIFY_FULL}
SET CTSQL_SSL_CRL [=] {crl_file_path}
SET CTSQL_SSL_KEY_PASSWD [=] {ssl_keypwd}
SET CTSQL_SSL_CIPHER [=] {ssl_cipher}
SET UDS_SERVER_PATH [=] {path}
SET UDS_CLIENT_PATH [=] {path}
SET BIND {ON|OFF}
SET SHARD_RW_FLAG {0|1|2|3}
SET HIST[ORY] {ON|OFF}
SET AUTOTRACE {ON|OFF|TRACEONLY}

SQL> 
SQL> drop function if exists f_tab_qr_getrownum1111; 

Succeed.

SQL> create or replace funcTioN f_tab_qr_getrownum1111
  2 (
  3     str_in_schema       in            varchar2,
  4     str_in_tablename    in            varchar2,
  5     str_in_version      in            varchar2,
  6     i_o_rownum          out           integer
  7 )
  8 return integer
  9 as
 10 begin    
 11     if (str_in_version = '0') then--default
 12         i_o_rownum := null;    
 13     elsif (str_in_version = '1') then--music
 14         begin
 15             execute immediate 'select num_rows from ' || str_in_schema || '.t_tablestat where table_name = :1' into i_o_rownum using str_in_tablename;
 16         exception
 17             when no_data_found then
 18                 i_o_rownum := null;
 19         end;    
 20     elsif (str_in_version in ('2', '4')) then--telecom usdp
 21         begin
 22             execute immediate 'select num_rows from ' || str_in_schema || '.usdp$table_stats where table_name = :1' into i_o_rownum using str_in_tablename;
 23         exception
 24             when no_data_found then
 25                 i_o_rownum := null;
 26         end;
 27     end if;
 28     return 1;
 29 exception
 30     when others then
 31         p_in_procexceptionlog('');
 32         return 0;
 33 end f_tab_qr_getrownum1111;
 34 /

Succeed.
Warning:
PL/SQL(SYS.F_TAB_QR_GETROWNUM1111) terminated with compiling errors
[31:9] PLC-00828 procedure SYS.P_IN_PROCEXCEPTIONLOG does not exist
[34:1] PLC-00954 more text expected but EOF found


SQL> --创建一个函数，用于把指定的SQL结果输出到指定的文件
SQL> drop function if exists f_exportdata_ronghe_201209; 

Succeed.

SQL> create or replace procedure f_exportdata_ronghe_201209
  2 (
  3     str_in_sql                in            varchar2,
  4     str_in_filename           in            varchar2,
  5     str_o_error               out           varchar2,
  6     i_o_result                out           integer
  7 )
  8 as
  9     cur_l_result      pkg_type.refcur;
 10     str_l_record      varchar2(4000);
 11     v_file_handle     utl_file.file_type;
 12 begin
 13     v_file_handle := utl_file.fopen('EXPORT_DATA_PATH', str_in_filename, 'w');
 14 
 15     i_o_result := 1;
 16 
 17     open cur_l_result for str_in_sql;
 18 
 19     loop
 20         fetch cur_l_result into str_l_record;
 21 
 22         exit when cur_l_result%notfound;
 23 
 24         utl_file.put_line(v_file_handle, str_l_record);
 25 
 26     end loop;
 27 
 28     close cur_l_result;
 29     utl_file.fclose(v_file_handle);
 30     return;
 31     
 32 exception
 33     when others then      
 34         str_o_error := substr(SQL_ERR_MSG,1,2000);
 35         i_o_result := 0;    
 36         return; 
 37 end f_exportdata_ronghe_201209;
 38 /   

Succeed.
Warning:
PL/SQL(SYS.F_EXPORTDATA_RONGHE_201209) terminated with compiling errors
[9:23] PLC-00601 Sql syntax error: datatype expected, but got 'pkg_type'


SQL> 
SQL> 
SQL> 
SQL> 

SQL> 


