

SQL> --DTS202007170479MTP0J00
SQL> ALTER SYSTEM SET EMPTY_STRING_AS_NULL = FALSE;

Succeed.

SQL> drop table if exists aa_csf;

Succeed.

SQL> create table aa_csf(a number, b varchar(10), c char(8000)) format csf;

Succeed.

SQL> insert into aa_csf values(0, '1', 'asdf');

1 rows affected.

SQL> update aa_csf set b = '';

1 rows affected.

SQL> select * from aa_csf where b = '';

A                                        B          C                                                               
---------------------------------------- ---------- ----------------------------------------------------------------
0                                                   asdf

1 rows fetched.

SQL> select count(*) from aa_csf where b is null;

COUNT(*)            
--------------------
0                   

1 rows fetched.

SQL> drop table if exists test;

Succeed.

SQL> create table test(name varchar(1000));

Succeed.

SQL> insert into test values('111');

1 rows affected.

SQL> commit;

Succeed.

SQL> update test set name = (select '' from sys_dummy) where name = '111';

1 rows affected.

SQL> drop table test;

Succeed.

SQL> ALTER SYSTEM SET EMPTY_STRING_AS_NULL = TRUE;

Succeed.

SQL> 
SQL> drop user if exists wanggang1 cascade;

Succeed.

SQL> create user wanggang1 identified by 'Changeme_123';

Succeed.

SQL> grant dba to wanggang1;

Succeed.

SQL> conn wanggang1/Changeme_123@127.0.0.1:1611

connected.

SQL> --base table  
SQL> drop table if exists aa;

Succeed.

SQL> create table aa(C_ID INT, C_PAYMENT_CNT_3 NUMBER(12,8), PRIMARY KEY (C_ID)) format csf;

Succeed.

SQL> create OR REPLACE PROCEDURE insert_into_aa(STARTNUM INT,ENDALL INT) IS
  2 I int :=1;
  3 begin
  4   for I in STARTNUM..ENDALL loop
  5     INSERT INTO aa SELECT I, (I+0.12345678) FROM SYS_DUMMY;
  6   end loop;
  7 end;
  8 /

Succeed.

SQL> call insert_into_aa(1,10);

PL/SQL procedure successfully completed.

SQL> select * from aa order by C_ID;

C_ID         C_PAYMENT_CNT_3                         
------------ ----------------------------------------
1            1.12345678                              
2            2.12345678                              
3            3.12345678                              
4            4.12345678                              
5            5.12345678                              
6            6.12345678                              
7            7.12345678                              
8            8.12345678                              
9            9.12345678                              
10           10.12345678                             

10 rows fetched.

SQL> --csf table
SQL> DROP TABLE IF EXISTS aa_csf;

Succeed.

SQL> CREATE TABLE aa_csf(C_ID INT, C_PAYMENT_CNT_3 NUMBER(12,8), PRIMARY KEY (C_ID)) 
  2 PARTITION BY LIST(C_PAYMENT_CNT_3)(PARTITION PART_1 VALUES (0,1),PARTITION PART_2 VALUES (2,3),PARTITION PART_3 VALUES (4,5),PARTITION PART_4 VALUES (6,7),PARTITION PART_5 VALUES (DEFAULT)) FORMAT CSF ;

Succeed.

SQL> INSERT INTO aa_csf SELECT * FROM aa;

10 rows affected.

SQL> UPDATE aa_csf SET C_PAYMENT_CNT_3=MOD(C_ID,10);

10 rows affected.

SQL> COMMIT;

Succeed.

SQL> select * from aa_csf order by C_ID;

C_ID         C_PAYMENT_CNT_3                         
------------ ----------------------------------------
1            1                                       
2            2                                       
3            3                                       
4            4                                       
5            5                                       
6            6                                       
7            7                                       
8            8                                       
9            9                                       
10           0                                       

10 rows fetched.

SQL> --asf table
SQL> DROP TABLE IF EXISTS aa_asf;

Succeed.

SQL> CREATE TABLE aa_asf(C_ID INT, C_PAYMENT_CNT_3 NUMBER(12,8), PRIMARY KEY (C_ID)) 
  2 PARTITION BY LIST(C_PAYMENT_CNT_3)(PARTITION PART_1 VALUES (0,1),PARTITION PART_2 VALUES (2,3),PARTITION PART_3 VALUES (4,5),PARTITION PART_4 VALUES (6,7),PARTITION PART_5 VALUES (DEFAULT)) ;

Succeed.

SQL> INSERT INTO aa_asf SELECT * FROM aa;

10 rows affected.

SQL> UPDATE aa_asf SET C_PAYMENT_CNT_3=MOD(C_ID,10);

10 rows affected.

SQL> COMMIT;

Succeed.

SQL> select * from aa_asf order by C_ID;

C_ID         C_PAYMENT_CNT_3                         
------------ ----------------------------------------
1            1                                       
2            2                                       
3            3                                       
4            4                                       
5            5                                       
6            6                                       
7            7                                       
8            8                                       
9            9                                       
10           0                                       

10 rows fetched.

SQL> select table_name,row_format from db_tables where owner = 'WANGGANG1' order by table_name;

TABLE_NAME                                                       ROW_FORMAT
---------------------------------------------------------------- ----------
AA                                                               CSF       
AA_ASF                                                           ASF       
AA_CSF                                                           CSF       

3 rows fetched.

SQL> 
SQL> conn sys/Huawei@123@127.0.0.1:1611

connected.

SQL> exp users=wanggang1 filetype=bin file='csf_wanggang1.bin';
Parsing export options ... 
Verify options ...
  verify schema ...
Starting export ...
Preparing to export ...
-- EXPORT TYPE = SCHEMA
-- EXPORT OBJECTS = WANGGANG1
-- FILE TYPE = BIN
-- DUMP FILE = csf_wanggang1.bin
-- LOG FILE = 
-- QUERY = ""
-- COMPRESS = N
-- CONSISTENT = N
-- CONTENT_MODE = ALL
-- SKIP_COMMENTS = N
-- FORCE = N
-- SKIP_ADD_DROP_TABLE = N
-- SKIP_TRIGGERS = N
-- QUOTE_NAMES = Y
-- TABLESPACE = N
-- COMMIT_BATCH = 1000
-- INSERT_BATCH = 1
-- FEEDBACK = 10000
-- PARALLEL = 0
-- TENANT = N
-- CREATE_USER = N
-- ROLE = N
-- GRANT = N
-- WITH_CR_MODE = N
-- WITH_FORMAT_CSF = Y
-- INDEX_PARTITIONS = N

Exporting schema WANGGANG1 ...
Exporting sequence of schema WANGGANG1 ...
Exporting profile of schema WANGGANG1 ...
Exporting type of schema WANGGANG1 ...
Exporting tables of schema WANGGANG1 ...
Reading table objects of WANGGANG1

The order of exporting table is:
TABLE NAME                                                       LEVEL     
---------------------------------------------------------------- ----------
AA                                                               1         
AA_CSF                                                           2         
AA_ASF                                                           3         

Exporting tables (scripts or data) of WANGGANG1
exporting table WANGGANG1.AA ...
  exporting DDL of WANGGANG1.AA ...
  exporting data of WANGGANG1.AA ...
    data exporting success, 10 rows are dumped.

  exporting indexes on WANGGANG1.AA ...
  exporting constraints on WANGGANG1.AA ...

exporting table WANGGANG1.AA_CSF ...
  exporting DDL of WANGGANG1.AA_CSF ...
  exporting data of WANGGANG1.AA_CSF ...
    data exporting success, 10 rows are dumped.

  exporting indexes on WANGGANG1.AA_CSF ...
  exporting constraints on WANGGANG1.AA_CSF ...

exporting table WANGGANG1.AA_ASF ...
  exporting DDL of WANGGANG1.AA_ASF ...
  exporting data of WANGGANG1.AA_ASF ...
    data exporting success, 10 rows are dumped.

  exporting indexes on WANGGANG1.AA_ASF ...
  exporting constraints on WANGGANG1.AA_ASF ...

Exporting procedures/functions/triggers of schema WANGGANG1 ...
  exporting PROCEDURE WANGGANG1.INSERT_INTO_AA
Exporting views of schema WANGGANG1 ...
Exporting synonyms of schema WANGGANG1 ...
Exporting package of schema WANGGANG1 ...
End of export schema WANGGANG1 ...

Logical export succeeded.

SQL> exp users=wanggang1 filetype=txt file='csf_wanggang1.txt';
Parsing export options ... 
Verify options ...
  verify schema ...
Starting export ...
Preparing to export ...
-- EXPORT TYPE = SCHEMA
-- EXPORT OBJECTS = WANGGANG1
-- FILE TYPE = TXT
-- DUMP FILE = csf_wanggang1.txt
-- LOG FILE = 
-- QUERY = ""
-- COMPRESS = N
-- CONSISTENT = N
-- CONTENT_MODE = ALL
-- SKIP_COMMENTS = N
-- FORCE = N
-- SKIP_ADD_DROP_TABLE = N
-- SKIP_TRIGGERS = N
-- QUOTE_NAMES = Y
-- TABLESPACE = N
-- COMMIT_BATCH = 1000
-- INSERT_BATCH = 1
-- FEEDBACK = 10000
-- PARALLEL = 0
-- TENANT = N
-- CREATE_USER = N
-- ROLE = N
-- GRANT = N
-- WITH_CR_MODE = N
-- WITH_FORMAT_CSF = Y
-- INDEX_PARTITIONS = N

Exporting schema WANGGANG1 ...
Exporting sequence of schema WANGGANG1 ...
Exporting profile of schema WANGGANG1 ...
Exporting type of schema WANGGANG1 ...
Exporting tables of schema WANGGANG1 ...
Reading table objects of WANGGANG1

The order of exporting table is:
TABLE NAME                                                       LEVEL     
---------------------------------------------------------------- ----------
AA                                                               1         
AA_CSF                                                           2         
AA_ASF                                                           3         

Exporting tables (scripts or data) of WANGGANG1
exporting table WANGGANG1.AA ...
  exporting DDL of WANGGANG1.AA ...
  exporting data of WANGGANG1.AA ...
    data exporting success, 10 rows are dumped.

  exporting indexes on WANGGANG1.AA ...
  exporting constraints on WANGGANG1.AA ...

exporting table WANGGANG1.AA_CSF ...
  exporting DDL of WANGGANG1.AA_CSF ...
  exporting data of WANGGANG1.AA_CSF ...
    data exporting success, 10 rows are dumped.

  exporting indexes on WANGGANG1.AA_CSF ...
  exporting constraints on WANGGANG1.AA_CSF ...

exporting table WANGGANG1.AA_ASF ...
  exporting DDL of WANGGANG1.AA_ASF ...
  exporting data of WANGGANG1.AA_ASF ...
    data exporting success, 10 rows are dumped.

  exporting indexes on WANGGANG1.AA_ASF ...
  exporting constraints on WANGGANG1.AA_ASF ...

Exporting procedures/functions/triggers of schema WANGGANG1 ...
  exporting PROCEDURE WANGGANG1.INSERT_INTO_AA
Exporting views of schema WANGGANG1 ...
Exporting synonyms of schema WANGGANG1 ...
Exporting package of schema WANGGANG1 ...
End of export schema WANGGANG1 ...

Logical export succeeded.

SQL> 
SQL> drop user if exists wanggang2 cascade;

Succeed.

SQL> create user wanggang2 identified by 'Changeme_123';

Succeed.

SQL> grant dba to wanggang2;

Succeed.

SQL> imp remap_schema=wanggang1:wanggang2 filetype=bin file='csf_wanggang1.bin';
Parsing import options ... 
Verify options ...
  verify remap schema ...
Starting import ...
Preparing to import ...
-- IMPORT TYPE = REMAP_SCHEMA
-- REMAP SCHEMA = WANGGANG1:wanggang2
-- DUMP FILE = csf_wanggang1.bin
-- LOG FILE = 
-- FILE TYPE = BIN
-- SHOW = N
-- FEEDBACK = 10000
-- PARALLEL = 1
-- DDL_PARALLEL = 1
-- CONTENT_MODE = ALL
-- IGNORE = N
-- CREATE_USER = N
-- TIMING = OFF
-- BATCH_COUNT = 10000
-- DISABLE_TRIGGER = Y
-- NOLOGGING = N


Importing schema WANGGANG1 ... 
  Importing sequence of schema WANGGANG1 ...
    Sequence importing success, 0 rows are loaded.
  Importing profile of schema WANGGANG1 ...
    Profile importing success, 0 rows are loaded.
  Importing type of schema WANGGANG1 ...
    Type importing success, 0 rows are loaded.

  Importing tables of schema WANGGANG1 ,total number : 3 ...
    The order of importing table is:
    TABLE NAME                                                       RECORD NUMBER 
    ---------------------------------------------------------------- --------------
    AA                                                               10        
    AA_CSF                                                           10        
    AA_ASF                                                           10        

  Importing foreign key of schema WANGGANG1 ...
    Foreign key importing success, 0 rows are loaded.

  Importing fuction/procedure/trigger of schema WANGGANG1 ...
    Fuction/procedure/trigger importing success, 1 rows are loaded.

  Importing view of schema WANGGANG1 ...
    View importing success, 0 rows are loaded.

  Importing synonym of schema WANGGANG1 ...
    Synonym importing success, 0 rows are loaded.

  Importing package of schema WANGGANG1 ...
    Package importing success, 0 rows are loaded.

data importing success, 30 rows are loaded.
Logical import succeeded.

SQL> select table_name,row_format from db_tables where owner = 'WANGGANG2' order by table_name;

TABLE_NAME                                                       ROW_FORMAT
---------------------------------------------------------------- ----------
AA                                                               CSF       
AA_ASF                                                           ASF       
AA_CSF                                                           CSF       

3 rows fetched.

SQL> select * from wanggang2.aa order by C_ID;

C_ID         C_PAYMENT_CNT_3                         
------------ ----------------------------------------
1            1.12345678                              
2            2.12345678                              
3            3.12345678                              
4            4.12345678                              
5            5.12345678                              
6            6.12345678                              
7            7.12345678                              
8            8.12345678                              
9            9.12345678                              
10           10.12345678                             

10 rows fetched.

SQL> select * from wanggang2.aa_csf order by C_ID;

C_ID         C_PAYMENT_CNT_3                         
------------ ----------------------------------------
1            1                                       
2            2                                       
3            3                                       
4            4                                       
5            5                                       
6            6                                       
7            7                                       
8            8                                       
9            9                                       
10           0                                       

10 rows fetched.

SQL> select * from wanggang2.aa_asf order by C_ID;

C_ID         C_PAYMENT_CNT_3                         
------------ ----------------------------------------
1            1                                       
2            2                                       
3            3                                       
4            4                                       
5            5                                       
6            6                                       
7            7                                       
8            8                                       
9            9                                       
10           0                                       

10 rows fetched.

SQL> conn wanggang2/Changeme_123@127.0.0.1:1611

connected.

SQL> show create table aa;

CREATE TABLE "AA"
(
  "C_ID" BINARY_INTEGER NOT NULL,
  "C_PAYMENT_CNT_3" NUMBER(12, 8)
)
TABLESPACE "USERS"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT CSF;
ALTER TABLE "AA" ADD PRIMARY KEY("C_ID");



SQL> show create table aa_csf;

CREATE TABLE "AA_CSF"
(
  "C_ID" BINARY_INTEGER NOT NULL,
  "C_PAYMENT_CNT_3" NUMBER(12, 8)
)
PARTITION BY LIST ("C_PAYMENT_CNT_3")
(
    PARTITION PART_1 VALUES(0,1) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION PART_2 VALUES(2,3) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION PART_3 VALUES(4,5) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION PART_4 VALUES(6,7) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION PART_5 VALUES(DEFAULT) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF
)
TABLESPACE "USERS"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT CSF;
ALTER TABLE "AA_CSF" ADD PRIMARY KEY("C_ID");



SQL> show create table aa_asf;

CREATE TABLE "AA_ASF"
(
  "C_ID" BINARY_INTEGER NOT NULL,
  "C_PAYMENT_CNT_3" NUMBER(12, 8)
)
PARTITION BY LIST ("C_PAYMENT_CNT_3")
(
    PARTITION PART_1 VALUES(0,1) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF,
    PARTITION PART_2 VALUES(2,3) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF,
    PARTITION PART_3 VALUES(4,5) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF,
    PARTITION PART_4 VALUES(6,7) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF,
    PARTITION PART_5 VALUES(DEFAULT) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF
)
TABLESPACE "USERS"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT ASF;
ALTER TABLE "AA_ASF" ADD PRIMARY KEY("C_ID");



SQL> 
SQL> conn sys/Huawei@123@127.0.0.1:1611

connected.

SQL> drop user if exists wanggang3 cascade;

Succeed.

SQL> create user wanggang3 identified by 'Changeme_123';

Succeed.

SQL> grant dba to wanggang3;

Succeed.

SQL> imp remap_schema=wanggang1:wanggang3 filetype=txt file='csf_wanggang1.txt';
Parsing import options ... 
Verify options ...
  verify remap schema ...
Starting import ...
Preparing to import ...
-- IMPORT TYPE = REMAP_SCHEMA
-- REMAP SCHEMA = WANGGANG1:wanggang3
-- DUMP FILE = csf_wanggang1.txt
-- LOG FILE = 
-- FILE TYPE = TXT
-- SHOW = N
-- FEEDBACK = 10000
-- PARALLEL = 1
-- DDL_PARALLEL = 1
-- CONTENT_MODE = ALL
-- IGNORE = N
-- CREATE_USER = N
-- TIMING = OFF
-- BATCH_COUNT = 10000
-- DISABLE_TRIGGER = Y
-- NOLOGGING = N

data importing success, 30 rows are loaded.
Logical import succeeded.

SQL> select table_name,row_format from db_tables where owner = 'WANGGANG3' order by table_name;

TABLE_NAME                                                       ROW_FORMAT
---------------------------------------------------------------- ----------
AA                                                               CSF       
AA_ASF                                                           ASF       
AA_CSF                                                           CSF       

3 rows fetched.

SQL> select * from wanggang3.aa order by C_ID;

C_ID         C_PAYMENT_CNT_3                         
------------ ----------------------------------------
1            1.12345678                              
2            2.12345678                              
3            3.12345678                              
4            4.12345678                              
5            5.12345678                              
6            6.12345678                              
7            7.12345678                              
8            8.12345678                              
9            9.12345678                              
10           10.12345678                             

10 rows fetched.

SQL> select * from wanggang3.aa_csf order by C_ID;

C_ID         C_PAYMENT_CNT_3                         
------------ ----------------------------------------
1            1                                       
2            2                                       
3            3                                       
4            4                                       
5            5                                       
6            6                                       
7            7                                       
8            8                                       
9            9                                       
10           0                                       

10 rows fetched.

SQL> select * from wanggang3.aa_asf order by C_ID;

C_ID         C_PAYMENT_CNT_3                         
------------ ----------------------------------------
1            1                                       
2            2                                       
3            3                                       
4            4                                       
5            5                                       
6            6                                       
7            7                                       
8            8                                       
9            9                                       
10           0                                       

10 rows fetched.

SQL> conn wanggang3/Changeme_123@127.0.0.1:1611

connected.

SQL> show create table aa;

CREATE TABLE "AA"
(
  "C_ID" BINARY_INTEGER NOT NULL,
  "C_PAYMENT_CNT_3" NUMBER(12, 8)
)
TABLESPACE "USERS"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT CSF;
ALTER TABLE "AA" ADD PRIMARY KEY("C_ID");



SQL> show create table aa_csf;

CREATE TABLE "AA_CSF"
(
  "C_ID" BINARY_INTEGER NOT NULL,
  "C_PAYMENT_CNT_3" NUMBER(12, 8)
)
PARTITION BY LIST ("C_PAYMENT_CNT_3")
(
    PARTITION PART_1 VALUES(0,1) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION PART_2 VALUES(2,3) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION PART_3 VALUES(4,5) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION PART_4 VALUES(6,7) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION PART_5 VALUES(DEFAULT) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF
)
TABLESPACE "USERS"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT CSF;
ALTER TABLE "AA_CSF" ADD PRIMARY KEY("C_ID");



SQL> show create table aa_asf;

CREATE TABLE "AA_ASF"
(
  "C_ID" BINARY_INTEGER NOT NULL,
  "C_PAYMENT_CNT_3" NUMBER(12, 8)
)
PARTITION BY LIST ("C_PAYMENT_CNT_3")
(
    PARTITION PART_1 VALUES(0,1) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF,
    PARTITION PART_2 VALUES(2,3) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF,
    PARTITION PART_3 VALUES(4,5) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF,
    PARTITION PART_4 VALUES(6,7) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF,
    PARTITION PART_5 VALUES(DEFAULT) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF
)
TABLESPACE "USERS"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT ASF;
ALTER TABLE "AA_ASF" ADD PRIMARY KEY("C_ID");



SQL> 
SQL> -- exp/imp part csf
SQL> conn sys/Huawei@123@127.0.0.1:1611

connected.

SQL> drop user if exists wanggang4 cascade;

Succeed.

SQL> create user wanggang4 identified by 'Changeme_123';

Succeed.

SQL> grant dba to wanggang4;

Succeed.

SQL> conn wanggang4/Changeme_123@127.0.0.1:1611

connected.

SQL> drop table  if exists t_part_csf1;

Succeed.

SQL> create table t_part_csf1(id int, name varchar2(100)) PARTITION BY list(id) 
  2 (
  3 partition p1 values (1) format csf,
  4 partition p2 values (2),
  5 partition p3 values (3) format csf
  6 );

Succeed.

SQL> alter table t_part_csf1 add partition p6 values(4) format csf;

Succeed.

SQL> alter table t_part_csf1 add partition p7 values(5);

Succeed.

SQL> 
SQL> drop table  if exists t_part_csf2;

Succeed.

SQL> create table t_part_csf2(id int, name varchar2(100)) PARTITION BY range(id) 
  2 (
  3 partition p1 VALUES LESS THAN (1) format csf,
  4 partition p2 VALUES LESS THAN (2),
  5 partition p3 VALUES LESS THAN (3) format csf
  6 ); 

Succeed.

SQL> alter table t_part_csf2 add partition p6 VALUES LESS THAN(4) format csf;

Succeed.

SQL> alter table t_part_csf2 add partition p7 VALUES LESS THAN(5);

Succeed.

SQL> 
SQL> drop table  if exists t_part_csf3;

Succeed.

SQL> create table t_part_csf3(id int, name varchar2(100)) PARTITION BY range(id) interval(1)
  2 (
  3 partition p1 VALUES LESS THAN (1),
  4 partition p2 VALUES LESS THAN (2),
  5 partition p3 VALUES LESS THAN (3)
  6 );

Succeed.

SQL> 
SQL> drop table  if exists t_part_csf4;

Succeed.

SQL> create table t_part_csf4(id int, name varchar2(100)) PARTITION BY hash(id)
  2 (
  3 partition p1 format csf,
  4 partition p2,
  5 partition p3 format csf
  6 );

Succeed.

SQL> alter table t_part_csf4 add partition p6 format csf;

CT-00613, Invalid operation, data redistribute between different partition row types are forbidden
SQL> alter table t_part_csf4 add partition p7;

Succeed.

SQL> 
SQL> drop table  if exists t_part_csf11;

Succeed.

SQL> create table t_part_csf11(id int, name varchar2(100)) PARTITION BY list(id) 
  2 (
  3 partition p1 values (1) format csf,
  4 partition p2 values (2),
  5 partition p3 values (3) format csf
  6 ) format csf; 

Succeed.

SQL> alter table t_part_csf11 add partition p6 values(4) format csf;

Succeed.

SQL> alter table t_part_csf11 add partition p7 values(5);

Succeed.

SQL> 
SQL> drop table  if exists t_part_csf22;

Succeed.

SQL> create table t_part_csf22(id int, name varchar2(100)) PARTITION BY range(id) 
  2 (
  3 partition p1 VALUES LESS THAN (1) format csf,
  4 partition p2 VALUES LESS THAN (2),
  5 partition p3 VALUES LESS THAN (3) format csf
  6 ) format csf; 

Succeed.

SQL> alter table t_part_csf22 add partition p6 VALUES LESS THAN(4) format csf;

Succeed.

SQL> alter table t_part_csf22 add partition p7 VALUES LESS THAN(5);

Succeed.

SQL> 
SQL> drop table  if exists t_part_csf33;

Succeed.

SQL> create table t_part_csf33(id int, name varchar2(100)) PARTITION BY range(id) interval(1)
  2 (
  3 partition p1 VALUES LESS THAN (1),
  4 partition p2 VALUES LESS THAN (2),
  5 partition p3 VALUES LESS THAN (3)
  6 ) format csf;

Succeed.

SQL> 
SQL> drop table  if exists t_part_csf44;

Succeed.

SQL> create table t_part_csf44(id int, name varchar2(100)) PARTITION BY hash(id)
  2 (
  3 partition p1 format csf,
  4 partition p2,
  5 partition p3 format csf
  6 ) format csf;

Succeed.

SQL> alter table t_part_csf44 add partition p6 format csf;

Succeed.

SQL> alter table t_part_csf44 add partition p7;

Succeed.

SQL> 
SQL> drop table if exists test_subpart1;

Succeed.

SQL> drop table if exists test_subpart2;

Succeed.

SQL> drop table if exists test_subpart3;

Succeed.

SQL> drop table if exists test_subpart4;

Succeed.

SQL> drop table if exists test_subpart11;

Succeed.

SQL> drop table if exists test_subpart22;

Succeed.

SQL> drop table if exists test_subpart33;

Succeed.

SQL> drop table if exists test_subpart44;

Succeed.

SQL> create table test_subpart1(id int, c_id int, name varchar(20)) partition by range(id) subpartition by range(c_id)
  2 (
  3 partition p1 values less than(50)
  4 (
  5 subpartition p11 values less than(50),
  6 subpartition p12 values less than(100)
  7 ),
  8 partition p2 values less than(100)
  9 (
 10 subpartition p21 values less than(50),
 11 subpartition p22 values less than(100)
 12 )
 13 )format csf;

Succeed.

SQL> 
SQL> 
SQL> create table test_subpart2(id int, name varchar(20)) partition by range(id) subpartition by hash(name)
  2 (
  3 partition p1 values less than(50)
  4 (
  5 subpartition p11,
  6 subpartition p12
  7 ),
  8 partition p2 values less than(100)
  9 (
 10 subpartition p21,
 11 subpartition p22
 12 )
 13 )format csf;

Succeed.

SQL> 
SQL> create table test_subpart3(id int, name varchar(20)) partition by list(name) subpartition by range(id)
  2 (
  3 partition p1 values('zhangsan')
  4 (
  5 subpartition p11 values less than(50),
  6 subpartition p12 values less than(100)
  7 ),
  8 partition p2 values('lisi')
  9 (
 10 subpartition p21 values less than(50),
 11 subpartition p22 values less than(100)
 12 )
 13 )format csf;

Succeed.

SQL> 
SQL> create table test_subpart4(id int, c_id int, name varchar(20)) partition by range(id) interval(50) subpartition by range(c_id)
  2 (
  3 partition p1 values less than(50)
  4 (
  5 subpartition p11 values less than(50),
  6 subpartition p12 values less than(100)
  7 ),
  8 partition p2 values less than(100)
  9 (
 10 subpartition p21 values less than(50),
 11 subpartition p22 values less than(100)
 12 )
 13 )format csf;

Succeed.

SQL> 
SQL> create table test_subpart11(id int, c_id int, name varchar(20)) partition by range(id) subpartition by range(c_id)
  2 (
  3 partition p1 values less than(50) format csf
  4 (
  5 subpartition p11 values less than(50),
  6 subpartition p12 values less than(100)
  7 ),
  8 partition p2 values less than(100)
  9 (
 10 subpartition p21 values less than(50),
 11 subpartition p22 values less than(100)
 12 )
 13 );

Succeed.

SQL> 
SQL> create table test_subpart22(id int, name varchar(20)) partition by range(id) subpartition by hash(name)
  2 (
  3 partition p1 values less than(50) format csf
  4 (
  5 subpartition p11,
  6 subpartition p12
  7 ),
  8 partition p2 values less than(100)
  9 (
 10 subpartition p21,
 11 subpartition p22
 12 )
 13 );

Succeed.

SQL> 
SQL> create table test_subpart33(id int, name varchar(20)) partition by list(name) subpartition by range(id)
  2 (
  3 partition p1 values('zhangsan') format csf
  4 (
  5 subpartition p11 values less than(50),
  6 subpartition p12 values less than(100)
  7 ),
  8 partition p2 values('lisi')
  9 (
 10 subpartition p21 values less than(50),
 11 subpartition p22 values less than(100)
 12 )
 13 );

Succeed.

SQL> 
SQL> create table test_subpart44(id int, c_id int, name varchar(20)) partition by range(id) interval(50) subpartition by range(c_id)
  2 (
  3 partition p1 values less than(50) format csf
  4 (
  5 subpartition p11 values less than(50),
  6 subpartition p12 values less than(100)
  7 ),
  8 partition p2 values less than(100)
  9 (
 10 subpartition p21 values less than(50),
 11 subpartition p22 values less than(100)
 12 )
 13 );

Succeed.

SQL> drop table if exists test_subpart1;

Succeed.

SQL> drop table if exists test_subpart2;

Succeed.

SQL> drop table if exists test_subpart3;

Succeed.

SQL> drop table if exists test_subpart4;

Succeed.

SQL> drop table if exists test_subpart11;

Succeed.

SQL> drop table if exists test_subpart22;

Succeed.

SQL> drop table if exists test_subpart33;

Succeed.

SQL> drop table if exists test_subpart44;

Succeed.

SQL> 
SQL> conn sys/Huawei@123@127.0.0.1:1611

connected.

SQL> exp users=wanggang4 filetype=bin file='csf_part_wanggang4.bin';
Parsing export options ... 
Verify options ...
  verify schema ...
Starting export ...
Preparing to export ...
-- EXPORT TYPE = SCHEMA
-- EXPORT OBJECTS = WANGGANG4
-- FILE TYPE = BIN
-- DUMP FILE = csf_part_wanggang4.bin
-- LOG FILE = 
-- QUERY = ""
-- COMPRESS = N
-- CONSISTENT = N
-- CONTENT_MODE = ALL
-- SKIP_COMMENTS = N
-- FORCE = N
-- SKIP_ADD_DROP_TABLE = N
-- SKIP_TRIGGERS = N
-- QUOTE_NAMES = Y
-- TABLESPACE = N
-- COMMIT_BATCH = 1000
-- INSERT_BATCH = 1
-- FEEDBACK = 10000
-- PARALLEL = 0
-- TENANT = N
-- CREATE_USER = N
-- ROLE = N
-- GRANT = N
-- WITH_CR_MODE = N
-- WITH_FORMAT_CSF = Y
-- INDEX_PARTITIONS = N

Exporting schema WANGGANG4 ...
Exporting sequence of schema WANGGANG4 ...
Exporting profile of schema WANGGANG4 ...
Exporting type of schema WANGGANG4 ...
Exporting tables of schema WANGGANG4 ...
Reading table objects of WANGGANG4

The order of exporting table is:
TABLE NAME                                                       LEVEL     
---------------------------------------------------------------- ----------
T_PART_CSF1                                                      1         
T_PART_CSF2                                                      2         
T_PART_CSF3                                                      3         
T_PART_CSF4                                                      4         
T_PART_CSF11                                                     5         
T_PART_CSF22                                                     6         
T_PART_CSF33                                                     7         
T_PART_CSF44                                                     8         

Exporting tables (scripts or data) of WANGGANG4
exporting table WANGGANG4.T_PART_CSF1 ...
  exporting DDL of WANGGANG4.T_PART_CSF1 ...
  exporting data of WANGGANG4.T_PART_CSF1 ...
    data exporting success, 0 rows are dumped.

  exporting indexes on WANGGANG4.T_PART_CSF1 ...
  exporting constraints on WANGGANG4.T_PART_CSF1 ...

exporting table WANGGANG4.T_PART_CSF2 ...
  exporting DDL of WANGGANG4.T_PART_CSF2 ...
  exporting data of WANGGANG4.T_PART_CSF2 ...
    data exporting success, 0 rows are dumped.

  exporting indexes on WANGGANG4.T_PART_CSF2 ...
  exporting constraints on WANGGANG4.T_PART_CSF2 ...

exporting table WANGGANG4.T_PART_CSF3 ...
  exporting DDL of WANGGANG4.T_PART_CSF3 ...
  exporting data of WANGGANG4.T_PART_CSF3 ...
    data exporting success, 0 rows are dumped.

  exporting indexes on WANGGANG4.T_PART_CSF3 ...
  exporting constraints on WANGGANG4.T_PART_CSF3 ...

exporting table WANGGANG4.T_PART_CSF4 ...
  exporting DDL of WANGGANG4.T_PART_CSF4 ...
  exporting data of WANGGANG4.T_PART_CSF4 ...
    data exporting success, 0 rows are dumped.

  exporting indexes on WANGGANG4.T_PART_CSF4 ...
  exporting constraints on WANGGANG4.T_PART_CSF4 ...

exporting table WANGGANG4.T_PART_CSF11 ...
  exporting DDL of WANGGANG4.T_PART_CSF11 ...
  exporting data of WANGGANG4.T_PART_CSF11 ...
    data exporting success, 0 rows are dumped.

  exporting indexes on WANGGANG4.T_PART_CSF11 ...
  exporting constraints on WANGGANG4.T_PART_CSF11 ...

exporting table WANGGANG4.T_PART_CSF22 ...
  exporting DDL of WANGGANG4.T_PART_CSF22 ...
  exporting data of WANGGANG4.T_PART_CSF22 ...
    data exporting success, 0 rows are dumped.

  exporting indexes on WANGGANG4.T_PART_CSF22 ...
  exporting constraints on WANGGANG4.T_PART_CSF22 ...

exporting table WANGGANG4.T_PART_CSF33 ...
  exporting DDL of WANGGANG4.T_PART_CSF33 ...
  exporting data of WANGGANG4.T_PART_CSF33 ...
    data exporting success, 0 rows are dumped.

  exporting indexes on WANGGANG4.T_PART_CSF33 ...
  exporting constraints on WANGGANG4.T_PART_CSF33 ...

exporting table WANGGANG4.T_PART_CSF44 ...
  exporting DDL of WANGGANG4.T_PART_CSF44 ...
  exporting data of WANGGANG4.T_PART_CSF44 ...
    data exporting success, 0 rows are dumped.

  exporting indexes on WANGGANG4.T_PART_CSF44 ...
  exporting constraints on WANGGANG4.T_PART_CSF44 ...

Exporting procedures/functions/triggers of schema WANGGANG4 ...
Exporting views of schema WANGGANG4 ...
Exporting synonyms of schema WANGGANG4 ...
Exporting package of schema WANGGANG4 ...
End of export schema WANGGANG4 ...

Logical export succeeded.

SQL> exp users=wanggang4 filetype=txt file='csf_part_wanggang4.txt';
Parsing export options ... 
Verify options ...
  verify schema ...
Starting export ...
Preparing to export ...
-- EXPORT TYPE = SCHEMA
-- EXPORT OBJECTS = WANGGANG4
-- FILE TYPE = TXT
-- DUMP FILE = csf_part_wanggang4.txt
-- LOG FILE = 
-- QUERY = ""
-- COMPRESS = N
-- CONSISTENT = N
-- CONTENT_MODE = ALL
-- SKIP_COMMENTS = N
-- FORCE = N
-- SKIP_ADD_DROP_TABLE = N
-- SKIP_TRIGGERS = N
-- QUOTE_NAMES = Y
-- TABLESPACE = N
-- COMMIT_BATCH = 1000
-- INSERT_BATCH = 1
-- FEEDBACK = 10000
-- PARALLEL = 0
-- TENANT = N
-- CREATE_USER = N
-- ROLE = N
-- GRANT = N
-- WITH_CR_MODE = N
-- WITH_FORMAT_CSF = Y
-- INDEX_PARTITIONS = N

Exporting schema WANGGANG4 ...
Exporting sequence of schema WANGGANG4 ...
Exporting profile of schema WANGGANG4 ...
Exporting type of schema WANGGANG4 ...
Exporting tables of schema WANGGANG4 ...
Reading table objects of WANGGANG4

The order of exporting table is:
TABLE NAME                                                       LEVEL     
---------------------------------------------------------------- ----------
T_PART_CSF1                                                      1         
T_PART_CSF2                                                      2         
T_PART_CSF3                                                      3         
T_PART_CSF4                                                      4         
T_PART_CSF11                                                     5         
T_PART_CSF22                                                     6         
T_PART_CSF33                                                     7         
T_PART_CSF44                                                     8         

Exporting tables (scripts or data) of WANGGANG4
exporting table WANGGANG4.T_PART_CSF1 ...
  exporting DDL of WANGGANG4.T_PART_CSF1 ...
  exporting data of WANGGANG4.T_PART_CSF1 ...
    data exporting success, 0 rows are dumped.

  exporting indexes on WANGGANG4.T_PART_CSF1 ...
  exporting constraints on WANGGANG4.T_PART_CSF1 ...

exporting table WANGGANG4.T_PART_CSF2 ...
  exporting DDL of WANGGANG4.T_PART_CSF2 ...
  exporting data of WANGGANG4.T_PART_CSF2 ...
    data exporting success, 0 rows are dumped.

  exporting indexes on WANGGANG4.T_PART_CSF2 ...
  exporting constraints on WANGGANG4.T_PART_CSF2 ...

exporting table WANGGANG4.T_PART_CSF3 ...
  exporting DDL of WANGGANG4.T_PART_CSF3 ...
  exporting data of WANGGANG4.T_PART_CSF3 ...
    data exporting success, 0 rows are dumped.

  exporting indexes on WANGGANG4.T_PART_CSF3 ...
  exporting constraints on WANGGANG4.T_PART_CSF3 ...

exporting table WANGGANG4.T_PART_CSF4 ...
  exporting DDL of WANGGANG4.T_PART_CSF4 ...
  exporting data of WANGGANG4.T_PART_CSF4 ...
    data exporting success, 0 rows are dumped.

  exporting indexes on WANGGANG4.T_PART_CSF4 ...
  exporting constraints on WANGGANG4.T_PART_CSF4 ...

exporting table WANGGANG4.T_PART_CSF11 ...
  exporting DDL of WANGGANG4.T_PART_CSF11 ...
  exporting data of WANGGANG4.T_PART_CSF11 ...
    data exporting success, 0 rows are dumped.

  exporting indexes on WANGGANG4.T_PART_CSF11 ...
  exporting constraints on WANGGANG4.T_PART_CSF11 ...

exporting table WANGGANG4.T_PART_CSF22 ...
  exporting DDL of WANGGANG4.T_PART_CSF22 ...
  exporting data of WANGGANG4.T_PART_CSF22 ...
    data exporting success, 0 rows are dumped.

  exporting indexes on WANGGANG4.T_PART_CSF22 ...
  exporting constraints on WANGGANG4.T_PART_CSF22 ...

exporting table WANGGANG4.T_PART_CSF33 ...
  exporting DDL of WANGGANG4.T_PART_CSF33 ...
  exporting data of WANGGANG4.T_PART_CSF33 ...
    data exporting success, 0 rows are dumped.

  exporting indexes on WANGGANG4.T_PART_CSF33 ...
  exporting constraints on WANGGANG4.T_PART_CSF33 ...

exporting table WANGGANG4.T_PART_CSF44 ...
  exporting DDL of WANGGANG4.T_PART_CSF44 ...
  exporting data of WANGGANG4.T_PART_CSF44 ...
    data exporting success, 0 rows are dumped.

  exporting indexes on WANGGANG4.T_PART_CSF44 ...
  exporting constraints on WANGGANG4.T_PART_CSF44 ...

Exporting procedures/functions/triggers of schema WANGGANG4 ...
Exporting views of schema WANGGANG4 ...
Exporting synonyms of schema WANGGANG4 ...
Exporting package of schema WANGGANG4 ...
End of export schema WANGGANG4 ...

Logical export succeeded.

SQL> 
SQL> drop user if exists wanggang5 cascade;

Succeed.

SQL> create user wanggang5 identified by 'Changeme_123';

Succeed.

SQL> grant dba to wanggang5;

Succeed.

SQL> imp remap_schema=wanggang4:wanggang5 filetype=bin file='csf_part_wanggang4.bin';
Parsing import options ... 
Verify options ...
  verify remap schema ...
Starting import ...
Preparing to import ...
-- IMPORT TYPE = REMAP_SCHEMA
-- REMAP SCHEMA = WANGGANG4:wanggang5
-- DUMP FILE = csf_part_wanggang4.bin
-- LOG FILE = 
-- FILE TYPE = BIN
-- SHOW = N
-- FEEDBACK = 10000
-- PARALLEL = 1
-- DDL_PARALLEL = 1
-- CONTENT_MODE = ALL
-- IGNORE = N
-- CREATE_USER = N
-- TIMING = OFF
-- BATCH_COUNT = 10000
-- DISABLE_TRIGGER = Y
-- NOLOGGING = N


Importing schema WANGGANG4 ... 
  Importing sequence of schema WANGGANG4 ...
    Sequence importing success, 0 rows are loaded.
  Importing profile of schema WANGGANG4 ...
    Profile importing success, 0 rows are loaded.
  Importing type of schema WANGGANG4 ...
    Type importing success, 0 rows are loaded.

  Importing tables of schema WANGGANG4 ,total number : 8 ...
    The order of importing table is:
    TABLE NAME                                                       RECORD NUMBER 
    ---------------------------------------------------------------- --------------

  Importing foreign key of schema WANGGANG4 ...
    Foreign key importing success, 0 rows are loaded.

  Importing fuction/procedure/trigger of schema WANGGANG4 ...
    Fuction/procedure/trigger importing success, 0 rows are loaded.

  Importing view of schema WANGGANG4 ...
    View importing success, 0 rows are loaded.

  Importing synonym of schema WANGGANG4 ...
    Synonym importing success, 0 rows are loaded.

  Importing package of schema WANGGANG4 ...
    Package importing success, 0 rows are loaded.

data importing success, 0 rows are loaded.
Logical import succeeded.

SQL> conn wanggang5/Changeme_123@127.0.0.1:1611

connected.

SQL> show create table t_part_csf1;

CREATE TABLE "T_PART_CSF1"
(
  "ID" BINARY_INTEGER,
  "NAME" VARCHAR(100 BYTE)
)
PARTITION BY LIST ("ID")
(
    PARTITION P1 VALUES(1) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P2 VALUES(2) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF,
    PARTITION P3 VALUES(3) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P6 VALUES(4) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P7 VALUES(5) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF
)
TABLESPACE "USERS"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT ASF;



SQL> show create table t_part_csf2;

CREATE TABLE "T_PART_CSF2"
(
  "ID" BINARY_INTEGER,
  "NAME" VARCHAR(100 BYTE)
)
PARTITION BY RANGE ("ID")
(
    PARTITION P1 VALUES LESS THAN (1) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P2 VALUES LESS THAN (2) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF,
    PARTITION P3 VALUES LESS THAN (3) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P6 VALUES LESS THAN (4) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P7 VALUES LESS THAN (5) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF
)
TABLESPACE "USERS"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT ASF;



SQL> show create table t_part_csf3;

CREATE TABLE "T_PART_CSF3"
(
  "ID" BINARY_INTEGER,
  "NAME" VARCHAR(100 BYTE)
)
PARTITION BY RANGE ("ID")
INTERVAL(1)
(
    PARTITION P1 VALUES LESS THAN (1) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF,
    PARTITION P2 VALUES LESS THAN (2) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF,
    PARTITION P3 VALUES LESS THAN (3) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF
)
TABLESPACE "USERS"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT ASF;



SQL> show create table t_part_csf4;

CREATE TABLE "T_PART_CSF4"
(
  "ID" BINARY_INTEGER,
  "NAME" VARCHAR(100 BYTE)
)
PARTITION BY HASH ("ID")
(
    PARTITION P1 TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P2 TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF,
    PARTITION P3 TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P7 TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF
)
TABLESPACE "USERS"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT ASF;



SQL> show create table t_part_csf11;

CREATE TABLE "T_PART_CSF11"
(
  "ID" BINARY_INTEGER,
  "NAME" VARCHAR(100 BYTE)
)
PARTITION BY LIST ("ID")
(
    PARTITION P1 VALUES(1) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P2 VALUES(2) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P3 VALUES(3) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P6 VALUES(4) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P7 VALUES(5) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF
)
TABLESPACE "USERS"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT CSF;



SQL> show create table t_part_csf22;

CREATE TABLE "T_PART_CSF22"
(
  "ID" BINARY_INTEGER,
  "NAME" VARCHAR(100 BYTE)
)
PARTITION BY RANGE ("ID")
(
    PARTITION P1 VALUES LESS THAN (1) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P2 VALUES LESS THAN (2) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P3 VALUES LESS THAN (3) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P6 VALUES LESS THAN (4) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P7 VALUES LESS THAN (5) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF
)
TABLESPACE "USERS"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT CSF;



SQL> show create table t_part_csf33;

CREATE TABLE "T_PART_CSF33"
(
  "ID" BINARY_INTEGER,
  "NAME" VARCHAR(100 BYTE)
)
PARTITION BY RANGE ("ID")
INTERVAL(1)
(
    PARTITION P1 VALUES LESS THAN (1) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P2 VALUES LESS THAN (2) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P3 VALUES LESS THAN (3) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF
)
TABLESPACE "USERS"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT CSF;



SQL> show create table t_part_csf44;

CREATE TABLE "T_PART_CSF44"
(
  "ID" BINARY_INTEGER,
  "NAME" VARCHAR(100 BYTE)
)
PARTITION BY HASH ("ID")
(
    PARTITION P1 TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P2 TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P3 TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P6 TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P7 TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF
)
TABLESPACE "USERS"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT CSF;



SQL> 
SQL> conn sys/Huawei@123@127.0.0.1:1611

connected.

SQL> drop user if exists wanggang6 cascade;

Succeed.

SQL> create user wanggang6 identified by 'Changeme_123';

Succeed.

SQL> grant dba to wanggang6;

Succeed.

SQL> imp remap_schema=wanggang4:wanggang6 filetype=txt file='csf_part_wanggang4.txt';
Parsing import options ... 
Verify options ...
  verify remap schema ...
Starting import ...
Preparing to import ...
-- IMPORT TYPE = REMAP_SCHEMA
-- REMAP SCHEMA = WANGGANG4:wanggang6
-- DUMP FILE = csf_part_wanggang4.txt
-- LOG FILE = 
-- FILE TYPE = TXT
-- SHOW = N
-- FEEDBACK = 10000
-- PARALLEL = 1
-- DDL_PARALLEL = 1
-- CONTENT_MODE = ALL
-- IGNORE = N
-- CREATE_USER = N
-- TIMING = OFF
-- BATCH_COUNT = 10000
-- DISABLE_TRIGGER = Y
-- NOLOGGING = N

data importing success, 0 rows are loaded.
Logical import succeeded.

SQL> conn wanggang6/Changeme_123@127.0.0.1:1611

connected.

SQL> show create table t_part_csf1;

CREATE TABLE "T_PART_CSF1"
(
  "ID" BINARY_INTEGER,
  "NAME" VARCHAR(100 BYTE)
)
PARTITION BY LIST ("ID")
(
    PARTITION P1 VALUES(1) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P2 VALUES(2) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF,
    PARTITION P3 VALUES(3) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P6 VALUES(4) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P7 VALUES(5) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF
)
TABLESPACE "USERS"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT ASF;



SQL> show create table t_part_csf2;

CREATE TABLE "T_PART_CSF2"
(
  "ID" BINARY_INTEGER,
  "NAME" VARCHAR(100 BYTE)
)
PARTITION BY RANGE ("ID")
(
    PARTITION P1 VALUES LESS THAN (1) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P2 VALUES LESS THAN (2) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF,
    PARTITION P3 VALUES LESS THAN (3) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P6 VALUES LESS THAN (4) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P7 VALUES LESS THAN (5) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF
)
TABLESPACE "USERS"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT ASF;



SQL> show create table t_part_csf3;

CREATE TABLE "T_PART_CSF3"
(
  "ID" BINARY_INTEGER,
  "NAME" VARCHAR(100 BYTE)
)
PARTITION BY RANGE ("ID")
INTERVAL(1)
(
    PARTITION P1 VALUES LESS THAN (1) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF,
    PARTITION P2 VALUES LESS THAN (2) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF,
    PARTITION P3 VALUES LESS THAN (3) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF
)
TABLESPACE "USERS"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT ASF;



SQL> show create table t_part_csf4;

CREATE TABLE "T_PART_CSF4"
(
  "ID" BINARY_INTEGER,
  "NAME" VARCHAR(100 BYTE)
)
PARTITION BY HASH ("ID")
(
    PARTITION P1 TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P2 TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF,
    PARTITION P3 TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P7 TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF
)
TABLESPACE "USERS"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT ASF;



SQL> show create table t_part_csf11;

CREATE TABLE "T_PART_CSF11"
(
  "ID" BINARY_INTEGER,
  "NAME" VARCHAR(100 BYTE)
)
PARTITION BY LIST ("ID")
(
    PARTITION P1 VALUES(1) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P2 VALUES(2) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P3 VALUES(3) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P6 VALUES(4) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P7 VALUES(5) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF
)
TABLESPACE "USERS"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT CSF;



SQL> show create table t_part_csf22;

CREATE TABLE "T_PART_CSF22"
(
  "ID" BINARY_INTEGER,
  "NAME" VARCHAR(100 BYTE)
)
PARTITION BY RANGE ("ID")
(
    PARTITION P1 VALUES LESS THAN (1) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P2 VALUES LESS THAN (2) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P3 VALUES LESS THAN (3) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P6 VALUES LESS THAN (4) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P7 VALUES LESS THAN (5) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF
)
TABLESPACE "USERS"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT CSF;



SQL> show create table t_part_csf33;

CREATE TABLE "T_PART_CSF33"
(
  "ID" BINARY_INTEGER,
  "NAME" VARCHAR(100 BYTE)
)
PARTITION BY RANGE ("ID")
INTERVAL(1)
(
    PARTITION P1 VALUES LESS THAN (1) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P2 VALUES LESS THAN (2) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P3 VALUES LESS THAN (3) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF
)
TABLESPACE "USERS"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT CSF;



SQL> show create table t_part_csf44;

CREATE TABLE "T_PART_CSF44"
(
  "ID" BINARY_INTEGER,
  "NAME" VARCHAR(100 BYTE)
)
PARTITION BY HASH ("ID")
(
    PARTITION P1 TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P2 TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P3 TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P6 TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P7 TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT CSF
)
TABLESPACE "USERS"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT CSF;



SQL> 
SQL> select table_name, PARTITION_NAME, row_format from my_tab_partitions where table_name = 'T_PART_CSF1' order by partition_name;

TABLE_NAME                                                       PARTITION_NAME                                                   ROW_FORMAT
---------------------------------------------------------------- ---------------------------------------------------------------- ----------
T_PART_CSF1                                                      P1                                                               CSF       
T_PART_CSF1                                                      P2                                                               ASF       
T_PART_CSF1                                                      P3                                                               CSF       
T_PART_CSF1                                                      P6                                                               CSF       
T_PART_CSF1                                                      P7                                                               ASF       

5 rows fetched.

SQL> select table_name, PARTITION_NAME, row_format from ADM_TAB_PARTITIONS where table_name = 'T_PART_CSF2' and table_owner = 'WANGGANG6' order by partition_name;

TABLE_NAME                                                       PARTITION_NAME                                                   ROW_FORMAT
---------------------------------------------------------------- ---------------------------------------------------------------- ----------
T_PART_CSF2                                                      P1                                                               CSF       
T_PART_CSF2                                                      P2                                                               ASF       
T_PART_CSF2                                                      P3                                                               CSF       
T_PART_CSF2                                                      P6                                                               CSF       
T_PART_CSF2                                                      P7                                                               ASF       

5 rows fetched.

SQL> select table_name, PARTITION_NAME, row_format from DB_TAB_PARTITIONS where table_name = 'T_PART_CSF33' and table_owner = 'WANGGANG6' order by partition_name;

TABLE_NAME                                                       PARTITION_NAME                                                   ROW_FORMAT
---------------------------------------------------------------- ---------------------------------------------------------------- ----------
T_PART_CSF33                                                     P1                                                               CSF       
T_PART_CSF33                                                     P2                                                               CSF       
T_PART_CSF33                                                     P3                                                               CSF       

3 rows fetched.

SQL> 
SQL> --can't use format csf for split part
SQL> drop table if exists t_part_csf;

Succeed.

SQL> create table t_part_csf(id int,c_number number)partition by range(c_number)(partition part_1 values less than(40), partition part_2 values less than(100) format csf);

Succeed.

SQL> alter table t_part_csf split partition part_2 at (70) into (partition part_2_1 format csf, partition part_2_2);

CT-00601, [1:80]Sql syntax error: unexpected text format clause.
SQL> alter table t_part_csf split partition part_1 at (20) into (partition part_1_1 format csf, partition part_1_2);

CT-00601, [1:80]Sql syntax error: unexpected text format clause.
SQL> 
SQL> -- set csf format of hash part which implicit created
SQL> drop table if exists test_hash_part;

Succeed.

SQL> create table test_hash_part(id int) partition by hash(id)partitions 8 format csf;

Succeed.

SQL> select TABLE_NAME, row_format from ADM_TAB_PARTITIONS where TABLE_NAME=upper('test_hash_part');

TABLE_NAME                                                       ROW_FORMAT
---------------------------------------------------------------- ----------
TEST_HASH_PART                                                   CSF       
TEST_HASH_PART                                                   CSF       
TEST_HASH_PART                                                   CSF       
TEST_HASH_PART                                                   CSF       
TEST_HASH_PART                                                   CSF       
TEST_HASH_PART                                                   CSF       
TEST_HASH_PART                                                   CSF       
TEST_HASH_PART                                                   CSF       

8 rows fetched.

SQL> 
SQL> -- DTS202009160JE1FOP0G00
SQL> drop table if exists TAB_PARTITION_CSF_002;

Succeed.

SQL> CREATE TABLE "TAB_PARTITION_CSF_002"
  2 (
  3   "ID" BINARY_INTEGER NOT NULL,
  4   "C_INT" BINARY_INTEGER,
  5   "C_VCHAR" VARCHAR(20 BYTE) NOT NULL,
  6   "C_CLOB" CLOB NOT NULL,
  7   "C_BLOB" BLOB NOT NULL,
  8   "C_DATE" DATE
  9 )
 10 PARTITION BY RANGE ("ID")
 11 INTERVAL(10)
 12 (
 13     PARTITION P1 VALUES LESS THAN (100) TABLESPACE "USERS" INITRANS 2 PCTFREE 8,
 14     PARTITION P2 VALUES LESS THAN (200) TABLESPACE "USERS" INITRANS 2 PCTFREE 8,
 15     PARTITION P3 VALUES LESS THAN (300) TABLESPACE "USERS" INITRANS 2 PCTFREE 8
 16 );

Succeed.

SQL> CREATE INDEX "IDX_TAB_PARTITION_CSF_002_001" ON "TAB_PARTITION_CSF_002"("C_INT");

Succeed.

SQL> CREATE INDEX "IDX_TAB_PARTITION_CSF_002_002" ON "TAB_PARTITION_CSF_002"("C_INT", "C_VCHAR");

Succeed.

SQL> CREATE INDEX "IDX_TAB_PARTITION_CSF_002_003" ON "TAB_PARTITION_CSF_002"("C_INT", "C_VCHAR", "C_DATE");

Succeed.

SQL> ALTER TABLE "TAB_PARTITION_CSF_002" ADD CONSTRAINT "TAB_PARTITION_CSF_002_CON" PRIMARY KEY("C_VCHAR");

Succeed.

SQL> declare 
  2   i int;
  3   str varchar(100);
  4   ID int;
  5   C_INT int;
  6   C_VCHAR  varchar(200);
  7   C_CLOB   varchar(200);
  8   C_BLOB   varchar(200);
  9   C_DATE   varchar(200);
 10 begin
 11   i := 1;
 12   for i in 1..501 
 13   loop
 14 	ID := i;
 15 	C_INT := 10||i;
 16 	C_VCHAR := 'abc123'||i;
 17 	C_CLOB := 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcab123abc'||i;
 18 	C_BLOB := '11001100110011001100110011001100110011001111100011';
 19 	C_DATE := '1800-01-01 10:51:47';
 20 	insert into	TAB_PARTITION_CSF_002 values(ID, C_INT, C_VCHAR, C_CLOB, C_BLOB, C_DATE);
 21   end loop;
 22   commit;
 23 end;
 24 /

PL/SQL procedure successfully completed.

SQL> 
SQL> drop table if exists TAB_PARTITION_CSF_004;

Succeed.

SQL> CREATE TABLE "TAB_PARTITION_CSF_004"
  2 (
  3   "C_ID" BINARY_INTEGER,
  4   "C_D_ID" BINARY_INTEGER NOT NULL,
  5   "C_W_ID" BINARY_INTEGER NOT NULL,
  6   "C_FIRST" VARCHAR(40 BYTE) NOT NULL,
  7   "C_MIDDLE" CHAR(2 BYTE),
  8   "C_LAST" VARCHAR(50 BYTE) NOT NULL,
  9   "C_STREET_1" VARCHAR(35 BYTE) NOT NULL,
 10   "C_STREET_2" VARCHAR(20 BYTE),
 11   "C_CITY" VARCHAR(20 BYTE) NOT NULL,
 12   "C_STATE" CHAR(2 BYTE) NOT NULL,
 13   "C_ZIP" CHAR(9 BYTE) NOT NULL,
 14   "C_PHONE" CHAR(40 BYTE) NOT NULL,
 15   "C_SINCE" TIMESTAMP(6),
 16   "C_CREDIT" CHAR(2 BYTE) NOT NULL,
 17   "C_CREDIT_LIM" NUMBER(12, 2),
 18   "C_DISCOUNT" NUMBER(4, 4),
 19   "C_BALANCE" NUMBER(12, 2),
 20   "C_YTD_PAYMENT" BINARY_DOUBLE NOT NULL,
 21   "C_PAYMENT_CNT" NUMBER NOT NULL,
 22   "C_DELIVERY_CNT" BOOLEAN NOT NULL,
 23   "C_END" DATE NOT NULL,
 24   "C_UNSIG" BINARY_INTEGER,
 25   "C_BIG" BINARY_BIGINT,
 26   "C_VCHAR" VARCHAR(8000 BYTE),
 27   "C_DATA" CLOB,
 28   "C_TEXT" BLOB,
 29   "C_CLOB" CLOB
 30 )
 31 PARTITION BY HASH ("C_ID")
 32 (
 33     PARTITION PART_1 INITRANS 2 PCTFREE 8 FORMAT CSF,
 34     PARTITION PART_2 INITRANS 2 PCTFREE 8 FORMAT CSF,
 35     PARTITION PART_3 INITRANS 2 PCTFREE 8 FORMAT CSF,
 36     PARTITION PART_4 INITRANS 2 PCTFREE 8 FORMAT CSF,
 37     PARTITION PART_5 INITRANS 2 PCTFREE 8 FORMAT CSF,
 38     PARTITION PART_6 INITRANS 2 PCTFREE 8 FORMAT CSF,
 39     PARTITION PART_7 INITRANS 2 PCTFREE 8 FORMAT CSF,
 40     PARTITION PART_8 INITRANS 2 PCTFREE 8 FORMAT CSF
 41 )FORMAT CSF;

Succeed.

SQL> INSERT INTO "TAB_PARTITION_CSF_004" ("C_ID","C_D_ID","C_W_ID","C_FIRST","C_MIDDLE","C_LAST","C_STREET_1","C_STREET_2","C_CITY","C_STATE","C_ZIP","C_PHONE","C_SINCE","C_CREDIT","C_CREDIT_LIM","C_DISCOUNT","C_BALANCE","C_YTD_PAYMENT","C_PAYMENT_CNT","C_DELIVERY_CNT","C_END","C_UNSIG","C_BIG","C_VCHAR","C_DATA","C_TEXT","C_CLOB") values
  2   (1,1,1,'AAis1cmvls','OE','AABAR1ddBARBAR','bkili1fcxcle1','pmbwo1vhvpaj1','dyf1rya1','uq','48001    ','94012051                                ','1800-01-01 10:51:47.000000','GC',50000,.4361,-10,10,1,TRUE,'1800-01-01 10:51:47',1,1,'ABfgCDefgh','bxxbm','76873890157687389015768738901576873890157687389015768738901576873890157687389015768738901576873890157687389015768738901576873890157687389015768738901576873890157687389015768124324543256546324554354325','xxbm');

1 rows affected.

SQL> INSERT INTO "TAB_PARTITION_CSF_004" ("C_ID","C_D_ID","C_W_ID","C_FIRST","C_MIDDLE","C_LAST","C_STREET_1","C_STREET_2","C_CITY","C_STATE","C_ZIP","C_PHONE","C_SINCE","C_CREDIT","C_CREDIT_LIM","C_DISCOUNT","C_BALANCE","C_YTD_PAYMENT","C_PAYMENT_CNT","C_DELIVERY_CNT","C_END","C_UNSIG","C_BIG","C_VCHAR","C_DATA","C_TEXT","C_CLOB") values
  2   (2,2,2,'AAis2cmvls','OE','AABAR2ddBARBAR','bkili2fcxcle2','pmbwo2vhvpaj2','dyf2rya2','uq','48002    ','94022052                                ','1800-01-01 10:51:47.000000','GC',50000,.4361,-10,10,1,TRUE,'1800-01-01 10:51:47',2,2,'ABfgCDefgh','bxxbm','76873890157687389015768738901576873890157687389015768738901576873890157687389015768738901576873890157687389015768738901576873890157687389015768738901576873890157687389015768124324543256546324554354325','xxbm');

1 rows affected.

SQL> COMMIT;

Succeed.

SQL> 
SQL> select count(*) from (SELECT		
  2 	REGEXP_COUNT  (
  3 	1,
  4 	MAX(ref_0.C_LAST) over ( partition by ref_1.C_CLOB ORDER BY ref_0.C_BIG)
  5 	) 
  6 FROM
  7 	TAB_PARTITION_CSF_004  AS ref_0
  8 	FULL JOIN 
  9 	TAB_PARTITION_CSF_002 AS ref_1
 10 	on     1 =1);

COUNT(*)            
--------------------
1002                

1 rows fetched.

SQL> 
SQL> -- test the WITH_FORMAT_CSF option which is N
SQL> conn sys/Huawei@123@127.0.0.1:1611

connected.

SQL> drop user if exists wanggang7 cascade;

Succeed.

SQL> create user wanggang7 identified by 'Changeme_123';

Succeed.

SQL> grant dba to wanggang7;

Succeed.

SQL> conn wanggang7/Changeme_123@127.0.0.1:1611

connected.

SQL> drop table if exists t_WITH_FORMAT_CSF1;

Succeed.

SQL> create table t_WITH_FORMAT_CSF1(a int) format csf;

Succeed.

SQL> drop table if exists t_WITH_FORMAT_CSF2;

Succeed.

SQL> create table t_WITH_FORMAT_CSF2(id int, name varchar2(100)) PARTITION BY range(id) 
  2 (
  3 partition p1 VALUES LESS THAN (1) format csf,
  4 partition p2 VALUES LESS THAN (2),
  5 partition p3 VALUES LESS THAN (3) format csf
  6 ) format csf;

Succeed.

SQL> 
SQL> exp users=wanggang7 filetype=bin file='csf_wanggang7.bin' with_format_csf=N;
Parsing export options ... 
Verify options ...
  verify schema ...
Starting export ...
Preparing to export ...
-- EXPORT TYPE = SCHEMA
-- EXPORT OBJECTS = WANGGANG7
-- FILE TYPE = BIN
-- DUMP FILE = csf_wanggang7.bin
-- LOG FILE = 
-- QUERY = ""
-- COMPRESS = N
-- CONSISTENT = N
-- CONTENT_MODE = ALL
-- SKIP_COMMENTS = N
-- FORCE = N
-- SKIP_ADD_DROP_TABLE = N
-- SKIP_TRIGGERS = N
-- QUOTE_NAMES = Y
-- TABLESPACE = N
-- COMMIT_BATCH = 1000
-- INSERT_BATCH = 1
-- FEEDBACK = 10000
-- PARALLEL = 0
-- TENANT = N
-- CREATE_USER = N
-- ROLE = N
-- GRANT = N
-- WITH_CR_MODE = N
-- WITH_FORMAT_CSF = N
-- INDEX_PARTITIONS = N

Exporting schema WANGGANG7 ...
Exporting sequence of schema WANGGANG7 ...
Exporting profile of schema WANGGANG7 ...
Exporting type of schema WANGGANG7 ...
Exporting tables of schema WANGGANG7 ...
Reading table objects of WANGGANG7

The order of exporting table is:
TABLE NAME                                                       LEVEL     
---------------------------------------------------------------- ----------
T_WITH_FORMAT_CSF1                                               1         
T_WITH_FORMAT_CSF2                                               2         

Exporting tables (scripts or data) of WANGGANG7
exporting table WANGGANG7.T_WITH_FORMAT_CSF1 ...
  exporting DDL of WANGGANG7.T_WITH_FORMAT_CSF1 ...
  exporting data of WANGGANG7.T_WITH_FORMAT_CSF1 ...
    data exporting success, 0 rows are dumped.

  exporting indexes on WANGGANG7.T_WITH_FORMAT_CSF1 ...
  exporting constraints on WANGGANG7.T_WITH_FORMAT_CSF1 ...

exporting table WANGGANG7.T_WITH_FORMAT_CSF2 ...
  exporting DDL of WANGGANG7.T_WITH_FORMAT_CSF2 ...
  exporting data of WANGGANG7.T_WITH_FORMAT_CSF2 ...
    data exporting success, 0 rows are dumped.

  exporting indexes on WANGGANG7.T_WITH_FORMAT_CSF2 ...
  exporting constraints on WANGGANG7.T_WITH_FORMAT_CSF2 ...

Exporting procedures/functions/triggers of schema WANGGANG7 ...
Exporting views of schema WANGGANG7 ...
Exporting synonyms of schema WANGGANG7 ...
Exporting package of schema WANGGANG7 ...
End of export schema WANGGANG7 ...

Logical export succeeded.

SQL> exp users=wanggang7 filetype=txt file='csf_wanggang7.txt' with_format_csf=N;
Parsing export options ... 
Verify options ...
  verify schema ...
Starting export ...
Preparing to export ...
-- EXPORT TYPE = SCHEMA
-- EXPORT OBJECTS = WANGGANG7
-- FILE TYPE = TXT
-- DUMP FILE = csf_wanggang7.txt
-- LOG FILE = 
-- QUERY = ""
-- COMPRESS = N
-- CONSISTENT = N
-- CONTENT_MODE = ALL
-- SKIP_COMMENTS = N
-- FORCE = N
-- SKIP_ADD_DROP_TABLE = N
-- SKIP_TRIGGERS = N
-- QUOTE_NAMES = Y
-- TABLESPACE = N
-- COMMIT_BATCH = 1000
-- INSERT_BATCH = 1
-- FEEDBACK = 10000
-- PARALLEL = 0
-- TENANT = N
-- CREATE_USER = N
-- ROLE = N
-- GRANT = N
-- WITH_CR_MODE = N
-- WITH_FORMAT_CSF = N
-- INDEX_PARTITIONS = N

Exporting schema WANGGANG7 ...
Exporting sequence of schema WANGGANG7 ...
Exporting profile of schema WANGGANG7 ...
Exporting type of schema WANGGANG7 ...
Exporting tables of schema WANGGANG7 ...
Reading table objects of WANGGANG7

The order of exporting table is:
TABLE NAME                                                       LEVEL     
---------------------------------------------------------------- ----------
T_WITH_FORMAT_CSF1                                               1         
T_WITH_FORMAT_CSF2                                               2         

Exporting tables (scripts or data) of WANGGANG7
exporting table WANGGANG7.T_WITH_FORMAT_CSF1 ...
  exporting DDL of WANGGANG7.T_WITH_FORMAT_CSF1 ...
  exporting data of WANGGANG7.T_WITH_FORMAT_CSF1 ...
    data exporting success, 0 rows are dumped.

  exporting indexes on WANGGANG7.T_WITH_FORMAT_CSF1 ...
  exporting constraints on WANGGANG7.T_WITH_FORMAT_CSF1 ...

exporting table WANGGANG7.T_WITH_FORMAT_CSF2 ...
  exporting DDL of WANGGANG7.T_WITH_FORMAT_CSF2 ...
  exporting data of WANGGANG7.T_WITH_FORMAT_CSF2 ...
    data exporting success, 0 rows are dumped.

  exporting indexes on WANGGANG7.T_WITH_FORMAT_CSF2 ...
  exporting constraints on WANGGANG7.T_WITH_FORMAT_CSF2 ...

Exporting procedures/functions/triggers of schema WANGGANG7 ...
Exporting views of schema WANGGANG7 ...
Exporting synonyms of schema WANGGANG7 ...
Exporting package of schema WANGGANG7 ...
End of export schema WANGGANG7 ...

Logical export succeeded.

SQL> 
SQL> conn sys/Huawei@123@127.0.0.1:1611

connected.

SQL> drop user if exists wanggang8 cascade;

Succeed.

SQL> create user wanggang8 identified by 'Changeme_123';

Succeed.

SQL> grant dba to wanggang8;

Succeed.

SQL> conn wanggang8/Changeme_123@127.0.0.1:1611

connected.

SQL> imp remap_schema=wanggang7:wanggang8 filetype=bin file='csf_wanggang7.bin';
Parsing import options ... 
Verify options ...
  verify remap schema ...
Starting import ...
Preparing to import ...
-- IMPORT TYPE = REMAP_SCHEMA
-- REMAP SCHEMA = WANGGANG7:wanggang8
-- DUMP FILE = csf_wanggang7.bin
-- LOG FILE = 
-- FILE TYPE = BIN
-- SHOW = N
-- FEEDBACK = 10000
-- PARALLEL = 1
-- DDL_PARALLEL = 1
-- CONTENT_MODE = ALL
-- IGNORE = N
-- CREATE_USER = N
-- TIMING = OFF
-- BATCH_COUNT = 10000
-- DISABLE_TRIGGER = Y
-- NOLOGGING = N


Importing schema WANGGANG7 ... 
  Importing sequence of schema WANGGANG7 ...
    Sequence importing success, 0 rows are loaded.
  Importing profile of schema WANGGANG7 ...
    Profile importing success, 0 rows are loaded.
  Importing type of schema WANGGANG7 ...
    Type importing success, 0 rows are loaded.

  Importing tables of schema WANGGANG7 ,total number : 2 ...
    The order of importing table is:
    TABLE NAME                                                       RECORD NUMBER 
    ---------------------------------------------------------------- --------------

  Importing foreign key of schema WANGGANG7 ...
    Foreign key importing success, 0 rows are loaded.

  Importing fuction/procedure/trigger of schema WANGGANG7 ...
    Fuction/procedure/trigger importing success, 0 rows are loaded.

  Importing view of schema WANGGANG7 ...
    View importing success, 0 rows are loaded.

  Importing synonym of schema WANGGANG7 ...
    Synonym importing success, 0 rows are loaded.

  Importing package of schema WANGGANG7 ...
    Package importing success, 0 rows are loaded.

data importing success, 0 rows are loaded.
Logical import succeeded.

SQL> -- table is not csf
SQL> show create table t_WITH_FORMAT_CSF1;

CREATE TABLE "T_WITH_FORMAT_CSF1"
(
  "A" BINARY_INTEGER
)
TABLESPACE "USERS"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT ASF;



SQL> -- table and part table are not csf
SQL> show create table t_WITH_FORMAT_CSF2;

CREATE TABLE "T_WITH_FORMAT_CSF2"
(
  "ID" BINARY_INTEGER,
  "NAME" VARCHAR(100 BYTE)
)
PARTITION BY RANGE ("ID")
(
    PARTITION P1 VALUES LESS THAN (1) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF,
    PARTITION P2 VALUES LESS THAN (2) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF,
    PARTITION P3 VALUES LESS THAN (3) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF
)
TABLESPACE "USERS"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT ASF;



SQL> 
SQL> conn sys/Huawei@123@127.0.0.1:1611

connected.

SQL> drop user if exists wanggang9 cascade;

Succeed.

SQL> create user wanggang9 identified by 'Changeme_123';

Succeed.

SQL> grant dba to wanggang9;

Succeed.

SQL> conn wanggang9/Changeme_123@127.0.0.1:1611

connected.

SQL> imp remap_schema=wanggang7:wanggang9 filetype=txt file='csf_wanggang7.txt';
Parsing import options ... 
Verify options ...
  verify remap schema ...
Starting import ...
Preparing to import ...
-- IMPORT TYPE = REMAP_SCHEMA
-- REMAP SCHEMA = WANGGANG7:wanggang9
-- DUMP FILE = csf_wanggang7.txt
-- LOG FILE = 
-- FILE TYPE = TXT
-- SHOW = N
-- FEEDBACK = 10000
-- PARALLEL = 1
-- DDL_PARALLEL = 1
-- CONTENT_MODE = ALL
-- IGNORE = N
-- CREATE_USER = N
-- TIMING = OFF
-- BATCH_COUNT = 10000
-- DISABLE_TRIGGER = Y
-- NOLOGGING = N

data importing success, 0 rows are loaded.
Logical import succeeded.

SQL> -- table is not csf
SQL> show create table t_WITH_FORMAT_CSF1;

CREATE TABLE "T_WITH_FORMAT_CSF1"
(
  "A" BINARY_INTEGER
)
TABLESPACE "USERS"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT ASF;



SQL> -- table and part table are not csf
SQL> show create table t_WITH_FORMAT_CSF2;

CREATE TABLE "T_WITH_FORMAT_CSF2"
(
  "ID" BINARY_INTEGER,
  "NAME" VARCHAR(100 BYTE)
)
PARTITION BY RANGE ("ID")
(
    PARTITION P1 VALUES LESS THAN (1) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF,
    PARTITION P2 VALUES LESS THAN (2) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF,
    PARTITION P3 VALUES LESS THAN (3) TABLESPACE "USERS" INITRANS 2 PCTFREE 8 FORMAT ASF
)
TABLESPACE "USERS"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT ASF;



SQL> 
SQL> -- don't support format csf if exits subpartitions
SQL> create table test_subpart_error(id int, c_id int, name varchar(20)) partition by range(id) subpartition by range(c_id)
  2 (
  3 partition p1 values less than(50) 
  4 (
  5 subpartition p11 values less than(50) format csf,
  6 subpartition p12 values less than(100)
  7 ));

CT-00601, [5:39]Sql syntax error: , expected but format found
SQL> create table test_subpart_error(id int, c_id int, name varchar(20)) partition by range(id) subpartition by range(c_id)
  2 (
  3 partition p1 values less than(50) format csf
  4 (
  5 subpartition p11 values less than(50),
  6 subpartition p12 values less than(100)
  7 ));

Succeed.

SQL> create table test_subpart_error(id int, c_id int, name varchar(20)) partition by range(id) subpartition by range(c_id)
  2 (
  3 partition p1 values less than(50)
  4 (
  5 subpartition p11 values less than(50),
  6 subpartition p12 values less than(100)
  7 )) format csf;

CT-01301, WANGGANG9.TEST_SUBPART_ERROR already exists
SQL> drop table if exists test_subpart;

Succeed.

SQL> create table test_subpart(id int) PARTITION BY RANGE(ID) INTERVAL(50) SUBPARTITION BY RANGE(id)
  2 (
  3 PARTITION P1 VALUES LESS THAN(50)
  4 (
  5 SUBPARTITION p11 VALUES LESS THAN (2)
  6 ));

Succeed.

SQL> alter table test_subpart modify partition p1 add subpartition p12 values less than(8) format csf;

CT-00601, [1:87]Sql syntax error: , expected but format found
SQL> drop table if exists shrink_timeout_sub_001;

Succeed.

SQL> create table shrink_timeout_sub_001(f1 int not null,f2 bigint,f3 numeric,f4 varchar(200),f5 date,f6 varchar(8000),f7 clob,f8 blob) partition by range(f1) subpartition by hash(f2) (partition p1 values less than(201) (subpartition p11,subpartition p12,subpartition p13), partition p2 values less than(401) (subpartition p21,subpartition p22,subpartition p23), partition p3 values less than(601) (subpartition p31,subpartition p32,subpartition p33), partition p4 values less than(801) (subpartition p41,subpartition p42,subpartition p43), partition p5 values less than(1201) (subpartition p51,subpartition p52,subpartition p53));

Succeed.

SQL> alter table shrink_timeout_sub_001 add partition p6 values less than(maxvalue) format csf (subpartition p61,subpartition p62);

Succeed.

SQL> alter table shrink_timeout_sub_001 add partition p6 values less than(maxvalue) format csf;

CT-01107, There were duplicate partition or subpartition names.
SQL> drop table if exists training;

Succeed.

SQL> CREATE TABLE training(staff_id INT NOT NULL, course_name CHAR(20), course_period DATETIME, exam_date DATETIME, score INT)
  2 PARTITION BY RANGE(staff_id)
  3 (
  4 PARTITION training2 VALUES LESS THAN(200),
  5 PARTITION training3 VALUES LESS THAN(300),
  6 PARTITION training4 VALUES LESS THAN(MAXVALUE)
  7 );

Succeed.

SQL> ALTER TABLE training SPLIT PARTITION training3 AT(250) INTO (PARTITION p1, PARTITION p2) format csf;

CT-00601, Sql syntax error: key word expected but format found
SQL> 
SQL> -- 1 test db_tables adm_tables and my_tables
SQL> -- 2 my_tab_partitions db_tab_partitions and adm_tab_partitions
SQL> conn sys/Huawei@123@127.0.0.1:1611

connected.

SQL> drop table if exists test_view_col_row_format;

Succeed.

SQL> create table  test_view_col_row_format(part_key int) storage (maxsize 2M initial 1M)
  2 partition by range (part_key) (
  3 partition p1 values less than(1) storage (maxsize 2M initial 1M) pctfree 1 format csf,
  4 partition p2 values less than(2) storage (maxsize 2M initial 1M) format csf,
  5 partition p3 values less than(3) pctfree 1 format csf,
  6 partition p4 values less than(4) storage (maxsize 2M initial 1M) pctfree 1
  7 );

Succeed.

SQL> 
SQL> select row_format from my_tables where table_name = 'TEST_VIEW_COL_ROW_FORMAT';

ROW_FORMAT
----------
ASF       

1 rows fetched.

SQL> select row_format from db_tables where table_name = 'TEST_VIEW_COL_ROW_FORMAT';

ROW_FORMAT
----------
ASF       

1 rows fetched.

SQL> select row_format from adm_tables where table_name = 'TEST_VIEW_COL_ROW_FORMAT';

ROW_FORMAT
----------
ASF       

1 rows fetched.

SQL> select PARTITION_NAME,row_format from my_tab_partitions  where table_name = 'TEST_VIEW_COL_ROW_FORMAT' order by PARTITION_NAME;

PARTITION_NAME                                                   ROW_FORMAT
---------------------------------------------------------------- ----------
P1                                                               CSF       
P2                                                               CSF       
P3                                                               CSF       
P4                                                               ASF       

4 rows fetched.

SQL> select PARTITION_NAME,row_format from db_tab_partitions  where table_name = 'TEST_VIEW_COL_ROW_FORMAT' order by PARTITION_NAME;

PARTITION_NAME                                                   ROW_FORMAT
---------------------------------------------------------------- ----------
P1                                                               CSF       
P2                                                               CSF       
P3                                                               CSF       
P4                                                               ASF       

4 rows fetched.

SQL> select PARTITION_NAME,row_format from adm_tab_partitions where table_name = 'TEST_VIEW_COL_ROW_FORMAT' order by PARTITION_NAME;

PARTITION_NAME                                                   ROW_FORMAT
---------------------------------------------------------------- ----------
P1                                                               CSF       
P2                                                               CSF       
P3                                                               CSF       
P4                                                               ASF       

4 rows fetched.

SQL> 
SQL> drop table if exists test_view_col_row_format;

Succeed.

SQL> create table  test_view_col_row_format(part_key int) storage (maxsize 2M initial 1M) format csf
  2 partition by range (part_key) (
  3 partition p1 values less than(1) storage (maxsize 2M initial 1M) pctfree 1 format csf,
  4 partition p2 values less than(2) storage (maxsize 2M initial 1M) format csf,
  5 partition p3 values less than(3) pctfree 1 format csf,
  6 partition p4 values less than(4) storage (maxsize 2M initial 1M) pctfree 1
  7 );

Succeed.

SQL> 
SQL> select row_format from my_tables where table_name = 'TEST_VIEW_COL_ROW_FORMAT';

ROW_FORMAT
----------
CSF       

1 rows fetched.

SQL> select row_format from db_tables where table_name = 'TEST_VIEW_COL_ROW_FORMAT';

ROW_FORMAT
----------
CSF       

1 rows fetched.

SQL> select row_format from adm_tables where table_name = 'TEST_VIEW_COL_ROW_FORMAT';

ROW_FORMAT
----------
CSF       

1 rows fetched.

SQL> select PARTITION_NAME,row_format from my_tab_partitions  where table_name = 'TEST_VIEW_COL_ROW_FORMAT' order by PARTITION_NAME;

PARTITION_NAME                                                   ROW_FORMAT
---------------------------------------------------------------- ----------
P1                                                               CSF       
P2                                                               CSF       
P3                                                               CSF       
P4                                                               CSF       

4 rows fetched.

SQL> select PARTITION_NAME,row_format from db_tab_partitions  where table_name = 'TEST_VIEW_COL_ROW_FORMAT' order by PARTITION_NAME;

PARTITION_NAME                                                   ROW_FORMAT
---------------------------------------------------------------- ----------
P1                                                               CSF       
P2                                                               CSF       
P3                                                               CSF       
P4                                                               CSF       

4 rows fetched.

SQL> select PARTITION_NAME,row_format from adm_tab_partitions where table_name = 'TEST_VIEW_COL_ROW_FORMAT' order by PARTITION_NAME;

PARTITION_NAME                                                   ROW_FORMAT
---------------------------------------------------------------- ----------
P1                                                               CSF       
P2                                                               CSF       
P3                                                               CSF       
P4                                                               CSF       

4 rows fetched.

SQL> 
SQL> 
SQL> --DTS202101290LF234P1N00
SQL> drop table  if exists test1;

Succeed.

SQL> create table test1(id int) PARTITION BY list(id) 
  2 (
  3 partition p1 values (1) format csf ,
  4 partition p2 values (2)
  5 ) APPENDONLY ON;

Succeed.

SQL> show create table test1;

CREATE TABLE "TEST1"
(
  "ID" BINARY_INTEGER
)
PARTITION BY LIST ("ID")
(
    PARTITION P1 VALUES(1) TABLESPACE "SYSTEM" INITRANS 2 PCTFREE 8 FORMAT CSF,
    PARTITION P2 VALUES(2) TABLESPACE "SYSTEM" INITRANS 2 PCTFREE 8 FORMAT ASF
)
TABLESPACE "SYSTEM"
INITRANS 2
MAXTRANS 255
PCTFREE 8
APPENDONLY ON
FORMAT ASF;



SQL> drop table  if exists test1;

Succeed.

SQL> create table test1(id int) APPENDONLY ON;

Succeed.

SQL> show create table test1;

CREATE TABLE "TEST1"
(
  "ID" BINARY_INTEGER
)
TABLESPACE "SYSTEM"
INITRANS 2
MAXTRANS 255
PCTFREE 8
APPENDONLY ON
FORMAT ASF;



SQL>
SQL> drop table if exists test_csf;

Succeed.

SQL> create table test_csf(id int, c_id number) format csf;

Succeed.

SQL> create unique index test_index_csf on test_csf(c_id);

Succeed.

SQL> insert into test_csf values(10, 0);

1 rows affected.

SQL> update test_csf set c_id = null;

1 rows affected.

SQL> select * from test_csf;

ID           C_ID
------------ ----------------------------------------
10

1 rows fetched.

SQL> delete from test_csf;

1 rows affected.

SQL> drop table test_csf;

Succeed.

SQL> 
SQL> --syntax test
SQL> drop table if exists tbl_format_test;

Succeed.

SQL> create table tbl_format_test(a int, b int) format;

CT-00601, [1:50]Sql syntax error: CSF or ASF expected
SQL> create table tbl_format_test(a int, b int) format hello;

CT-00601, [1:51]Sql syntax error: CSF or ASF expected
SQL> create table tbl_format_test(a int, b int) format XXX YYY;

CT-00601, [1:51]Sql syntax error: CSF or ASF expected
SQL> create table tbl_format_test(a int, b int) format asf;

Succeed.

SQL> drop table if exists tbl_format_test;

Succeed.

SQL> create table tbl_format_test(a int, b int) format csf;

Succeed.

SQL> drop table if exists tbl_format_test;

Succeed.

SQL> 
SQL> --support normal table csf format
SQL> --csf mode test case1
SQL> alter system set row_format = asf;

Succeed.

SQL> show parameters row_format;

NAME                                                             DATATYPE             VALUE                                                            RUNTIME_VALUE                                                    EFFECTIVE
---------------------------------------------------------------- -------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- --------------------
ROW_FORMAT                                                       CT_TYPE_VARCHAR      ASF                                                              ASF                                                              immediately


SQL> 
SQL> drop table if exists tbl_format_test;

Succeed.

SQL> create table tbl_format_test(a int, b int) format csf;

Succeed.

SQL> select owner, table_name, ROW_FORMAT from ADM_TABLES where table_name = upper('tbl_format_test') order by table_name asc;

OWNER                                                            TABLE_NAME                                                       ROW_FORMAT
---------------------------------------------------------------- ---------------------------------------------------------------- ----------
SYS                                                              TBL_FORMAT_TEST                                                  CSF

1 rows fetched.

SQL> 
SQL> drop table if exists tbl_format_test;

Succeed.

SQL> create table tbl_format_test(a int, b int) format asf;

Succeed.

SQL> select owner, table_name, ROW_FORMAT from ADM_TABLES where table_name = upper('tbl_format_test') order by table_name asc;

OWNER                                                            TABLE_NAME                                                       ROW_FORMAT
---------------------------------------------------------------- ---------------------------------------------------------------- ----------
SYS                                                              TBL_FORMAT_TEST                                                  ASF

1 rows fetched.

SQL> 
SQL> drop table if exists tbl_format_test;

Succeed.

SQL> create table tbl_format_test(a int, b int);

Succeed.

SQL> select owner, table_name, ROW_FORMAT from ADM_TABLES where table_name = upper('tbl_format_test') order by table_name asc;

OWNER                                                            TABLE_NAME                                                       ROW_FORMAT
---------------------------------------------------------------- ---------------------------------------------------------------- ----------
SYS                                                              TBL_FORMAT_TEST                                                  ASF

1 rows fetched.

SQL> 
SQL> alter system set row_format = csf;

Succeed.

SQL> show parameters row_format;

NAME                                                             DATATYPE             VALUE                                                            RUNTIME_VALUE                                                    EFFECTIVE
---------------------------------------------------------------- -------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- --------------------
ROW_FORMAT                                                       CT_TYPE_VARCHAR      CSF                                                              CSF                                                              immediately


SQL> 
SQL> drop table if exists tbl_format_test;

Succeed.

SQL> create table tbl_format_test(a int, b int) format csf;

Succeed.

SQL> select owner, table_name, ROW_FORMAT from ADM_TABLES where table_name = upper('tbl_format_test') order by table_name asc;

OWNER                                                            TABLE_NAME                                                       ROW_FORMAT
---------------------------------------------------------------- ---------------------------------------------------------------- ----------
SYS                                                              TBL_FORMAT_TEST                                                  CSF

1 rows fetched.

SQL> 
SQL> drop table if exists tbl_format_test;

Succeed.

SQL> create table tbl_format_test(a int, b int) format asf;

Succeed.

SQL> select owner, table_name, ROW_FORMAT from ADM_TABLES where table_name = upper('tbl_format_test') order by table_name asc;

OWNER                                                            TABLE_NAME                                                       ROW_FORMAT
---------------------------------------------------------------- ---------------------------------------------------------------- ----------
SYS                                                              TBL_FORMAT_TEST                                                  ASF

1 rows fetched.

SQL> 
SQL> drop table if exists tbl_format_test;

Succeed.

SQL> create table tbl_format_test(a int, b int);

Succeed.

SQL> select owner, table_name, ROW_FORMAT from ADM_TABLES where table_name = upper('tbl_format_test') order by table_name asc;

OWNER                                                            TABLE_NAME                                                       ROW_FORMAT
---------------------------------------------------------------- ---------------------------------------------------------------- ----------
SYS                                                              TBL_FORMAT_TEST                                                  CSF

1 rows fetched.

SQL> 
SQL> --support part csf format
SQL> --csf mode test case2
SQL> alter system set row_format = asf;

Succeed.

SQL> show parameters row_format;

NAME                                                             DATATYPE             VALUE                                                            RUNTIME_VALUE                                                    EFFECTIVE
---------------------------------------------------------------- -------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- --------------------
ROW_FORMAT                                                       CT_TYPE_VARCHAR      ASF                                                              ASF                                                              immediately


SQL> 
SQL> drop table  if exists t_part_tbl_csf;

Succeed.

SQL> create table t_part_tbl_csf(id int, name varchar2(100)) PARTITION BY list(id)
  2 (
  3 partition p1 values (1) format csf,
  4 partition p2 values (2),
  5 partition p3 values (3) format csf
  6 );

Succeed.

SQL> alter table t_part_tbl_csf add partition p6 values(4) format csf;

Succeed.

SQL> alter table t_part_tbl_csf add partition p7 values(5);

Succeed.

SQL> alter table t_part_tbl_csf add partition p8 values(6) format asf;

Succeed.

SQL> select TABLE_OWNER, PARTITION_NAME, ROW_FORMAT from ADM_TAB_PARTITIONS where table_name = upper('t_part_tbl_csf') order by PARTITION_NAME asc;

TABLE_OWNER                                                      PARTITION_NAME                                                   ROW_FORMAT
---------------------------------------------------------------- ---------------------------------------------------------------- ----------
SYS                                                              P1                                                               CSF
SYS                                                              P2                                                               ASF
SYS                                                              P3                                                               CSF
SYS                                                              P6                                                               CSF
SYS                                                              P7                                                               ASF
SYS                                                              P8                                                               ASF

6 rows fetched.

SQL> 
SQL> alter system set row_format = csf;

Succeed.

SQL> show parameters row_format;

NAME                                                             DATATYPE             VALUE                                                            RUNTIME_VALUE                                                    EFFECTIVE
---------------------------------------------------------------- -------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- --------------------
ROW_FORMAT                                                       CT_TYPE_VARCHAR      CSF                                                              CSF                                                              immediately


SQL> 
SQL> drop table  if exists t_part_tbl_csf;

Succeed.

SQL> create table t_part_tbl_csf(id int, name varchar2(100)) PARTITION BY list(id)
  2 (
  3 partition p1 values (1) format csf,
  4 partition p2 values (2),
  5 partition p3 values (3) format csf
  6 );

Succeed.

SQL> alter table t_part_tbl_csf add partition p6 values(4) format csf;

Succeed.

SQL> alter table t_part_tbl_csf add partition p7 values(5);

Succeed.

SQL> alter table t_part_tbl_csf add partition p8 values(6) format asf;

Succeed.

SQL> select TABLE_OWNER, PARTITION_NAME, ROW_FORMAT from ADM_TAB_PARTITIONS where table_name = upper('t_part_tbl_csf') order by PARTITION_NAME asc;

TABLE_OWNER                                                      PARTITION_NAME                                                   ROW_FORMAT
---------------------------------------------------------------- ---------------------------------------------------------------- ----------
SYS                                                              P1                                                               CSF
SYS                                                              P2                                                               CSF
SYS                                                              P3                                                               CSF
SYS                                                              P6                                                               CSF
SYS                                                              P7                                                               CSF
SYS                                                              P8                                                               ASF

6 rows fetched.

SQL> 
SQL> --csf mode test case3
SQL> alter system set row_format = asf;

Succeed.

SQL> show parameters row_format;

NAME                                                             DATATYPE             VALUE                                                            RUNTIME_VALUE                                                    EFFECTIVE
---------------------------------------------------------------- -------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- --------------------
ROW_FORMAT                                                       CT_TYPE_VARCHAR      ASF                                                              ASF                                                              immediately


SQL> 
SQL> drop table  if exists t_part_tbl_csf;

Succeed.

SQL> create table t_part_tbl_csf(id int, name varchar2(100)) PARTITION BY range(id)
  2 (
  3 partition p1 VALUES LESS THAN (1) format csf,
  4 partition p2 VALUES LESS THAN (2),
  5 partition p3 VALUES LESS THAN (3) format csf
  6 );

Succeed.

SQL> alter table t_part_tbl_csf add partition p6 VALUES LESS THAN(4) format csf;

Succeed.

SQL> alter table t_part_tbl_csf add partition p7 VALUES LESS THAN(5);

Succeed.

SQL> alter table t_part_tbl_csf add partition p8 VALUES LESS THAN(100) format asf;

Succeed.

SQL> select TABLE_OWNER, PARTITION_NAME, ROW_FORMAT from ADM_TAB_PARTITIONS where table_name = upper('t_part_tbl_csf') order by PARTITION_NAME asc;

TABLE_OWNER                                                      PARTITION_NAME                                                   ROW_FORMAT
---------------------------------------------------------------- ---------------------------------------------------------------- ----------
SYS                                                              P1                                                               CSF
SYS                                                              P2                                                               ASF
SYS                                                              P3                                                               CSF
SYS                                                              P6                                                               CSF
SYS                                                              P7                                                               ASF
SYS                                                              P8                                                               ASF

6 rows fetched.

SQL> 
SQL> alter system set row_format = csf;

Succeed.

SQL> show parameters row_format;

NAME                                                             DATATYPE             VALUE                                                            RUNTIME_VALUE                                                    EFFECTIVE
---------------------------------------------------------------- -------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- --------------------
ROW_FORMAT                                                       CT_TYPE_VARCHAR      CSF                                                              CSF                                                              immediately


SQL> 
SQL> drop table  if exists t_part_tbl_csf;

Succeed.

SQL> create table t_part_tbl_csf(id int, name varchar2(100)) PARTITION BY range(id)
  2 (
  3 partition p1 VALUES LESS THAN (1) format csf,
  4 partition p2 VALUES LESS THAN (2),
  5 partition p3 VALUES LESS THAN (3) format csf
  6 );

Succeed.

SQL> alter table t_part_tbl_csf add partition p6 VALUES LESS THAN(4) format csf;

Succeed.

SQL> alter table t_part_tbl_csf add partition p7 VALUES LESS THAN(5);

Succeed.

SQL> alter table t_part_tbl_csf add partition p8 VALUES LESS THAN(100) format asf;

Succeed.

SQL> select TABLE_OWNER, PARTITION_NAME, ROW_FORMAT from ADM_TAB_PARTITIONS where table_name = upper('t_part_tbl_csf') order by PARTITION_NAME asc;

TABLE_OWNER                                                      PARTITION_NAME                                                   ROW_FORMAT
---------------------------------------------------------------- ---------------------------------------------------------------- ----------
SYS                                                              P1                                                               CSF
SYS                                                              P2                                                               CSF
SYS                                                              P3                                                               CSF
SYS                                                              P6                                                               CSF
SYS                                                              P7                                                               CSF
SYS                                                              P8                                                               ASF

6 rows fetched.

SQL> 
SQL> --csf mode test case4
SQL> alter system set row_format = asf;

Succeed.

SQL> show parameters row_format;

NAME                                                             DATATYPE             VALUE                                                            RUNTIME_VALUE                                                    EFFECTIVE
---------------------------------------------------------------- -------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- --------------------
ROW_FORMAT                                                       CT_TYPE_VARCHAR      ASF                                                              ASF                                                              immediately


SQL> 
SQL> drop table  if exists t_part_tbl_csf;

Succeed.

SQL> create table t_part_tbl_csf(id int, name varchar2(100)) PARTITION BY range(id) interval(1)
  2 (
  3 partition p1 VALUES LESS THAN (1) format csf,
  4 partition p2 VALUES LESS THAN (2),
  5 partition p3 VALUES LESS THAN (3) format csf,
  6 partition p4 VALUES LESS THAN (4) format asf
  7 );

Succeed.

SQL> alter table t_part_tbl_csf add partition p6 VALUES LESS THAN(5) format csf;

CT-01110, The operation add interval partition was not allowed
SQL> alter table t_part_tbl_csf add partition p7 VALUES LESS THAN(6);

CT-01110, The operation add interval partition was not allowed
SQL> select TABLE_OWNER, PARTITION_NAME, ROW_FORMAT from ADM_TAB_PARTITIONS where table_name = upper('t_part_tbl_csf') order by PARTITION_NAME asc;

TABLE_OWNER                                                      PARTITION_NAME                                                   ROW_FORMAT
---------------------------------------------------------------- ---------------------------------------------------------------- ----------
SYS                                                              P1                                                               CSF
SYS                                                              P2                                                               ASF
SYS                                                              P3                                                               CSF
SYS                                                              P4                                                               ASF

4 rows fetched.

SQL> 
SQL> alter system set row_format = csf;

Succeed.

SQL> show parameters row_format;

NAME                                                             DATATYPE             VALUE                                                            RUNTIME_VALUE                                                    EFFECTIVE
---------------------------------------------------------------- -------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- --------------------
ROW_FORMAT                                                       CT_TYPE_VARCHAR      CSF                                                              CSF                                                              immediately


SQL> 
SQL> drop table  if exists t_part_tbl_csf;

Succeed.

SQL> create table t_part_tbl_csf(id int, name varchar2(100)) PARTITION BY range(id) interval(1)
  2 (
  3 partition p1 VALUES LESS THAN (1) format csf,
  4 partition p2 VALUES LESS THAN (2),
  5 partition p3 VALUES LESS THAN (3) format csf,
  6 partition p4 VALUES LESS THAN (4) format asf
  7 );

Succeed.

SQL> alter table t_part_tbl_csf add partition p6 VALUES LESS THAN(5) format csf;

CT-01110, The operation add interval partition was not allowed
SQL> alter table t_part_tbl_csf add partition p7 VALUES LESS THAN(6);

CT-01110, The operation add interval partition was not allowed
SQL> select TABLE_OWNER, PARTITION_NAME, ROW_FORMAT from ADM_TAB_PARTITIONS where table_name = upper('t_part_tbl_csf') order by PARTITION_NAME asc;

TABLE_OWNER                                                      PARTITION_NAME                                                   ROW_FORMAT
---------------------------------------------------------------- ---------------------------------------------------------------- ----------
SYS                                                              P1                                                               CSF
SYS                                                              P2                                                               CSF
SYS                                                              P3                                                               CSF
SYS                                                              P4                                                               ASF

4 rows fetched.

SQL> 
SQL> --csf mode test case5
SQL> alter system set row_format = asf;

Succeed.

SQL> show parameters row_format;

NAME                                                             DATATYPE             VALUE                                                            RUNTIME_VALUE                                                    EFFECTIVE
---------------------------------------------------------------- -------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- --------------------
ROW_FORMAT                                                       CT_TYPE_VARCHAR      ASF                                                              ASF                                                              immediately


SQL> 
SQL> drop table  if exists t_part_tbl_csf;

Succeed.

SQL> create table t_part_tbl_csf(id int, name varchar2(100)) PARTITION BY hash(id)
  2 (
  3 partition p1 format csf,
  4 partition p2,
  5 partition p3 format csf,
  6 partition p4 format asf,
  7 partition p5 format asf
  8 );

Succeed.

SQL> alter table t_part_tbl_csf add partition p6 format csf;

CT-00613, Invalid operation, data redistribute between different partition row types are forbidden
SQL> alter table t_part_tbl_csf add partition p7;

Succeed.

SQL> alter table t_part_tbl_csf add partition p8 format csf;

Succeed.

SQL> select TABLE_OWNER, PARTITION_NAME, ROW_FORMAT from ADM_TAB_PARTITIONS where table_name = upper('t_part_tbl_csf') order by PARTITION_NAME asc;

TABLE_OWNER                                                      PARTITION_NAME                                                   ROW_FORMAT
---------------------------------------------------------------- ---------------------------------------------------------------- ----------
SYS                                                              P1                                                               CSF
SYS                                                              P2                                                               ASF
SYS                                                              P3                                                               CSF
SYS                                                              P4                                                               ASF
SYS                                                              P5                                                               ASF
SYS                                                              P7                                                               ASF
SYS                                                              P8                                                               CSF

7 rows fetched.

SQL> 
SQL> alter system set row_format = csf;

Succeed.

SQL> show parameters row_format;

NAME                                                             DATATYPE             VALUE                                                            RUNTIME_VALUE                                                    EFFECTIVE
---------------------------------------------------------------- -------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- --------------------
ROW_FORMAT                                                       CT_TYPE_VARCHAR      CSF                                                              CSF                                                              immediately


SQL> 
SQL> drop table  if exists t_part_tbl_csf;

Succeed.

SQL> create table t_part_tbl_csf(id int, name varchar2(100)) PARTITION BY hash(id)
  2 (
  3 partition p1 format csf,
  4 partition p2,
  5 partition p3 format csf,
  6 partition p4 format asf,
  7 partition p5 format asf
  8 );

Succeed.

SQL> alter table t_part_tbl_csf add partition p6 format csf;

Succeed.

SQL> alter table t_part_tbl_csf add partition p7;

Succeed.

SQL> alter table t_part_tbl_csf add partition p8 format csf;

CT-00613, Invalid operation, data redistribute between different partition row types are forbidden
SQL> select TABLE_OWNER, PARTITION_NAME, ROW_FORMAT from ADM_TAB_PARTITIONS where table_name = upper('t_part_tbl_csf') order by PARTITION_NAME asc;

TABLE_OWNER                                                      PARTITION_NAME                                                   ROW_FORMAT
---------------------------------------------------------------- ---------------------------------------------------------------- ----------
SYS                                                              P1                                                               CSF
SYS                                                              P2                                                               CSF
SYS                                                              P3                                                               CSF
SYS                                                              P4                                                               ASF
SYS                                                              P5                                                               ASF
SYS                                                              P6                                                               CSF
SYS                                                              P7                                                               CSF

7 rows fetched.

SQL> 
SQL> --csf parameter test end
SQL> alter system set row_format = asf;

Succeed.

SQL> drop table  if exists t_part_tbl_csf;

Succeed.

SQL> drop table if exists tbl_format_test;

Succeed.

SQL> 
SQL> --DTS20210331075Q8KP0H00
SQL> alter system set row_format = csf;

Succeed.

SQL> drop table if exists sub_part_csf_test;

Succeed.

SQL> create table sub_part_csf_test(num int,c_id int,c_d_id bigint NOT NULL,c_w_id tinyint unsigned NOT NULL,c_uint UINT not null,c_first varchar(16) NOT NULL,c_middle char(2),c_last varchar(16) NOT NULL,c_street_1 varchar(20) NOT NULL,c_street_2 varchar(20),c_zero timestamp NOT NULL,c_start date NOT NULL,c_zip char(9) NOT NULL,c_phone char(16) NOT NULL,c_since timestamp,c_credit char(2),c_credit_lim numeric,c_discount numeric(5,2),c_balance numeric(12,2),c_ytd_payment real NOT NULL,c_payment_cnt number NOT NULL,c_delivery_cnt bool NOT NULL,c_end date NOT NULL,c_data1 varchar(7744),c_data2 varchar(7744),c_data3 varchar(7744),c_data4 varchar(7744),c_data5 varchar(7744),c_data6 varchar(7744),c_data7 varchar(7744),c_data8 varchar(7744),c_clob clob,c_blob blob) PARTITION BY RANGE(C_ID) SUBPARTITION BY RANGE(C_W_ID) (PARTITION P1 VALUES LESS THAN(161)(SUBPARTITION P11 VALUES LESS THAN(3),SUBPARTITION P12 VALUES LESS THAN(5),SUBPARTITION P13 VALUES LESS THAN(7),SUBPARTITION P14 VALUES LESS THAN(9),SUBPARTITION P15 VALUES LESS THAN(11)),PARTITION P2 VALUES LESS THAN(321)(SUBPARTITION P21 VALUES LESS THAN(3),SUBPARTITION P22 VALUES LESS THAN(5),SUBPARTITION P23 VALUES LESS THAN(7),SUBPARTITION P24 VALUES LESS THAN(9),SUBPARTITION P25 VALUES LESS THAN(11)),PARTITION P3 VALUES LESS THAN(481)(SUBPARTITION P31 VALUES LESS THAN(3),SUBPARTITION P32 VALUES LESS THAN(5),SUBPARTITION P33 VALUES LESS THAN(7),SUBPARTITION P34 VALUES LESS THAN(9),SUBPARTITION P35 VALUES LESS THAN(11)),PARTITION P4 VALUES LESS THAN(641)(SUBPARTITION P41 VALUES LESS THAN(3),SUBPARTITION P42 VALUES LESS THAN(5),SUBPARTITION P43 VALUES LESS THAN(7),SUBPARTITION P44 VALUES LESS THAN(9),SUBPARTITION P45 VALUES LESS THAN(11)),PARTITION P5 VALUES LESS THAN(801)(SUBPARTITION P51 VALUES LESS THAN(3),SUBPARTITION P52 VALUES LESS THAN(5),SUBPARTITION P53 VALUES LESS THAN(7),SUBPARTITION P54 VALUES LESS THAN(9),SUBPARTITION P55 VALUES LESS THAN(11)));

Succeed.

SQL> show create table sub_part_csf_test;

CREATE TABLE "SUB_PART_CSF_TEST"
(
  "NUM" BINARY_INTEGER,
  "C_ID" BINARY_INTEGER,
  "C_D_ID" BINARY_BIGINT NOT NULL,
  "C_W_ID" BINARY_UINT32 NOT NULL,
  "C_UINT" BINARY_UINT32 NOT NULL,
  "C_FIRST" VARCHAR(16 BYTE) NOT NULL,
  "C_MIDDLE" CHAR(2 BYTE),
  "C_LAST" VARCHAR(16 BYTE) NOT NULL,
  "C_STREET_1" VARCHAR(20 BYTE) NOT NULL,
  "C_STREET_2" VARCHAR(20 BYTE),
  "C_ZERO" TIMESTAMP(6) NOT NULL,
  "C_START" DATE NOT NULL,
  "C_ZIP" CHAR(9 BYTE) NOT NULL,
  "C_PHONE" CHAR(16 BYTE) NOT NULL,
  "C_SINCE" TIMESTAMP(6),
  "C_CREDIT" CHAR(2 BYTE),
  "C_CREDIT_LIM" NUMBER,
  "C_DISCOUNT" NUMBER(5, 2),
  "C_BALANCE" NUMBER(12, 2),
  "C_YTD_PAYMENT" BINARY_DOUBLE NOT NULL,
  "C_PAYMENT_CNT" NUMBER NOT NULL,
  "C_DELIVERY_CNT" BOOLEAN NOT NULL,
  "C_END" DATE NOT NULL,
  "C_DATA1" VARCHAR(7744 BYTE),
  "C_DATA2" VARCHAR(7744 BYTE),
  "C_DATA3" VARCHAR(7744 BYTE),
  "C_DATA4" VARCHAR(7744 BYTE),
  "C_DATA5" VARCHAR(7744 BYTE),
  "C_DATA6" VARCHAR(7744 BYTE),
  "C_DATA7" VARCHAR(7744 BYTE),
  "C_DATA8" VARCHAR(7744 BYTE),
  "C_CLOB" CLOB,
  "C_BLOB" BLOB
)
PARTITION BY RANGE ("C_ID")
SUBPARTITION BY RANGE ("C_W_ID")
(
    PARTITION P1 VALUES LESS THAN (161) TABLESPACE "SYSTEM" INITRANS 2 PCTFREE 8 FORMAT CSF(
        SUBPARTITION P11 VALUES LESS THAN (3) TABLESPACE "SYSTEM",
        SUBPARTITION P12 VALUES LESS THAN (5) TABLESPACE "SYSTEM",
        SUBPARTITION P13 VALUES LESS THAN (7) TABLESPACE "SYSTEM",
        SUBPARTITION P14 VALUES LESS THAN (9) TABLESPACE "SYSTEM",
        SUBPARTITION P15 VALUES LESS THAN (11) TABLESPACE "SYSTEM"
    ),
    PARTITION P2 VALUES LESS THAN (321) TABLESPACE "SYSTEM" INITRANS 2 PCTFREE 8 FORMAT CSF(
        SUBPARTITION P21 VALUES LESS THAN (3) TABLESPACE "SYSTEM",
        SUBPARTITION P22 VALUES LESS THAN (5) TABLESPACE "SYSTEM",
        SUBPARTITION P23 VALUES LESS THAN (7) TABLESPACE "SYSTEM",
        SUBPARTITION P24 VALUES LESS THAN (9) TABLESPACE "SYSTEM",
        SUBPARTITION P25 VALUES LESS THAN (11) TABLESPACE "SYSTEM"
    ),
    PARTITION P3 VALUES LESS THAN (481) TABLESPACE "SYSTEM" INITRANS 2 PCTFREE 8 FORMAT CSF(
        SUBPARTITION P31 VALUES LESS THAN (3) TABLESPACE "SYSTEM",
        SUBPARTITION P32 VALUES LESS THAN (5) TABLESPACE "SYSTEM",
        SUBPARTITION P33 VALUES LESS THAN (7) TABLESPACE "SYSTEM",
        SUBPARTITION P34 VALUES LESS THAN (9) TABLESPACE "SYSTEM",
        SUBPARTITION P35 VALUES LESS THAN (11) TABLESPACE "SYSTEM"
    ),
    PARTITION P4 VALUES LESS THAN (641) TABLESPACE "SYSTEM" INITRANS 2 PCTFREE 8 FORMAT CSF(
        SUBPARTITION P41 VALUES LESS THAN (3) TABLESPACE "SYSTEM",
        SUBPARTITION P42 VALUES LESS THAN (5) TABLESPACE "SYSTEM",
        SUBPARTITION P43 VALUES LESS THAN (7) TABLESPACE "SYSTEM",
        SUBPARTITION P44 VALUES LESS THAN (9) TABLESPACE "SYSTEM",
        SUBPARTITION P45 VALUES LESS THAN (11) TABLESPACE "SYSTEM"
    ),
    PARTITION P5 VALUES LESS THAN (801) TABLESPACE "SYSTEM" INITRANS 2 PCTFREE 8 FORMAT CSF(
        SUBPARTITION P51 VALUES LESS THAN (3) TABLESPACE "SYSTEM",
        SUBPARTITION P52 VALUES LESS THAN (5) TABLESPACE "SYSTEM",
        SUBPARTITION P53 VALUES LESS THAN (7) TABLESPACE "SYSTEM",
        SUBPARTITION P54 VALUES LESS THAN (9) TABLESPACE "SYSTEM",
        SUBPARTITION P55 VALUES LESS THAN (11) TABLESPACE "SYSTEM"
    )
)
TABLESPACE "SYSTEM"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT CSF;



SQL> 
SQL> select table_name, ROW_FORMAT from ADM_TABLES where table_name = upper('sub_part_csf_test') order by table_name asc;

TABLE_NAME                                                       ROW_FORMAT
---------------------------------------------------------------- ----------
SUB_PART_CSF_TEST                                                CSF

1 rows fetched.

SQL> drop table if exists sub_part_csf_test;

Succeed.

SQL> alter system set row_format = asf;

Succeed.

SQL> 
SQL> alter system set row_format = csf;

Succeed.

SQL> drop table if exists row_format_tbl_003;

Succeed.

SQL> create global temporary table row_format_tbl_003(c_id int);

Succeed.

SQL> select TABLE_NAME,row_format from ADM_TABLES where TABLE_NAME='ROW_FORMAT_TBL_003';

TABLE_NAME                                                       ROW_FORMAT
---------------------------------------------------------------- ----------
ROW_FORMAT_TBL_003                                               ASF

1 rows fetched.

SQL> drop table if exists row_format_tbl_003;

Succeed.

SQL> alter system set row_format = asf;

Succeed.

SQL> 
SQL> --DTS2021040906OYRCP1L00
SQL> drop table if exists row_format_tbl_003;

Succeed.

SQL> create table row_format_tbl_003(num int,c_id number,c_d_id bigint NOT NULL,c_w_id tinyint unsigned NOT NULL,c_uint UINT not null,c_first varchar(16) NOT NULL,c_middle char(2),c_last varchar(16) NOT NULL,c_street_1 varchar(20) NOT NULL,c_street_2 varchar(20),c_zero timestamp NOT NULL,c_start date NOT NULL,c_zip char(9) NOT NULL,c_phone char(16) NOT NULL,c_since timestamp,c_credit char(2),c_credit_lim numeric,c_discount numeric(5,2),c_balance numeric(12,2),c_ytd_payment real NOT NULL,c_payment_cnt number NOT NULL,c_delivery_cnt bool NOT NULL,c_end date NOT NULL,c_data1 varchar(7744),c_data2 varchar(7744),c_data3 varchar(7744),c_data4 varchar(7744),c_data5 varchar(7744),c_data6 varchar(7744),c_data7 varchar(7744),c_data8 varchar(7744),c_clob clob,c_blob blob) PARTITION BY RANGE(C_ID) INTERVAL(100) SUBPARTITION BY RANGE(C_DISCOUNT)(PARTITION P1 VALUES LESS THAN(201) storage(initial 64k maxsize 2g)(SUBPARTITION P11 VALUES LESS THAN(21),SUBPARTITION P12 VALUES LESS THAN(51),SUBPARTITION P13 VALUES LESS THAN(81)),PARTITION P2 VALUES LESS THAN(401) storage(initial 128k maxsize 2g) (SUBPARTITION P21 VALUES LESS THAN(21),SUBPARTITION P22 VALUES LESS THAN(51),SUBPARTITION P23 VALUES LESS THAN(81)),PARTITION P3 VALUES LESS THAN(601) storage(initial 96k maxsize 2g) (SUBPARTITION P31 VALUES LESS THAN(21),SUBPARTITION P32 VALUES LESS THAN(51),SUBPARTITION P33 VALUES LESS THAN(81)),PARTITION P4 VALUES LESS THAN(701) storage(initial 96k maxsize 2g) (SUBPARTITION P41 VALUES LESS THAN(21) ,SUBPARTITION P42 VALUES LESS THAN(51),SUBPARTITION P43 VALUES LESS THAN(MAXVALUE))) storage(initial 164k maxsize 10g) format asf ;

Succeed.

SQL> drop table if exists row_format_tbl_003;

Succeed.

SQL> create table row_format_tbl_003(num int,c_id number,c_d_id bigint NOT NULL,c_w_id tinyint unsigned NOT NULL,c_uint UINT not null,c_first varchar(16) NOT NULL,c_middle char(2),c_last varchar(16) NOT NULL,c_street_1 varchar(20) NOT NULL,c_street_2 varchar(20),c_zero timestamp NOT NULL,c_start date NOT NULL,c_zip char(9) NOT NULL,c_phone char(16) NOT NULL,c_since timestamp,c_credit char(2),c_credit_lim numeric,c_discount numeric(5,2),c_balance numeric(12,2),c_ytd_payment real NOT NULL,c_payment_cnt number NOT NULL,c_delivery_cnt bool NOT NULL,c_end date NOT NULL,c_data1 varchar(7744),c_data2 varchar(7744),c_data3 varchar(7744),c_data4 varchar(7744),c_data5 varchar(7744),c_data6 varchar(7744),c_data7 varchar(7744),c_data8 varchar(7744),c_clob clob,c_blob blob) PARTITION BY RANGE(C_ID) INTERVAL(100) SUBPARTITION BY RANGE(C_DISCOUNT)(PARTITION P1 VALUES LESS THAN(201) storage(initial 64k maxsize 2g)(SUBPARTITION P11 VALUES LESS THAN(21),SUBPARTITION P12 VALUES LESS THAN(51),SUBPARTITION P13 VALUES LESS THAN(81)),PARTITION P2 VALUES LESS THAN(401) storage(initial 128k maxsize 2g) (SUBPARTITION P21 VALUES LESS THAN(21),SUBPARTITION P22 VALUES LESS THAN(51),SUBPARTITION P23 VALUES LESS THAN(81)),PARTITION P3 VALUES LESS THAN(601) storage(initial 96k maxsize 2g) (SUBPARTITION P31 VALUES LESS THAN(21),SUBPARTITION P32 VALUES LESS THAN(51),SUBPARTITION P33 VALUES LESS THAN(81)),PARTITION P4 VALUES LESS THAN(701) storage(initial 96k maxsize 2g) (SUBPARTITION P41 VALUES LESS THAN(21) ,SUBPARTITION P42 VALUES LESS THAN(51),SUBPARTITION P43 VALUES LESS THAN(MAXVALUE))) storage(initial 164k maxsize 10g) format csf ;

Succeed.

SQL> drop table if exists row_format_tbl_003;

Succeed.

SQL> 
SQL> drop table if exists row_format_tbl_003;

Succeed.

SQL> create global temporary table row_format_tbl_003(c_first varchar(4000),c_first_1 varchar(8000),c_first_2 varchar(8000),c_first_3 varchar(8000),c_first_4 varchar(8000),c_first_5 varchar(8000),c_first_6 varchar(8000),c_first_7 varchar(8000),c_first_8 varchar(4000)) format asf;

Succeed.

SQL> drop table if exists row_format_tbl_003;

Succeed.

SQL> create global temporary table row_format_tbl_003(c_first varchar(4000),c_first_1 varchar(8000),c_first_2 varchar(8000),c_first_3 varchar(8000),c_first_4 varchar(8000),c_first_5 varchar(8000),c_first_6 varchar(8000),c_first_7 varchar(8000),c_first_8 varchar(4000)) format csf;

CT-00601, Sql syntax error:  not support csf for current table type.
SQL> drop table if exists row_format_tbl_003;

Succeed.

SQL> 
SQL> drop table if exists row_format_tbl_003;

Succeed.

SQL> create table row_format_tbl_003(num int,c_id number,c_d_id bigint NOT NULL,c_w_id tinyint unsigned NOT NULL,c_uint UINT not null,c_first varchar(16) NOT NULL,c_middle char(2),c_last varchar(16) NOT NULL,c_street_1 varchar(20) NOT NULL,c_street_2 varchar(20),c_zero timestamp NOT NULL,c_start date NOT NULL,c_zip char(9) NOT NULL,c_phone char(16) NOT NULL,c_since timestamp,c_credit char(2),c_credit_lim numeric,c_discount numeric(5,2),c_balance numeric(12,2),c_ytd_payment real NOT NULL,c_payment_cnt number NOT NULL,c_delivery_cnt bool NOT NULL,c_end date NOT NULL,c_data1 varchar(7744),c_data2 varchar(7744),c_data3 varchar(7744),c_data4 varchar(7744),c_data5 varchar(7744),c_data6 varchar(7744),c_data7 varchar(7744),c_data8 varchar(7744),c_clob clob,c_blob blob) PARTITION BY RANGE(C_ID) INTERVAL(100) SUBPARTITION BY RANGE(C_DISCOUNT)(PARTITION P1 VALUES LESS THAN(201) storage(initial 64k maxsize 2g) format asf (SUBPARTITION P11 VALUES LESS THAN(21),SUBPARTITION P12 VALUES LESS THAN(51),SUBPARTITION P13 VALUES LESS THAN(81)),PARTITION P2 VALUES LESS THAN(401) storage(initial 128k maxsize 2g) format asf (SUBPARTITION P21 VALUES LESS THAN(21),SUBPARTITION P22 VALUES LESS THAN(51),SUBPARTITION P23 VALUES LESS THAN(81)),PARTITION P3 VALUES LESS THAN(601) storage(initial 96k maxsize 2g) format asf (SUBPARTITION P31 VALUES LESS THAN(21),SUBPARTITION P32 VALUES LESS THAN(51),SUBPARTITION P33 VALUES LESS THAN(81)),PARTITION P4 VALUES LESS THAN(701) storage(initial 96k maxsize 2g) format asf (SUBPARTITION P41 VALUES LESS THAN(21) ,SUBPARTITION P42 VALUES LESS THAN(51),SUBPARTITION P43 VALUES LESS THAN(MAXVALUE))) storage(initial 164k maxsize 10g) format asf ;

Succeed.

SQL> drop table if exists row_format_tbl_003;

Succeed.

SQL> create table row_format_tbl_003(num int,c_id number,c_d_id bigint NOT NULL,c_w_id tinyint unsigned NOT NULL,c_uint UINT not null,c_first varchar(16) NOT NULL,c_middle char(2),c_last varchar(16) NOT NULL,c_street_1 varchar(20) NOT NULL,c_street_2 varchar(20),c_zero timestamp NOT NULL,c_start date NOT NULL,c_zip char(9) NOT NULL,c_phone char(16) NOT NULL,c_since timestamp,c_credit char(2),c_credit_lim numeric,c_discount numeric(5,2),c_balance numeric(12,2),c_ytd_payment real NOT NULL,c_payment_cnt number NOT NULL,c_delivery_cnt bool NOT NULL,c_end date NOT NULL,c_data1 varchar(7744),c_data2 varchar(7744),c_data3 varchar(7744),c_data4 varchar(7744),c_data5 varchar(7744),c_data6 varchar(7744),c_data7 varchar(7744),c_data8 varchar(7744),c_clob clob,c_blob blob) PARTITION BY RANGE(C_ID) INTERVAL(100) SUBPARTITION BY RANGE(C_DISCOUNT)(PARTITION P1 VALUES LESS THAN(201) storage(initial 64k maxsize 2g) format csf (SUBPARTITION P11 VALUES LESS THAN(21),SUBPARTITION P12 VALUES LESS THAN(51),SUBPARTITION P13 VALUES LESS THAN(81)),PARTITION P2 VALUES LESS THAN(401) storage(initial 128k maxsize 2g) format csf (SUBPARTITION P21 VALUES LESS THAN(21),SUBPARTITION P22 VALUES LESS THAN(51),SUBPARTITION P23 VALUES LESS THAN(81)),PARTITION P3 VALUES LESS THAN(601) storage(initial 96k maxsize 2g) format csf (SUBPARTITION P31 VALUES LESS THAN(21),SUBPARTITION P32 VALUES LESS THAN(51),SUBPARTITION P33 VALUES LESS THAN(81)),PARTITION P4 VALUES LESS THAN(701) storage(initial 96k maxsize 2g) format csf (SUBPARTITION P41 VALUES LESS THAN(21) ,SUBPARTITION P42 VALUES LESS THAN(51),SUBPARTITION P43 VALUES LESS THAN(MAXVALUE))) storage(initial 164k maxsize 10g) format asf ;

Succeed.

SQL> drop table if exists row_format_tbl_003;

Succeed.

SQL> 
SQL> --DTS202104260E3OOGP0I00
SQL> drop table if exists jdd_csf_test;

Succeed.

SQL> create table jdd_csf_test(c_d_id int)partition by list(c_d_id) (partition part_1 values (0,1),partition part_max values (default) format asf) format csf;

Succeed.

SQL> insert into jdd_csf_test values(0),(1),(2),(3);

4 rows affected.

SQL> select TABLE_NAME,PARTITION_NAME,ROW_FORMAT from ADM_TAB_PARTITIONS where TABLE_NAME=upper('jdd_csf_test') order by PARTITION_NAME asc;

TABLE_NAME                                                       PARTITION_NAME                                                   ROW_FORMAT
---------------------------------------------------------------- ---------------------------------------------------------------- ----------
JDD_CSF_TEST                                                     PART_1                                                           CSF
JDD_CSF_TEST                                                     PART_MAX                                                         ASF

2 rows fetched.

SQL> select * from jdd_csf_test partition(part_1) order by C_D_ID asc;

C_D_ID
------------
0
1

2 rows fetched.

SQL> select * from jdd_csf_test partition(part_max) order by C_D_ID asc;

C_D_ID
------------
2
3

2 rows fetched.

SQL> update jdd_csf_test set c_d_id=3 where C_D_ID=0;

CT-00613, Invalid operation, cross partition update between different partition row types are forbidden
SQL> drop table if exists jdd_csf_test;

Succeed.

SQL> 
SQL> drop table if exists jdd_csf_test;

Succeed.

SQL> create table jdd_csf_test(c_d_id int)partition by list(c_d_id) (partition part_1 values (0,1),partition part_max values (default) format csf) format asf;

Succeed.

SQL> insert into jdd_csf_test values(0),(1),(2),(3);

4 rows affected.

SQL> select TABLE_NAME,PARTITION_NAME,ROW_FORMAT from ADM_TAB_PARTITIONS where TABLE_NAME=upper('jdd_csf_test') order by PARTITION_NAME asc;

TABLE_NAME                                                       PARTITION_NAME                                                   ROW_FORMAT
---------------------------------------------------------------- ---------------------------------------------------------------- ----------
JDD_CSF_TEST                                                     PART_1                                                           ASF
JDD_CSF_TEST                                                     PART_MAX                                                         CSF

2 rows fetched.

SQL> select * from jdd_csf_test partition(part_1) order by C_D_ID asc;

C_D_ID
------------
0
1

2 rows fetched.

SQL> select * from jdd_csf_test partition(part_max) order by C_D_ID asc;

C_D_ID
------------
2
3

2 rows fetched.

SQL> update jdd_csf_test set c_d_id=3 where C_D_ID=0;

CT-00613, Invalid operation, cross partition update between different partition row types are forbidden
SQL> drop table if exists jdd_csf_test;

Succeed.

SQL> 
SQL> --DTS2021052607HHT8P0F00
SQL> --pre set data
SQL> drop table if exists csf_row_rowlink_shrink_000;

Succeed.

SQL> create table csf_row_rowlink_shrink_000( c_id integer,f_char1 varchar(7744), f_char2 varchar(7744), f_char3 varchar(7744), f_char4 varchar(7744), f_char5 varchar(7744), f_char6 varchar(7744), f_char7 varchar(7744), f_char8 varchar(7744), f_char9 varchar(7744), f_char10 varchar(7744),
  2 f_char11 varchar(7744), f_char12 varchar(7744), f_char13 varchar(7744), f_char14 varchar(7744), f_char15 varchar(7744), f_char16 varchar(7744), f_char17 varchar(7744), f_char18 varchar(7744), f_char19 varchar(7744), f_char20 varchar(7744),
  3 f_char21 varchar(7744), f_char22 varchar(7744), f_char23 varchar(7744), f_char24 varchar(7744), f_char25 varchar(7744), f_char26 varchar(7744), f_char27 varchar(7744), f_char28 varchar(7744), f_char29 varchar(7744), f_char30 varchar(7744),
  4 f_char31 varchar(7744), f_char32 varchar(7744), f_char33 varchar(7744), f_char34 varchar(7744), f_char35 varchar(7744), f_char36 varchar(7744), f_char37 varchar(7744), f_char38 varchar(7744), f_char39 varchar(7744), f_char40 varchar(7744),
  5 f_char41 varchar(7744), f_char42 varchar(7744), f_char43 varchar(7744), f_char44 varchar(7744), f_char45 varchar(7744), f_char46 varchar(7744), f_char47 varchar(7744), f_char48 varchar(7744), f_char49 varchar(7744), f_char50 varchar(7744),
  6 f_char51 varchar(7744), f_char52 varchar(7744), f_char53 varchar(7744), f_char54 varchar(7744), f_char55 varchar(7744), f_char56 varchar(7744), f_char57 varchar(7744), f_char58 varchar(7744), f_char59 varchar(7744), f_char60 varchar(7744),
  7 f_char61 varchar(7744), f_char62 varchar(7744), f_char63 varchar(7744), f_char64 varchar(7744), f_char65 varchar(7744), f_char66 varchar(7744), f_char67 varchar(7744), f_char68 varchar(7744), f_char69 varchar(7744), f_char70 varchar(7744),
  8 f_char71 varchar(7744), f_char72 varchar(7744), f_char73 varchar(7744), f_char74 varchar(7744), f_char75 varchar(7744), f_char76 varchar(7744), f_char77 varchar(7744), f_char78 varchar(7744), f_char79 varchar(7744), f_char80 varchar(7744),
  9 f_char81 varchar(7744), f_char82 varchar(7744), f_char83 varchar(7744), f_char84 varchar(7744), f_char85 varchar(7744), f_char86 varchar(7744), f_char87 varchar(7744), f_char88 varchar(7744), f_char89 varchar(7744), f_char90 varchar(7744),
 10 f_char91 varchar(7744), f_char92 varchar(7744), f_char93 varchar(7744), f_char94 varchar(7744), f_char95 varchar(7744), f_char96 varchar(7744), f_char97 varchar(7744), f_char98 varchar(7744), f_char99 varchar(7744), f_char100 varchar(7744),
 11 f_char101 varchar(7744), f_char102 varchar(7744), f_char103 varchar(7744), f_char104 varchar(7744), f_char105 varchar(7744), f_char106 varchar(7744), f_char107 varchar(7744), f_char108 varchar(7744), f_char109 varchar(7744), f_char110 varchar(7744),
 12 f_char111 varchar(7744), f_char112 varchar(7744), f_char113 varchar(7744), f_char114 varchar(7744), f_char115 varchar(7744), f_char116 varchar(7744), f_char117 varchar(7744), f_char118 varchar(7744), f_char119 varchar(7744), f_char120 varchar(7744),
 13 f_char121 varchar(7744), f_char122 varchar(7744), f_char123 varchar(7744), f_char124 varchar(7744), f_char125 varchar(7744), f_char126 varchar(7744), f_char127 varchar(7744), f_char128 varchar(7744), f_char129 varchar(7744), f_char130 varchar(7744),
 14 f_char131 varchar(7744), f_char132 varchar(7744), f_char133 varchar(7744), f_char134 varchar(7744), f_char135 varchar(7744), f_char136 varchar(7744), f_char137 varchar(7744), f_char138 varchar(7744), f_char139 varchar(7744), f_char140 varchar(7744),
 15 f_char141 varchar(7744), f_char142 varchar(7744), f_char143 varchar(7744), f_char144 varchar(7744), f_char145 varchar(7744), f_char146 varchar(7744), f_char147 varchar(7744), f_char148 varchar(7744), f_char149 varchar(7744), f_char150 varchar(7744),
 16 f_char151 varchar(7744), f_char152 varchar(7744), f_char153 varchar(7744), f_char154 varchar(7744), f_char155 varchar(7744), f_char156 varchar(7744), f_char157 varchar(7744), f_char158 varchar(7744), f_char159 varchar(7744), f_char160 varchar(7744),
 17 f_char161 varchar(7744), f_char162 varchar(7744), f_char163 varchar(7744), f_char164 varchar(7744), f_char165 varchar(7744), f_char166 varchar(7744), f_char167 varchar(7744), f_char168 varchar(7744), f_char169 varchar(7744), f_char170 varchar(7744),
 18 f_char171 varchar(7744), f_char172 varchar(7744), f_char173 varchar(7744), f_char174 varchar(7744), f_char175 varchar(7744), f_char176 varchar(7744), f_char177 varchar(7744), f_char178 varchar(7744), f_char179 varchar(7744), f_char180 varchar(7744),
 19 f_char181 varchar(7744), f_char182 varchar(7744), f_char183 varchar(7744), f_char184 varchar(7744), f_char185 varchar(7744), f_char186 varchar(7744), f_char187 varchar(7744), f_char188 varchar(7744), f_char189 varchar(7744), f_char190 varchar(7744),
 20 f_char191 varchar(7744), f_char192 varchar(7744), f_char193 varchar(7744), f_char194 varchar(7744), f_char195 varchar(7744), f_char196 varchar(7744), f_char197 varchar(7744), f_char198 varchar(7744), f_char199 varchar(7744), f_char200 varchar(7744),
 21 f_char201 varchar(7744), f_char202 varchar(7744), f_char203 varchar(7744), f_char204 varchar(7744), f_char205 varchar(7744), f_char206 varchar(7744), f_char207 varchar(7744), f_char208 varchar(7744), f_char209 varchar(7744), f_char210 varchar(7744),
 22 f_char211 varchar(7744), f_char212 varchar(7744), f_char213 varchar(7744), f_char214 varchar(7744), f_char215 varchar(7744), f_char216 varchar(7744), f_char217 varchar(7744), f_char218 varchar(7744), f_char219 varchar(7744), f_char220 varchar(7744),
 23 f_char221 varchar(7744), f_char222 varchar(7744), f_char223 varchar(7744), f_char224 varchar(7744), f_char225 varchar(7744), f_char226 varchar(7744), f_char227 varchar(7744), f_char228 varchar(7744), f_char229 varchar(7744), f_char230 varchar(7744),
 24 f_char231 varchar(7744), f_char232 varchar(7744), f_char233 varchar(7744), f_char234 varchar(7744), f_char235 varchar(7744), f_char236 varchar(7744), f_char237 varchar(7744), f_char238 varchar(7744), f_char239 varchar(7744), f_char240 varchar(7744),
 25 f_char241 varchar(7744), f_char242 varchar(7744), f_char243 varchar(7744), f_char244 varchar(7744), f_char245 varchar(7744), f_char246 varchar(7744), f_char247 varchar(7744), f_char248 varchar(7744), f_char249 varchar(7744), f_char250 varchar(7744),f_char251 varchar(7744), f_char252 varchar(7744), f_char253 varchar(7744), f_char254 varchar(7744), f_char255 varchar(7744), f_char256 varchar(7744), f_char257 varchar(7744), f_char258 varchar(7744), f_char259 varchar(7744), f_char260 varchar(7744)) format csf;

Succeed.

SQL> 
SQL> create or replace procedure csf_row_rowlink_shrink_pro_000 (startall int,endall int)  as
  2 i int;
  3 begin
  4     for i in startall..endall loop
  5         insert into csf_row_rowlink_shrink_000(c_id,f_char1,f_char2) values(i,lpad(i,5000,'char1'),lpad(i,5000,'char2'));commit;
  6     end loop;
  7 end;
  8 /

Succeed.

SQL> 
SQL> call csf_row_rowlink_shrink_pro_000(1,100);

PL/SQL procedure successfully completed.

SQL> commit;

Succeed.

SQL> 
SQL> --I1.create normal table
SQL> drop table if exists csf_row_rowlink_shrink_002;

Succeed.

SQL> create table csf_row_rowlink_shrink_002 format csf as select * from csf_row_rowlink_shrink_000;

Succeed.

SQL> --insert into csf_row_rowlink_shrink_002(c_id,f_char1,f_char2) select c_id,f_char1,f_char2 from csf_row_rowlink_shrink_000;
SQL> select count(*) from csf_row_rowlink_shrink_002;

COUNT(*)            
--------------------
100                 

1 rows fetched.

SQL> commit;

Succeed.

SQL> 
SQL> --I2.update to let slice to be 239
SQL> declare
  2     i integer;
  3     j integer;
  4     sql_str varchar(4000);
  5     sql_str1 varchar(4000);
  6     sql_str_11 varchar(4200);
  7 	  sql_str_22 varchar(20);
  8 begin
  9     sql_str_11 := lpad('3',10,'test');
 10 	  sql_str_22 := lpad('3',null,'test');
 11     for i in 3 .. 238
 12     loop
 13         sql_str := 'update csf_row_rowlink_shrink_002 set f_char'||i||' = '''||sql_str_11||'''';
 14         j := i-1;
 15         sql_str1 := 'update csf_row_rowlink_shrink_002 set f_char'||j||' = '''||sql_str_22||'''';
 16         execute immediate sql_str;
 17         execute immediate sql_str1;
 18     end loop;
 19     i := 239;
 20 	  sql_str := 'update csf_row_rowlink_shrink_002 set f_char'||i||' = lpad('''||i||''', 4200, ''char'''''||i||''')';
 21     j := i-1;
 22     sql_str1 := 'update csf_row_rowlink_shrink_002 set f_char'||j||' = lpad('''||j||''', null, ''char'''''||j||''')';
 23     execute immediate sql_str;
 24     execute immediate sql_str1;
 25     commit;
 26 end;
 27 /

PL/SQL procedure successfully completed.

SQL> 
SQL> --I3.updateto let slice to over 240
SQL> create or replace procedure csf_row_rowlink_shrink_002_pro(cidnum int)
  2 is
  3     rowidnum varchar(500);
  4     buffergetsnum varchar(4000);
  5     sqltextnum varchar(4000);
  6     rowlinkcursor sys_refcursor;
  7 begin
  8     execute immediate 'select rowid from csf_row_rowlink_shrink_002 where c_id='||cidnum into rowidnum;
  9     sqltextnum :='select * from csf_row_rowlink_shrink_002 where rowid='''||rowidnum||'''';
 10     open rowlinkcursor for sqltextnum;
 11     dbe_sql.return_cursor(rowlinkcursor);
 12 end;
 13 /

Succeed.

SQL> 
SQL> create or replace procedure csf_row_rowlink_shrink_002_pro_1(cidnum int)
  2 is
  3     rowidnum varchar(500);
  4     buffergetsnum varchar(4000);
  5 begin
  6     execute immediate 'select rowid from csf_row_rowlink_shrink_002 where c_id='||cidnum into rowidnum;
  7     execute immediate 'select buffer_gets from dv_sqls where sql_text=''select * from csf_row_rowlink_shrink_002 where rowid='''''||rowidnum||'''''''' into buffergetsnum;
  8 end;
  9 /

Succeed.

SQL> 
SQL> update csf_row_rowlink_shrink_002 set f_char240=lpad('240',4200,'char240'),f_char241=lpad('241',4200,'char241'),f_char242=lpad('242',4200,'char242'),f_char243=lpad('243',4200,'char243'),f_char244=lpad('244',4200,'char244'),f_char245=lpad('245',4200,'char245'),f_char246=lpad('246',4200,'char246'),f_char247=lpad('247',4100,'char247'),f_char248=lpad('248',4100,'char248'),f_char249=lpad('249',4100,'char249'),f_char250=lpad('250',4100,'char250'),f_char251=lpad('251',4100,'char251'),f_char252=lpad('252',4100,'char252');

CT-00727, update row size 63500 exceeds the limitation 63153
SQL> commit;

Succeed.

SQL> 
SQL> --finally, clear
SQL> drop procedure csf_row_rowlink_shrink_pro_000;

Succeed.

SQL> drop procedure csf_row_rowlink_shrink_002_pro;

Succeed.

SQL> drop procedure csf_row_rowlink_shrink_002_pro_1;

Succeed.

SQL> drop table csf_row_rowlink_shrink_000;

Succeed.

SQL> drop table csf_row_rowlink_shrink_002;

Succeed.

SQL> 
SQL> ----AR.20210623195540.001
SQL> -------------------------------
SQL> --RANGE
SQL> -------------------------------
SQL> alter system set row_format = csf;

Succeed.

SQL> drop table if exists sub_part_csf_test;

Succeed.

SQL> 
SQL> create table sub_part_csf_test(num int, c_id int, c_w_id tinyint unsigned NOT NULL) 
  2 PARTITION BY RANGE(C_ID) 
  3 SUBPARTITION BY RANGE(C_W_ID) (
  4 PARTITION P1 VALUES LESS THAN(161) format asf (SUBPARTITION P11 VALUES LESS THAN(3),SUBPARTITION P12 VALUES LESS THAN(5),SUBPARTITION P13 VALUES LESS THAN(7),SUBPARTITION P14 VALUES LESS THAN(9),SUBPARTITION P15 VALUES LESS THAN(11)),
  5 PARTITION P2 VALUES LESS THAN(321)(SUBPARTITION P21 VALUES LESS THAN(3),SUBPARTITION P22 VALUES LESS THAN(5),SUBPARTITION P23 VALUES LESS THAN(7),SUBPARTITION P24 VALUES LESS THAN(9),SUBPARTITION P25 VALUES LESS THAN(11)),
  6 PARTITION P3 VALUES LESS THAN(481) format asf (SUBPARTITION P31 VALUES LESS THAN(3),SUBPARTITION P32 VALUES LESS THAN(5),SUBPARTITION P33 VALUES LESS THAN(7),SUBPARTITION P34 VALUES LESS THAN(9),SUBPARTITION P35 VALUES LESS THAN(11)),
  7 PARTITION P4 VALUES LESS THAN(641)(SUBPARTITION P41 VALUES LESS THAN(3),SUBPARTITION P42 VALUES LESS THAN(5),SUBPARTITION P43 VALUES LESS THAN(7),SUBPARTITION P44 VALUES LESS THAN(9),SUBPARTITION P45 VALUES LESS THAN(11)),
  8 PARTITION P5 VALUES LESS THAN(801) format asf (SUBPARTITION P51 VALUES LESS THAN(3),SUBPARTITION P52 VALUES LESS THAN(5),SUBPARTITION P53 VALUES LESS THAN(7),SUBPARTITION P54 VALUES LESS THAN(9),SUBPARTITION P55 VALUES LESS THAN(11)));

Succeed.

SQL> 
SQL> show create table sub_part_csf_test;

CREATE TABLE "SUB_PART_CSF_TEST"
(
  "NUM" BINARY_INTEGER,
  "C_ID" BINARY_INTEGER,
  "C_W_ID" BINARY_UINT32 NOT NULL
)
PARTITION BY RANGE ("C_ID")
SUBPARTITION BY RANGE ("C_W_ID")
(
    PARTITION P1 VALUES LESS THAN (161) TABLESPACE "SYSTEM" INITRANS 2 PCTFREE 8 FORMAT ASF(
        SUBPARTITION P11 VALUES LESS THAN (3) TABLESPACE "SYSTEM", 
        SUBPARTITION P12 VALUES LESS THAN (5) TABLESPACE "SYSTEM", 
        SUBPARTITION P13 VALUES LESS THAN (7) TABLESPACE "SYSTEM", 
        SUBPARTITION P14 VALUES LESS THAN (9) TABLESPACE "SYSTEM", 
        SUBPARTITION P15 VALUES LESS THAN (11) TABLESPACE "SYSTEM"
    ),
    PARTITION P2 VALUES LESS THAN (321) TABLESPACE "SYSTEM" INITRANS 2 PCTFREE 8 FORMAT CSF(
        SUBPARTITION P21 VALUES LESS THAN (3) TABLESPACE "SYSTEM", 
        SUBPARTITION P22 VALUES LESS THAN (5) TABLESPACE "SYSTEM", 
        SUBPARTITION P23 VALUES LESS THAN (7) TABLESPACE "SYSTEM", 
        SUBPARTITION P24 VALUES LESS THAN (9) TABLESPACE "SYSTEM", 
        SUBPARTITION P25 VALUES LESS THAN (11) TABLESPACE "SYSTEM"
    ),
    PARTITION P3 VALUES LESS THAN (481) TABLESPACE "SYSTEM" INITRANS 2 PCTFREE 8 FORMAT ASF(
        SUBPARTITION P31 VALUES LESS THAN (3) TABLESPACE "SYSTEM", 
        SUBPARTITION P32 VALUES LESS THAN (5) TABLESPACE "SYSTEM", 
        SUBPARTITION P33 VALUES LESS THAN (7) TABLESPACE "SYSTEM", 
        SUBPARTITION P34 VALUES LESS THAN (9) TABLESPACE "SYSTEM", 
        SUBPARTITION P35 VALUES LESS THAN (11) TABLESPACE "SYSTEM"
    ),
    PARTITION P4 VALUES LESS THAN (641) TABLESPACE "SYSTEM" INITRANS 2 PCTFREE 8 FORMAT CSF(
        SUBPARTITION P41 VALUES LESS THAN (3) TABLESPACE "SYSTEM", 
        SUBPARTITION P42 VALUES LESS THAN (5) TABLESPACE "SYSTEM", 
        SUBPARTITION P43 VALUES LESS THAN (7) TABLESPACE "SYSTEM", 
        SUBPARTITION P44 VALUES LESS THAN (9) TABLESPACE "SYSTEM", 
        SUBPARTITION P45 VALUES LESS THAN (11) TABLESPACE "SYSTEM"
    ),
    PARTITION P5 VALUES LESS THAN (801) TABLESPACE "SYSTEM" INITRANS 2 PCTFREE 8 FORMAT ASF(
        SUBPARTITION P51 VALUES LESS THAN (3) TABLESPACE "SYSTEM", 
        SUBPARTITION P52 VALUES LESS THAN (5) TABLESPACE "SYSTEM", 
        SUBPARTITION P53 VALUES LESS THAN (7) TABLESPACE "SYSTEM", 
        SUBPARTITION P54 VALUES LESS THAN (9) TABLESPACE "SYSTEM", 
        SUBPARTITION P55 VALUES LESS THAN (11) TABLESPACE "SYSTEM"
    )
)
TABLESPACE "SYSTEM"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT CSF;



SQL> 
SQL> insert into sub_part_csf_test values(1, 100, 3), (1, 160, 8), (1, 130, 10);

3 rows affected.

SQL> insert into sub_part_csf_test values(1, 140, 20);

CT-01103, Invalid (sub)partition key, inserted partition key does not map to any subpartition
SQL> insert into sub_part_csf_test values(2, 200, 3), (2, 250, 8), (2, 300, 10);

3 rows affected.

SQL> insert into sub_part_csf_test values(3, 390, 3), (3, 470, 8), (3, 480, 10);

3 rows affected.

SQL> insert into sub_part_csf_test values(4, 500, 3), (4, 600, 8), (4, 630, 10);

3 rows affected.

SQL> insert into sub_part_csf_test values(5, 700, 3), (5, 800, 8), (5, 750, 10);

3 rows affected.

SQL> commit;

Succeed.

SQL> select * from sub_part_csf_test order by c_id;

NUM          C_ID         C_W_ID      
------------ ------------ ------------
1            100          3           
1            130          10          
1            160          8           
2            200          3           
2            250          8           
2            300          10          
3            390          3           
3            470          8           
3            480          10          
4            500          3           
4            600          8           
4            630          10          
5            700          3           
5            750          10          
5            800          8           

15 rows fetched.

SQL> 
SQL> --delete 
SQL> ALTER TABLE sub_part_csf_test DROP PARTITION P1;

Succeed.

SQL> ALTER TABLE sub_part_csf_test DROP SUBPARTITION P31;

Succeed.

SQL> ALTER TABLE sub_part_csf_test DROP SUBPARTITION P42;

Succeed.

SQL> ALTER TABLE sub_part_csf_test DROP SUBPARTITION P55;

Succeed.

SQL> select * from sub_part_csf_test order by c_id;

NUM          C_ID         C_W_ID      
------------ ------------ ------------
2            200          3           
2            250          8           
2            300          10          
3            390          3           
3            470          8           
3            480          10          
4            600          8           
4            630          10          
5            700          3           
5            800          8           

10 rows fetched.

SQL> 
SQL> --add partition
SQL> alter table sub_part_csf_test ADD PARTITION  P6 VALUES LESS THAN(888) (SUBPARTITION P61 VALUES LESS THAN(3),SUBPARTITION P62 VALUES LESS THAN(5),SUBPARTITION P63 VALUES LESS THAN(7),SUBPARTITION P64 VALUES LESS THAN(9),SUBPARTITION P65 VALUES LESS THAN(11));

Succeed.

SQL> insert into sub_part_csf_test values(6, 810, 3), (6, 850, 8), (6, 880, 10);

3 rows affected.

SQL> commit;

Succeed.

SQL> select * from sub_part_csf_test order by c_id;

NUM          C_ID         C_W_ID      
------------ ------------ ------------
2            200          3           
2            250          8           
2            300          10          
3            390          3           
3            470          8           
3            480          10          
4            600          8           
4            630          10          
5            700          3           
5            800          8           
6            810          3           
6            850          8           
6            880          10          

13 rows fetched.

SQL> 
SQL> --split
SQL> alter table sub_part_csf_test SPLIT PARTITION P6 AT(855) into (PARTITION P6_1, PARTITION P6_2) UPDATE GLOBAL INDEXES;

Succeed.

SQL> alter table sub_part_csf_test SPLIT SUBPARTITION P43 AT(4) into (SUBPARTITION P43_1, SUBPARTITION P43_2) UPDATE GLOBAL INDEXES;

Succeed.

SQL> alter table sub_part_csf_test SPLIT SUBPARTITION P23 AT(6) into (SUBPARTITION P23_1, SUBPARTITION P23_2) UPDATE GLOBAL INDEXES;

Succeed.

SQL> 
SQL> --truncate
SQL> ALTER TABLE sub_part_csf_test TRUNCATE PARTITION P4;

Succeed.

SQL> ALTER TABLE sub_part_csf_test TRUNCATE SUBPARTITION P21;

Succeed.

SQL> ALTER TABLE sub_part_csf_test TRUNCATE SUBPARTITION P23;

CT-00800, A table (sub)partition P23 does not exist.
SQL> ALTER TABLE sub_part_csf_test TRUNCATE SUBPARTITION P25;

Succeed.

SQL> ALTER TABLE sub_part_csf_test TRUNCATE SUBPARTITION P65;

Succeed.

SQL> select * from sub_part_csf_test order by c_id;

NUM          C_ID         C_W_ID      
------------ ------------ ------------
2            200          3           
2            250          8           
3            390          3           
3            470          8           
3            480          10          
5            700          3           
5            800          8           
6            810          3           
6            850          8           

9 rows fetched.

SQL> 
SQL> select TABLE_NAME, COMPOSITE, PARTITION_NAME, SUBPARTITION_COUNT, ROW_FORMAT from ADM_TAB_PARTITIONS where TABLE_NAME = upper('sub_part_csf_test');

TABLE_NAME                                                       COMPOSITE PARTITION_NAME                                                   SUBPARTITION_COUNT                       ROW_FORMAT
---------------------------------------------------------------- --------- ---------------------------------------------------------------- ---------------------------------------- ----------
SUB_PART_CSF_TEST                                                YES       P2                                                               6                                        CSF       
SUB_PART_CSF_TEST                                                YES       P3                                                               4                                        ASF       
SUB_PART_CSF_TEST                                                YES       P4                                                               5                                        CSF       
SUB_PART_CSF_TEST                                                YES       P5                                                               4                                        ASF       
SUB_PART_CSF_TEST                                                YES       P6_1                                                             5                                        CSF       
SUB_PART_CSF_TEST                                                YES       P6_2                                                             5                                        CSF       

6 rows fetched.

SQL> 
SQL> --check row format
SQL> select a.NAME, a.INITRANS, a.PCTFREE, DECODE(a.FLAGS & 8, 8, 'CSF', 'ASF') AS ROW_FORMAT from SYS_SUB_TABLE_PARTS a join MY_TABLES b on a.TABLE# = TABLE_ID where NAME like 'P2%' and b.TABLE_NAME = upper('sub_part_csf_test') order by a.NAME;

NAME                                                             INITRANS     PCTFREE      ROW_FORMAT
---------------------------------------------------------------- ------------ ------------ ----------
P21                                                              2            8            CSF       
P22                                                              2            8            CSF       
P23_1                                                            2            8            CSF       
P23_2                                                            2            8            CSF       
P24                                                              2            8            CSF       
P25                                                              2            8            CSF       

6 rows fetched.

SQL> select a.NAME, a.INITRANS, a.PCTFREE, DECODE(a.FLAGS & 8, 8, 'CSF', 'ASF') AS ROW_FORMAT from SYS_SUB_TABLE_PARTS a join MY_TABLES b on a.TABLE# = TABLE_ID where NAME like 'P3%' and b.TABLE_NAME = upper('sub_part_csf_test') order by a.NAME;

NAME                                                             INITRANS     PCTFREE      ROW_FORMAT
---------------------------------------------------------------- ------------ ------------ ----------
P32                                                              2            8            ASF       
P33                                                              2            8            ASF       
P34                                                              2            8            ASF       
P35                                                              2            8            ASF       

4 rows fetched.

SQL> select a.NAME, a.INITRANS, a.PCTFREE, DECODE(a.FLAGS & 8, 8, 'CSF', 'ASF') AS ROW_FORMAT from SYS_SUB_TABLE_PARTS a join MY_TABLES b on a.TABLE# = TABLE_ID where NAME like 'P4%' and b.TABLE_NAME = upper('sub_part_csf_test') order by a.NAME;

NAME                                                             INITRANS     PCTFREE      ROW_FORMAT
---------------------------------------------------------------- ------------ ------------ ----------
P41                                                              2            8            CSF       
P43_1                                                            2            8            CSF       
P43_2                                                            2            8            CSF       
P44                                                              2            8            CSF       
P45                                                              2            8            CSF       

5 rows fetched.

SQL> select a.NAME, a.INITRANS, a.PCTFREE, DECODE(a.FLAGS & 8, 8, 'CSF', 'ASF') AS ROW_FORMAT from SYS_SUB_TABLE_PARTS a join MY_TABLES b on a.TABLE# = TABLE_ID where NAME like 'P43%' and b.TABLE_NAME = upper('sub_part_csf_test') order by a.NAME;

NAME                                                             INITRANS     PCTFREE      ROW_FORMAT
---------------------------------------------------------------- ------------ ------------ ----------
P43_1                                                            2            8            CSF       
P43_2                                                            2            8            CSF       

2 rows fetched.

SQL> select a.NAME, a.INITRANS, a.PCTFREE, DECODE(a.FLAGS & 8, 8, 'CSF', 'ASF') AS ROW_FORMAT from SYS_SUB_TABLE_PARTS a join MY_TABLES b on a.TABLE# = TABLE_ID where NAME like 'P5%' and b.TABLE_NAME = upper('sub_part_csf_test') order by a.NAME;

NAME                                                             INITRANS     PCTFREE      ROW_FORMAT
---------------------------------------------------------------- ------------ ------------ ----------
P51                                                              2            8            ASF       
P52                                                              2            8            ASF       
P53                                                              2            8            ASF       
P54                                                              2            8            ASF       

4 rows fetched.

SQL> select a.NAME, a.INITRANS, a.PCTFREE, DECODE(a.FLAGS & 8, 8, 'CSF', 'ASF') AS ROW_FORMAT from SYS_SUB_TABLE_PARTS a join MY_TABLES b on a.TABLE# = TABLE_ID where NAME like 'P6%' and b.TABLE_NAME = upper('sub_part_csf_test') order by a.NAME;

NAME                                                             INITRANS     PCTFREE      ROW_FORMAT
---------------------------------------------------------------- ------------ ------------ ----------
P61                                                              2            8            CSF       
P62                                                              2            8            CSF       
P63                                                              2            8            CSF       
P64                                                              2            8            CSF       
P65                                                              2            8            CSF       

5 rows fetched.

SQL> select a.INITRANS, a.PCTFREE, DECODE(a.FLAGS & 8, 8, 'CSF', 'ASF') AS ROW_FORMAT from SYS_SUB_TABLE_PARTS a join MY_TABLES b on a.TABLE# = TABLE_ID where NAME like 'SYS%' and b.TABLE_NAME = upper('sub_part_csf_test') order by a.NAME;

INITRANS     PCTFREE      ROW_FORMAT
------------ ------------ ----------
2            8            CSF
2            8            CSF
2            8            CSF
2            8            CSF
2            8            CSF

5 rows fetched.

SQL> 
SQL> select TABLE_NAME, PARENTPART_NAME, PARTITION_POSITION, ROW_FORMAT from DB_TAB_SUBPARTITIONS where TABLE_NAME = upper('sub_part_csf_test') order by PARENTPART_NAME, PARTITION_POSITION;

TABLE_NAME                                                       PARENTPART_NAME                                                  PARTITION_POSITION ROW_FORMAT
---------------------------------------------------------------- ---------------------------------------------------------------- ------------------ ----------
SUB_PART_CSF_TEST                                                P2                                                               1                  CSF       
SUB_PART_CSF_TEST                                                P2                                                               2                  CSF       
SUB_PART_CSF_TEST                                                P2                                                               3                  CSF       
SUB_PART_CSF_TEST                                                P2                                                               4                  CSF       
SUB_PART_CSF_TEST                                                P2                                                               5                  CSF       
SUB_PART_CSF_TEST                                                P2                                                               6                  CSF       
SUB_PART_CSF_TEST                                                P3                                                               1                  ASF       
SUB_PART_CSF_TEST                                                P3                                                               2                  ASF       
SUB_PART_CSF_TEST                                                P3                                                               3                  ASF       
SUB_PART_CSF_TEST                                                P3                                                               4                  ASF       
SUB_PART_CSF_TEST                                                P4                                                               1                  CSF       
SUB_PART_CSF_TEST                                                P4                                                               2                  CSF       
SUB_PART_CSF_TEST                                                P4                                                               3                  CSF       
SUB_PART_CSF_TEST                                                P4                                                               4                  CSF       
SUB_PART_CSF_TEST                                                P4                                                               5                  CSF       
SUB_PART_CSF_TEST                                                P5                                                               1                  ASF       
SUB_PART_CSF_TEST                                                P5                                                               2                  ASF       
SUB_PART_CSF_TEST                                                P5                                                               3                  ASF       
SUB_PART_CSF_TEST                                                P5                                                               4                  ASF       
SUB_PART_CSF_TEST                                                P6_1                                                             1                  CSF       
SUB_PART_CSF_TEST                                                P6_1                                                             2                  CSF       
SUB_PART_CSF_TEST                                                P6_1                                                             3                  CSF       
SUB_PART_CSF_TEST                                                P6_1                                                             4                  CSF       
SUB_PART_CSF_TEST                                                P6_1                                                             5                  CSF       
SUB_PART_CSF_TEST                                                P6_2                                                             1                  CSF       
SUB_PART_CSF_TEST                                                P6_2                                                             2                  CSF       
SUB_PART_CSF_TEST                                                P6_2                                                             3                  CSF       
SUB_PART_CSF_TEST                                                P6_2                                                             4                  CSF       
SUB_PART_CSF_TEST                                                P6_2                                                             5                  CSF       

29 rows fetched.

SQL> select TABLE_NAME, PARENTPART_NAME, PARTITION_POSITION, ROW_FORMAT from ADM_TAB_SUBPARTITIONS where TABLE_NAME = upper('sub_part_csf_test') order by PARENTPART_NAME, PARTITION_POSITION;

TABLE_NAME                                                       PARENTPART_NAME                                                  PARTITION_POSITION ROW_FORMAT
---------------------------------------------------------------- ---------------------------------------------------------------- ------------------ ----------
SUB_PART_CSF_TEST                                                P2                                                               1                  CSF       
SUB_PART_CSF_TEST                                                P2                                                               2                  CSF       
SUB_PART_CSF_TEST                                                P2                                                               3                  CSF       
SUB_PART_CSF_TEST                                                P2                                                               4                  CSF       
SUB_PART_CSF_TEST                                                P2                                                               5                  CSF       
SUB_PART_CSF_TEST                                                P2                                                               6                  CSF       
SUB_PART_CSF_TEST                                                P3                                                               1                  ASF       
SUB_PART_CSF_TEST                                                P3                                                               2                  ASF       
SUB_PART_CSF_TEST                                                P3                                                               3                  ASF       
SUB_PART_CSF_TEST                                                P3                                                               4                  ASF       
SUB_PART_CSF_TEST                                                P4                                                               1                  CSF       
SUB_PART_CSF_TEST                                                P4                                                               2                  CSF       
SUB_PART_CSF_TEST                                                P4                                                               3                  CSF       
SUB_PART_CSF_TEST                                                P4                                                               4                  CSF       
SUB_PART_CSF_TEST                                                P4                                                               5                  CSF       
SUB_PART_CSF_TEST                                                P5                                                               1                  ASF       
SUB_PART_CSF_TEST                                                P5                                                               2                  ASF       
SUB_PART_CSF_TEST                                                P5                                                               3                  ASF       
SUB_PART_CSF_TEST                                                P5                                                               4                  ASF       
SUB_PART_CSF_TEST                                                P6_1                                                             1                  CSF       
SUB_PART_CSF_TEST                                                P6_1                                                             2                  CSF       
SUB_PART_CSF_TEST                                                P6_1                                                             3                  CSF       
SUB_PART_CSF_TEST                                                P6_1                                                             4                  CSF       
SUB_PART_CSF_TEST                                                P6_1                                                             5                  CSF       
SUB_PART_CSF_TEST                                                P6_2                                                             1                  CSF       
SUB_PART_CSF_TEST                                                P6_2                                                             2                  CSF       
SUB_PART_CSF_TEST                                                P6_2                                                             3                  CSF       
SUB_PART_CSF_TEST                                                P6_2                                                             4                  CSF       
SUB_PART_CSF_TEST                                                P6_2                                                             5                  CSF       

29 rows fetched.

SQL> select TABLE_NAME, PARENTPART_NAME, PARTITION_POSITION, ROW_FORMAT from MY_TAB_SUBPARTITIONS where TABLE_NAME = upper('sub_part_csf_test') order by PARENTPART_NAME, PARTITION_POSITION;

TABLE_NAME                                                       PARENTPART_NAME                                                  PARTITION_POSITION ROW_FORMAT
---------------------------------------------------------------- ---------------------------------------------------------------- ------------------ ----------
SUB_PART_CSF_TEST                                                P2                                                               1                  CSF       
SUB_PART_CSF_TEST                                                P2                                                               2                  CSF       
SUB_PART_CSF_TEST                                                P2                                                               3                  CSF       
SUB_PART_CSF_TEST                                                P2                                                               4                  CSF       
SUB_PART_CSF_TEST                                                P2                                                               5                  CSF       
SUB_PART_CSF_TEST                                                P2                                                               6                  CSF       
SUB_PART_CSF_TEST                                                P3                                                               1                  ASF       
SUB_PART_CSF_TEST                                                P3                                                               2                  ASF       
SUB_PART_CSF_TEST                                                P3                                                               3                  ASF       
SUB_PART_CSF_TEST                                                P3                                                               4                  ASF       
SUB_PART_CSF_TEST                                                P4                                                               1                  CSF       
SUB_PART_CSF_TEST                                                P4                                                               2                  CSF       
SUB_PART_CSF_TEST                                                P4                                                               3                  CSF       
SUB_PART_CSF_TEST                                                P4                                                               4                  CSF       
SUB_PART_CSF_TEST                                                P4                                                               5                  CSF       
SUB_PART_CSF_TEST                                                P5                                                               1                  ASF       
SUB_PART_CSF_TEST                                                P5                                                               2                  ASF       
SUB_PART_CSF_TEST                                                P5                                                               3                  ASF       
SUB_PART_CSF_TEST                                                P5                                                               4                  ASF       
SUB_PART_CSF_TEST                                                P6_1                                                             1                  CSF       
SUB_PART_CSF_TEST                                                P6_1                                                             2                  CSF       
SUB_PART_CSF_TEST                                                P6_1                                                             3                  CSF       
SUB_PART_CSF_TEST                                                P6_1                                                             4                  CSF       
SUB_PART_CSF_TEST                                                P6_1                                                             5                  CSF       
SUB_PART_CSF_TEST                                                P6_2                                                             1                  CSF       
SUB_PART_CSF_TEST                                                P6_2                                                             2                  CSF       
SUB_PART_CSF_TEST                                                P6_2                                                             3                  CSF       
SUB_PART_CSF_TEST                                                P6_2                                                             4                  CSF       
SUB_PART_CSF_TEST                                                P6_2                                                             5                  CSF       

29 rows fetched.

SQL> 
SQL> drop table if exists sub_part_csf_test;

Succeed.

SQL> 
SQL> -------------------------------
SQL> --list
SQL> -------------------------------
SQL> alter system set row_format = asf;

Succeed.

SQL> show parameters row_format;

NAME                                                             DATATYPE             VALUE                                                            RUNTIME_VALUE                                                    EFFECTIVE           
---------------------------------------------------------------- -------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- --------------------
ROW_FORMAT                                                       CT_TYPE_VARCHAR      ASF                                                              ASF                                                              immediately         


SQL> 
SQL> drop table  if exists t_part_tbl_csf;

Succeed.

SQL> create table t_part_tbl_csf(id int, col int) PARTITION BY list(id) SUBPARTITION BY list(col)
  2 (
  3 partition p1 values (1) format csf (SUBPARTITION P11 values (1), SUBPARTITION P12 values (2), SUBPARTITION P13 values (3,4,5,6)),
  4 partition p2 values (2) (SUBPARTITION P21 values (1), SUBPARTITION P22 values (2), SUBPARTITION P23 values (3)),
  5 partition p3 values (3) format csf (SUBPARTITION P31 values (1), SUBPARTITION P32 values (2), SUBPARTITION P33 values (3))
  6 );

Succeed.

SQL> alter table t_part_tbl_csf add partition p6 values(4) format csf;

Succeed.

SQL> alter table t_part_tbl_csf add partition p7 values(5);

Succeed.

SQL> alter table t_part_tbl_csf add partition p8 values(6) format asf;

Succeed.

SQL> select TABLE_OWNER, PARTITION_NAME, ROW_FORMAT from ADM_TAB_PARTITIONS where table_name = upper('t_part_tbl_csf') order by PARTITION_NAME asc;

TABLE_OWNER                                                      PARTITION_NAME                                                   ROW_FORMAT
---------------------------------------------------------------- ---------------------------------------------------------------- ----------
SYS                                                              P1                                                               CSF       
SYS                                                              P2                                                               ASF       
SYS                                                              P3                                                               CSF       
SYS                                                              P6                                                               CSF       
SYS                                                              P7                                                               ASF       
SYS                                                              P8                                                               ASF       

6 rows fetched.

SQL> select TABLE_NAME, PARENTPART_NAME, PARTITION_POSITION, ROW_FORMAT from MY_TAB_SUBPARTITIONS where TABLE_NAME = upper('t_part_tbl_csf') order by PARENTPART_NAME, PARTITION_POSITION;

TABLE_NAME                                                       PARENTPART_NAME                                                  PARTITION_POSITION ROW_FORMAT
---------------------------------------------------------------- ---------------------------------------------------------------- ------------------ ----------
T_PART_TBL_CSF                                                   P1                                                               1                  CSF       
T_PART_TBL_CSF                                                   P1                                                               2                  CSF       
T_PART_TBL_CSF                                                   P1                                                               3                  CSF       
T_PART_TBL_CSF                                                   P2                                                               1                  ASF       
T_PART_TBL_CSF                                                   P2                                                               2                  ASF       
T_PART_TBL_CSF                                                   P2                                                               3                  ASF       
T_PART_TBL_CSF                                                   P3                                                               1                  CSF       
T_PART_TBL_CSF                                                   P3                                                               2                  CSF       
T_PART_TBL_CSF                                                   P3                                                               3                  CSF       
T_PART_TBL_CSF                                                   P6                                                               1                  CSF       
T_PART_TBL_CSF                                                   P7                                                               1                  ASF       
T_PART_TBL_CSF                                                   P8                                                               1                  ASF       

12 rows fetched.

SQL> 
SQL> --update
SQL> insert into t_part_tbl_csf values(1,2);

1 rows affected.

SQL> commit;

Succeed.

SQL> update t_part_tbl_csf set id = 2 where id = 1;

CT-00613, Invalid operation, cross partition update between different partition row types are forbidden
SQL> update t_part_tbl_csf set id = 3 where id = 1;

1 rows affected.

SQL> drop table  if exists t_part_tbl_csf;

Succeed.

SQL> 
SQL> -------------------------------
SQL> --hash
SQL> -------------------------------
SQL> alter system set row_format = asf;

Succeed.

SQL> show parameters row_format;

NAME                                                             DATATYPE             VALUE                                                            RUNTIME_VALUE                                                    EFFECTIVE           
---------------------------------------------------------------- -------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- --------------------
ROW_FORMAT                                                       CT_TYPE_VARCHAR      ASF                                                              ASF                                                              immediately         


SQL> drop table  if exists t_part_tbl_csf;

Succeed.

SQL> create table t_part_tbl_csf(id int, col int) PARTITION BY hash(id) SUBPARTITION BY hash(col)
  2 (
  3 partition p1 format csf (SUBPARTITION P11, SUBPARTITION P12, SUBPARTITION P13),
  4 partition p2 (SUBPARTITION P21, SUBPARTITION P22, SUBPARTITION P23),
  5 partition p3 format csf (SUBPARTITION P31, SUBPARTITION P32, SUBPARTITION P33),
  6 partition p4 format asf (SUBPARTITION P41, SUBPARTITION P42, SUBPARTITION P43),
  7 partition p5 format asf (SUBPARTITION P51, SUBPARTITION P52, SUBPARTITION P53)
  8 );

Succeed.

SQL> alter table t_part_tbl_csf add partition p6 format csf;

CT-00613, Invalid operation, data redistribute between different partition row types are forbidden
SQL> alter table t_part_tbl_csf add partition p7;

Succeed.

SQL> alter table t_part_tbl_csf add partition p8 format csf;

Succeed.

SQL> select TABLE_OWNER, PARTITION_NAME, ROW_FORMAT from ADM_TAB_PARTITIONS where table_name = upper('t_part_tbl_csf') order by PARTITION_NAME asc;

TABLE_OWNER                                                      PARTITION_NAME                                                   ROW_FORMAT
---------------------------------------------------------------- ---------------------------------------------------------------- ----------
SYS                                                              P1                                                               CSF       
SYS                                                              P2                                                               ASF       
SYS                                                              P3                                                               CSF       
SYS                                                              P4                                                               ASF       
SYS                                                              P5                                                               ASF       
SYS                                                              P7                                                               ASF       
SYS                                                              P8                                                               CSF       

7 rows fetched.

SQL> select TABLE_NAME, PARENTPART_NAME, PARTITION_POSITION, ROW_FORMAT from MY_TAB_SUBPARTITIONS where TABLE_NAME = upper('t_part_tbl_csf') order by PARENTPART_NAME, PARTITION_POSITION;

TABLE_NAME                                                       PARENTPART_NAME                                                  PARTITION_POSITION ROW_FORMAT
---------------------------------------------------------------- ---------------------------------------------------------------- ------------------ ----------
T_PART_TBL_CSF                                                   P1                                                               1                  CSF       
T_PART_TBL_CSF                                                   P1                                                               2                  CSF       
T_PART_TBL_CSF                                                   P1                                                               3                  CSF       
T_PART_TBL_CSF                                                   P2                                                               1                  ASF       
T_PART_TBL_CSF                                                   P2                                                               2                  ASF       
T_PART_TBL_CSF                                                   P2                                                               3                  ASF       
T_PART_TBL_CSF                                                   P3                                                               1                  CSF       
T_PART_TBL_CSF                                                   P3                                                               2                  CSF       
T_PART_TBL_CSF                                                   P3                                                               3                  CSF       
T_PART_TBL_CSF                                                   P4                                                               1                  ASF       
T_PART_TBL_CSF                                                   P4                                                               2                  ASF       
T_PART_TBL_CSF                                                   P4                                                               3                  ASF       
T_PART_TBL_CSF                                                   P5                                                               1                  ASF       
T_PART_TBL_CSF                                                   P5                                                               2                  ASF       
T_PART_TBL_CSF                                                   P5                                                               3                  ASF       
T_PART_TBL_CSF                                                   P7                                                               1                  ASF       
T_PART_TBL_CSF                                                   P8                                                               1                  CSF       

17 rows fetched.

SQL> 
SQL> drop table  if exists t_part_tbl_csf;

Succeed.

SQL> 
SQL> -------------------------------
SQL> --inertval
SQL> -------------------------------
SQL> alter system set row_format = asf;

Succeed.

SQL> show parameters row_format;

NAME                                                             DATATYPE             VALUE                                                            RUNTIME_VALUE                                                    EFFECTIVE           
---------------------------------------------------------------- -------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- --------------------
ROW_FORMAT                                                       CT_TYPE_VARCHAR      ASF                                                              ASF                                                              immediately         


SQL> drop table  if exists t_part_tbl_csf;

Succeed.

SQL> create table t_part_tbl_csf(id int, col int) PARTITION BY range(id) interval(3) SUBPARTITION BY hash(col)
  2 (
  3 partition p1 VALUES LESS THAN (1) format csf (SUBPARTITION P11, SUBPARTITION P12, SUBPARTITION P13),
  4 partition p2 VALUES LESS THAN (2) (SUBPARTITION P21, SUBPARTITION P22, SUBPARTITION P23),
  5 partition p3 VALUES LESS THAN (3) format csf (SUBPARTITION P31, SUBPARTITION P32, SUBPARTITION P33),
  6 partition p4 VALUES LESS THAN (4) format asf (SUBPARTITION P41, SUBPARTITION P42, SUBPARTITION P43)
  7 );

Succeed.

SQL> alter table t_part_tbl_csf add partition p6 VALUES LESS THAN(5) format csf;

CT-01110, The operation add interval partition was not allowed
SQL> alter table t_part_tbl_csf add partition p7 VALUES LESS THAN(6);

CT-01110, The operation add interval partition was not allowed
SQL> show create table t_part_tbl_csf;

CREATE TABLE "T_PART_TBL_CSF"
(
  "ID" BINARY_INTEGER,
  "COL" BINARY_INTEGER
)
PARTITION BY RANGE ("ID")
INTERVAL(3)
SUBPARTITION BY HASH ("COL")
(
    PARTITION P1 VALUES LESS THAN (1) TABLESPACE "SYSTEM" INITRANS 2 PCTFREE 8 FORMAT CSF(
        SUBPARTITION P11 TABLESPACE "SYSTEM", 
        SUBPARTITION P12 TABLESPACE "SYSTEM", 
        SUBPARTITION P13 TABLESPACE "SYSTEM"
    ),
    PARTITION P2 VALUES LESS THAN (2) TABLESPACE "SYSTEM" INITRANS 2 PCTFREE 8 FORMAT ASF(
        SUBPARTITION P21 TABLESPACE "SYSTEM", 
        SUBPARTITION P22 TABLESPACE "SYSTEM", 
        SUBPARTITION P23 TABLESPACE "SYSTEM"
    ),
    PARTITION P3 VALUES LESS THAN (3) TABLESPACE "SYSTEM" INITRANS 2 PCTFREE 8 FORMAT CSF(
        SUBPARTITION P31 TABLESPACE "SYSTEM", 
        SUBPARTITION P32 TABLESPACE "SYSTEM", 
        SUBPARTITION P33 TABLESPACE "SYSTEM"
    ),
    PARTITION P4 VALUES LESS THAN (4) TABLESPACE "SYSTEM" INITRANS 2 PCTFREE 8 FORMAT ASF(
        SUBPARTITION P41 TABLESPACE "SYSTEM", 
        SUBPARTITION P42 TABLESPACE "SYSTEM", 
        SUBPARTITION P43 TABLESPACE "SYSTEM"
    )
)
TABLESPACE "SYSTEM"
INITRANS 2
MAXTRANS 255
PCTFREE 8
FORMAT ASF;



SQL> select TABLE_OWNER, PARTITION_NAME, ROW_FORMAT from ADM_TAB_PARTITIONS where table_name = upper('t_part_tbl_csf') order by PARTITION_NAME asc;

TABLE_OWNER                                                      PARTITION_NAME                                                   ROW_FORMAT
---------------------------------------------------------------- ---------------------------------------------------------------- ----------
SYS                                                              P1                                                               CSF       
SYS                                                              P2                                                               ASF       
SYS                                                              P3                                                               CSF       
SYS                                                              P4                                                               ASF       

4 rows fetched.

SQL> select TABLE_NAME, PARENTPART_NAME, PARTITION_POSITION, ROW_FORMAT from MY_TAB_SUBPARTITIONS where TABLE_NAME = upper('t_part_tbl_csf') order by PARENTPART_NAME, PARTITION_POSITION;

TABLE_NAME                                                       PARENTPART_NAME                                                  PARTITION_POSITION ROW_FORMAT
---------------------------------------------------------------- ---------------------------------------------------------------- ------------------ ----------
T_PART_TBL_CSF                                                   P1                                                               1                  CSF       
T_PART_TBL_CSF                                                   P1                                                               2                  CSF       
T_PART_TBL_CSF                                                   P1                                                               3                  CSF       
T_PART_TBL_CSF                                                   P2                                                               1                  ASF       
T_PART_TBL_CSF                                                   P2                                                               2                  ASF       
T_PART_TBL_CSF                                                   P2                                                               3                  ASF       
T_PART_TBL_CSF                                                   P3                                                               1                  CSF       
T_PART_TBL_CSF                                                   P3                                                               2                  CSF       
T_PART_TBL_CSF                                                   P3                                                               3                  CSF       
T_PART_TBL_CSF                                                   P4                                                               1                  ASF       
T_PART_TBL_CSF                                                   P4                                                               2                  ASF       
T_PART_TBL_CSF                                                   P4                                                               3                  ASF       

12 rows fetched.

SQL> 
SQL> insert into t_part_tbl_csf values(2, 1000);

1 rows affected.

SQL> commit;

Succeed.

SQL> update t_part_tbl_csf set id = 1 where id = 2;

CT-00613, Invalid operation, cross partition update between different partition row types are forbidden
SQL> update t_part_tbl_csf set id = 3 where id = 2;

CT-00613, Invalid operation, cross partition update between different partition row types are forbidden
SQL> update t_part_tbl_csf set id = 0 where id = 2;

1 rows affected.

SQL> update t_part_tbl_csf set id = 100 where id = 0;

CT-00613, Invalid operation, cross partition update between different partition row types are forbidden
SQL> 
SQL> drop table  if exists t_part_tbl_csf;

Succeed.

SQL> 
SQL> -------------------------------
SQL> --hash partition coalesce operation
SQL> -------------------------------
SQL> alter system set row_format = asf;

Succeed.

SQL> show parameters row_format;

NAME                                                             DATATYPE             VALUE                                                            RUNTIME_VALUE                                                    EFFECTIVE
---------------------------------------------------------------- -------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- --------------------
ROW_FORMAT                                                       CT_TYPE_VARCHAR      ASF                                                              ASF                                                              immediately


SQL> drop table  if exists t_part_tbl_csf;

Succeed.

SQL> create table t_part_tbl_csf(id int, col int) PARTITION BY hash(id) SUBPARTITION BY hash(col)
  2 (
  3 partition p1 format csf (SUBPARTITION P11, SUBPARTITION P12, SUBPARTITION P13, SUBPARTITION P14, SUBPARTITION P15),
  4 partition p2 (SUBPARTITION P21, SUBPARTITION P22, SUBPARTITION P23, SUBPARTITION P24, SUBPARTITION P25)
  5 );

Succeed.

SQL> 
SQL> alter table t_part_tbl_csf coalesce partition;

CT-00613, Invalid operation, coalesce partition between different partition row types are forbidden
SQL> alter table t_part_tbl_csf modify partition p2 coalesce subpartition;

Succeed.

SQL> 
SQL> insert into t_part_tbl_csf values(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8,8);

8 rows affected.

SQL> commit;

Succeed.

SQL> 
SQL> select count(*) from t_part_tbl_csf partition(p1);

COUNT(*)
--------------------
5

1 rows fetched.

SQL> select count(*) from t_part_tbl_csf partition(p2);

COUNT(*)
--------------------
3

1 rows fetched.

SQL> 
SQL> alter table t_part_tbl_csf coalesce partition;

CT-00613, Invalid operation, coalesce partition between different partition row types are forbidden
SQL> alter table t_part_tbl_csf modify partition p2 coalesce subpartition;

Succeed.

SQL> ALTER TABLE t_part_tbl_csf TRUNCATE PARTITION p2;

Succeed.

SQL> alter table t_part_tbl_csf coalesce partition;

CT-00613, Invalid operation, coalesce partition between different partition row types are forbidden
SQL> alter table t_part_tbl_csf modify partition p2 coalesce subpartition;

Succeed.

SQL> alter table t_part_tbl_csf modify partition p2 coalesce subpartition;

Succeed.

SQL> alter table t_part_tbl_csf modify partition p2 coalesce subpartition;

CT-01110, The operation coalesce a parent part with only one subpartition was not allowed
SQL> drop table  if exists t_part_tbl_csf;

Succeed.

SQL> 