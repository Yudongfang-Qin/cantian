

SQL> set serveroutput on;

ON
SQL> 
SQL> create or replace function test_for_loop_f return boolean is
  2   FunctionResult boolean;
  3   test_num       NUMBER;
  4   /*
  5   abc
  6   */
  7 begin
  8   test_num := 0;
  9   <<loop_label>>
 10   FOR i IN 1..10 LOOP
 11   /*
 12   abc
 13   */
 14     test_num := test_num + 1;
 15     CONTINUE loop_label when i > 7;
 16     test_num := test_num + 1;
 17     CONTINUE;
 18     test_num := test_num + 1;
 19   END LOOP;
 20   dbe_output.print_line(test_num);
 21   FunctionResult := TRUE;
 22   /*
 23   abc
 24   */
 25   return(FunctionResult);
 26 exception
 27   when others then
 28   /*
 29   abc
 30   */
 31     SYS.dbe_output.print_line('other error');
 32     return(FunctionResult);
 33 end;
 34 /

Succeed.

SQL> 
SQL> create or replace procedure test_for_loop_p is
  2   FunctionResult boolean;
  3   test_num       NUMBER;
  4 begin
  5   test_num := 0;
  6   FOR i IN 1..10 LOOP
  7     test_num := test_num + 1;
  8     CONTINUE when i > 7;
  9     test_num := test_num + 1;
 10     CONTINUE;
 11     test_num := test_num + 1;
 12   END LOOP;
 13   dbe_output.print_line(test_num);
 14   FunctionResult := TRUE;
 15 exception
 16   when others then
 17     SYS.dbe_output.print_line('other error');
 18 end;
 19 /

Succeed.

SQL> 
SQL> create or replace function test_while_loop_f return boolean is
  2   FunctionResult boolean;
  3   test_num       NUMBER;
  4 begin
  5   test_num := 5;
  6   WHILE test_num > 1 LOOP
  7     test_num := test_num - 1;
  8     test_num := test_num - 1;
  9     CONTINUE;
 10     test_num := test_num - 1;
 11   END LOOP;
 12   dbe_output.print_line(test_num);
 13   FunctionResult := TRUE;
 14   return(FunctionResult);
 15 exception
 16   when others then
 17     SYS.dbe_output.print_line('other error');
 18     return(FunctionResult);
 19 end;
 20 /

Succeed.

SQL> 
SQL> create or replace procedure test_while_loop_p is
  2   FunctionResult boolean;
  3   test_num       NUMBER;
  4 begin
  5   test_num := 5;
  6   WHILE test_num = 0 LOOP
  7     test_num := test_num - 1;
  8     test_num := test_num - 1;
  9     CONTINUE;
 10     test_num := test_num - 1;
 11   END LOOP;
 12   dbe_output.print_line(test_num);
 13   FunctionResult := TRUE;
 14 exception
 15   when others then
 16     SYS.dbe_output.print_line('other error');
 17 end;
 18 /

Succeed.

SQL> 
SQL> create or replace function test_loop_f return boolean is
  2   FunctionResult boolean;
  3   test_num       NUMBER;
  4 begin
  5   test_num := 5;
  6   LOOP
  7     EXIT;
  8 	test_num := 7;
  9   END LOOP;
 10   dbe_output.print_line(test_num);
 11   FunctionResult := TRUE;
 12   return(FunctionResult);
 13 exception
 14   when others then
 15     SYS.dbe_output.print_line('other error');
 16     return(FunctionResult);
 17 end;
 18 /

Succeed.

SQL> 
SQL> create or replace procedure test_loop_p is
  2   FunctionResult boolean;
  3   test_num       NUMBER;
  4 begin
  5   test_num := 5;
  6   LOOP
  7     GOTO goto_label;
  8 	test_num := 7;
  9   END LOOP;
 10   dbe_output.print_line(test_num);
 11   <<goto_label>>
 12   FunctionResult := TRUE;
 13 exception
 14   when others then
 15     SYS.dbe_output.print_line('other error');
 16 end;
 17 /

Succeed.

SQL> 
SQL> create or replace function test_if_else_f return boolean is
  2   FunctionResult boolean;
  3   test_num       NUMBER;
  4 begin
  5   test_num := 18;
  6   IF test_num = 17 THEN
  7     FunctionResult := TRUE;
  8   ELSIF test_num = 18 THEN
  9     FunctionResult := FALSE;
 10   ELSE
 11     FunctionResult := FALSE;
 12   END IF;
 13   dbe_output.print_line(test_num);
 14   FunctionResult := TRUE;
 15   return(FunctionResult);
 16 exception
 17   when others then
 18     SYS.dbe_output.print_line('other error');
 19     return(FunctionResult);
 20 end;
 21 /

Succeed.

SQL> 
SQL> create or replace procedure test_if_else_p is
  2   FunctionResult boolean;
  3   test_num       NUMBER;
  4 begin
  5   test_num := 19;
  6   IF test_num = 17 THEN
  7     FunctionResult := TRUE;
  8   ELSIF test_num = 18 THEN
  9     FunctionResult := FALSE;
 10   ELSE
 11     FunctionResult := FALSE;
 12   END IF;
 13   dbe_output.print_line(test_num);
 14   FunctionResult := TRUE;
 15 exception
 16   when others then
 17     SYS.dbe_output.print_line('other error');
 18 end;
 19 /

Succeed.

SQL> 
SQL> create or replace function test_case_f return boolean is
  2   FunctionResult boolean;
  3   test_num       NUMBER;
  4 begin
  5   test_num := 19;
  6   CASE test_num
  7   WHEN 19 THEN
  8     FunctionResult := FALSE;
  9   WHEN 20 THEN
 10     FunctionResult := FALSE;
 11   END CASE;
 12   dbe_output.print_line(test_num);
 13   FunctionResult := TRUE;
 14   return(FunctionResult);
 15 exception
 16   when others then
 17     SYS.dbe_output.print_line('other error');
 18     return(FunctionResult);
 19 end;
 20 /

Succeed.

SQL> 
SQL> create or replace procedure test_case_p is
  2   FunctionResult boolean;
  3   test_num       NUMBER;
  4 begin
  5   test_num := 20;
  6   CASE test_num
  7   WHEN 19 THEN
  8     FunctionResult := FALSE;
  9   WHEN 20 THEN
 10     FunctionResult := FALSE;
 11   END CASE;
 12   dbe_output.print_line(test_num);
 13   FunctionResult := TRUE;
 14 exception
 15   when others then
 16     SYS.dbe_output.print_line('other error');
 17 end;
 18 /

Succeed.

SQL> 
SQL> create or replace procedure test_level_3_p is
  2 v1 int;
  3 begin
  4   v1 := 1;
  5 end;
  6 /

Succeed.

SQL> 
SQL> create or replace procedure test_level_2_p is
  2 begin
  3   test_level_3_p();
  4 end;
  5 /

Succeed.

SQL> 
SQL> create or replace procedure test_level_1_p is
  2 begin
  3   test_level_2_p();
  4 end;
  5 /

Succeed.

SQL> 
SQL> drop user if exists gs_plsql_cover cascade;

Succeed.

SQL> create user gs_plsql_cover identified by Abc123456;

Succeed.

SQL> grant dba to gs_plsql_cover;

Succeed.

SQL> drop user if exists gs_plsql_cover2 cascade;

Succeed.

SQL> create user gs_plsql_cover2 identified by Abc123456;

Succeed.

SQL> grant dba to gs_plsql_cover2;

Succeed.

SQL> drop user if exists gs_plsql_cover3 cascade;

Succeed.

SQL> create user gs_plsql_cover3 identified by Abc123456;

Succeed.

SQL> grant create session to gs_plsql_cover3;

Succeed.

SQL> grant EXECUTE on test_for_loop_f to gs_plsql_cover;

Succeed.

SQL> grant EXECUTE on test_for_loop_p to gs_plsql_cover;

Succeed.

SQL> grant EXECUTE on test_while_loop_f to gs_plsql_cover;

Succeed.

SQL> grant EXECUTE on test_while_loop_p to gs_plsql_cover;

Succeed.

SQL> grant EXECUTE on test_loop_f to gs_plsql_cover;

Succeed.

SQL> grant EXECUTE on test_loop_p to gs_plsql_cover;

Succeed.

SQL> grant EXECUTE on test_if_else_f to gs_plsql_cover;

Succeed.

SQL> grant EXECUTE on test_if_else_p to gs_plsql_cover;

Succeed.

SQL> grant EXECUTE on test_case_f to gs_plsql_cover;

Succeed.

SQL> grant EXECUTE on test_case_p to gs_plsql_cover;

Succeed.

SQL> grant EXECUTE on test_level_1_p to gs_plsql_cover;

Succeed.

SQL> grant EXECUTE on test_level_2_p to gs_plsql_cover;

Succeed.

SQL> grant EXECUTE on test_level_3_p to gs_plsql_cover;

Succeed.

SQL> conn gs_plsql_cover/Abc123456@127.0.0.1:1611

connected.

SQL> 
SQL> 
SQL> drop table if exists test_sql_t;

Succeed.

SQL> create table test_sql_t(a int, b number(2), c varchar(20));

Succeed.

SQL> create or replace procedure test_sql_p is
  2 sql_str varchar(80);
  3 v1 int;
  4 begin
  5   delete test_sql_t;
  6   insert into test_sql_t(a,b,c)
  7     values(1, 2, '3');
  8   sql_str := 'insert into test_sql_t(a,b,c) values(4, 15, ''16'')';
  9   execute immediate sql_str;
 10   select a into v1 
 11   from test_sql_t 
 12   where b = 5;
 13 exception
 14   when no_data_found then
 15     SYS.dbe_output.print_line('not found error');
 16   when others then
 17     SYS.dbe_output.print_line('other error');
 18 end;
 19 /

Succeed.

SQL> 
SQL> create or replace trigger test_trigger after delete on test_sql_t
  2 begin
  3   insert into test_sql_t(a,b,c) values(9, 20, '30');
  4   return;
  5   insert into test_sql_t(a,b,c) values(10, 30, '100');
  6 end;
  7 /

Succeed.

SQL> 
SQL> drop table if exists test_func_in_dml_t;

Succeed.

SQL> create table test_func_in_dml_t(a int);

Succeed.

SQL> insert into test_func_in_dml_t(a) values(10);

1 rows affected.

SQL> commit;

Succeed.

SQL> create or replace function test_func_in_dml_f(p1 int) return int is
  2 begin
  3   return p1;
  4 end;
  5 /

Succeed.

SQL> 
SQL> select * from table(dba_proc_line('SYS', 'TEST_FOR_LOOP_F'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE FUNCTION TEST_FOR_LOOP_F return boolean is    
2              FunctionResult boolean;                                       
3              test_num       NUMBER;                                        
4              /*                                                            
5              abc                                                           
6              */                                                            
7            begin                                                           
8              test_num := 0;                                                
9              <<loop_label>>                                                
10             FOR i IN 1..10 LOOP                                           
11             /*                                                            
12             abc                                                           
13             */                                                            
14               test_num := test_num + 1;                                   
15               CONTINUE loop_label when i > 7;                             
16               test_num := test_num + 1;                                   
17               CONTINUE;                                                   
18               test_num := test_num + 1;                                   
19             END LOOP;                                                     
20             dbe_output.print_line(test_num);                               
21             FunctionResult := TRUE;                                       
22             /*                                                            
23             abc                                                           
24             */                                                            
25             return(FunctionResult);                                       
26           exception                                                       
27             when others then                                              
28             /*                                                            
29             abc                                                           
30             */                                                            
31               SYS.dbe_output.print_line('other error');                    
32               return(FunctionResult);                                     
33           end;                                                            
34           /                                                               

34 rows fetched.

SQL> select * from table(dba_proc_decode('SYS', 'TEST_FOR_LOOP_F', 'FUNCTION'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       7            except[14];end[20];                                             
2            LINE_SETVAL                      8                                                                            
3            LINE_LABEL                       9                                                                            
4            LINE_FOR                         10           next[10];                                                       
5            LINE_SETVAL                      14                                                                           
6            LINE_CONTINUE                    15           next[4];                                                        
7            LINE_SETVAL                      16                                                                           
8            LINE_CONTINUE                    17           next[4];                                                        
9            LINE_SETVAL                      18                                                                           
10           LINE_END_LOOP                    19           loop[4];                                                        
11           LINE_PROC                        20                                                                           
12           LINE_SETVAL                      21                                                                           
13           LINE_RETURN                      25                                                                           
14           LINE_EXCEPTION                   26           end[19];                                                        
15           LINE_WHEN                        27                                                                           
16           LINE_PROC                        31                                                                           
17           LINE_RETURN                      32                                                                           
18           LINE_END_WHEN                    32                                                                           
19           LINE_END_EXCEPTION               32                                                                           
20           LINE_END                         33                                                                           

20 rows fetched.

SQL> select * from table(dba_proc_line('SYS', 'TEST_FOR_LOOP_P'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE PROCEDURE TEST_FOR_LOOP_P is                  
2              FunctionResult boolean;                                       
3              test_num       NUMBER;                                        
4            begin                                                           
5              test_num := 0;                                                
6              FOR i IN 1..10 LOOP                                           
7                test_num := test_num + 1;                                   
8                CONTINUE when i > 7;                                        
9                test_num := test_num + 1;                                   
10               CONTINUE;                                                   
11               test_num := test_num + 1;                                   
12             END LOOP;                                                     
13             dbe_output.print_line(test_num);                               
14             FunctionResult := TRUE;                                       
15           exception                                                       
16             when others then                                              
17               SYS.dbe_output.print_line('other error');                    
18           end;                                                            
19           /                                                               

19 rows fetched.

SQL> select * from table(dba_proc_decode('SYS', 'TEST_FOR_LOOP_P', 'PROCEDURE'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       4            except[12];end[17];                                             
2            LINE_SETVAL                      5                                                                            
3            LINE_FOR                         6            next[9];                                                        
4            LINE_SETVAL                      7                                                                            
5            LINE_CONTINUE                    8            next[3];                                                        
6            LINE_SETVAL                      9                                                                            
7            LINE_CONTINUE                    10           next[3];                                                        
8            LINE_SETVAL                      11                                                                           
9            LINE_END_LOOP                    12           loop[3];                                                        
10           LINE_PROC                        13                                                                           
11           LINE_SETVAL                      14                                                                           
12           LINE_EXCEPTION                   15           end[16];                                                        
13           LINE_WHEN                        16                                                                           
14           LINE_PROC                        17                                                                           
15           LINE_END_WHEN                    17                                                                           
16           LINE_END_EXCEPTION               17                                                                           
17           LINE_END                         18                                                                           

17 rows fetched.

SQL> select * from table(dba_proc_line('SYS', 'TEST_WHILE_LOOP_F'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE FUNCTION TEST_WHILE_LOOP_F return boolean is  
2              FunctionResult boolean;                                       
3              test_num       NUMBER;                                        
4            begin                                                           
5              test_num := 5;                                                
6              WHILE test_num > 1 LOOP                                       
7                test_num := test_num - 1;                                   
8                test_num := test_num - 1;                                   
9                CONTINUE;                                                   
10               test_num := test_num - 1;                                   
11             END LOOP;                                                     
12             dbe_output.print_line(test_num);                               
13             FunctionResult := TRUE;                                       
14             return(FunctionResult);                                       
15           exception                                                       
16             when others then                                              
17               SYS.dbe_output.print_line('other error');                    
18               return(FunctionResult);                                     
19           end;                                                            
20           /                                                               

20 rows fetched.

SQL> select * from table(dba_proc_decode('SYS', 'TEST_WHILE_LOOP_F', 'FUNCTION'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       4            except[12];end[18];                                             
2            LINE_SETVAL                      5                                                                            
3            LINE_WHILE                       6            next[8];stack_line[1];                                          
4            LINE_SETVAL                      7                                                                            
5            LINE_SETVAL                      8                                                                            
6            LINE_CONTINUE                    9            next[3];                                                        
7            LINE_SETVAL                      10                                                                           
8            LINE_END_LOOP                    11           loop[3];                                                        
9            LINE_PROC                        12                                                                           
10           LINE_SETVAL                      13                                                                           
11           LINE_RETURN                      14                                                                           
12           LINE_EXCEPTION                   15           end[17];                                                        
13           LINE_WHEN                        16                                                                           
14           LINE_PROC                        17                                                                           
15           LINE_RETURN                      18                                                                           
16           LINE_END_WHEN                    18                                                                           
17           LINE_END_EXCEPTION               18                                                                           
18           LINE_END                         19                                                                           

18 rows fetched.

SQL> select * from table(dba_proc_line('SYS', 'TEST_WHILE_LOOP_P'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE PROCEDURE TEST_WHILE_LOOP_P is                
2              FunctionResult boolean;                                       
3              test_num       NUMBER;                                        
4            begin                                                           
5              test_num := 5;                                                
6              WHILE test_num = 0 LOOP                                       
7                test_num := test_num - 1;                                   
8                test_num := test_num - 1;                                   
9                CONTINUE;                                                   
10               test_num := test_num - 1;                                   
11             END LOOP;                                                     
12             dbe_output.print_line(test_num);                               
13             FunctionResult := TRUE;                                       
14           exception                                                       
15             when others then                                              
16               SYS.dbe_output.print_line('other error');                    
17           end;                                                            
18           /                                                               

18 rows fetched.

SQL> select * from table(dba_proc_decode('SYS', 'TEST_WHILE_LOOP_P', 'PROCEDURE'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       4            except[11];end[16];                                             
2            LINE_SETVAL                      5                                                                            
3            LINE_WHILE                       6            next[8];stack_line[1];                                          
4            LINE_SETVAL                      7                                                                            
5            LINE_SETVAL                      8                                                                            
6            LINE_CONTINUE                    9            next[3];                                                        
7            LINE_SETVAL                      10                                                                           
8            LINE_END_LOOP                    11           loop[3];                                                        
9            LINE_PROC                        12                                                                           
10           LINE_SETVAL                      13                                                                           
11           LINE_EXCEPTION                   14           end[15];                                                        
12           LINE_WHEN                        15                                                                           
13           LINE_PROC                        16                                                                           
14           LINE_END_WHEN                    16                                                                           
15           LINE_END_EXCEPTION               16                                                                           
16           LINE_END                         17                                                                           

16 rows fetched.

SQL> select * from table(dba_proc_line('SYS', 'TEST_LOOP_F'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE FUNCTION TEST_LOOP_F return boolean is        
2              FunctionResult boolean;                                       
3              test_num       NUMBER;                                        
4            begin                                                           
5              test_num := 5;                                                
6              LOOP                                                          
7                EXIT;                                                       
8            	test_num := 7;                                                 
9              END LOOP;                                                     
10             dbe_output.print_line(test_num);                               
11             FunctionResult := TRUE;                                       
12             return(FunctionResult);                                       
13           exception                                                       
14             when others then                                              
15               SYS.dbe_output.print_line('other error');                    
16               return(FunctionResult);                                     
17           end;                                                            
18           /                                                               

18 rows fetched.

SQL> select * from table(dba_proc_decode('SYS', 'TEST_LOOP_F', 'FUNCTION'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       4            except[10];end[16];                                             
2            LINE_SETVAL                      5                                                                            
3            LINE_LOOP                        6                                                                            
4            LINE_EXIT                        7            next[3];                                                        
5            LINE_SETVAL                      8                                                                            
6            LINE_END_LOOP                    9            loop[3];                                                        
7            LINE_PROC                        10                                                                           
8            LINE_SETVAL                      11                                                                           
9            LINE_RETURN                      12                                                                           
10           LINE_EXCEPTION                   13           end[15];                                                        
11           LINE_WHEN                        14                                                                           
12           LINE_PROC                        15                                                                           
13           LINE_RETURN                      16                                                                           
14           LINE_END_WHEN                    16                                                                           
15           LINE_END_EXCEPTION               16                                                                           
16           LINE_END                         17                                                                           

16 rows fetched.

SQL> select * from table(dba_proc_line('SYS', 'TEST_LOOP_P'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE PROCEDURE TEST_LOOP_P is                      
2              FunctionResult boolean;                                       
3              test_num       NUMBER;                                        
4            begin                                                           
5              test_num := 5;                                                
6              LOOP                                                          
7                GOTO goto_label;                                            
8            	test_num := 7;                                                 
9              END LOOP;                                                     
10             dbe_output.print_line(test_num);                               
11             <<goto_label>>                                                
12             FunctionResult := TRUE;                                       
13           exception                                                       
14             when others then                                              
15               SYS.dbe_output.print_line('other error');                    
16           end;                                                            
17           /                                                               

17 rows fetched.

SQL> select * from table(dba_proc_decode('SYS', 'TEST_LOOP_P', 'PROCEDURE'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       4            except[10];end[15];                                             
2            LINE_SETVAL                      5                                                                            
3            LINE_LOOP                        6                                                                            
4            LINE_GOTO                        7            next[8];                                                        
5            LINE_SETVAL                      8                                                                            
6            LINE_END_LOOP                    9            loop[3];                                                        
7            LINE_PROC                        10                                                                           
8            LINE_LABEL                       11                                                                           
9            LINE_SETVAL                      12                                                                           
10           LINE_EXCEPTION                   13           end[14];                                                        
11           LINE_WHEN                        14                                                                           
12           LINE_PROC                        15                                                                           
13           LINE_END_WHEN                    15                                                                           
14           LINE_END_EXCEPTION               15                                                                           
15           LINE_END                         16                                                                           

15 rows fetched.

SQL> select * from table(dba_proc_line('SYS', 'TEST_IF_ELSE_F'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE FUNCTION TEST_IF_ELSE_F return boolean is     
2              FunctionResult boolean;                                       
3              test_num       NUMBER;                                        
4            begin                                                           
5              test_num := 18;                                               
6              IF test_num = 17 THEN                                         
7                FunctionResult := TRUE;                                     
8              ELSIF test_num = 18 THEN                                      
9                FunctionResult := FALSE;                                    
10             ELSE                                                          
11               FunctionResult := FALSE;                                    
12             END IF;                                                       
13             dbe_output.print_line(test_num);                               
14             FunctionResult := TRUE;                                       
15             return(FunctionResult);                                       
16           exception                                                       
17             when others then                                              
18               SYS.dbe_output.print_line('other error');                    
19               return(FunctionResult);                                     
20           end;                                                            
21           /                                                               

21 rows fetched.

SQL> select * from table(dba_proc_decode('SYS', 'TEST_IF_ELSE_F', 'FUNCTION'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       4            except[13];end[19];                                             
2            LINE_SETVAL                      5                                                                            
3            LINE_IF                          6            t_line[null];f_line[5];next[9];                                 
4            LINE_SETVAL                      7                                                                            
5            LINE_ELIF                        8            t_line[null];f_line[7];next[9];if_line[3];                      
6            LINE_SETVAL                      9                                                                            
7            LINE_ELSE                        10           if_line[5];                                                     
8            LINE_SETVAL                      11                                                                           
9            LINE_END_IF                      12                                                                           
10           LINE_PROC                        13                                                                           
11           LINE_SETVAL                      14                                                                           
12           LINE_RETURN                      15                                                                           
13           LINE_EXCEPTION                   16           end[18];                                                        
14           LINE_WHEN                        17                                                                           
15           LINE_PROC                        18                                                                           
16           LINE_RETURN                      19                                                                           
17           LINE_END_WHEN                    19                                                                           
18           LINE_END_EXCEPTION               19                                                                           
19           LINE_END                         20                                                                           

19 rows fetched.

SQL> select * from table(dba_proc_line('SYS', 'TEST_IF_ELSE_P'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE PROCEDURE TEST_IF_ELSE_P is                   
2              FunctionResult boolean;                                       
3              test_num       NUMBER;                                        
4            begin                                                           
5              test_num := 19;                                               
6              IF test_num = 17 THEN                                         
7                FunctionResult := TRUE;                                     
8              ELSIF test_num = 18 THEN                                      
9                FunctionResult := FALSE;                                    
10             ELSE                                                          
11               FunctionResult := FALSE;                                    
12             END IF;                                                       
13             dbe_output.print_line(test_num);                               
14             FunctionResult := TRUE;                                       
15           exception                                                       
16             when others then                                              
17               SYS.dbe_output.print_line('other error');                    
18           end;                                                            
19           /                                                               

19 rows fetched.

SQL> select * from table(dba_proc_decode('SYS', 'TEST_IF_ELSE_P', 'PROCEDURE'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       4            except[12];end[17];                                             
2            LINE_SETVAL                      5                                                                            
3            LINE_IF                          6            t_line[null];f_line[5];next[9];                                 
4            LINE_SETVAL                      7                                                                            
5            LINE_ELIF                        8            t_line[null];f_line[7];next[9];if_line[3];                      
6            LINE_SETVAL                      9                                                                            
7            LINE_ELSE                        10           if_line[5];                                                     
8            LINE_SETVAL                      11                                                                           
9            LINE_END_IF                      12                                                                           
10           LINE_PROC                        13                                                                           
11           LINE_SETVAL                      14                                                                           
12           LINE_EXCEPTION                   15           end[16];                                                        
13           LINE_WHEN                        16                                                                           
14           LINE_PROC                        17                                                                           
15           LINE_END_WHEN                    17                                                                           
16           LINE_END_EXCEPTION               17                                                                           
17           LINE_END                         18                                                                           

17 rows fetched.

SQL> select * from table(dba_proc_line('SYS', 'TEST_CASE_F'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE FUNCTION TEST_CASE_F return boolean is        
2              FunctionResult boolean;                                       
3              test_num       NUMBER;                                        
4            begin                                                           
5              test_num := 19;                                               
6              CASE test_num                                                 
7              WHEN 19 THEN                                                  
8                FunctionResult := FALSE;                                    
9              WHEN 20 THEN                                                  
10               FunctionResult := FALSE;                                    
11             END CASE;                                                     
12             dbe_output.print_line(test_num);                               
13             FunctionResult := TRUE;                                       
14             return(FunctionResult);                                       
15           exception                                                       
16             when others then                                              
17               SYS.dbe_output.print_line('other error');                    
18               return(FunctionResult);                                     
19           end;                                                            
20           /                                                               

20 rows fetched.

SQL> select * from table(dba_proc_decode('SYS', 'TEST_CASE_F', 'FUNCTION'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       4            except[12];end[18];                                             
2            LINE_SETVAL                      5                                                                            
3            LINE_CASE                        6                                                                            
4            LINE_WHEN_CASE                   7            t_line[null];f_line[6];next[8];if_line[null];                   
5            LINE_SETVAL                      8                                                                            
6            LINE_WHEN_CASE                   9            t_line[null];f_line[8];next[8];if_line[4];                      
7            LINE_SETVAL                      10                                                                           
8            LINE_END_CASE                    11                                                                           
9            LINE_PROC                        12                                                                           
10           LINE_SETVAL                      13                                                                           
11           LINE_RETURN                      14                                                                           
12           LINE_EXCEPTION                   15           end[17];                                                        
13           LINE_WHEN                        16                                                                           
14           LINE_PROC                        17                                                                           
15           LINE_RETURN                      18                                                                           
16           LINE_END_WHEN                    18                                                                           
17           LINE_END_EXCEPTION               18                                                                           
18           LINE_END                         19                                                                           

18 rows fetched.

SQL> select * from table(dba_proc_line('SYS', 'TEST_CASE_P'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE PROCEDURE TEST_CASE_P is                      
2              FunctionResult boolean;                                       
3              test_num       NUMBER;                                        
4            begin                                                           
5              test_num := 20;                                               
6              CASE test_num                                                 
7              WHEN 19 THEN                                                  
8                FunctionResult := FALSE;                                    
9              WHEN 20 THEN                                                  
10               FunctionResult := FALSE;                                    
11             END CASE;                                                     
12             dbe_output.print_line(test_num);                               
13             FunctionResult := TRUE;                                       
14           exception                                                       
15             when others then                                              
16               SYS.dbe_output.print_line('other error');                    
17           end;                                                            
18           /                                                               

18 rows fetched.

SQL> select * from table(dba_proc_decode('SYS', 'TEST_CASE_P', 'PROCEDURE'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       4            except[11];end[16];                                             
2            LINE_SETVAL                      5                                                                            
3            LINE_CASE                        6                                                                            
4            LINE_WHEN_CASE                   7            t_line[null];f_line[6];next[8];if_line[null];                   
5            LINE_SETVAL                      8                                                                            
6            LINE_WHEN_CASE                   9            t_line[null];f_line[8];next[8];if_line[4];                      
7            LINE_SETVAL                      10                                                                           
8            LINE_END_CASE                    11                                                                           
9            LINE_PROC                        12                                                                           
10           LINE_SETVAL                      13                                                                           
11           LINE_EXCEPTION                   14           end[15];                                                        
12           LINE_WHEN                        15                                                                           
13           LINE_PROC                        16                                                                           
14           LINE_END_WHEN                    16                                                                           
15           LINE_END_EXCEPTION               16                                                                           
16           LINE_END                         17                                                                           

16 rows fetched.

SQL> select * from table(dba_proc_line('GS_PLSQL_COVER', 'TEST_SQL_P'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE PROCEDURE TEST_SQL_P is                       
2            sql_str varchar(80);                                            
3            v1 int;                                                         
4            begin                                                           
5              delete test_sql_t;                                            
6              insert into test_sql_t(a,b,c)                                 
7                values(1, 2, '3');                                          
8              sql_str := 'insert into test_sql_t(a,b,c) values(4, 15, ''16'')';
9              execute immediate sql_str;                                    
10             select a into v1                                              
11             from test_sql_t                                               
12             where b = 5;                                                  
13           exception                                                       
14             when no_data_found then                                       
15               SYS.dbe_output.print_line('not found error');                
16             when others then                                              
17               SYS.dbe_output.print_line('other error');                    
18           end;                                                            
19           /                                                               

19 rows fetched.

SQL> select * from table(dba_proc_decode('GS_PLSQL_COVER', 'TEST_SQL_P', 'PROCEDURE'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       4            except[7];end[15];                                              
2            LINE_SQL                         5                                                                            
3            LINE_SQL                         6                                                                            
4            LINE_SETVAL                      8                                                                            
5            LINE_EXECUTE                     9                                                                            
6            LINE_SQL                         10                                                                           
7            LINE_EXCEPTION                   13           end[14];                                                        
8            LINE_WHEN                        14                                                                           
9            LINE_PROC                        15                                                                           
10           LINE_END_WHEN                    15                                                                           
11           LINE_WHEN                        16                                                                           
12           LINE_PROC                        17                                                                           
13           LINE_END_WHEN                    17                                                                           
14           LINE_END_EXCEPTION               17                                                                           
15           LINE_END                         18                                                                           

15 rows fetched.

SQL> select * from table(dba_proc_line('SYS', 'TEST_LEVEL_1_P'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE PROCEDURE TEST_LEVEL_1_P is                   
2            begin                                                           
3              test_level_2_p();                                             
4            end;                                                            
5            /                                                               

5 rows fetched.

SQL> select * from table(dba_proc_decode('SYS', 'TEST_LEVEL_1_P', 'PROCEDURE'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       2            except[null];end[3];                                            
2            LINE_PROC                        3                                                                            
3            LINE_END                         4                                                                            

3 rows fetched.

SQL> select * from table(dba_proc_line('GS_PLSQL_COVER', 'TEST_TRIGGER'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE TRIGGER TEST_TRIGGER after delete on test_sql_t
2            begin                                                           
3              insert into test_sql_t(a,b,c) values(9, 20, '30');            
4              return;                                                       
5              insert into test_sql_t(a,b,c) values(10, 30, '100');          
6            end;                                                            
7            /                                                               

7 rows fetched.

SQL> select * from table(dba_proc_decode('GS_PLSQL_COVER', 'TEST_TRIGGER', 'TRIGGER'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       2            except[null];end[null];                                         
2            LINE_BEGIN                       2            except[null];end[6];                                            
3            LINE_SQL                         3                                                                            
4            LINE_RETURN                      4                                                                            
5            LINE_SQL                         5                                                                            
6            LINE_END                         6                                                                            

6 rows fetched.

SQL> select * from table(dba_proc_line('GS_PLSQL_COVER', 'TEST_FUNC_IN_DML_F'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE FUNCTION TEST_FUNC_IN_DML_F (p1 int) return int is
2            begin                                                           
3              return p1;                                                    
4            end;                                                            
5            /                                                               

5 rows fetched.

SQL> select * from table(dba_proc_decode('GS_PLSQL_COVER', 'TEST_FUNC_IN_DML_F', 'FUNCTION'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       2            except[null];end[3];                                            
2            LINE_RETURN                      3                                                                            
3            LINE_END                         4                                                                            

3 rows fetched.

SQL> 
SQL> select * from table(dba_analyze_table('GS_PLSQL_COVER', 'TEST_FUNC_IN_DML_T'));

STAT_ITEM                                                        VALUE               
---------------------------------------------------------------- --------------------
total pages                                                      8                   
total extents                                                    1                   
total rows                                                       1                   
linked rows                                                      0                   
mirgated rows                                                    0                   
average row size                                                 16                  

6 rows fetched.

SQL> select * from table(dba_analyze_table('GS_PLSQL_COVER', ''));

CT-00212, The value of parameter "" cannot be recognized: "the table name's length must be larger than 0"
SQL> 
SQL> select * from table(DBA_PROC_LINE('SYS','procedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzz'));

CT-00211, The value of parameter "procedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedu
SQL> 
SQL> select * from table(DBA_PROC_LINE('SYS','procedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzz'));

CT-00211, The value of parameter "procedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzzprocedure_for_fuzz" should be in [0, 64]
SQL> 
SQL> conn gs_plsql_cover2/Abc123456@127.0.0.1:1611

connected.

SQL> select * from table(dba_analyze_table('GS_PLSQL_COVER', 'TEST_FUNC_IN_DML_T'));

STAT_ITEM                                                        VALUE               
---------------------------------------------------------------- --------------------
total pages                                                      8                   
total extents                                                    1                   
total rows                                                       1                   
linked rows                                                      0                   
mirgated rows                                                    0                   
average row size                                                 16                  

6 rows fetched.

SQL> conn gs_plsql_cover3/Abc123456@127.0.0.1:1611

connected.

SQL> select * from table(dba_analyze_table('GS_PLSQL_COVER', 'TEST_FUNC_IN_DML_T'));

CT-01001, Permissions were insufficient
SQL> 
SQL> 
SQL> conn sys/sys@127.0.0.1:1611

connected.

SQL> 
SQL> select * from table(dba_proc_line('SYS', 'TEST_FOR_LOOP_F'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE FUNCTION TEST_FOR_LOOP_F return boolean is    
2              FunctionResult boolean;                                       
3              test_num       NUMBER;                                        
4              /*                                                            
5              abc                                                           
6              */                                                            
7            begin                                                           
8              test_num := 0;                                                
9              <<loop_label>>                                                
10             FOR i IN 1..10 LOOP                                           
11             /*                                                            
12             abc                                                           
13             */                                                            
14               test_num := test_num + 1;                                   
15               CONTINUE loop_label when i > 7;                             
16               test_num := test_num + 1;                                   
17               CONTINUE;                                                   
18               test_num := test_num + 1;                                   
19             END LOOP;                                                     
20             dbe_output.print_line(test_num);                               
21             FunctionResult := TRUE;                                       
22             /*                                                            
23             abc                                                           
24             */                                                            
25             return(FunctionResult);                                       
26           exception                                                       
27             when others then                                              
28             /*                                                            
29             abc                                                           
30             */                                                            
31               SYS.dbe_output.print_line('other error');                    
32               return(FunctionResult);                                     
33           end;                                                            
34           /                                                               

34 rows fetched.

SQL> select * from table(dba_proc_decode('SYS', 'TEST_FOR_LOOP_F', 'FUNCTION'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       7            except[14];end[20];                                             
2            LINE_SETVAL                      8                                                                            
3            LINE_LABEL                       9                                                                            
4            LINE_FOR                         10           next[10];                                                       
5            LINE_SETVAL                      14                                                                           
6            LINE_CONTINUE                    15           next[4];                                                        
7            LINE_SETVAL                      16                                                                           
8            LINE_CONTINUE                    17           next[4];                                                        
9            LINE_SETVAL                      18                                                                           
10           LINE_END_LOOP                    19           loop[4];                                                        
11           LINE_PROC                        20                                                                           
12           LINE_SETVAL                      21                                                                           
13           LINE_RETURN                      25                                                                           
14           LINE_EXCEPTION                   26           end[19];                                                        
15           LINE_WHEN                        27                                                                           
16           LINE_PROC                        31                                                                           
17           LINE_RETURN                      32                                                                           
18           LINE_END_WHEN                    32                                                                           
19           LINE_END_EXCEPTION               32                                                                           
20           LINE_END                         33                                                                           

20 rows fetched.

SQL> select * from table(dba_proc_line('SYS', 'TEST_FOR_LOOP_P'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE PROCEDURE TEST_FOR_LOOP_P is                  
2              FunctionResult boolean;                                       
3              test_num       NUMBER;                                        
4            begin                                                           
5              test_num := 0;                                                
6              FOR i IN 1..10 LOOP                                           
7                test_num := test_num + 1;                                   
8                CONTINUE when i > 7;                                        
9                test_num := test_num + 1;                                   
10               CONTINUE;                                                   
11               test_num := test_num + 1;                                   
12             END LOOP;                                                     
13             dbe_output.print_line(test_num);                               
14             FunctionResult := TRUE;                                       
15           exception                                                       
16             when others then                                              
17               SYS.dbe_output.print_line('other error');                    
18           end;                                                            
19           /                                                               

19 rows fetched.

SQL> select * from table(dba_proc_decode('SYS', 'TEST_FOR_LOOP_P', 'PROCEDURE'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       4            except[12];end[17];                                             
2            LINE_SETVAL                      5                                                                            
3            LINE_FOR                         6            next[9];                                                        
4            LINE_SETVAL                      7                                                                            
5            LINE_CONTINUE                    8            next[3];                                                        
6            LINE_SETVAL                      9                                                                            
7            LINE_CONTINUE                    10           next[3];                                                        
8            LINE_SETVAL                      11                                                                           
9            LINE_END_LOOP                    12           loop[3];                                                        
10           LINE_PROC                        13                                                                           
11           LINE_SETVAL                      14                                                                           
12           LINE_EXCEPTION                   15           end[16];                                                        
13           LINE_WHEN                        16                                                                           
14           LINE_PROC                        17                                                                           
15           LINE_END_WHEN                    17                                                                           
16           LINE_END_EXCEPTION               17                                                                           
17           LINE_END                         18                                                                           

17 rows fetched.

SQL> select * from table(dba_proc_line('SYS', 'TEST_WHILE_LOOP_F'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE FUNCTION TEST_WHILE_LOOP_F return boolean is  
2              FunctionResult boolean;                                       
3              test_num       NUMBER;                                        
4            begin                                                           
5              test_num := 5;                                                
6              WHILE test_num > 1 LOOP                                       
7                test_num := test_num - 1;                                   
8                test_num := test_num - 1;                                   
9                CONTINUE;                                                   
10               test_num := test_num - 1;                                   
11             END LOOP;                                                     
12             dbe_output.print_line(test_num);                               
13             FunctionResult := TRUE;                                       
14             return(FunctionResult);                                       
15           exception                                                       
16             when others then                                              
17               SYS.dbe_output.print_line('other error');                    
18               return(FunctionResult);                                     
19           end;                                                            
20           /                                                               

20 rows fetched.

SQL> select * from table(dba_proc_decode('SYS', 'TEST_WHILE_LOOP_F', 'FUNCTION'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       4            except[12];end[18];                                             
2            LINE_SETVAL                      5                                                                            
3            LINE_WHILE                       6            next[8];stack_line[1];                                          
4            LINE_SETVAL                      7                                                                            
5            LINE_SETVAL                      8                                                                            
6            LINE_CONTINUE                    9            next[3];                                                        
7            LINE_SETVAL                      10                                                                           
8            LINE_END_LOOP                    11           loop[3];                                                        
9            LINE_PROC                        12                                                                           
10           LINE_SETVAL                      13                                                                           
11           LINE_RETURN                      14                                                                           
12           LINE_EXCEPTION                   15           end[17];                                                        
13           LINE_WHEN                        16                                                                           
14           LINE_PROC                        17                                                                           
15           LINE_RETURN                      18                                                                           
16           LINE_END_WHEN                    18                                                                           
17           LINE_END_EXCEPTION               18                                                                           
18           LINE_END                         19                                                                           

18 rows fetched.

SQL> select * from table(dba_proc_line('SYS', 'TEST_WHILE_LOOP_P'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE PROCEDURE TEST_WHILE_LOOP_P is                
2              FunctionResult boolean;                                       
3              test_num       NUMBER;                                        
4            begin                                                           
5              test_num := 5;                                                
6              WHILE test_num = 0 LOOP                                       
7                test_num := test_num - 1;                                   
8                test_num := test_num - 1;                                   
9                CONTINUE;                                                   
10               test_num := test_num - 1;                                   
11             END LOOP;                                                     
12             dbe_output.print_line(test_num);                               
13             FunctionResult := TRUE;                                       
14           exception                                                       
15             when others then                                              
16               SYS.dbe_output.print_line('other error');                    
17           end;                                                            
18           /                                                               

18 rows fetched.

SQL> select * from table(dba_proc_decode('SYS', 'TEST_WHILE_LOOP_P', 'PROCEDURE'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       4            except[11];end[16];                                             
2            LINE_SETVAL                      5                                                                            
3            LINE_WHILE                       6            next[8];stack_line[1];                                          
4            LINE_SETVAL                      7                                                                            
5            LINE_SETVAL                      8                                                                            
6            LINE_CONTINUE                    9            next[3];                                                        
7            LINE_SETVAL                      10                                                                           
8            LINE_END_LOOP                    11           loop[3];                                                        
9            LINE_PROC                        12                                                                           
10           LINE_SETVAL                      13                                                                           
11           LINE_EXCEPTION                   14           end[15];                                                        
12           LINE_WHEN                        15                                                                           
13           LINE_PROC                        16                                                                           
14           LINE_END_WHEN                    16                                                                           
15           LINE_END_EXCEPTION               16                                                                           
16           LINE_END                         17                                                                           

16 rows fetched.

SQL> select * from table(dba_proc_line('SYS', 'TEST_LOOP_F'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE FUNCTION TEST_LOOP_F return boolean is        
2              FunctionResult boolean;                                       
3              test_num       NUMBER;                                        
4            begin                                                           
5              test_num := 5;                                                
6              LOOP                                                          
7                EXIT;                                                       
8            	test_num := 7;                                                 
9              END LOOP;                                                     
10             dbe_output.print_line(test_num);                               
11             FunctionResult := TRUE;                                       
12             return(FunctionResult);                                       
13           exception                                                       
14             when others then                                              
15               SYS.dbe_output.print_line('other error');                    
16               return(FunctionResult);                                     
17           end;                                                            
18           /                                                               

18 rows fetched.

SQL> select * from table(dba_proc_decode('SYS', 'TEST_LOOP_F', 'FUNCTION'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       4            except[10];end[16];                                             
2            LINE_SETVAL                      5                                                                            
3            LINE_LOOP                        6                                                                            
4            LINE_EXIT                        7            next[3];                                                        
5            LINE_SETVAL                      8                                                                            
6            LINE_END_LOOP                    9            loop[3];                                                        
7            LINE_PROC                        10                                                                           
8            LINE_SETVAL                      11                                                                           
9            LINE_RETURN                      12                                                                           
10           LINE_EXCEPTION                   13           end[15];                                                        
11           LINE_WHEN                        14                                                                           
12           LINE_PROC                        15                                                                           
13           LINE_RETURN                      16                                                                           
14           LINE_END_WHEN                    16                                                                           
15           LINE_END_EXCEPTION               16                                                                           
16           LINE_END                         17                                                                           

16 rows fetched.

SQL> select * from table(dba_proc_line('SYS', 'TEST_LOOP_P'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE PROCEDURE TEST_LOOP_P is                      
2              FunctionResult boolean;                                       
3              test_num       NUMBER;                                        
4            begin                                                           
5              test_num := 5;                                                
6              LOOP                                                          
7                GOTO goto_label;                                            
8            	test_num := 7;                                                 
9              END LOOP;                                                     
10             dbe_output.print_line(test_num);                               
11             <<goto_label>>                                                
12             FunctionResult := TRUE;                                       
13           exception                                                       
14             when others then                                              
15               SYS.dbe_output.print_line('other error');                    
16           end;                                                            
17           /                                                               

17 rows fetched.

SQL> select * from table(dba_proc_decode('SYS', 'TEST_LOOP_P', 'PROCEDURE'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       4            except[10];end[15];                                             
2            LINE_SETVAL                      5                                                                            
3            LINE_LOOP                        6                                                                            
4            LINE_GOTO                        7            next[8];                                                        
5            LINE_SETVAL                      8                                                                            
6            LINE_END_LOOP                    9            loop[3];                                                        
7            LINE_PROC                        10                                                                           
8            LINE_LABEL                       11                                                                           
9            LINE_SETVAL                      12                                                                           
10           LINE_EXCEPTION                   13           end[14];                                                        
11           LINE_WHEN                        14                                                                           
12           LINE_PROC                        15                                                                           
13           LINE_END_WHEN                    15                                                                           
14           LINE_END_EXCEPTION               15                                                                           
15           LINE_END                         16                                                                           

15 rows fetched.

SQL> select * from table(dba_proc_line('SYS', 'TEST_IF_ELSE_F'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE FUNCTION TEST_IF_ELSE_F return boolean is     
2              FunctionResult boolean;                                       
3              test_num       NUMBER;                                        
4            begin                                                           
5              test_num := 18;                                               
6              IF test_num = 17 THEN                                         
7                FunctionResult := TRUE;                                     
8              ELSIF test_num = 18 THEN                                      
9                FunctionResult := FALSE;                                    
10             ELSE                                                          
11               FunctionResult := FALSE;                                    
12             END IF;                                                       
13             dbe_output.print_line(test_num);                               
14             FunctionResult := TRUE;                                       
15             return(FunctionResult);                                       
16           exception                                                       
17             when others then                                              
18               SYS.dbe_output.print_line('other error');                    
19               return(FunctionResult);                                     
20           end;                                                            
21           /                                                               

21 rows fetched.

SQL> select * from table(dba_proc_decode('SYS', 'TEST_IF_ELSE_F', 'FUNCTION'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       4            except[13];end[19];                                             
2            LINE_SETVAL                      5                                                                            
3            LINE_IF                          6            t_line[null];f_line[5];next[9];                                 
4            LINE_SETVAL                      7                                                                            
5            LINE_ELIF                        8            t_line[null];f_line[7];next[9];if_line[3];                      
6            LINE_SETVAL                      9                                                                            
7            LINE_ELSE                        10           if_line[5];                                                     
8            LINE_SETVAL                      11                                                                           
9            LINE_END_IF                      12                                                                           
10           LINE_PROC                        13                                                                           
11           LINE_SETVAL                      14                                                                           
12           LINE_RETURN                      15                                                                           
13           LINE_EXCEPTION                   16           end[18];                                                        
14           LINE_WHEN                        17                                                                           
15           LINE_PROC                        18                                                                           
16           LINE_RETURN                      19                                                                           
17           LINE_END_WHEN                    19                                                                           
18           LINE_END_EXCEPTION               19                                                                           
19           LINE_END                         20                                                                           

19 rows fetched.

SQL> select * from table(dba_proc_line('SYS', 'TEST_IF_ELSE_P'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE PROCEDURE TEST_IF_ELSE_P is                   
2              FunctionResult boolean;                                       
3              test_num       NUMBER;                                        
4            begin                                                           
5              test_num := 19;                                               
6              IF test_num = 17 THEN                                         
7                FunctionResult := TRUE;                                     
8              ELSIF test_num = 18 THEN                                      
9                FunctionResult := FALSE;                                    
10             ELSE                                                          
11               FunctionResult := FALSE;                                    
12             END IF;                                                       
13             dbe_output.print_line(test_num);                               
14             FunctionResult := TRUE;                                       
15           exception                                                       
16             when others then                                              
17               SYS.dbe_output.print_line('other error');                    
18           end;                                                            
19           /                                                               

19 rows fetched.

SQL> select * from table(dba_proc_decode('SYS', 'TEST_IF_ELSE_P', 'PROCEDURE'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       4            except[12];end[17];                                             
2            LINE_SETVAL                      5                                                                            
3            LINE_IF                          6            t_line[null];f_line[5];next[9];                                 
4            LINE_SETVAL                      7                                                                            
5            LINE_ELIF                        8            t_line[null];f_line[7];next[9];if_line[3];                      
6            LINE_SETVAL                      9                                                                            
7            LINE_ELSE                        10           if_line[5];                                                     
8            LINE_SETVAL                      11                                                                           
9            LINE_END_IF                      12                                                                           
10           LINE_PROC                        13                                                                           
11           LINE_SETVAL                      14                                                                           
12           LINE_EXCEPTION                   15           end[16];                                                        
13           LINE_WHEN                        16                                                                           
14           LINE_PROC                        17                                                                           
15           LINE_END_WHEN                    17                                                                           
16           LINE_END_EXCEPTION               17                                                                           
17           LINE_END                         18                                                                           

17 rows fetched.

SQL> select * from table(dba_proc_line('SYS', 'TEST_CASE_F'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE FUNCTION TEST_CASE_F return boolean is        
2              FunctionResult boolean;                                       
3              test_num       NUMBER;                                        
4            begin                                                           
5              test_num := 19;                                               
6              CASE test_num                                                 
7              WHEN 19 THEN                                                  
8                FunctionResult := FALSE;                                    
9              WHEN 20 THEN                                                  
10               FunctionResult := FALSE;                                    
11             END CASE;                                                     
12             dbe_output.print_line(test_num);                               
13             FunctionResult := TRUE;                                       
14             return(FunctionResult);                                       
15           exception                                                       
16             when others then                                              
17               SYS.dbe_output.print_line('other error');                    
18               return(FunctionResult);                                     
19           end;                                                            
20           /                                                               

20 rows fetched.

SQL> select * from table(dba_proc_decode('SYS', 'TEST_CASE_F', 'FUNCTION'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       4            except[12];end[18];                                             
2            LINE_SETVAL                      5                                                                            
3            LINE_CASE                        6                                                                            
4            LINE_WHEN_CASE                   7            t_line[null];f_line[6];next[8];if_line[null];                   
5            LINE_SETVAL                      8                                                                            
6            LINE_WHEN_CASE                   9            t_line[null];f_line[8];next[8];if_line[4];                      
7            LINE_SETVAL                      10                                                                           
8            LINE_END_CASE                    11                                                                           
9            LINE_PROC                        12                                                                           
10           LINE_SETVAL                      13                                                                           
11           LINE_RETURN                      14                                                                           
12           LINE_EXCEPTION                   15           end[17];                                                        
13           LINE_WHEN                        16                                                                           
14           LINE_PROC                        17                                                                           
15           LINE_RETURN                      18                                                                           
16           LINE_END_WHEN                    18                                                                           
17           LINE_END_EXCEPTION               18                                                                           
18           LINE_END                         19                                                                           

18 rows fetched.

SQL> select * from table(dba_proc_line('SYS', 'TEST_CASE_P'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE PROCEDURE TEST_CASE_P is                      
2              FunctionResult boolean;                                       
3              test_num       NUMBER;                                        
4            begin                                                           
5              test_num := 20;                                               
6              CASE test_num                                                 
7              WHEN 19 THEN                                                  
8                FunctionResult := FALSE;                                    
9              WHEN 20 THEN                                                  
10               FunctionResult := FALSE;                                    
11             END CASE;                                                     
12             dbe_output.print_line(test_num);                               
13             FunctionResult := TRUE;                                       
14           exception                                                       
15             when others then                                              
16               SYS.dbe_output.print_line('other error');                    
17           end;                                                            
18           /                                                               

18 rows fetched.

SQL> select * from table(dba_proc_decode('SYS', 'TEST_CASE_P', 'PROCEDURE'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       4            except[11];end[16];                                             
2            LINE_SETVAL                      5                                                                            
3            LINE_CASE                        6                                                                            
4            LINE_WHEN_CASE                   7            t_line[null];f_line[6];next[8];if_line[null];                   
5            LINE_SETVAL                      8                                                                            
6            LINE_WHEN_CASE                   9            t_line[null];f_line[8];next[8];if_line[4];                      
7            LINE_SETVAL                      10                                                                           
8            LINE_END_CASE                    11                                                                           
9            LINE_PROC                        12                                                                           
10           LINE_SETVAL                      13                                                                           
11           LINE_EXCEPTION                   14           end[15];                                                        
12           LINE_WHEN                        15                                                                           
13           LINE_PROC                        16                                                                           
14           LINE_END_WHEN                    16                                                                           
15           LINE_END_EXCEPTION               16                                                                           
16           LINE_END                         17                                                                           

16 rows fetched.

SQL> select * from table(dba_proc_line('GS_PLSQL_COVER', 'TEST_SQL_P'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE PROCEDURE TEST_SQL_P is                       
2            sql_str varchar(80);                                            
3            v1 int;                                                         
4            begin                                                           
5              delete test_sql_t;                                            
6              insert into test_sql_t(a,b,c)                                 
7                values(1, 2, '3');                                          
8              sql_str := 'insert into test_sql_t(a,b,c) values(4, 15, ''16'')';
9              execute immediate sql_str;                                    
10             select a into v1                                              
11             from test_sql_t                                               
12             where b = 5;                                                  
13           exception                                                       
14             when no_data_found then                                       
15               SYS.dbe_output.print_line('not found error');                
16             when others then                                              
17               SYS.dbe_output.print_line('other error');                    
18           end;                                                            
19           /                                                               

19 rows fetched.

SQL> select * from table(dba_proc_decode('GS_PLSQL_COVER', 'TEST_SQL_P', 'PROCEDURE'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       4            except[7];end[15];                                              
2            LINE_SQL                         5                                                                            
3            LINE_SQL                         6                                                                            
4            LINE_SETVAL                      8                                                                            
5            LINE_EXECUTE                     9                                                                            
6            LINE_SQL                         10                                                                           
7            LINE_EXCEPTION                   13           end[14];                                                        
8            LINE_WHEN                        14                                                                           
9            LINE_PROC                        15                                                                           
10           LINE_END_WHEN                    15                                                                           
11           LINE_WHEN                        16                                                                           
12           LINE_PROC                        17                                                                           
13           LINE_END_WHEN                    17                                                                           
14           LINE_END_EXCEPTION               17                                                                           
15           LINE_END                         18                                                                           

15 rows fetched.

SQL> select * from table(dba_proc_line('SYS', 'TEST_LEVEL_1_P'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE PROCEDURE TEST_LEVEL_1_P is                   
2            begin                                                           
3              test_level_2_p();                                             
4            end;                                                            
5            /                                                               

5 rows fetched.

SQL> select * from table(dba_proc_decode('SYS', 'TEST_LEVEL_1_P', 'PROCEDURE'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       2            except[null];end[3];                                            
2            LINE_PROC                        3                                                                            
3            LINE_END                         4                                                                            

3 rows fetched.

SQL> select * from table(dba_proc_line('GS_PLSQL_COVER', 'TEST_TRIGGER'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE TRIGGER TEST_TRIGGER after delete on test_sql_t
2            begin                                                           
3              insert into test_sql_t(a,b,c) values(9, 20, '30');            
4              return;                                                       
5              insert into test_sql_t(a,b,c) values(10, 30, '100');          
6            end;                                                            
7            /                                                               

7 rows fetched.

SQL> select * from table(dba_proc_decode('GS_PLSQL_COVER', 'TEST_TRIGGER', 'TRIGGER'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       2            except[null];end[null];                                         
2            LINE_BEGIN                       2            except[null];end[6];                                            
3            LINE_SQL                         3                                                                            
4            LINE_RETURN                      4                                                                            
5            LINE_SQL                         5                                                                            
6            LINE_END                         6                                                                            

6 rows fetched.

SQL> select * from table(dba_proc_line('GS_PLSQL_COVER', 'TEST_FUNC_IN_DML_F'));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE FUNCTION TEST_FUNC_IN_DML_F (p1 int) return int is
2            begin                                                           
3              return p1;                                                    
4            end;                                                            
5            /                                                               

5 rows fetched.

SQL> select * from table(dba_proc_decode('GS_PLSQL_COVER', 'TEST_FUNC_IN_DML_F', 'FUNCTION'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       2            except[null];end[3];                                            
2            LINE_RETURN                      3                                                                            
3            LINE_END                         4                                                                            

3 rows fetched.

SQL> 
SQL> drop user gs_plsql_cover cascade;

Succeed.

SQL> drop user gs_plsql_cover2 cascade;

Succeed.

SQL> drop user gs_plsql_cover3 cascade;

Succeed.

SQL> 
SQL> drop user if exists gs_plsql_cover cascade;

Succeed.

SQL> create user gs_plsql_cover identified by Abc123456;

Succeed.

SQL> grant dba to gs_plsql_cover;

Succeed.

SQL> drop user if exists gs_plsql_cover2 cascade;

Succeed.

SQL> create user gs_plsql_cover2 identified by Abc123456;

Succeed.

SQL> grant dba to gs_plsql_cover2;

Succeed.

SQL> drop user if exists gs_plsql_cover3 cascade;

Succeed.

SQL> create user gs_plsql_cover3 identified by Abc123456;

Succeed.

SQL> grant create session to gs_plsql_cover3;

Succeed.

SQL> conn gs_plsql_cover2/Abc123456@127.0.0.1:1611

connected.

SQL> create or replace procedure gs_plsql_cover2_p is
  2   test_num       NUMBER;
  3 begin
  4   test_num := 5;
  5 end;
  6 /

Succeed.

SQL> conn gs_plsql_cover/Abc123456@127.0.0.1:1611

connected.

SQL> select * from table(dba_proc_line(upper('gs_plsql_cover2'), upper('gs_plsql_cover2_p')));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE PROCEDURE GS_PLSQL_COVER2_P is                
2              test_num       NUMBER;                                        
3            begin                                                           
4              test_num := 5;                                                
5            end;                                                            
6            /                                                               

6 rows fetched.

SQL> select * from table(dba_proc_decode(upper('gs_plsql_cover2'), upper('gs_plsql_cover2_p'), 'PROCEDURE'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       3            except[null];end[3];                                            
2            LINE_SETVAL                      4                                                                            
3            LINE_END                         5                                                                            

3 rows fetched.

SQL> conn gs_plsql_cover2/Abc123456@127.0.0.1:1611

connected.

SQL> select * from table(dba_proc_line(upper('gs_plsql_cover2'), upper('gs_plsql_cover2_p')));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE PROCEDURE GS_PLSQL_COVER2_P is                
2              test_num       NUMBER;                                        
3            begin                                                           
4              test_num := 5;                                                
5            end;                                                            
6            /                                                               

6 rows fetched.

SQL> select * from table(dba_proc_decode(upper('gs_plsql_cover2'), upper('gs_plsql_cover2_p'), 'PROCEDURE'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       3            except[null];end[3];                                            
2            LINE_SETVAL                      4                                                                            
3            LINE_END                         5                                                                            

3 rows fetched.

SQL> conn gs_plsql_cover3/Abc123456@127.0.0.1:1611

connected.

SQL> select * from table(dba_proc_line(upper('gs_plsql_cover2'), upper('gs_plsql_cover2_p')));

CT-01001, Permissions were insufficient
SQL> select * from table(dba_proc_decode(upper('gs_plsql_cover2'), upper('gs_plsql_cover2_p'), 'PROCEDURE'));

CT-01001, Permissions were insufficient
SQL> conn sys/sys@127.0.0.1:1611

connected.

SQL> select * from table(dba_proc_line(upper('gs_plsql_cover2'), upper('gs_plsql_cover2_p')));

LOC_LINE     SOURCE_LINE                                                     
------------ ----------------------------------------------------------------
1            CREATE OR REPLACE PROCEDURE GS_PLSQL_COVER2_P is                
2              test_num       NUMBER;                                        
3            begin                                                           
4              test_num := 5;                                                
5            end;                                                            
6            /                                                               

6 rows fetched.

SQL> select * from table(dba_proc_decode(upper('gs_plsql_cover2'), upper('gs_plsql_cover2_p'), 'PROCEDURE'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       3            except[null];end[3];                                            
2            LINE_SETVAL                      4                                                                            
3            LINE_END                         5                                                                            

3 rows fetched.

SQL> 
SQL> drop user gs_plsql_cover cascade;

Succeed.

SQL> drop user gs_plsql_cover2 cascade;

Succeed.

SQL> drop user gs_plsql_cover3 cascade;

Succeed.

SQL> 
SQL> -- test prepare start
SQL> create or replace function is_target_session_init(id out int) return boolean is
  2 begin
  3   execute immediate 'select id from target_session_id_t where id != -1' into id;
  4   return true;
  5 exception
  6   when others then
  7     return false;
  8 end;
  9 /

Succeed.

SQL> 
SQL> declare
  2 se_id int;
  3 begin
  4   for i in 1..100000 loop
  5     if is_target_session_init(se_id) then
  6       dbe_debug.attach(se_id, 9);
  7 	  execute immediate 'insert into target_session_id_t values(0)';
  8 	  exit;
  9     end if;
 10   end loop;
 11 end;
 12 /

PL/SQL procedure successfully completed.

SQL> 
SQL> begin
  2   dbe_debug.attach(64, 9);
  3 exception
  4   when others then
  5     dbe_output.print_line(SQL_ERR_CODE || ' error ');
  6 end;
  7 /

978 error 

PL/SQL procedure successfully completed.

SQL> 
SQL> create or replace PROCEDURE get_target_waiting() is
  2 begin
  3   for i in 1..1000000000 loop
  4     if dbe_debug.get_status() = 2 then
  5 	  exit;
  6     end if;
  7   end loop;
  8 end;
  9 /

Succeed.

SQL> 
SQL> create or replace PROCEDURE get_target_waiting_or_idle() is
  2 begin
  3   for i in 1..1000000000 loop
  4     if dbe_debug.get_status() = 2 then
  5 	  exit;
  6     end if;
  7     if dbe_debug.get_status() = 0 then
  8 	  exit;
  9     end if;
 10   end loop;
 11 end;
 12 /

Succeed.

SQL> 
SQL> create or replace PROCEDURE get_target_executing() is
  2 begin
  3   for i in 1..1000000000 loop
  4     if dbe_debug.get_status() = 1 then
  5 	  exit;
  6     end if;
  7   end loop;
  8 end;
  9 /

Succeed.

SQL> 
SQL> call get_target_waiting();

PL/SQL procedure successfully completed.

SQL> call dbe_debug.resume(4, 0);

PL/SQL procedure successfully completed.

SQL> -- test prepare end
SQL> 
SQL> -- test step1 start
SQL> call get_target_waiting();

PL/SQL procedure successfully completed.

SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              9            LINE_BEGIN                      

1 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> select dbe_debug.get_value(1,0,0,0) from dual;

CT-00985, The index 0 of block_id is overflow, must be less than 0
SQL> call dbe_debug.resume(1, 100);

#1: ANONYMOUS BLOCK :10

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              10           LINE_SETVAL                     

1 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            TEST_STEP1_BEGIN                                                                                                                  V1_INT                                                           0            0            0                                                                             BINARY_INTEGER                                                  
1            TEST_STEP1_BEGIN                                                                                                                  V2_NUM                                                           0            1            0                                                                             NUMBER                                                          
1            TEST_STEP1_BEGIN                                                                                                                  V3_VARC                                                          0            2            0                                                                             VARCHAR                                                         
1            TEST_STEP1_BEGIN                                                                                                                  V4_C                                                             0            3            0                                                                             CHAR                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V5_DATE                                                          0            4            0                                                                             DATE                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   

6 rows fetched.

SQL> call dbe_debug.resume(1, 100);

#1: ANONYMOUS BLOCK :11

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              11           LINE_SETVAL                     

1 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            TEST_STEP1_BEGIN                                                                                                                  V1_INT                                                           0            0            0                                                                             BINARY_INTEGER                                                  
1            TEST_STEP1_BEGIN                                                                                                                  V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1            TEST_STEP1_BEGIN                                                                                                                  V3_VARC                                                          0            2            0                                                                             VARCHAR                                                         
1            TEST_STEP1_BEGIN                                                                                                                  V4_C                                                             0            3            0                                                                             CHAR                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V5_DATE                                                          0            4            0                                                                             DATE                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   

6 rows fetched.

SQL> call dbe_debug.resume(1, 100);

#2: SYS.TEST_LV1_FUNC1 :3

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              11           LINE_SETVAL                     
2            SYS                                                              TEST_LV1_FUNC1                                                   3            LINE_RETURN                     

2 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            TEST_STEP1_BEGIN                                                                                                                  V1_INT                                                           0            0            0                                                                             BINARY_INTEGER                                                  
1            TEST_STEP1_BEGIN                                                                                                                  V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1            TEST_STEP1_BEGIN                                                                                                                  V3_VARC                                                          0            2            0                                                                             VARCHAR                                                         
1            TEST_STEP1_BEGIN                                                                                                                  V4_C                                                             0            3            0                                                                             CHAR                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V5_DATE                                                          0            4            0                                                                             DATE                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   
2                                                                                                                                                                                                               0            0            0                                                                             BINARY_INTEGER                                                  
2                                                                                                                                              P1                                                               0            1            0            3                                                                BINARY_INTEGER                                                  
2                                                                                                                                              P2                                                               0            2            0            6.7                                                              NUMBER                                                          

9 rows fetched.

SQL> call dbe_debug.resume(1, 100);

#3: SYS.TEST_LV2_FUNC1 :4

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(3));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
3            SYS                                                              TEST_LV2_FUNC1                                                   4            LINE_LABEL                      

1 rows fetched.

SQL> select * from table(dbg_show_values(2));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
2                                                                                                                                                                                                               0            0            0                                                                             BINARY_INTEGER                                                  
2                                                                                                                                              P1                                                               0            1            0            3                                                                BINARY_INTEGER                                                  
2                                                                                                                                              P2                                                               0            2            0            6.7                                                              NUMBER                                                          

3 rows fetched.

SQL> call dbe_debug.resume(1, 100);

#3: SYS.TEST_LV2_FUNC1 :5

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(2));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
2            SYS                                                              TEST_LV1_FUNC1                                                   3            LINE_RETURN                     

1 rows fetched.

SQL> select * from table(dbg_show_values(10));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            TEST_STEP1_BEGIN                                                                                                                  V1_INT                                                           0            0            0                                                                             BINARY_INTEGER                                                  
1            TEST_STEP1_BEGIN                                                                                                                  V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1            TEST_STEP1_BEGIN                                                                                                                  V3_VARC                                                          0            2            0                                                                             VARCHAR                                                         
1            TEST_STEP1_BEGIN                                                                                                                  V4_C                                                             0            3            0                                                                             CHAR                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V5_DATE                                                          0            4            0                                                                             DATE                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   
2                                                                                                                                                                                                               0            0            0                                                                             BINARY_INTEGER                                                  
2                                                                                                                                              P1                                                               0            1            0            3                                                                BINARY_INTEGER                                                  
2                                                                                                                                              P2                                                               0            2            0            6.7                                                              NUMBER                                                          
3                                                                                                                                                                                                               0            0            0                                                                             BINARY_INTEGER                                                  
3                                                                                                                                              P1                                                               0            1            0            3                                                                BINARY_INTEGER                                                  
3                                                                                                                                              V1                                                               0            2            0                                                                             BINARY_INTEGER                                                  

12 rows fetched.

SQL> call dbe_debug.resume(1, 100);

#3: SYS.TEST_LV2_FUNC1 :6

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              11           LINE_SETVAL                     
2            SYS                                                              TEST_LV1_FUNC1                                                   3            LINE_RETURN                     
3            SYS                                                              TEST_LV2_FUNC1                                                   6            LINE_SETVAL                     

3 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            TEST_STEP1_BEGIN                                                                                                                  V1_INT                                                           0            0            0                                                                             BINARY_INTEGER                                                  
1            TEST_STEP1_BEGIN                                                                                                                  V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1            TEST_STEP1_BEGIN                                                                                                                  V3_VARC                                                          0            2            0                                                                             VARCHAR                                                         
1            TEST_STEP1_BEGIN                                                                                                                  V4_C                                                             0            3            0                                                                             CHAR                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V5_DATE                                                          0            4            0                                                                             DATE                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   
2                                                                                                                                                                                                               0            0            0                                                                             BINARY_INTEGER                                                  
2                                                                                                                                              P1                                                               0            1            0            3                                                                BINARY_INTEGER                                                  
2                                                                                                                                              P2                                                               0            2            0            6.7                                                              NUMBER                                                          
3                                                                                                                                                                                                               0            0            0                                                                             BINARY_INTEGER                                                  
3                                                                                                                                              P1                                                               0            1            0            3                                                                BINARY_INTEGER                                                  
3                                                                                                                                              V1                                                               0            2            0                                                                             BINARY_INTEGER                                                  
3            TEST_LV2_FUNC1_FOR                                                                                                                I                                                                1            0            0            1                                                                BINARY_INTEGER                                                  

13 rows fetched.

SQL> call dbe_debug.resume(1, 100);

#3: SYS.TEST_LV2_FUNC1 :7

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              11           LINE_SETVAL                     
2            SYS                                                              TEST_LV1_FUNC1                                                   3            LINE_RETURN                     
3            SYS                                                              TEST_LV2_FUNC1                                                   7            LINE_END_LOOP                   

3 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            TEST_STEP1_BEGIN                                                                                                                  V1_INT                                                           0            0            0                                                                             BINARY_INTEGER                                                  
1            TEST_STEP1_BEGIN                                                                                                                  V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1            TEST_STEP1_BEGIN                                                                                                                  V3_VARC                                                          0            2            0                                                                             VARCHAR                                                         
1            TEST_STEP1_BEGIN                                                                                                                  V4_C                                                             0            3            0                                                                             CHAR                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V5_DATE                                                          0            4            0                                                                             DATE                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   
2                                                                                                                                                                                                               0            0            0                                                                             BINARY_INTEGER                                                  
2                                                                                                                                              P1                                                               0            1            0            3                                                                BINARY_INTEGER                                                  
2                                                                                                                                              P2                                                               0            2            0            6.7                                                              NUMBER                                                          
3                                                                                                                                                                                                               0            0            0                                                                             BINARY_INTEGER                                                  
3                                                                                                                                              P1                                                               0            1            0            3                                                                BINARY_INTEGER                                                  
3                                                                                                                                              V1                                                               0            2            0            6                                                                BINARY_INTEGER                                                  
3            TEST_LV2_FUNC1_FOR                                                                                                                I                                                                1            0            0            1                                                                BINARY_INTEGER                                                  

13 rows fetched.

SQL> call dbe_debug.resume(1, 100);

#3: SYS.TEST_LV2_FUNC1 :5

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              11           LINE_SETVAL                     
2            SYS                                                              TEST_LV1_FUNC1                                                   3            LINE_RETURN                     
3            SYS                                                              TEST_LV2_FUNC1                                                   5            LINE_FOR                        

3 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            TEST_STEP1_BEGIN                                                                                                                  V1_INT                                                           0            0            0                                                                             BINARY_INTEGER                                                  
1            TEST_STEP1_BEGIN                                                                                                                  V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1            TEST_STEP1_BEGIN                                                                                                                  V3_VARC                                                          0            2            0                                                                             VARCHAR                                                         
1            TEST_STEP1_BEGIN                                                                                                                  V4_C                                                             0            3            0                                                                             CHAR                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V5_DATE                                                          0            4            0                                                                             DATE                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   
2                                                                                                                                                                                                               0            0            0                                                                             BINARY_INTEGER                                                  
2                                                                                                                                              P1                                                               0            1            0            3                                                                BINARY_INTEGER                                                  
2                                                                                                                                              P2                                                               0            2            0            6.7                                                              NUMBER                                                          
3                                                                                                                                                                                                               0            0            0                                                                             BINARY_INTEGER                                                  
3                                                                                                                                              P1                                                               0            1            0            3                                                                BINARY_INTEGER                                                  
3                                                                                                                                              V1                                                               0            2            0            6                                                                BINARY_INTEGER                                                  
3            TEST_LV2_FUNC1_FOR                                                                                                                I                                                                1            0            0            1                                                                BINARY_INTEGER                                                  

13 rows fetched.

SQL> call dbe_debug.resume(1, 100);

#3: SYS.TEST_LV2_FUNC1 :8

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              11           LINE_SETVAL                     
2            SYS                                                              TEST_LV1_FUNC1                                                   3            LINE_RETURN                     
3            SYS                                                              TEST_LV2_FUNC1                                                   8            LINE_RETURN                     

3 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            TEST_STEP1_BEGIN                                                                                                                  V1_INT                                                           0            0            0                                                                             BINARY_INTEGER                                                  
1            TEST_STEP1_BEGIN                                                                                                                  V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1            TEST_STEP1_BEGIN                                                                                                                  V3_VARC                                                          0            2            0                                                                             VARCHAR                                                         
1            TEST_STEP1_BEGIN                                                                                                                  V4_C                                                             0            3            0                                                                             CHAR                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V5_DATE                                                          0            4            0                                                                             DATE                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   
2                                                                                                                                                                                                               0            0            0                                                                             BINARY_INTEGER                                                  
2                                                                                                                                              P1                                                               0            1            0            3                                                                BINARY_INTEGER                                                  
2                                                                                                                                              P2                                                               0            2            0            6.7                                                              NUMBER                                                          
3                                                                                                                                                                                                               0            0            0                                                                             BINARY_INTEGER                                                  
3                                                                                                                                              P1                                                               0            1            0            3                                                                BINARY_INTEGER                                                  
3                                                                                                                                              V1                                                               0            2            0            6                                                                BINARY_INTEGER                                                  

12 rows fetched.

SQL> call dbe_debug.resume(1, 100);

#1: ANONYMOUS BLOCK :12

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              12           LINE_SETVAL                     

1 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            TEST_STEP1_BEGIN                                                                                                                  V1_INT                                                           0            0            0            13                                                               BINARY_INTEGER                                                  
1            TEST_STEP1_BEGIN                                                                                                                  V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1            TEST_STEP1_BEGIN                                                                                                                  V3_VARC                                                          0            2            0                                                                             VARCHAR                                                         
1            TEST_STEP1_BEGIN                                                                                                                  V4_C                                                             0            3            0                                                                             CHAR                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V5_DATE                                                          0            4            0                                                                             DATE                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   

6 rows fetched.

SQL> call dbe_debug.resume(1, 100);

#1: ANONYMOUS BLOCK :13

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              13           LINE_IF                         

1 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            TEST_STEP1_BEGIN                                                                                                                  V1_INT                                                           0            0            0            13                                                               BINARY_INTEGER                                                  
1            TEST_STEP1_BEGIN                                                                                                                  V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1            TEST_STEP1_BEGIN                                                                                                                  V3_VARC                                                          0            2            0            pfa                                                              VARCHAR                                                         
1            TEST_STEP1_BEGIN                                                                                                                  V4_C                                                             0            3            0                                                                             CHAR                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V5_DATE                                                          0            4            0                                                                             DATE                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   

6 rows fetched.

SQL> call dbe_debug.resume(1, 100);

#2: SYS.TEST_LV1_FUNC2 :13

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              13           LINE_IF                         
2            SYS                                                              TEST_LV1_FUNC2                                                   13           LINE_FOR                        

2 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            TEST_STEP1_BEGIN                                                                                                                  V1_INT                                                           0            0            0            13                                                               BINARY_INTEGER                                                  
1            TEST_STEP1_BEGIN                                                                                                                  V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1            TEST_STEP1_BEGIN                                                                                                                  V3_VARC                                                          0            2            0            pfa                                                              VARCHAR                                                         
1            TEST_STEP1_BEGIN                                                                                                                  V4_C                                                             0            3            0                                                                             CHAR                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V5_DATE                                                          0            4            0                                                                             DATE                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   
2                                                                                                                                                                                                               0            0            0                                                                             BOOLEAN                                                         
2                                                                                                                                              P1                                                               0            1            0            pfa                                                              VARCHAR                                                         
2                                                                                                                                              V1_CUR                                                           0            2            0                                                                             CURSOR                                                          
2                                                                                                                                              V2_RECORD                                                        0            5            0                                                                             RECORD                                                          
2                                                                             V2_RECORD                                                        ID                                                               0            5            1                                                                             BINARY_INTEGER                                                  
2                                                                             V2_RECORD                                                        NAME                                                             0            5            2                                                                             VARCHAR                                                         
2                                                                             V2_RECORD                                                        HOME                                                             0            5            3                                                                             RECORD                                                          
2                                                                             HOME                                                             PROVINCE                                                         0            5            4                                                                             VARCHAR                                                         
2                                                                             HOME                                                             CITY                                                             0            5            5                                                                             VARCHAR                                                         
2                                                                             V2_RECORD                                                        REGISTER_TIME                                                    0            5            6                                                                             DATE                                                            

16 rows fetched.

SQL> call dbe_debug.resume(1, 100);

#2: SYS.TEST_LV1_FUNC2 :19

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              13           LINE_IF                         
2            SYS                                                              TEST_LV1_FUNC2                                                   19           LINE_PROC                       

2 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            TEST_STEP1_BEGIN                                                                                                                  V1_INT                                                           0            0            0            13                                                               BINARY_INTEGER                                                  
1            TEST_STEP1_BEGIN                                                                                                                  V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1            TEST_STEP1_BEGIN                                                                                                                  V3_VARC                                                          0            2            0            pfa                                                              VARCHAR                                                         
1            TEST_STEP1_BEGIN                                                                                                                  V4_C                                                             0            3            0                                                                             CHAR                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V5_DATE                                                          0            4            0                                                                             DATE                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   
2                                                                                                                                                                                                               0            0            0                                                                             BOOLEAN                                                         
2                                                                                                                                              P1                                                               0            1            0            pfa                                                              VARCHAR                                                         
2                                                                                                                                              V1_CUR                                                           0            2            0                                                                             CURSOR                                                          
2                                                                                                                                              V2_RECORD                                                        0            5            0                                                                             RECORD                                                          
2                                                                             V2_RECORD                                                        ID                                                               0            5            1                                                                             BINARY_INTEGER                                                  
2                                                                             V2_RECORD                                                        NAME                                                             0            5            2                                                                             VARCHAR                                                         
2                                                                             V2_RECORD                                                        HOME                                                             0            5            3                                                                             RECORD                                                          
2                                                                             HOME                                                             PROVINCE                                                         0            5            4                                                                             VARCHAR                                                         
2                                                                             HOME                                                             CITY                                                             0            5            5                                                                             VARCHAR                                                         
2                                                                             V2_RECORD                                                        REGISTER_TIME                                                    0            5            6                                                                             DATE                                                            

16 rows fetched.

SQL> call dbe_debug.resume(1, 100);

#3: SYS.TEST_LV2_PROC1 :3

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              13           LINE_IF                         
2            SYS                                                              TEST_LV1_FUNC2                                                   19           LINE_PROC                       
3            SYS                                                              TEST_LV2_PROC1                                                   3            LINE_OPEN                       

3 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            TEST_STEP1_BEGIN                                                                                                                  V1_INT                                                           0            0            0            13                                                               BINARY_INTEGER                                                  
1            TEST_STEP1_BEGIN                                                                                                                  V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1            TEST_STEP1_BEGIN                                                                                                                  V3_VARC                                                          0            2            0            pfa                                                              VARCHAR                                                         
1            TEST_STEP1_BEGIN                                                                                                                  V4_C                                                             0            3            0                                                                             CHAR                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V5_DATE                                                          0            4            0                                                                             DATE                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   
2                                                                                                                                                                                                               0            0            0                                                                             BOOLEAN                                                         
2                                                                                                                                              P1                                                               0            1            0            pfa                                                              VARCHAR                                                         
2                                                                                                                                              V1_CUR                                                           0            2            0                                                                             CURSOR                                                          
2                                                                                                                                              V2_RECORD                                                        0            5            0                                                                             RECORD                                                          
2                                                                             V2_RECORD                                                        ID                                                               0            5            1                                                                             BINARY_INTEGER                                                  
2                                                                             V2_RECORD                                                        NAME                                                             0            5            2                                                                             VARCHAR                                                         
2                                                                             V2_RECORD                                                        HOME                                                             0            5            3                                                                             RECORD                                                          
2                                                                             HOME                                                             PROVINCE                                                         0            5            4                                                                             VARCHAR                                                         
2                                                                             HOME                                                             CITY                                                             0            5            5                                                                             VARCHAR                                                         
2                                                                             V2_RECORD                                                        REGISTER_TIME                                                    0            5            6                                                                             DATE                                                            
3                                                                                                                                              P1                                                               0            0            0            fujian                                                           VARCHAR                                                         
3                                                                                                                                              RESULTSET                                                        0            1            0                                                                             CURSOR                                                          

18 rows fetched.

SQL> call dbe_debug.resume(1, 100);

#3: SYS.TEST_LV2_PROC1 :4

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              13           LINE_IF                         
2            SYS                                                              TEST_LV1_FUNC2                                                   19           LINE_PROC                       
3            SYS                                                              TEST_LV2_PROC1                                                   4            LINE_END                        

3 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            TEST_STEP1_BEGIN                                                                                                                  V1_INT                                                           0            0            0            13                                                               BINARY_INTEGER                                                  
1            TEST_STEP1_BEGIN                                                                                                                  V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1            TEST_STEP1_BEGIN                                                                                                                  V3_VARC                                                          0            2            0            pfa                                                              VARCHAR                                                         
1            TEST_STEP1_BEGIN                                                                                                                  V4_C                                                             0            3            0                                                                             CHAR                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V5_DATE                                                          0            4            0                                                                             DATE                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   
2                                                                                                                                                                                                               0            0            0                                                                             BOOLEAN                                                         
2                                                                                                                                              P1                                                               0            1            0            pfa                                                              VARCHAR                                                         
2                                                                                                                                              V1_CUR                                                           0            2            0                                                                             CURSOR                                                          
2                                                                                                                                              V2_RECORD                                                        0            5            0                                                                             RECORD                                                          
2                                                                             V2_RECORD                                                        ID                                                               0            5            1                                                                             BINARY_INTEGER                                                  
2                                                                             V2_RECORD                                                        NAME                                                             0            5            2                                                                             VARCHAR                                                         
2                                                                             V2_RECORD                                                        HOME                                                             0            5            3                                                                             RECORD                                                          
2                                                                             HOME                                                             PROVINCE                                                         0            5            4                                                                             VARCHAR                                                         
2                                                                             HOME                                                             CITY                                                             0            5            5                                                                             VARCHAR                                                         
2                                                                             V2_RECORD                                                        REGISTER_TIME                                                    0            5            6                                                                             DATE                                                            
3                                                                                                                                              P1                                                               0            0            0            fujian                                                           VARCHAR                                                         
3                                                                                                                                              RESULTSET                                                        0            1            0            open                                                             CURSOR                                                          

18 rows fetched.

SQL> call dbe_debug.resume(1, 100);

#2: SYS.TEST_LV1_FUNC2 :20

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              13           LINE_IF                         
2            SYS                                                              TEST_LV1_FUNC2                                                   20           LINE_FETCH                      

2 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            TEST_STEP1_BEGIN                                                                                                                  V1_INT                                                           0            0            0            13                                                               BINARY_INTEGER                                                  
1            TEST_STEP1_BEGIN                                                                                                                  V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1            TEST_STEP1_BEGIN                                                                                                                  V3_VARC                                                          0            2            0            pfa                                                              VARCHAR                                                         
1            TEST_STEP1_BEGIN                                                                                                                  V4_C                                                             0            3            0                                                                             CHAR                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V5_DATE                                                          0            4            0                                                                             DATE                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   
2                                                                                                                                                                                                               0            0            0                                                                             BOOLEAN                                                         
2                                                                                                                                              P1                                                               0            1            0            pfa                                                              VARCHAR                                                         
2                                                                                                                                              V1_CUR                                                           0            2            0            open                                                             CURSOR                                                          
2                                                                                                                                              V2_RECORD                                                        0            5            0                                                                             RECORD                                                          
2                                                                             V2_RECORD                                                        ID                                                               0            5            1                                                                             BINARY_INTEGER                                                  
2                                                                             V2_RECORD                                                        NAME                                                             0            5            2                                                                             VARCHAR                                                         
2                                                                             V2_RECORD                                                        HOME                                                             0            5            3                                                                             RECORD                                                          
2                                                                             HOME                                                             PROVINCE                                                         0            5            4                                                                             VARCHAR                                                         
2                                                                             HOME                                                             CITY                                                             0            5            5                                                                             VARCHAR                                                         
2                                                                             V2_RECORD                                                        REGISTER_TIME                                                    0            5            6                                                                             DATE                                                            

16 rows fetched.

SQL> call dbe_debug.resume(1, 100);

#2: SYS.TEST_LV1_FUNC2 :21

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              13           LINE_IF                         
2            SYS                                                              TEST_LV1_FUNC2                                                   21           LINE_SETVAL                     

2 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            TEST_STEP1_BEGIN                                                                                                                  V1_INT                                                           0            0            0            13                                                               BINARY_INTEGER                                                  
1            TEST_STEP1_BEGIN                                                                                                                  V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1            TEST_STEP1_BEGIN                                                                                                                  V3_VARC                                                          0            2            0            pfa                                                              VARCHAR                                                         
1            TEST_STEP1_BEGIN                                                                                                                  V4_C                                                             0            3            0                                                                             CHAR                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V5_DATE                                                          0            4            0                                                                             DATE                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   
2                                                                                                                                                                                                               0            0            0                                                                             BOOLEAN                                                         
2                                                                                                                                              P1                                                               0            1            0            pfa                                                              VARCHAR                                                         
2                                                                                                                                              V1_CUR                                                           0            2            0            rowcount=1, open, found                                          CURSOR                                                          
2                                                                                                                                              V2_RECORD                                                        0            5            0                                                                             RECORD                                                          
2                                                                             V2_RECORD                                                        ID                                                               0            5            1            2                                                                BINARY_INTEGER                                                  
2                                                                             V2_RECORD                                                        NAME                                                             0            5            2            whf                                                              VARCHAR                                                         
2                                                                             V2_RECORD                                                        HOME                                                             0            5            3                                                                             RECORD                                                          
2                                                                             HOME                                                             PROVINCE                                                         0            5            4            fujian                                                           VARCHAR                                                         
2                                                                             HOME                                                             CITY                                                             0            5            5                                                                             VARCHAR                                                         
2                                                                             V2_RECORD                                                        REGISTER_TIME                                                    0            5            6            2010-01-01 00:00:00                                              DATE                                                            

16 rows fetched.

SQL> call dbe_debug.resume(1, 100);

#2: SYS.TEST_LV1_FUNC2 :22

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              13           LINE_IF                         
2            SYS                                                              TEST_LV1_FUNC2                                                   22           LINE_RETURN                     

2 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            TEST_STEP1_BEGIN                                                                                                                  V1_INT                                                           0            0            0            13                                                               BINARY_INTEGER                                                  
1            TEST_STEP1_BEGIN                                                                                                                  V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1            TEST_STEP1_BEGIN                                                                                                                  V3_VARC                                                          0            2            0            pfa                                                              VARCHAR                                                         
1            TEST_STEP1_BEGIN                                                                                                                  V4_C                                                             0            3            0                                                                             CHAR                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V5_DATE                                                          0            4            0                                                                             DATE                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   
2                                                                                                                                                                                                               0            0            0                                                                             BOOLEAN                                                         
2                                                                                                                                              P1                                                               0            1            0            pfa                                                              VARCHAR                                                         
2                                                                                                                                              V1_CUR                                                           0            2            0            rowcount=1, open, found                                          CURSOR                                                          
2                                                                                                                                              V2_RECORD                                                        0            5            0                                                                             RECORD                                                          
2                                                                             V2_RECORD                                                        ID                                                               0            5            1            2                                                                BINARY_INTEGER                                                  
2                                                                             V2_RECORD                                                        NAME                                                             0            5            2            whf                                                              VARCHAR                                                         
2                                                                             V2_RECORD                                                        HOME                                                             0            5            3                                                                             RECORD                                                          
2                                                                             HOME                                                             PROVINCE                                                         0            5            4            fujian                                                           VARCHAR                                                         
2                                                                             HOME                                                             CITY                                                             0            5            5            fuzhou                                                           VARCHAR                                                         
2                                                                             V2_RECORD                                                        REGISTER_TIME                                                    0            5            6            2010-01-01 00:00:00                                              DATE                                                            

16 rows fetched.

SQL> call dbe_debug.resume(1, 100);

#1: ANONYMOUS BLOCK :15

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              15           LINE_END_IF                     

1 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            TEST_STEP1_BEGIN                                                                                                                  V1_INT                                                           0            0            0            13                                                               BINARY_INTEGER                                                  
1            TEST_STEP1_BEGIN                                                                                                                  V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1            TEST_STEP1_BEGIN                                                                                                                  V3_VARC                                                          0            2            0            pfa                                                              VARCHAR                                                         
1            TEST_STEP1_BEGIN                                                                                                                  V4_C                                                             0            3            0                                                                             CHAR                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V5_DATE                                                          0            4            0                                                                             DATE                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   

6 rows fetched.

SQL> call dbe_debug.resume(1, 100);

#1: ANONYMOUS BLOCK :16

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              16           LINE_PROC                       

1 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            TEST_STEP1_BEGIN                                                                                                                  V1_INT                                                           0            0            0            13                                                               BINARY_INTEGER                                                  
1            TEST_STEP1_BEGIN                                                                                                                  V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1            TEST_STEP1_BEGIN                                                                                                                  V3_VARC                                                          0            2            0            pfa                                                              VARCHAR                                                         
1            TEST_STEP1_BEGIN                                                                                                                  V4_C                                                             0            3            0                                                                             CHAR                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V5_DATE                                                          0            4            0                                                                             DATE                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   

6 rows fetched.

SQL> call dbe_debug.resume(1, 100);

#2: SYS.TEST_LV1_PROC1 :3

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              16           LINE_PROC                       
2            SYS                                                              TEST_LV1_PROC1                                                   3            LINE_SQL                        

2 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            TEST_STEP1_BEGIN                                                                                                                  V1_INT                                                           0            0            0            13                                                               BINARY_INTEGER                                                  
1            TEST_STEP1_BEGIN                                                                                                                  V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1            TEST_STEP1_BEGIN                                                                                                                  V3_VARC                                                          0            2            0            pfa                                                              VARCHAR                                                         
1            TEST_STEP1_BEGIN                                                                                                                  V4_C                                                             0            3            0                                                                             CHAR                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V5_DATE                                                          0            4            0                                                                             DATE                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   
2                                                                                                                                              P1                                                               0            0            0            pfa                                                              VARCHAR                                                         

7 rows fetched.

SQL> call dbe_debug.resume(1, 100);

#3: SYS.TEST_LVX_TRIGGER1 :3

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              16           LINE_PROC                       
2            SYS                                                              TEST_LV1_PROC1                                                   3            LINE_SQL                        
3            SYS                                                              TEST_LVX_TRIGGER1                                                3            LINE_BEGIN                      

3 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            TEST_STEP1_BEGIN                                                                                                                  V1_INT                                                           0            0            0            13                                                               BINARY_INTEGER                                                  
1            TEST_STEP1_BEGIN                                                                                                                  V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1            TEST_STEP1_BEGIN                                                                                                                  V3_VARC                                                          0            2            0            pfa                                                              VARCHAR                                                         
1            TEST_STEP1_BEGIN                                                                                                                  V4_C                                                             0            3            0                                                                             CHAR                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V5_DATE                                                          0            4            0                                                                             DATE                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   
2                                                                                                                                              P1                                                               0            0            0            pfa                                                              VARCHAR                                                         
3                                                                                                                                              :NEW.ID                                                          0            0            0            0                                                                BINARY_INTEGER                                                  

8 rows fetched.

SQL> call dbe_debug.resume(1, 100);

#3: SYS.TEST_LVX_TRIGGER1 :4

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              16           LINE_PROC                       
2            SYS                                                              TEST_LV1_PROC1                                                   3            LINE_SQL                        
3            SYS                                                              TEST_LVX_TRIGGER1                                                4            LINE_SQL                        

3 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            TEST_STEP1_BEGIN                                                                                                                  V1_INT                                                           0            0            0            13                                                               BINARY_INTEGER                                                  
1            TEST_STEP1_BEGIN                                                                                                                  V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1            TEST_STEP1_BEGIN                                                                                                                  V3_VARC                                                          0            2            0            pfa                                                              VARCHAR                                                         
1            TEST_STEP1_BEGIN                                                                                                                  V4_C                                                             0            3            0                                                                             CHAR                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V5_DATE                                                          0            4            0                                                                             DATE                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   
2                                                                                                                                              P1                                                               0            0            0            pfa                                                              VARCHAR                                                         
3                                                                                                                                              :NEW.ID                                                          0            0            0            0                                                                BINARY_INTEGER                                                  
3                                                                                                                                              V1                                                               1            0            0                                                                             BINARY_INTEGER                                                  

9 rows fetched.

SQL> call dbe_debug.resume(1, 100);

#3: SYS.TEST_LVX_TRIGGER1 :5

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              16           LINE_PROC                       
2            SYS                                                              TEST_LV1_PROC1                                                   3            LINE_SQL                        
3            SYS                                                              TEST_LVX_TRIGGER1                                                5            LINE_SETVAL                     

3 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            TEST_STEP1_BEGIN                                                                                                                  V1_INT                                                           0            0            0            13                                                               BINARY_INTEGER                                                  
1            TEST_STEP1_BEGIN                                                                                                                  V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1            TEST_STEP1_BEGIN                                                                                                                  V3_VARC                                                          0            2            0            pfa                                                              VARCHAR                                                         
1            TEST_STEP1_BEGIN                                                                                                                  V4_C                                                             0            3            0                                                                             CHAR                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V5_DATE                                                          0            4            0                                                                             DATE                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   
2                                                                                                                                              P1                                                               0            0            0            pfa                                                              VARCHAR                                                         
3                                                                                                                                              :NEW.ID                                                          0            0            0            0                                                                BINARY_INTEGER                                                  
3                                                                                                                                              V1                                                               1            0            0            5                                                                BINARY_INTEGER                                                  

9 rows fetched.

SQL> call dbe_debug.resume(1, 100);

#3: SYS.TEST_LVX_TRIGGER1 :6

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              16           LINE_PROC                       
2            SYS                                                              TEST_LV1_PROC1                                                   3            LINE_SQL                        
3            SYS                                                              TEST_LVX_TRIGGER1                                                6            LINE_END                        

3 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            TEST_STEP1_BEGIN                                                                                                                  V1_INT                                                           0            0            0            13                                                               BINARY_INTEGER                                                  
1            TEST_STEP1_BEGIN                                                                                                                  V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1            TEST_STEP1_BEGIN                                                                                                                  V3_VARC                                                          0            2            0            pfa                                                              VARCHAR                                                         
1            TEST_STEP1_BEGIN                                                                                                                  V4_C                                                             0            3            0                                                                             CHAR                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V5_DATE                                                          0            4            0                                                                             DATE                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   
2                                                                                                                                              P1                                                               0            0            0            pfa                                                              VARCHAR                                                         
3                                                                                                                                              :NEW.ID                                                          0            0            0            5                                                                BINARY_INTEGER                                                  
3                                                                                                                                              V1                                                               1            0            0            5                                                                BINARY_INTEGER                                                  

9 rows fetched.

SQL> call dbe_debug.resume(1, 100);

#2: SYS.TEST_LV1_PROC1 :4

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              16           LINE_PROC                       
2            SYS                                                              TEST_LV1_PROC1                                                   4            LINE_END                        

2 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1            TEST_STEP1_BEGIN                                                                                                                  V1_INT                                                           0            0            0            13                                                               BINARY_INTEGER                                                  
1            TEST_STEP1_BEGIN                                                                                                                  V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1            TEST_STEP1_BEGIN                                                                                                                  V3_VARC                                                          0            2            0            pfa                                                              VARCHAR                                                         
1            TEST_STEP1_BEGIN                                                                                                                  V4_C                                                             0            3            0                                                                             CHAR                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V5_DATE                                                          0            4            0                                                                             DATE                                                            
1            TEST_STEP1_BEGIN                                                                                                                  V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   
2                                                                                                                                              P1                                                               0            0            0            pfa                                                              VARCHAR                                                         

7 rows fetched.

SQL> call dbe_debug.resume(6, 0);

PL/SQL procedure successfully completed.

SQL> -- test step1 end
SQL> 
SQL> -- test step2 start
SQL> call get_target_waiting();

PL/SQL procedure successfully completed.

SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              0            LINE_BEGIN                      

1 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> call dbe_debug.resume(4, 100);

#4: SYS.TEST_LV2_DEBUG :6

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              1            LINE_PROC                       
2            SYS                                                              TEST_LV1_HELLO                                                   5            LINE_PROC                       
3            SYS                                                              TEST_LV2_WORLD                                                   4            LINE_PROC                       
4            SYS                                                              TEST_LV2_DEBUG                                                   6            LINE_EXCEPTION                  

4 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
2                                                                                                                                              V1                                                               0            0            0            hello                                                            VARCHAR                                                         
3                                                                                                                                              P1                                                               0            0            0            hello world                                                      VARCHAR                                                         
4                                                                                                                                              P1                                                               0            0            0            hello world                                                      VARCHAR                                                         
4                                                                                                                                              P2                                                               0            1            0            0                                                                BINARY_INTEGER                                                  
4                                                                                                                                              V1                                                               0            2            0            1                                                                BINARY_INTEGER                                                  

5 rows fetched.

SQL> call dbe_debug.resume(5, 100);

#4: SYS.TEST_LV2_DEBUG :9

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              1            LINE_PROC                       
2            SYS                                                              TEST_LV1_HELLO                                                   5            LINE_PROC                       
3            SYS                                                              TEST_LV2_WORLD                                                   4            LINE_PROC                       
4            SYS                                                              TEST_LV2_DEBUG                                                   9            LINE_END                        

4 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
2                                                                                                                                              V1                                                               0            0            0            hello                                                            VARCHAR                                                         
3                                                                                                                                              P1                                                               0            0            0            hello world                                                      VARCHAR                                                         
4                                                                                                                                              P1                                                               0            0            0            hello world debug came!!!                                        VARCHAR                                                         
4                                                                                                                                              P2                                                               0            1            0            0                                                                BINARY_INTEGER                                                  
4                                                                                                                                              V1                                                               0            2            0            1                                                                BINARY_INTEGER                                                  

5 rows fetched.

SQL> call dbe_debug.resume(2, 100);

#3: SYS.TEST_LV2_WORLD :5

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              1            LINE_PROC                       
2            SYS                                                              TEST_LV1_HELLO                                                   5            LINE_PROC                       
3            SYS                                                              TEST_LV2_WORLD                                                   5            LINE_END                        

3 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
2                                                                                                                                              V1                                                               0            0            0            hello                                                            VARCHAR                                                         
3                                                                                                                                              P1                                                               0            0            0            hello world debug came!!!                                        VARCHAR                                                         

2 rows fetched.

SQL> call dbe_debug.resume(3, 100);

#2: SYS.TEST_LV1_HELLO :6

PL/SQL procedure successfully completed.

SQL> 
SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              1            LINE_PROC                       
2            SYS                                                              TEST_LV1_HELLO                                                   6            LINE_END                        

2 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
2                                                                                                                                              V1                                                               0            0            0            hello world debug came!!!                                        VARCHAR                                                         

1 rows fetched.

SQL> call dbe_debug.resume(6, 0);

PL/SQL procedure successfully completed.

SQL> -- test step2 end
SQL> 
SQL> -- test step3 start
SQL> call get_target_waiting();

PL/SQL procedure successfully completed.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------

0 rows fetched.

SQL> call dbe_debug.resume(1, 100);

#1: ANONYMOUS BLOCK :9

PL/SQL procedure successfully completed.

SQL> 
SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1                                                                                                                                              V1_INT                                                           0            0            0                                                                             BINARY_INTEGER                                                  
1                                                                                                                                              V2_NUM                                                           0            1            0                                                                             NUMBER                                                          
1                                                                                                                                              V3_VARC                                                          0            2            0                                                                             VARCHAR                                                         
1                                                                                                                                              V4_C                                                             0            3            0                                                                             CHAR                                                            
1                                                                                                                                              V5_DATE                                                          0            4            0                                                                             DATE                                                            
1                                                                                                                                              V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   

6 rows fetched.

SQL> call dbe_debug.set_value(1,0,0,0,'a');

CT-00932, [1:2] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[1:2] PL/SQL(DBE_DEBUG.SET_VALUE) terminated with execute errors
CT-00636, Invalid number -- unexpected character

SQL> call dbe_debug.set_value(1,0,0,0,'2019-2');

CT-00932, [1:2] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[1:2] PL/SQL(DBE_DEBUG.SET_VALUE) terminated with execute errors
CT-00636, Invalid number -- unexpected character

SQL> call dbe_debug.set_value(1,0,0,0,'1.0');

PL/SQL procedure successfully completed.

SQL> select dbe_debug.get_value(1,0,0,0) from dual;

DBE_DEBUG.GET_VALUE(1,0,0,0)                                   
----------------------------------------------------------------
1                                                               

1 rows fetched.

SQL> call dbe_debug.set_value(1,0,1,0,'0xff');

CT-00932, [1:2] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[1:2] PL/SQL(DBE_DEBUG.SET_VALUE) terminated with execute errors
CT-00636, Invalid number -- unexpected character

SQL> call dbe_debug.set_value(1,0,1,0,'2.85');

PL/SQL procedure successfully completed.

SQL> select dbe_debug.get_value(1,0,1,0) from dual;

DBE_DEBUG.GET_VALUE(1,0,1,0)                                   
----------------------------------------------------------------
2.85                                                            

1 rows fetched.

SQL> call dbe_debug.set_value(1,0,2,0,'abcdefghijk');

PL/SQL procedure successfully completed.

SQL> select dbe_debug.get_value(1,0,2,0) from dual;

DBE_DEBUG.GET_VALUE(1,0,2,0)                                   
----------------------------------------------------------------
abcdefghijk                                                     

1 rows fetched.

SQL> call dbe_debug.set_value(1,0,3,0,'debug');

PL/SQL procedure successfully completed.

SQL> select dbe_debug.get_value(1,0,3,0) from dual;

DBE_DEBUG.GET_VALUE(1,0,3,0)                                   
----------------------------------------------------------------
debug                                                           

1 rows fetched.

SQL> call dbe_debug.set_value(1,0,4,0,'2019-01-01 00:00:00');

PL/SQL procedure successfully completed.

SQL> select dbe_debug.get_value(1,0,4,0) from dual;

DBE_DEBUG.GET_VALUE(1,0,4,0)                                   
----------------------------------------------------------------
2019-01-01 00:00:00                                             

1 rows fetched.

SQL> call dbe_debug.set_value(1,0,5,0,'36.9');

PL/SQL procedure successfully completed.

SQL> select dbe_debug.get_value(1,0,5,0) from dual;

DBE_DEBUG.GET_VALUE(1,0,5,0)                                   
----------------------------------------------------------------
36.9                                                            

1 rows fetched.

SQL> call dbe_debug.resume(0, 100);

#1: ANONYMOUS BLOCK :10

PL/SQL procedure successfully completed.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1                                                                                                                                              V1_INT                                                           0            0            0            1                                                                BINARY_INTEGER                                                  
1                                                                                                                                              V2_NUM                                                           0            1            0            2.85                                                             NUMBER                                                          
1                                                                                                                                              V3_VARC                                                          0            2            0            abcdefghijk                                                      VARCHAR                                                         
1                                                                                                                                              V4_C                                                             0            3            0            debug                                                            CHAR                                                            
1                                                                                                                                              V5_DATE                                                          0            4            0            2019-01-01 00:00:00                                              DATE                                                            
1                                                                                                                                              V6_DOUB                                                          0            5            0            36.9                                                             BINARY_DOUBLE                                                   

6 rows fetched.

SQL> call dbe_debug.resume(1, 100);

#1: ANONYMOUS BLOCK :11

PL/SQL procedure successfully completed.

SQL> call dbe_debug.resume(1, 100);

#1: ANONYMOUS BLOCK :12

PL/SQL procedure successfully completed.

SQL> call dbe_debug.resume(1, 100);

#1: ANONYMOUS BLOCK :13

PL/SQL procedure successfully completed.

SQL> call dbe_debug.resume(1, 100);

#1: ANONYMOUS BLOCK :14

PL/SQL procedure successfully completed.

SQL> call dbe_debug.resume(1, 100);

#1: ANONYMOUS BLOCK :15

PL/SQL procedure successfully completed.

SQL> call dbe_debug.resume(1, 100);

#2: SYS.TEST_RECORD_VAR :11

PL/SQL procedure successfully completed.

SQL> call dbe_debug.set_value(2,0,1,1,'2');

PL/SQL procedure successfully completed.

SQL> select dbe_debug.get_value(2,0,1,1) from dual;

DBE_DEBUG.GET_VALUE(2,0,1,1)                                   
----------------------------------------------------------------
2                                                               

1 rows fetched.

SQL> call dbe_debug.set_value(2,0,1,2,'2.5');

PL/SQL procedure successfully completed.

SQL> select dbe_debug.get_value(2,0,1,2) from dual;

DBE_DEBUG.GET_VALUE(2,0,1,2)                                   
----------------------------------------------------------------
2.5                                                             

1 rows fetched.

SQL> call dbe_debug.set_value(2,0,1,3,'0xabcd');

PL/SQL procedure successfully completed.

SQL> select dbe_debug.get_value(2,0,1,3) from dual;

DBE_DEBUG.GET_VALUE(2,0,1,3)                                   
----------------------------------------------------------------
0xabcd                                                          

1 rows fetched.

SQL> call dbe_debug.set_value(2,0,1,4,'kssss');

PL/SQL procedure successfully completed.

SQL> select dbe_debug.get_value(2,0,1,4) from dual;

DBE_DEBUG.GET_VALUE(2,0,1,4)                                   
----------------------------------------------------------------
kssss                                                           

1 rows fetched.

SQL> call dbe_debug.set_value(2,0,1,5,'2019-01-01 00:00:00');

PL/SQL procedure successfully completed.

SQL> select dbe_debug.get_value(2,0,1,5) from dual;

DBE_DEBUG.GET_VALUE(2,0,1,5)                                   
----------------------------------------------------------------
2019-01-01 00:00:00                                             

1 rows fetched.

SQL> call dbe_debug.set_value(2,0,1,6,'36.9');

PL/SQL procedure successfully completed.

SQL> select dbe_debug.get_value(2,0,1,6) from dual;

DBE_DEBUG.GET_VALUE(2,0,1,6)                                   
----------------------------------------------------------------
36.9                                                            

1 rows fetched.

SQL> call dbe_debug.resume(4, 0);

PL/SQL procedure successfully completed.

SQL> -- test step3 end
SQL> 
SQL> -- test step4 start
SQL> call get_target_waiting();

PL/SQL procedure successfully completed.

SQL> 
SQL> select * from table(dba_proc_decode('SYS', 'TEST_BREAK_LV3_FUNC1', 'FUNCTION'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       3            except[null];end[5];                                            
2            LINE_SETVAL                      4                                                                            
3            LINE_PROC                        5                                                                            
4            LINE_RETURN                      6                                                                            
5            LINE_END                         7                                                                            

5 rows fetched.

SQL> select * from table(dba_proc_decode('SYS', 'TEST_BREAK_LV2_FUNC1', 'FUNCTION'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       3            except[null];end[5];                                            
2            LINE_SETVAL                      4                                                                            
3            LINE_PROC                        5                                                                            
4            LINE_RETURN                      6                                                                            
5            LINE_END                         7                                                                            

5 rows fetched.

SQL> select * from table(dba_proc_decode('SYS', 'TEST_BREAK_LV1_FUNC1', 'FUNCTION'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       2            except[null];end[4];                                            
2            LINE_PROC                        3                                                                            
3            LINE_RETURN                      4                                                                            
4            LINE_END                         5                                                                            

4 rows fetched.

SQL> select * from table(dba_proc_decode('SYS', 'TEST_BREAK_LVX_TRIGGER1', 'TRIGGER'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       1            except[null];end[null];                                         
2            LINE_BEGIN                       3            except[null];end[5];                                            
3            LINE_SQL                         4                                                                            
4            LINE_SETVAL                      5                                                                            
5            LINE_END                         6                                                                            

5 rows fetched.

SQL> select * from table(dba_proc_decode('SYS', 'TEST_BREAK_LV1_PROC1', 'PROCEDURE'));

LINE_NUM     LINE_TYPE                        LOC_LINE     SPECIAL_DESCRIPTION                                             
------------ -------------------------------- ------------ ----------------------------------------------------------------
1            LINE_BEGIN                       2            except[null];end[3];                                            
2            LINE_SQL                         3                                                                            
3            LINE_END                         4                                                                            

3 rows fetched.

SQL> 
SQL> 
SQL> select dbe_debug.add_break('SYS','TEST_BREAK_LV3_FUNC1','FUNCTION',4,0,'ef') as break_id from dual;   --break point 1

BREAK_ID    
------------
1           

1 rows fetched.

SQL> select dbe_debug.add_break('SYS','TEST_BREAK_LV2_FUNC1','FUNCTION',4,0,'ef') as break_id from dual;   --break point 2

BREAK_ID    
------------
2           

1 rows fetched.

SQL> select dbe_debug.add_break('SYS','TEST_BREAK_LV2_FUNC1','FUNCTION',5,0,'ef') as break_id from dual;   --break point 3

BREAK_ID    
------------
3           

1 rows fetched.

SQL>  --test delete break
SQL> select dbe_debug.add_break('SYS','TEST_BREAK_LV2_FUNC1','FUNCTION',6,0,'ef') as break_id from dual;  

BREAK_ID    
------------
4           

1 rows fetched.

SQL> call dbe_debug.delete_break(4);   --test delete break

PL/SQL procedure successfully completed.

SQL> --expect return error start
SQL> select dbe_debug.add_break('SYS','TEST_BREAK_LV2_FUNC1','FUNCTION',5,0) as break_id from dual;

CT-00615, [1:8]Invalid argument number for ADD_BREAK, min=6, max=6
SQL> select dbe_debug.add_break('SYS','TEST_BREAK_LV2_FUNC1','FUNCTION',6.5,0,'ef') as break_id from dual;

CT-00614, [1:68]Parameter error: illegal function argument: integer argument expected - got NUMBER
SQL> select dbe_debug.add_break('SYS','TEST_BREAK_LV2_FUNC1','FUNCTION','6',0,'ef') as break_id from dual;

CT-00614, [1:68]Parameter error: illegal function argument: integer argument expected - got CHAR
SQL> select dbe_debug.add_break('SYS','TEST_BREAK_LV2_FUNC1','FUNCTION',5,NULL,'ef') as break_id from dual;

CT-00614, [1:70]Parameter error: illegal function argument: integer argument expected - got VARCHAR
SQL> select dbe_debug.add_break('SYS','TEST_BREAK_LV2_FUNC1','FUNCTION',5,0,"ef") as break_id from dual;

CT-00601, [1:72]Sql syntax error: invalid column name 'ef'
SQL> select dbe_debug.add_break('SYS','TEST_BREAK_LV2_FUNC11','FUNCTION',5,0,'ef') as break_id from dual;

CT-00828, [1:1]function SYS.TEST_BREAK_LV2_FUNC11 does not exist
SQL> select dbe_debug.add_break('fc','TEST_BREAK_LV2_FUNC1','FUNCTION',5,0,'ef') as break_id from dual;

CT-00828, [1:1]function FC.TEST_BREAK_LV2_FUNC1 does not exist
SQL> select dbe_debug.add_break('SYS','TEST_BREAK_LV2_FUNC1','FUNCTION',-1,0,'ef') as break_id from dual;

CT-00614, Parameter error: parameter can not be negative.
SQL> select dbe_debug.add_break('SYS','TEST_BREAK_LV2_FUNC1','FUNCTION',10,0,'ef') as break_id from dual;

CT-00982, Error occurred when handling breakpoint id 0, line_number is invalid
SQL> 
SQL> call dbe_debug.delete_break();

CT-00944, PL/SQL(SYS.ANONYMOUS BLOCK) terminated with compiling errors
[1:2] PLC-00615 Invalid argument number for DELETE_BREAK, min=1, max=1

SQL> call dbe_debug.delete_break('5');

CT-00944, PL/SQL(SYS.ANONYMOUS BLOCK) terminated with compiling errors
[1:25] PLC-00614 Parameter error: illegal function argument: integer argument expected - got CHAR

SQL> call dbe_debug.delete_break(-5);

CT-00932, [1:2] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[1:2] PL/SQL(DBE_DEBUG.DELETE_BREAK) terminated with execute errors
CT-00614, Parameter error: parameter must be positive.

SQL> call dbe_debug.delete_break(NULL);

CT-00944, PL/SQL(SYS.ANONYMOUS BLOCK) terminated with compiling errors
[1:25] PLC-00614 Parameter error: illegal function argument: integer argument expected - got VARCHAR

SQL> call dbe_debug.delete_break(10);

CT-00932, [1:2] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[1:2] PL/SQL(DBE_DEBUG.DELETE_BREAK) terminated with execute errors
CT-00614, Parameter error: the breakpoint id is out of range

SQL> call dbe_debug.delete_break(7);

CT-00932, [1:2] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[1:2] PL/SQL(DBE_DEBUG.DELETE_BREAK) terminated with execute errors
CT-00982, Error occurred when handling breakpoint id 7, the breakpoint id is not existing

SQL> 
SQL> call dbe_debug.set_curr_count();

CT-00944, PL/SQL(SYS.ANONYMOUS BLOCK) terminated with compiling errors
[1:2] PLC-00615 Invalid argument number for SET_CURR_COUNT, min=1, max=1

SQL> call dbe_debug.set_curr_count(10);

PL/SQL procedure successfully completed.

SQL> call dbe_debug.set_curr_count(10,1);

CT-00944, PL/SQL(SYS.ANONYMOUS BLOCK) terminated with compiling errors
[1:2] PLC-00615 Invalid argument number for SET_CURR_COUNT, min=1, max=1

SQL> call dbe_debug.set_curr_count('10');

CT-00944, PL/SQL(SYS.ANONYMOUS BLOCK) terminated with compiling errors
[1:27] PLC-00614 Parameter error: illegal function argument: integer argument expected - got CHAR

SQL> call dbe_debug.set_curr_count(NULL);

CT-00944, PL/SQL(SYS.ANONYMOUS BLOCK) terminated with compiling errors
[1:27] PLC-00614 Parameter error: illegal function argument: integer argument expected - got VARCHAR

SQL> call dbe_debug.set_curr_count(-1);

CT-00932, [1:2] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[1:2] PL/SQL(DBE_DEBUG.SET_CURR_COUNT) terminated with execute errors
CT-00614, Parameter error: parameter can not be negative.

SQL> call dbe_debug.set_curr_count(0);

PL/SQL procedure successfully completed.

SQL> 
SQL> call dbe_debug.set_break(9);

CT-00944, PL/SQL(SYS.ANONYMOUS BLOCK) terminated with compiling errors
[1:2] PLC-00615 Invalid argument number for SET_BREAK, min=2, max=2

SQL> call dbe_debug.set_break('9', 0);

CT-00944, PL/SQL(SYS.ANONYMOUS BLOCK) terminated with compiling errors
[1:22] PLC-00614 Parameter error: illegal function argument: integer argument expected - got CHAR

SQL> call dbe_debug.set_break(-9, 0);

CT-00932, [1:2] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[1:2] PL/SQL(DBE_DEBUG.SET_BREAK) terminated with execute errors
CT-00614, Parameter error: invalid argument for ENABLE_BREAK function

SQL> call dbe_debug.set_break(9, 2);

CT-00932, [1:2] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[1:2] PL/SQL(DBE_DEBUG.SET_BREAK) terminated with execute errors
CT-00614, Parameter error: invalid argument for ENABLE_BREAK function

SQL> call dbe_debug.set_break(9, -1);

CT-00932, [1:2] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[1:2] PL/SQL(DBE_DEBUG.SET_BREAK) terminated with execute errors
CT-00614, Parameter error: invalid argument for ENABLE_BREAK function

SQL> call dbe_debug.set_break(9, '0');

CT-00944, PL/SQL(SYS.ANONYMOUS BLOCK) terminated with compiling errors
[1:22] PLC-00614 Parameter error: illegal function argument: integer argument expected - got CHAR

SQL> call dbe_debug.set_break(9, NULL);

CT-00944, PL/SQL(SYS.ANONYMOUS BLOCK) terminated with compiling errors
[1:22] PLC-00614 Parameter error: illegal function argument: integer argument expected - got VARCHAR

SQL> call dbe_debug.set_break(100, 0);

CT-00932, [1:2] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[1:2] PL/SQL(DBE_DEBUG.SET_BREAK) terminated with execute errors
CT-00614, Parameter error: the breakpoint id is out of range

SQL> call dbe_debug.set_break(9.2, 0);

CT-00944, PL/SQL(SYS.ANONYMOUS BLOCK) terminated with compiling errors
[1:22] PLC-00614 Parameter error: illegal function argument: integer argument expected - got NUMBER

SQL> call dbe_debug.set_break(7, 0);

CT-00932, [1:2] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[1:2] PL/SQL(DBE_DEBUG.SET_BREAK) terminated with execute errors
CT-00982, Error occurred when handling breakpoint id 7, the breakpoint id is not existing

SQL> call dbe_debug.update_break(7, 3);

CT-00932, [1:2] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[1:2] PL/SQL(DBE_DEBUG.UPDATE_BREAK) terminated with execute errors
CT-00982, Error occurred when handling breakpoint id 7, the breakpoint id is not existing

SQL> --expect return error end
SQL> 
SQL> select dbe_debug.add_break('SYS','TEST_BREAK_LV1_FUNC1','FUNCTION',3,0,'ef') as break_id from dual;   --break point 4

BREAK_ID    
------------
4           

1 rows fetched.

SQL> select dbe_debug.add_break('SYS','TEST_BREAK_LVX_TRIGGER1','TRIGGER',4,0,'ef') as break_id from dual;   --break point 5

BREAK_ID    
------------
5           

1 rows fetched.

SQL> select dbe_debug.add_break('SYS','TEST_BREAK_LVX_TRIGGER1','TRIGGER',5,0,'ef') as break_id from dual;   --break point 6

BREAK_ID    
------------
6           

1 rows fetched.

SQL> select dbe_debug.add_break('SYS','TEST_BREAK_LV1_PROC1','PROCEDURE',3,0,'ef') as break_id from dual;   --break point 7

BREAK_ID    
------------
7           

1 rows fetched.

SQL> select dbe_debug.add_break('SYS','TEST_BREAK_LV1_PROC1','PROCEDURE',4,0,'ef') as break_id from dual;   --break point 8

BREAK_ID    
------------
8           

1 rows fetched.

SQL> --test set_break
SQL> call dbe_debug.set_break(8, 0);

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> select * from table(dbg_break_info(1));

BREAK_ID     OWNER                                                            OBJECT                                                           PL_TYPE                                                          LOC_LINE     IS_VALID IS_ENABLED COND                                                             MAX_SKIP    
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ -------- ---------- ---------------------------------------------------------------- ------------
1            SYS                                                              TEST_BREAK_LV3_FUNC1                                             FUNCTION                                                         4            TRUE     TRUE                                                                        0           

1 rows fetched.

SQL> select * from table(dbg_break_info(2));

BREAK_ID     OWNER                                                            OBJECT                                                           PL_TYPE                                                          LOC_LINE     IS_VALID IS_ENABLED COND                                                             MAX_SKIP    
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ -------- ---------- ---------------------------------------------------------------- ------------
2            SYS                                                              TEST_BREAK_LV2_FUNC1                                             FUNCTION                                                         4            TRUE     TRUE                                                                        0           

1 rows fetched.

SQL> select * from table(dbg_break_info(3));

BREAK_ID     OWNER                                                            OBJECT                                                           PL_TYPE                                                          LOC_LINE     IS_VALID IS_ENABLED COND                                                             MAX_SKIP    
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ -------- ---------- ---------------------------------------------------------------- ------------
3            SYS                                                              TEST_BREAK_LV2_FUNC1                                             FUNCTION                                                         5            TRUE     TRUE                                                                        0           

1 rows fetched.

SQL> select * from table(dbg_break_info(4));

BREAK_ID     OWNER                                                            OBJECT                                                           PL_TYPE                                                          LOC_LINE     IS_VALID IS_ENABLED COND                                                             MAX_SKIP    
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ -------- ---------- ---------------------------------------------------------------- ------------
4            SYS                                                              TEST_BREAK_LV1_FUNC1                                             FUNCTION                                                         3            TRUE     TRUE                                                                        0           

1 rows fetched.

SQL> select * from table(dbg_break_info(5));

BREAK_ID     OWNER                                                            OBJECT                                                           PL_TYPE                                                          LOC_LINE     IS_VALID IS_ENABLED COND                                                             MAX_SKIP    
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ -------- ---------- ---------------------------------------------------------------- ------------
5            SYS                                                              TEST_BREAK_LVX_TRIGGER1                                          TRIGGER                                                          4            TRUE     TRUE                                                                        0           

1 rows fetched.

SQL> select * from table(dbg_break_info(6));

BREAK_ID     OWNER                                                            OBJECT                                                           PL_TYPE                                                          LOC_LINE     IS_VALID IS_ENABLED COND                                                             MAX_SKIP    
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ -------- ---------- ---------------------------------------------------------------- ------------
6            SYS                                                              TEST_BREAK_LVX_TRIGGER1                                          TRIGGER                                                          5            TRUE     TRUE                                                                        0           

1 rows fetched.

SQL> select * from table(dbg_break_info(7));

BREAK_ID     OWNER                                                            OBJECT                                                           PL_TYPE                                                          LOC_LINE     IS_VALID IS_ENABLED COND                                                             MAX_SKIP    
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ -------- ---------- ---------------------------------------------------------------- ------------
7            SYS                                                              TEST_BREAK_LV1_PROC1                                             PROCEDURE                                                        3            TRUE     TRUE                                                                        0           

1 rows fetched.

SQL> select * from table(dbg_break_info(8));

BREAK_ID     OWNER                                                            OBJECT                                                           PL_TYPE                                                          LOC_LINE     IS_VALID IS_ENABLED COND                                                             MAX_SKIP    
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ -------- ---------- ---------------------------------------------------------------- ------------
8            SYS                                                              TEST_BREAK_LV1_PROC1                                             PROCEDURE                                                        4            TRUE     FALSE                                                                       0           

1 rows fetched.

SQL> 
SQL> call dbe_debug.resume(5, 0);

PL/SQL procedure successfully completed.

SQL> 
SQL> call get_target_waiting();

PL/SQL procedure successfully completed.

SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              10           LINE_SETVAL                     
2            SYS                                                              TEST_BREAK_LV1_FUNC1                                             3            LINE_PROC                       

2 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1                                                                                                                                              V1_INT                                                           0            0            0                                                                             BINARY_INTEGER                                                  
1                                                                                                                                              V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1                                                                                                                                              V3_VARC                                                          0            2            0                                                                             VARCHAR                                                         
1                                                                                                                                              V4_C                                                             0            3            0                                                                             CHAR                                                            
1                                                                                                                                              V5_DATE                                                          0            4            0                                                                             DATE                                                            
1                                                                                                                                              V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   
2                                                                                                                                                                                                               0            0            0                                                                             BINARY_INTEGER                                                  
2                                                                                                                                              P1                                                               0            1            0            3                                                                BINARY_INTEGER                                                  
2                                                                                                                                              P2                                                               0            2            0            6.7                                                              NUMBER                                                          

9 rows fetched.

SQL> call dbe_debug.resume(5, 0);

PL/SQL procedure successfully completed.

SQL> 
SQL> call get_target_waiting();

PL/SQL procedure successfully completed.

SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              10           LINE_SETVAL                     
2            SYS                                                              TEST_BREAK_LV1_FUNC1                                             4            LINE_RETURN                     
3            SYS                                                              TEST_BREAK_LV2_FUNC1                                             4            LINE_SETVAL                     

3 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1                                                                                                                                              V1_INT                                                           0            0            0                                                                             BINARY_INTEGER                                                  
1                                                                                                                                              V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1                                                                                                                                              V3_VARC                                                          0            2            0                                                                             VARCHAR                                                         
1                                                                                                                                              V4_C                                                             0            3            0                                                                             CHAR                                                            
1                                                                                                                                              V5_DATE                                                          0            4            0                                                                             DATE                                                            
1                                                                                                                                              V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   
2                                                                                                                                                                                                               0            0            0                                                                             BINARY_INTEGER                                                  
2                                                                                                                                              P1                                                               0            1            0            3                                                                BINARY_INTEGER                                                  
2                                                                                                                                              P2                                                               0            2            0            6.7                                                              NUMBER                                                          
3                                                                                                                                                                                                               0            0            0                                                                             BINARY_INTEGER                                                  
3                                                                                                                                              P1                                                               0            1            0            3                                                                BINARY_INTEGER                                                  
3                                                                                                                                              V1                                                               0            2            0                                                                             BINARY_INTEGER                                                  

12 rows fetched.

SQL> call dbe_debug.resume(5, 0);

PL/SQL procedure successfully completed.

SQL> 
SQL> call get_target_waiting();

PL/SQL procedure successfully completed.

SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              10           LINE_SETVAL                     
2            SYS                                                              TEST_BREAK_LV1_FUNC1                                             4            LINE_RETURN                     
3            SYS                                                              TEST_BREAK_LV2_FUNC1                                             4            LINE_SETVAL                     
4            SYS                                                              TEST_BREAK_LV3_FUNC1                                             4            LINE_SETVAL                     

4 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1                                                                                                                                              V1_INT                                                           0            0            0                                                                             BINARY_INTEGER                                                  
1                                                                                                                                              V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1                                                                                                                                              V3_VARC                                                          0            2            0                                                                             VARCHAR                                                         
1                                                                                                                                              V4_C                                                             0            3            0                                                                             CHAR                                                            
1                                                                                                                                              V5_DATE                                                          0            4            0                                                                             DATE                                                            
1                                                                                                                                              V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   
2                                                                                                                                                                                                               0            0            0                                                                             BINARY_INTEGER                                                  
2                                                                                                                                              P1                                                               0            1            0            3                                                                BINARY_INTEGER                                                  
2                                                                                                                                              P2                                                               0            2            0            6.7                                                              NUMBER                                                          
3                                                                                                                                                                                                               0            0            0                                                                             BINARY_INTEGER                                                  
3                                                                                                                                              P1                                                               0            1            0            3                                                                BINARY_INTEGER                                                  
3                                                                                                                                              V1                                                               0            2            0                                                                             BINARY_INTEGER                                                  
4                                                                                                                                                                                                               0            0            0                                                                             BINARY_INTEGER                                                  
4                                                                                                                                              P1                                                               0            1            0            3                                                                BINARY_INTEGER                                                  
4                                                                                                                                              V1                                                               0            2            0                                                                             BINARY_INTEGER                                                  

15 rows fetched.

SQL> 
SQL> select dbe_debug.add_break('SYS','TEST_BREAK_LV3_FUNC1','FUNCTION',5,0,'ef') as break_id from dual;   --break point 9

BREAK_ID    
------------
9           

1 rows fetched.

SQL> --test break point exceed the max count of break points  max count is 9
SQL> select dbe_debug.add_break('SYS','TEST_BREAK_LV1_PROC1','PROCEDURE',4,0,'ef') as break_id from dual;   --break point 10

CT-00980, All breakpoints are in busy, the maximum count of breakpoints is 9
SQL> select * from table(dbg_break_info(9));

BREAK_ID     OWNER                                                            OBJECT                                                           PL_TYPE                                                          LOC_LINE     IS_VALID IS_ENABLED COND                                                             MAX_SKIP    
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ -------- ---------- ---------------------------------------------------------------- ------------
9            SYS                                                              TEST_BREAK_LV3_FUNC1                                             FUNCTION                                                         5            TRUE     TRUE                                                                        0           

1 rows fetched.

SQL> 
SQL> call dbe_debug.resume(5, 0);

PL/SQL procedure successfully completed.

SQL> 
SQL> call get_target_waiting();

PL/SQL procedure successfully completed.

SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              10           LINE_SETVAL                     
2            SYS                                                              TEST_BREAK_LV1_FUNC1                                             4            LINE_RETURN                     
3            SYS                                                              TEST_BREAK_LV2_FUNC1                                             4            LINE_SETVAL                     
4            SYS                                                              TEST_BREAK_LV3_FUNC1                                             5            LINE_PROC                       

4 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1                                                                                                                                              V1_INT                                                           0            0            0                                                                             BINARY_INTEGER                                                  
1                                                                                                                                              V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1                                                                                                                                              V3_VARC                                                          0            2            0                                                                             VARCHAR                                                         
1                                                                                                                                              V4_C                                                             0            3            0                                                                             CHAR                                                            
1                                                                                                                                              V5_DATE                                                          0            4            0                                                                             DATE                                                            
1                                                                                                                                              V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   
2                                                                                                                                                                                                               0            0            0                                                                             BINARY_INTEGER                                                  
2                                                                                                                                              P1                                                               0            1            0            3                                                                BINARY_INTEGER                                                  
2                                                                                                                                              P2                                                               0            2            0            6.7                                                              NUMBER                                                          
3                                                                                                                                                                                                               0            0            0                                                                             BINARY_INTEGER                                                  
3                                                                                                                                              P1                                                               0            1            0            3                                                                BINARY_INTEGER                                                  
3                                                                                                                                              V1                                                               0            2            0                                                                             BINARY_INTEGER                                                  
4                                                                                                                                                                                                               0            0            0                                                                             BINARY_INTEGER                                                  
4                                                                                                                                              P1                                                               0            1            0            3                                                                BINARY_INTEGER                                                  
4                                                                                                                                              V1                                                               0            2            0            6                                                                BINARY_INTEGER                                                  

15 rows fetched.

SQL> call dbe_debug.resume(5, 0);

PL/SQL procedure successfully completed.

SQL> 
SQL> call get_target_waiting();

PL/SQL procedure successfully completed.

SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              10           LINE_SETVAL                     
2            SYS                                                              TEST_BREAK_LV1_FUNC1                                             4            LINE_RETURN                     
3            SYS                                                              TEST_BREAK_LV2_FUNC1                                             5            LINE_PROC                       

3 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1                                                                                                                                              V1_INT                                                           0            0            0                                                                             BINARY_INTEGER                                                  
1                                                                                                                                              V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1                                                                                                                                              V3_VARC                                                          0            2            0                                                                             VARCHAR                                                         
1                                                                                                                                              V4_C                                                             0            3            0                                                                             CHAR                                                            
1                                                                                                                                              V5_DATE                                                          0            4            0                                                                             DATE                                                            
1                                                                                                                                              V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   
2                                                                                                                                                                                                               0            0            0                                                                             BINARY_INTEGER                                                  
2                                                                                                                                              P1                                                               0            1            0            3                                                                BINARY_INTEGER                                                  
2                                                                                                                                              P2                                                               0            2            0            6.7                                                              NUMBER                                                          
3                                                                                                                                                                                                               0            0            0                                                                             BINARY_INTEGER                                                  
3                                                                                                                                              P1                                                               0            1            0            3                                                                BINARY_INTEGER                                                  
3                                                                                                                                              V1                                                               0            2            0            12                                                               BINARY_INTEGER                                                  

12 rows fetched.

SQL> call dbe_debug.resume(5, 0);

PL/SQL procedure successfully completed.

SQL> 
SQL> call get_target_waiting();

PL/SQL procedure successfully completed.

SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              15           LINE_PROC                       
2            SYS                                                              TEST_BREAK_LV1_PROC1                                             3            LINE_SQL                        

2 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1                                                                                                                                              V1_INT                                                           0            0            0            19                                                               BINARY_INTEGER                                                  
1                                                                                                                                              V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1                                                                                                                                              V3_VARC                                                          0            2            0            pfa                                                              VARCHAR                                                         
1                                                                                                                                              V4_C                                                             0            3            0                                                                             CHAR                                                            
1                                                                                                                                              V5_DATE                                                          0            4            0                                                                             DATE                                                            
1                                                                                                                                              V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   
2                                                                                                                                              P1                                                               0            0            0            pfa                                                              VARCHAR                                                         

7 rows fetched.

SQL> call dbe_debug.resume(5, 0);

PL/SQL procedure successfully completed.

SQL> 
SQL> call get_target_waiting();

PL/SQL procedure successfully completed.

SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              15           LINE_PROC                       
2            SYS                                                              TEST_BREAK_LV1_PROC1                                             3            LINE_SQL                        
3            SYS                                                              TEST_BREAK_LVX_TRIGGER1                                          4            LINE_SQL                        

3 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1                                                                                                                                              V1_INT                                                           0            0            0            19                                                               BINARY_INTEGER                                                  
1                                                                                                                                              V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1                                                                                                                                              V3_VARC                                                          0            2            0            pfa                                                              VARCHAR                                                         
1                                                                                                                                              V4_C                                                             0            3            0                                                                             CHAR                                                            
1                                                                                                                                              V5_DATE                                                          0            4            0                                                                             DATE                                                            
1                                                                                                                                              V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   
2                                                                                                                                              P1                                                               0            0            0            pfa                                                              VARCHAR                                                         
3                                                                                                                                              :NEW.ID                                                          0            0            0            0                                                                BINARY_INTEGER                                                  
3                                                                                                                                              V1                                                               1            0            0                                                                             BINARY_INTEGER                                                  

9 rows fetched.

SQL> call dbe_debug.resume(5, 0);

PL/SQL procedure successfully completed.

SQL> 
SQL> call get_target_waiting();

PL/SQL procedure successfully completed.

SQL> select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));

STACK_ID     OWNER                                                            OBJECT                                                           LOC_LINE     LINE_TYPE                       
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ --------------------------------
1                                                                                                                                              15           LINE_PROC                       
2            SYS                                                              TEST_BREAK_LV1_PROC1                                             3            LINE_SQL                        
3            SYS                                                              TEST_BREAK_LVX_TRIGGER1                                          5            LINE_SETVAL                     

3 rows fetched.

SQL> select * from table(dbg_show_values(0));

STACK_ID     BLOCK_NAME                                                       PARENT                                                           NAME                                                             VID_BLOCK    VID_ID       VID_OFFSET   VALUE                                                            TYPE                                                            
------------ ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------ ------------ ------------ ---------------------------------------------------------------- ----------------------------------------------------------------
1                                                                                                                                              V1_INT                                                           0            0            0            19                                                               BINARY_INTEGER                                                  
1                                                                                                                                              V2_NUM                                                           0            1            0            6.7                                                              NUMBER                                                          
1                                                                                                                                              V3_VARC                                                          0            2            0            pfa                                                              VARCHAR                                                         
1                                                                                                                                              V4_C                                                             0            3            0                                                                             CHAR                                                            
1                                                                                                                                              V5_DATE                                                          0            4            0                                                                             DATE                                                            
1                                                                                                                                              V6_DOUB                                                          0            5            0                                                                             BINARY_DOUBLE                                                   
2                                                                                                                                              P1                                                               0            0            0            pfa                                                              VARCHAR                                                         
3                                                                                                                                              :NEW.ID                                                          0            0            0            0                                                                BINARY_INTEGER                                                  
3                                                                                                                                              V1                                                               1            0            0            5                                                                BINARY_INTEGER                                                  

9 rows fetched.

SQL> call dbe_debug.resume(5, 0);

PL/SQL procedure successfully completed.

SQL> -- test step4 end
SQL> 
SQL> call get_target_waiting_or_idle();

PL/SQL procedure successfully completed.

SQL> --test param of detach is not 1 or 0,expect throw error
SQL> call dbe_debug.detach(2); 

CT-00932, [1:2] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[1:2] PL/SQL(DBE_DEBUG.DETACH) terminated with execute errors
CT-00614, Parameter error: parameter must be 0 or 1.

SQL> call dbe_debug.detach(1);

PL/SQL procedure successfully completed.

SQL> 
SQL> --test debug function when it is called by normal session  expect return error
SQL> declare
  2   break_num integer;
  3 begin
  4   select dbe_debug.add_break('SYS','TEST_BREAK_LV3_FUNC1','FUNCTION',4,0,'ef') into break_num from dual;
  5   dbe_output.print_line('can call add_break when session type is normal session');
  6 exception
  7   when others then
  8     dbe_output.print_line('can not call add_break when session type is normal session');
  9 end;
 10 /

can not call add_break when session type is normal session

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2   cursor_ret SYS_REFCURSOR;
  3 begin
  4   OPEN cursor_ret for select * from table(dbg_break_info(1));
  5   dbe_output.print_line('can call dbg_break_info when session type is normal session');
  6 exception
  7   when others then
  8     dbe_output.print_line('can not call dbg_break_info when session type is normal session');
  9 end;
 10 /

can not call dbg_break_info when session type is normal session

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2 begin
  3   execute immediate 'call dbe_debug.delete_break(5)';
  4   dbe_output.print_line('can call delete_break when session type is normal session');
  5 exception
  6   when others then
  7     dbe_output.print_line('can not call delete_break when session type is normal session');
  8 end;
  9 /

can not call delete_break when session type is normal session

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2 begin
  3   execute immediate 'call dbe_debug.set_break(9, 0)';
  4   dbe_output.print_line('can call set_break when session type is normal session');
  5 exception
  6   when others then
  7     dbe_output.print_line('can not call set_break when session type is normal session');
  8 end;
  9 /

can not call set_break when session type is normal session

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2 begin
  3   execute immediate 'call dbe_debug.resume(5, 0)';
  4   dbe_output.print_line('can call resume when session type is normal session');
  5 exception
  6   when others then
  7     dbe_output.print_line('can not call resume when session type is normal session');
  8 end;
  9 /

can not call resume when session type is normal session

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2   cursor_ret SYS_REFCURSOR;
  3 begin
  4   OPEN cursor_ret for select STACK_ID,OWNER,OBJECT,LOC_LINE,LINE_TYPE from table(dbg_proc_callstack(0));
  5   dbe_output.print_line('can call dbg_proc_callstack when session type is normal session');
  6 exception
  7   when others then
  8     dbe_output.print_line('can not call dbg_proc_callstack when session type is normal session');
  9 end;
 10 /

can not call dbg_proc_callstack when session type is normal session

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2   cursor_ret SYS_REFCURSOR;
  3 begin
  4   OPEN cursor_ret for select * from table(dbg_show_values(0));
  5   dbe_output.print_line('can call dbg_show_values when session type is normal session');
  6 exception
  7   when others then
  8     dbe_output.print_line('can not call dbg_show_values when session type is normal session');
  9 end;
 10 /

can not call dbg_show_values when session type is normal session

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2 begin
  3   execute immediate 'call dbe_debug.detach(1)';
  4   dbe_output.print_line('can call detach when session type is normal session');
  5 exception
  6   when others then
  7     dbe_output.print_line('can not call detach when session type is normal session');
  8 end;
  9 /

can not call detach when session type is normal session

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2 begin
  3   execute immediate 'call dbe_debug.terminate()';
  4   dbe_output.print_line('can call terminate when session type is normal session');
  5 exception
  6   when others then
  7     dbe_output.print_line('can not call terminate when session type is normal session');
  8 end;
  9 /

can not call terminate when session type is normal session

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2 begin
  3   execute immediate 'call dbe_debug.pause()';
  4   dbe_output.print_line('can call pause when session type is normal session');
  5 exception
  6   when others then
  7     dbe_output.print_line('can not call pause when session type is normal session');
  8 end;
  9 /

can not call pause when session type is normal session

PL/SQL procedure successfully completed.

SQL> 
SQL> declare
  2   status integer;
  3 begin
  4   select dbe_debug.get_status() into status from dual;
  5   dbe_output.print_line('can call get_status when session type is normal session');
  6 exception
  7   when others then
  8     dbe_output.print_line('can not call get_status when session type is normal session');
  9 end;
 10 /

can not call get_status when session type is normal session

PL/SQL procedure successfully completed.

SQL> 
SQL> -----plsql int->char ------
SQL> drop table if exists table1;

Succeed.

SQL> create table table1 (c1 char(30));

Succeed.

SQL> create or replace procedure p1(f1 char)
  2 as
  3 begin
  4 insert into table1(c1) values(f1);
  5 end;
  6 /

Succeed.

SQL>
SQL> exec p1(1);

PL/SQL procedure successfully completed.

SQL>
SQL> exec p1(true);

PL/SQL procedure successfully completed.

SQL>
SQL> exec p1(TO_TIMESTAMP('2018-06-28 13:14:15', 'YYYY-MM-DD HH24:MI:SS:FF'));

PL/SQL procedure successfully completed.

SQL>
SQL> exec p1(1111111111111111111111111111111111111111111);

CT-00932, [1:2] PL/SQL(SYS.ANONYMOUS BLOCK) terminated with execute errors
[4:1] PL/SQL(SYS.P1) terminated with execute errors
[4:1] CT-00698, The size(40) of value can't larger than defined size(30) of char

SQL>
SQL> select * from table1;

C1
------------------------------
1
TRUE
2018-06-28 13:14:15.000000

3 rows fetched.

SQL>
SQL> create or replace function test_out_param_func(p1 in out char) return char
  2 is
  3 begin
  4   dbe_output.print_line(length(p1));
  5   return p1;
  6 end;
  7 /

Succeed.

SQL>
SQL> DECLARE
  2   v1 int := 321;
  3   v2 int := 4563;
  4 BEGIN
  5   dbe_output.print_line(test_out_param_func(v1) || test_out_param_func(v2));
  6 END;
  7 /

3
4
3214563

PL/SQL procedure successfully completed.

SQL>
SQL> set serveroutput off;
OFF



