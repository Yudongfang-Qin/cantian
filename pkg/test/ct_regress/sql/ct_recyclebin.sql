--*CLEAR RECYCLEBIN*--
PURGE RECYCLEBIN;

--*DROP TEST GROUP*--
--**DROP PURGE WITHOUT DATA**--
DROP TABLE IF EXISTS DROP_PURGE1_1;
CREATE TABLE DROP_PURGE1_1 (ID INT);
DROP TABLE DROP_PURGE1_1 PURGE;

DROP TABLE IF EXISTS DROP_PURGE1_2;
CREATE TABLE DROP_PURGE1_2 (ID INT);
CREATE INDEX IDX_DROP_PURGE1_2 ON DROP_PURGE1_2 (ID);
DROP INDEX IDX_DROP_PURGE1_2 ON DROP_PURGE1_2;
DROP TABLE DROP_PURGE1_2 PURGE;

DROP TABLE IF EXISTS DROP_PURGE1_3;
CREATE TABLE DROP_PURGE1_3 (ID1 INT PRIMARY KEY, ID2 INT);
CREATE INDEX IDX_DROP_PURGE1_3 ON DROP_PURGE1_3 (ID2);
DROP TABLE DROP_PURGE1_3 PURGE;

DROP TABLE IF EXISTS DROP_PURGE1_4;
CREATE TABLE DROP_PURGE1_4 (ID1 INT, TT CLOB);
CREATE INDEX IDX_DROP_PURGE1_4 ON DROP_PURGE1_4 (ID1);
DROP TABLE DROP_PURGE1_4 PURGE;

DROP TABLE IF EXISTS DROP_PURGE1_5;
CREATE TABLE DROP_PURGE1_5 (ID INT)
PARTITION BY RANGE (ID)
(
PARTITION P1 VALUES LESS THAN (20),
PARTITION P2 VALUES LESS THAN (MAXVALUE)
) TABLESPACE USERS;
DROP TABLE DROP_PURGE1_5 PURGE;

--**DROP PURGE WITH DATA**--
DROP TABLE IF EXISTS DROP_PURGE2_1;
CREATE TABLE DROP_PURGE2_1 (ID INT);
INSERT INTO DROP_PURGE2_1 VALUES (1);
DROP TABLE DROP_PURGE2_1 PURGE;

DROP TABLE IF EXISTS DROP_PURGE2_2;
CREATE TABLE DROP_PURGE2_2 (ID INT);
CREATE INDEX IDX_DROP_PURGE2_2 ON DROP_PURGE2_2 (ID);
INSERT INTO DROP_PURGE2_2 VALUES (1);
DROP INDEX IDX_DROP_PURGE2_2 ON DROP_PURGE2_2;
DROP TABLE DROP_PURGE2_2 PURGE;

DROP TABLE IF EXISTS DROP_PURGE2_3;
CREATE TABLE DROP_PURGE2_3 (ID1 INT PRIMARY KEY, ID2 INT);
INSERT INTO DROP_PURGE2_3 VALUES (1, 1);
CREATE INDEX IDX_DROP_PURGE2_3 ON DROP_PURGE2_3 (ID2);
DROP TABLE DROP_PURGE2_3 PURGE;

DROP TABLE IF EXISTS DROP_PURGE2_4;
CREATE TABLE DROP_PURGE2_4 (ID1 INT, TT CLOB);
CREATE INDEX IDX_DROP_PURGE2_4 ON DROP_PURGE2_4 (ID1);
INSERT INTO DROP_PURGE2_4 VALUES (1, 'DROP PURGE CLOB');
DROP TABLE DROP_PURGE2_4 PURGE;

DROP TABLE IF EXISTS DROP_PURGE2_5;
CREATE TABLE DROP_PURGE2_5 (ID INT)
PARTITION BY RANGE (ID)
(
PARTITION P1 VALUES LESS THAN (20),
PARTITION P2 VALUES LESS THAN (MAXVALUE)
) TABLESPACE USERS;
INSERT INTO DROP_PURGE2_5 VALUES (10);
INSERT INTO DROP_PURGE2_5 VALUES (30);
DROP TABLE DROP_PURGE2_5 PURGE;

--**DROP TABLE WITH NO DATA**--
DROP TABLE IF EXISTS DROP_RB1_1;
CREATE TABLE DROP_RB1_1 (ID INT) TABLESPACE USERS;
DROP TABLE DROP_RB1_1;
SELECT ORG_NAME, ENTRY FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'DROP_RB1_1';

DROP TABLE IF EXISTS DROP_RB1_2;
CREATE TABLE DROP_RB1_2 (ID INT)
PARTITION BY RANGE (ID)
(
PARTITION P1 VALUES LESS THAN (20),
PARTITION P2 VALUES LESS THAN (MAXVALUE)
) TABLESPACE USERS;
DROP TABLE DROP_RB1_2;
SELECT ORG_NAME, ENTRY FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'DROP_RB1_2';

DROP TABLE IF EXISTS DROP_RB1_3;
CREATE TABLE DROP_RB1_3 (ID1 INT PRIMARY KEY, ID2 INT) TABLESPACE USERS;
CREATE INDEX IDX_DROP_RB1_3 ON DROP_RB1_3 (ID2);
DROP TABLE DROP_RB1_3;
SELECT ORG_NAME, ENTRY FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'DROP_RB1_3';
SELECT ORG_NAME, ENTRY FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'IDX_DROP_RB1_3';

DROP TABLE IF EXISTS DROP_RB1_4;
CREATE TABLE DROP_RB1_4 (ID1 INT PRIMARY KEY, ID2 INT, CC CLOB)
PARTITION BY RANGE (ID2)
(
PARTITION P1 VALUES LESS THAN (20),
PARTITION P2 VALUES LESS THAN (MAXVALUE)
) TABLESPACE USERS;
CREATE INDEX IDX_DROP_RB1_4 ON DROP_RB1_4 (ID2) LOCAL;
DROP TABLE DROP_RB1_4;
SELECT ORG_NAME, ENTRY FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'DROP_RB1_4';
SELECT ORG_NAME, ENTRY FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'IDX_DROP_RB1_4';

DROP TABLE IF EXISTS DROP_RB1_4;
CREATE TABLE DROP_RB1_4 (ID1 INT PRIMARY KEY, ID2 INT, CC CLOB)
PARTITION BY RANGE (ID2)
(
PARTITION P1 VALUES LESS THAN (20),
PARTITION P2 VALUES LESS THAN (MAXVALUE)
) TABLESPACE USERS;
CREATE INDEX IDX_DROP_RB1_4 ON DROP_RB1_4 (ID2) LOCAL;
DROP TABLE DROP_RB1_4;
SELECT ORG_NAME, ENTRY FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'DROP_RB1_4';
SELECT ORG_NAME, ENTRY FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'IDX_DROP_RB1_4';

--**DROP TABLE WITH DATA**--
DROP TABLE IF EXISTS DROP_RB2_1;
CREATE TABLE DROP_RB2_1 (ID INT) TABLESPACE USERS;
INSERT INTO DROP_RB2_1 VALUES (1);
DROP TABLE DROP_RB2_1;
SELECT ORG_NAME FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'DROP_RB2_1';

DROP TABLE IF EXISTS DROP_RB2_2;
CREATE TABLE DROP_RB2_2 (ID INT)
PARTITION BY RANGE (ID)
(
PARTITION P1 VALUES LESS THAN (20),
PARTITION P2 VALUES LESS THAN (MAXVALUE)
) TABLESPACE USERS;
INSERT INTO DROP_RB2_2 VALUES (10);
DROP TABLE DROP_RB2_2;
SELECT ORG_NAME, ENTRY FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'DROP_RB2_2';

DROP TABLE IF EXISTS DROP_RB2_3;
CREATE TABLE DROP_RB2_3 (ID1 INT PRIMARY KEY, ID2 INT) TABLESPACE USERS;
CREATE INDEX IDX_DROP_RB2_3 ON DROP_RB2_3 (ID2);
INSERT INTO DROP_RB2_3 VALUES (2, 2);
DROP TABLE DROP_RB2_3;
SELECT ORG_NAME FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'DROP_RB2_3';
SELECT ORG_NAME FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'IDX_DROP_RB2_3';

DROP TABLE IF EXISTS DROP_RB2_4;
CREATE TABLE DROP_RB2_4 (ID1 INT PRIMARY KEY, ID2 INT, CC CLOB)
PARTITION BY RANGE (ID2)
(
PARTITION P1 VALUES LESS THAN (20),
PARTITION P2 VALUES LESS THAN (MAXVALUE)
) TABLESPACE USERS;
INSERT INTO DROP_RB2_4 VALUES (5, 10, 'ABCD');
CREATE INDEX IDX_DROP_RB2_4 ON DROP_RB2_4 (ID2) LOCAL;
INSERT INTO DROP_RB2_4 VALUES (10, 20, 'ABCDEF');
DROP TABLE DROP_RB2_4;
SELECT ORG_NAME, ENTRY FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'DROP_RB2_4';
SELECT ORG_NAME, ENTRY FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'IDX_DROP_RB2_4';

DROP TABLE IF EXISTS DROP_RB2_4;
CREATE TABLE DROP_RB2_4 (ID1 INT PRIMARY KEY, ID2 INT, CC CLOB)
PARTITION BY RANGE (ID2)
(
PARTITION P1 VALUES LESS THAN (20),
PARTITION P2 VALUES LESS THAN (MAXVALUE)
) TABLESPACE USERS;
CREATE INDEX IDX_DROP_RB2_4 ON DROP_RB2_4 (ID2) LOCAL;
INSERT INTO DROP_RB2_4 VALUES (-10, -20, 'ABCDEF');
DROP TABLE DROP_RB2_4;
SELECT ORG_NAME, ENTRY FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'DROP_RB2_4';
SELECT ORG_NAME, ENTRY FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'IDX_DROP_RB2_4';

--**FLASHBACK DROP WITHOUT DATA**--
SELECT * FROM DROP_RB1_4;
FLASHBACK TABLE DROP_RB1_4 TO BEFORE DROP;
SELECT * FROM DROP_RB1_4;

FLASHBACK TABLE DROP_RB1_4 TO BEFORE DROP RENAME TO DROP_RB1_4_NEW;
SELECT * FROM DROP_RB1_4_NEW;

DROP TABLE DROP_RB1_4;
SELECT * FROM DROP_RB1_4;
FLASHBACK TABLE DROP_RB1_4 TO BEFORE DROP;
SELECT * FROM DROP_RB1_4;

DROP TABLE DROP_RB1_4;
DROP TABLE DROP_RB1_4_NEW;

--**FLASHBACK DROP WITH DATA**--
SELECT * FROM DROP_RB2_4;
FLASHBACK TABLE DROP_RB2_4 TO BEFORE DROP;
SELECT * FROM DROP_RB2_4;

FLASHBACK TABLE DROP_RB2_4 TO BEFORE DROP RENAME TO DROP_RB2_4_NEW;
SELECT * FROM DROP_RB2_4_NEW;

DROP TABLE DROP_RB2_4;
SELECT * FROM DROP_RB2_4;
FLASHBACK TABLE DROP_RB2_4 TO BEFORE DROP;
SELECT * FROM DROP_RB2_4;

DROP TABLE DROP_RB2_4;
DROP TABLE DROP_RB2_4_NEW;

--**PURGE DROP TABLE**--
SELECT ORG_NAME FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'DROP_RB1_1';
PURGE TABLE DROP_RB1_1;
SELECT ORG_NAME FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'DROP_RB2_1';
PURGE TABLE DROP_RB2_1;

SELECT ORG_NAME FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'IDX_DROP_RB1_2';
PURGE INDEX IDX_DROP_RB1_3;
SELECT ORG_NAME FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'IDX_DROP_RB2_2';
PURGE INDEX IDX_DROP_RB2_3;

SELECT ORG_NAME FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'DROP_RB1_4';
PURGE TABLE DROP_RB1_4;
SELECT ORG_NAME FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'DROP_RB1_4_NEW';

SELECT ORG_NAME FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'DROP_RB2_4';
PURGE TABLE DROP_RB2_4;
SELECT ORG_NAME FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'DROP_RB2_4_NEW';

--*CLEAR RECYCLEBIN*--
PURGE TABLESPACE USERS;
PURGE RECYCLEBIN;

--*TRUNCATE TEST GROUP*--
--**TRUNCATE PURGE SYNTAX**--
DROP TABLE IF EXISTS TRUNCATE_PURGE0_1;
CREATE TABLE TRUNCATE_PURGE0_1 (ID INT);
INSERT INTO TRUNCATE_PURGE0_1 VALUES (1);
TRUNCATE TABLE TRUNCATE_PURGE0_1 PURGE;

INSERT INTO TRUNCATE_PURGE0_1 VALUES (1);
TRUNCATE TABLE TRUNCATE_PURGE0_1 PURGE;
INSERT INTO TRUNCATE_PURGE0_1 VALUES (1);
TRUNCATE TABLE TRUNCATE_PURGE0_1 DROP STORAGE PURGE;
INSERT INTO TRUNCATE_PURGE0_1 VALUES (1);
TRUNCATE TABLE TRUNCATE_PURGE0_1 REUSE STORAGE PURGE;
INSERT INTO TRUNCATE_PURGE0_1 VALUES (1);
TRUNCATE TABLE TRUNCATE_PURGE0_1 PURGE DROP STORAGE;
INSERT INTO TRUNCATE_PURGE0_1 VALUES (1);
TRUNCATE TABLE TRUNCATE_PURGE0_1 PURGE REUSE STORAGE;
INSERT INTO TRUNCATE_PURGE0_1 VALUES (1);
TRUNCATE TABLE TRUNCATE_PURGE0_1 DROP STORAGE;
INSERT INTO TRUNCATE_PURGE0_1 VALUES (1);
TRUNCATE TABLE TRUNCATE_PURGE0_1 REUSE STORAGE;
INSERT INTO TRUNCATE_PURGE0_1 VALUES (1);
TRUNCATE TABLE TRUNCATE_PURGE0_1 DROP STORAGE REUSE STORAGE;

--TRUNCATE PURGE WITHOUT DATA**--
DROP TABLE IF EXISTS TRUNCATE_PURGE1_1;
CREATE TABLE TRUNCATE_PURGE1_1 (ID INT);
TRUNCATE TABLE TRUNCATE_PURGE1_1 PURGE;

DROP TABLE IF EXISTS TRUNCATE_PURGE1_2;
CREATE TABLE TRUNCATE_PURGE1_2 (ID1 INT PRIMARY KEY, ID2 INT);
CREATE INDEX IDX_TRUNCATE_PURGE1_2 ON TRUNCATE_PURGE1_2 (ID2);
TRUNCATE TABLE TRUNCATE_PURGE1_2 PURGE;

DROP TABLE IF EXISTS TRUNCATE_PURGE1_3;
CREATE TABLE TRUNCATE_PURGE1_3 (ID1 INT, TT CLOB);
CREATE INDEX IDX_TRUNCATE_PURGE1_3 ON TRUNCATE_PURGE1_3 (ID1);
TRUNCATE TABLE TRUNCATE_PURGE1_3 PURGE;

DROP TABLE IF EXISTS TRUNCATE_PURGE1_4;
CREATE TABLE TRUNCATE_PURGE1_4 (ID INT)
PARTITION BY RANGE (ID)
(
PARTITION P1 VALUES LESS THAN (20),
PARTITION P2 VALUES LESS THAN (MAXVALUE)
) TABLESPACE USERS;
TRUNCATE TABLE TRUNCATE_PURGE1_4 PURGE;

--**TRUNCATE PURGE WITH DATA**--
DROP TABLE IF EXISTS TRUNCATE_PURGE2_1;
CREATE TABLE TRUNCATE_PURGE2_1 (ID INT);
INSERT INTO TRUNCATE_PURGE2_1 VALUES (1);
TRUNCATE TABLE TRUNCATE_PURGE2_1 PURGE;

DROP TABLE IF EXISTS TRUNCATE_PURGE2_2;
CREATE TABLE TRUNCATE_PURGE2_2 (ID1 INT PRIMARY KEY, ID2 INT);
INSERT INTO TRUNCATE_PURGE2_2 VALUES (1, 1);
CREATE INDEX IDX_TRUNCATE_PURGE2_2 ON TRUNCATE_PURGE2_2 (ID2);
TRUNCATE TABLE TRUNCATE_PURGE2_2 PURGE;

DROP TABLE IF EXISTS TRUNCATE_PURGE2_3;
CREATE TABLE TRUNCATE_PURGE2_3 (ID1 INT, TT CLOB);
CREATE INDEX IDX_TRUNCATE_PURGE2_3 ON TRUNCATE_PURGE2_3 (ID1);
INSERT INTO TRUNCATE_PURGE2_3 VALUES (1, 'DROP PURGE CLOB');
TRUNCATE TABLE TRUNCATE_PURGE2_3 PURGE;

DROP TABLE IF EXISTS TRUNCATE_PURGE2_4;
CREATE TABLE TRUNCATE_PURGE2_4 (ID INT)
PARTITION BY RANGE (ID)
(
PARTITION P1 VALUES LESS THAN (20),
PARTITION P2 VALUES LESS THAN (MAXVALUE)
) TABLESPACE USERS;
INSERT INTO TRUNCATE_PURGE2_4 VALUES (10);
TRUNCATE TABLE TRUNCATE_PURGE2_4 PURGE;

DROP TABLE TRUNCATE_PURGE0_1 PURGE;
DROP TABLE TRUNCATE_PURGE1_1 PURGE;
DROP TABLE TRUNCATE_PURGE1_2 PURGE;
DROP TABLE TRUNCATE_PURGE1_3 PURGE;
DROP TABLE TRUNCATE_PURGE1_4 PURGE;
DROP TABLE TRUNCATE_PURGE2_1 PURGE;
DROP TABLE TRUNCATE_PURGE2_2 PURGE;
DROP TABLE TRUNCATE_PURGE2_3 PURGE;
DROP TABLE TRUNCATE_PURGE2_4 PURGE;

--**TRUNCATE PARTITION PURGE**--
DROP TABLE IF EXISTS TRUNC_PART_PURGE0_1;
CREATE TABLE TRUNC_PART_PURGE0_1 (ID INT)
PARTITION BY RANGE (ID)
(
PARTITION P1 VALUES LESS THAN (20),
PARTITION P2 VALUES LESS THAN (MAXVALUE)
);
INSERT INTO TRUNC_PART_PURGE0_1 VALUES (1);
ALTER TABLE TRUNC_PART_PURGE0_1 TRUNCATE PARTITION P1 PURGE;
ALTER TABLE TRUNC_PART_PURGE0_1 TRUNCATE PARTITION P2 PURGE DROP STORAGE;
ALTER TABLE TRUNC_PART_PURGE0_1 TRUNCATE PARTITION P1 REUSE STORAGE PURGE;
ALTER TABLE TRUNC_PART_PURGE0_1 TRUNCATE PARTITION P1 REUSE STORAGE DROP STORAGE;
DROP TABLE TRUNC_PART_PURGE0_1 PURGE;

--**TRUNCATE WITHOUT DATA**--
DROP TABLE IF EXISTS TRUNCATE_RB1_1;
CREATE TABLE TRUNCATE_RB1_1 (ID INT) TABLESPACE USERS;
TRUNCATE TABLE TRUNCATE_RB1_1;
SELECT ORG_NAME, ENTRY FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'TRUNCATE_RB1_1';

DROP TABLE IF EXISTS TRUNCATE_RB1_2;
CREATE TABLE TRUNCATE_RB1_2 (ID1 INT PRIMARY KEY, ID2 INT) TABLESPACE USERS;
CREATE INDEX IDX_TRUNCATE_RB1_2 ON TRUNCATE_RB1_2 (ID2);
TRUNCATE TABLE TRUNCATE_RB1_2;
SELECT ORG_NAME, ENTRY FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'TRUNCATE_RB1_2';
SELECT ORG_NAME, ENTRY FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'SYS_INDEXES1';

DROP TABLE IF EXISTS TRUNCATE_RB1_3;
CREATE TABLE TRUNCATE_RB1_3 (ID INT)
PARTITION BY LIST (ID)
(
PARTITION P1 VALUES (1, 2, 3),
PARTITION P2 VALUES (DEFAULT)
) TABLESPACE USERS;
CREATE INDEX IDX_TRUNCATE_RB1_3 ON TRUNCATE_RB1_3(ID) LOCAL;
ALTER TABLE TRUNCATE_RB1_3 TRUNCATE PARTITION P1;
TRUNCATE TABLE TRUNCATE_RB1_3;
SELECT ORG_NAME FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'TRUNCATE_RB1_3';
SELECT ORG_NAME FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'P1';

--**TRUNCATE WITH DATA**--
DROP TABLE IF EXISTS TRUNCATE_RB2_1;
CREATE TABLE TRUNCATE_RB2_1 (ID INT) TABLESPACE USERS;
INSERT INTO TRUNCATE_RB2_1 VALUES (1);
TRUNCATE TABLE TRUNCATE_RB2_1;
SELECT ORG_NAME FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'TRUNCATE_RB2_1';
PURGE TABLE TRUNCATE_RB2_1;

DROP TABLE IF EXISTS TRUNCATE_RB2_2;
CREATE TABLE TRUNCATE_RB2_2 (ID1 INT PRIMARY KEY, ID2 INT) TABLESPACE USERS;
INSERT INTO TRUNCATE_RB2_2 VALUES (2, 2);
CREATE INDEX IDX_TRUNCATE_RB2_2 ON TRUNCATE_RB2_2 (ID2);
TRUNCATE TABLE TRUNCATE_RB2_2;
SELECT ORG_NAME FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'TRUNCATE_RB2_2';
SELECT ORG_NAME FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'IDX_TRUNCATE_RB2_2';
PURGE INDEX IDX_TRUNCATE_RB2_2;
PURGE TABLE TRUNCATE_RB2_2;

DROP TABLE IF EXISTS TRUNCATE_RB2_3;
CREATE TABLE TRUNCATE_RB2_3 (ID1 INT PRIMARY KEY, ID2 BIGINT UNIQUE, ID3 REAL, ID4 NUMBER, ID5 DATE, ID6 CHAR, ID7 VARCHAR(10), ID8 BINARY(100), ID9 BOOL, T1 BLOB, T2 CLOB) TABLESPACE USERS;
CREATE INDEX IDX_TRUNCATE_RB2_3 ON TRUNCATE_RB2_3 (ID3);
INSERT INTO TRUNCATE_RB2_3 VALUES (1, 1, 1, 1, '2017-12-09', 'A', 'B', 'C', TRUE, 'TEST', 'RECYCLEBIN TRUNCATE1');
TRUNCATE TABLE TRUNCATE_RB2_3;
INSERT INTO TRUNCATE_RB2_3 VALUES (2, 2, 2, 2, '2017-12-09', 'A', 'B', 'C', TRUE, 'TEST', 'RECYCLEBIN TRUNCATE2');
TRUNCATE TABLE TRUNCATE_RB2_3;
INSERT INTO TRUNCATE_RB2_3 VALUES (3, 3, 3, 3, '2017-12-09', 'A', 'B', 'C', TRUE, 'TEST', 'RECYCLEBIN TRUNCATE3');
TRUNCATE TABLE TRUNCATE_RB2_3;
SELECT COUNT (*) FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'TRUNCATE_RB2_3';

DROP TABLE IF EXISTS TRUNCATE_RB2_4;
CREATE TABLE TRUNCATE_RB2_4 (ID INT, ID2 INT PRIMARY KEY, CC CLOB)
PARTITION BY LIST (ID)
(
PARTITION P1 VALUES (1, 2, 3),
PARTITION P2 VALUES (DEFAULT)
) TABLESPACE USERS;
INSERT INTO TRUNCATE_RB2_4 VALUES (1, 1, 'ASDF');
CREATE INDEX IDX_TRUNCATE_RB2_4 ON TRUNCATE_RB2_4(ID) LOCAL;
INSERT INTO TRUNCATE_RB2_4 VALUES (4, 4, 'ASDFASG');
ALTER TABLE TRUNCATE_RB2_4 TRUNCATE PARTITION P1;
TRUNCATE TABLE TRUNCATE_RB2_4;
INSERT INTO TRUNCATE_RB2_4 VALUES (2, 2, 'ASDF');
INSERT INTO TRUNCATE_RB2_4 VALUES (5, 5, 'ASDFASG');
ALTER TABLE TRUNCATE_RB2_4 TRUNCATE PARTITION P2;
TRUNCATE TABLE TRUNCATE_RB2_4;
SELECT COUNT(*) FROM SYS_RECYCLEBIN WHERE ORG_NAME = 'TRUNCATE_RB2_4';
SELECT COUNT(*) FROM SYS_RECYCLEBIN WHERE PARTITION_NAME = 'P1';

--**FLASHBACK TRUNCATE WITH DATA**--
SELECT * FROM TRUNCATE_RB2_3;
FLASHBACK TABLE TRUNCATE_RB2_3 TO BEFORE TRUNCATE;
SELECT * FROM TRUNCATE_RB2_3;

--**FLASHBACK TRUNCATE WITH DATA AFTER FLASHBACK DROP RENAME**--
DROP TABLE TRUNCATE_RB2_4;
SELECT * FROM TRUNCATE_RB2_4;
FLASHBACK TABLE TRUNCATE_RB2_4 TO BEFORE DROP RENAME TO TRUNCATE_RB2_4_NEW;
FLASHBACK TABLE TRUNCATE_RB2_4_NEW TO BEFORE TRUNCATE;
SELECT * FROM TRUNCATE_RB2_4_NEW;
FLASHBACK TABLE TRUNCATE_RB2_4_NEW PARTITION P2 TO BEFORE TRUNCATE;
SELECT * FROM TRUNCATE_RB2_4_NEW;
FLASHBACK TABLE TRUNCATE_RB2_4_NEW TO BEFORE TRUNCATE;
FLASHBACK TABLE TRUNCATE_RB2_4_NEW TO BEFORE TRUNCATE FORCE;
SELECT * FROM TRUNCATE_RB2_4_NEW;

--**CLEANUP**--
DROP TABLE TRUNCATE_RB1_1;
DROP TABLE TRUNCATE_RB1_2;
DROP TABLE TRUNCATE_RB1_3;
DROP TABLE TRUNCATE_RB2_1;
DROP TABLE TRUNCATE_RB2_2;
DROP TABLE TRUNCATE_RB2_3;
DROP TABLE TRUNCATE_RB2_4_NEW;

--**PURGE TABLE**--
PURGE TABLE TRUNCATE_RB1_1;
PURGE TABLE TRUNCATE_RB1_2;
PURGE TABLE TRUNCATE_RB1_3;
PURGE TABLE TRUNCATE_RB2_1;
PURGE TABLE TRUNCATE_RB2_2;
PURGE TABLE TRUNCATE_RB2_3;
PURGE TABLE TRUNCATE_RB2_4_NEW;
PURGE PARTITION P1;
PURGE TABLE TRUNCATE_RB2_4 PARTITION P1;
PURGE TABLE TRUNCATE_RB2_4_NEW;


--**ADDITIONAL TEST**--
DROP TABLE IF EXISTS DROP_RB3_1;
CREATE TABLE DROP_RB3_1 (ID1 INT, ID2 INT) TABLESPACE USERS;
ALTER TABLE DROP_RB3_1 ADD CONSTRAINT PK_DROP_RB3_1 PRIMARY KEY (ID1) USING INDEX (CREATE INDEX PK_DROP_RB3_1 ON DROP_RB3_1 (ID1) TABLESPACE USERS);
ALTER TABLE DROP_RB3_1 ADD CONSTRAINT UK_DROP_RB3_1 UNIQUE (ID2) USING INDEX (CREATE INDEX UK_DROP_RB3_1 ON DROP_RB3_1 (ID2) TABLESPACE USERS);
DROP TABLE DROP_RB3_1;
PURGE INDEX PK_DROP_RB3_1;
PURGE INDEX UK_DROP_RB3_1;

DROP TABLE IF EXISTS DROP_RB3_2;
CREATE TABLE DROP_RB3_2 (ID1 INT, ID2 INT)
PARTITION BY RANGE (ID1)
(
PARTITION P1 VALUES LESS THAN (10),
PARTITION P2 VALUES LESS THAN (20)
) TABLESPACE USERS;
ALTER TABLE DROP_RB3_2 ADD CONSTRAINT PK_DROP_RB3_2 PRIMARY KEY (ID1) USING INDEX (CREATE INDEX PK_DROP_RB3_2 ON DROP_RB3_2 (ID1) LOCAL TABLESPACE USERS);
ALTER TABLE DROP_RB3_2 ADD CONSTRAINT UK_DROP_RB3_2 UNIQUE (ID2) USING INDEX (CREATE INDEX UK_DROP_RB3_2 ON DROP_RB3_2 (ID2) TABLESPACE USERS);
DROP TABLE DROP_RB3_2;
PURGE INDEX PK_DROP_RB3_2;
PURGE INDEX UK_DROP_RB3_2;

CREATE TABLESPACE TBLSPC DATAFILE 'TBLSPC_DF1' SIZE 32M;
DROP TABLE IF EXISTS DROP_RB4_1;
CREATE TABLE DROP_RB4_1 (ID1 INT, ID2 INT) TABLESPACE USERS;
ALTER TABLE DROP_RB4_1 ADD CONSTRAINT PK_DROP_RB4_1 PRIMARY KEY (ID1) USING INDEX (CREATE INDEX PK_DROP_RB4_1 ON DROP_RB4_1 (ID1) TABLESPACE TBLSPC);
DROP TABLE DROP_RB4_1;
PURGE TABLESPACE TBLSPC;
PURGE TABLE DROP_RB4_1;

DROP TABLE IF EXISTS DROP_RB4_2;
CREATE TABLE DROP_RB4_2 (ID1 INT, ID2 INT) TABLESPACE USERS;
ALTER TABLE DROP_RB4_2 ADD CONSTRAINT UK_DROP_RB4_2 UNIQUE (ID2) USING INDEX (CREATE INDEX UK_DROP_RB4_2 ON DROP_RB4_2 (ID2) TABLESPACE TBLSPC);
DROP TABLE DROP_RB4_2;
PURGE TABLESPACE TBLSPC;
PURGE TABLE DROP_RB4_2;

DROP TABLE IF EXISTS DROP_RB4_3;
CREATE TABLE DROP_RB4_3 (ID1 INT, ID2 INT) TABLESPACE USERS;
CREATE UNIQUE INDEX UK_DROP_RB4_3 ON DROP_RB4_3 (ID2) TABLESPACE TBLSPC;
DROP TABLE DROP_RB4_3;
PURGE TABLESPACE TBLSPC;
PURGE TABLE DROP_RB4_3;

DROP TABLE IF EXISTS TRUNCATE_RB3_1;
CREATE TABLE TRUNCATE_RB3_1 (ID INT)
PARTITION BY RANGE (ID)
(
PARTITION P1 VALUES LESS THAN (20),
PARTITION P2 VALUES LESS THAN (MAXVALUE)
) TABLESPACE USERS;
CREATE INDEX IDX_TRUNCATE_RB3_1 ON TRUNCATE_RB3_1 (ID);

INSERT INTO TRUNCATE_RB3_1 VALUES (10);
INSERT INTO TRUNCATE_RB3_1 VALUES (20);

ALTER TABLE TRUNCATE_RB3_1 TRUNCATE PARTITION P1;
TRUNCATE TABLE TRUNCATE_RB3_1;

INSERT INTO TRUNCATE_RB3_1 VALUES (11);
INSERT INTO TRUNCATE_RB3_1 VALUES (21);
FLASHBACK TABLE TRUNCATE_RB3_1 TO BEFORE TRUNCATE FORCE;

INSERT INTO TRUNCATE_RB3_1 VALUES (12);
INSERT INTO TRUNCATE_RB3_1 VALUES (22);
FLASHBACK TABLE TRUNCATE_RB3_1 PARTITION P1 TO BEFORE TRUNCATE FORCE;

DROP TABLE TRUNCATE_RB3_1;

--PURGE SYNTAX TEST
PURGE TABLE RB_PURGE1;
PURGE TABLE USER1.RB_PURGE1;
PURGE TABLE USER1.'RB_PURGE1';
PURGE TABLE 'RB_PURGE1';

PURGE INDEX RB_PURGE2;
PURGE INDEX USER2.RB_PURGE2;
PURGE INDEX USER2.'RB_PURGE2';
PURGE INDEX 'RB_PURGE2';

PURGE PARTITION RB_PURGE3;
PURGE PARTITION USER3.RB_PURGE3;
PURGE PARTITION USER3.'RB_PURGE3';
PURGE PARTITION 'RB_PURGE3';

PURGE TABLE RB_PURGE4 PARTITION P1;
PURGE TABLE RB_PURGE4 PARTITION USER4.P1;
PURGE TABLE USER4.RB_PURGE4 PARTITION P1;
PURGE TABLE USER4.RB_PURGE4 PARTITION USER4.P1;
PURGE TABLE RB_PURGE4 PARTITION 'P1';
PURGE TABLE RB_PURGE4 PARTITION USER4.'P1';

PURGE TABLESPACE USERS;

create user fanmingke identified by Fanmk1234;
grant dba to fanmingke;

connect fanmingke/Fanmk1234@127.0.0.1:1611
create table test_rb(c1 int);
drop table test_rb;
flashback table test_rb to before drop;
alter system set recyclebin=false;
drop table test_rb;
flashback table test_rb to before drop;
alter system set recyclebin=true;
conn sys/Huawei@123@127.0.0.1:1611
drop user fanmingke;

ALTER SYSTEM SET RECYCLEBIN = TRUE;
DROP TABLE IF EXISTS RB_TRUNCATE_PART_LOB;
CREATE TABLE RB_TRUNCATE_PART_LOB(ID INT, NAME VARCHAR(20), C_LOB CLOB) PARTITION BY RANGE(ID)
(
PARTITION P1 VALUES LESS THAN(50) TABLESPACE USERS,
PARTITION P2 VALUES LESS THAN(100) TABLESPACE USERS
)TABLESPACE USERS;

INSERT INTO RB_TRUNCATE_PART_LOB VALUES(10, 'AAAAA', LPAD('BBB', 8000, 'BBB'));
COMMIT;
TRUNCATE TABLE RB_TRUNCATE_PART_LOB;
DROP TABLE RB_TRUNCATE_PART_LOB;

DROP TABLE IF EXISTS Cantian.PURGE_TEST;
DROP USER IF EXISTS Cantian;
CREATE USER Cantian IDENTIFIED BY Cantian_234;
CREATE TABLE Cantian.PURGE_TEST(ID INT, NAME VARCHAR(20));
INSERT INTO Cantian.PURGE_TEST VALUES(10, 'AAAAA');
COMMIT;
DROP TABLE Cantian.PURGE_TEST;

CREATE OR REPLACE PROCEDURE PURGE_TABLE(TABLE_NAME VARCHAR)
AS
RECYCLE_NAME VARCHAR(200);
BEGIN
SELECT NAME INTO RECYCLE_NAME FROM RECYCLEBIN$ WHERE ORG_NAME = TABLE_NAME;
EXECUTE IMMEDIATE 'PURGE TABLE '||CHAR(39)||RECYCLE_NAME||CHAR(39);
END;
/

CALL PURGE_TABLE('PURGE_TEST');
DROP PROCEDURE PURGE_TABLE;
DROP TABLE IF EXISTS Cantian.PURGE_TEST;
DROP USER Cantian;

drop user if exists jdd;
create user jdd identified by Jdd12345678;
grant dba to jdd;

CREATE OR REPLACE FUNCTION jdd.ztest_f1() RETURN INT AS
BEGIN
    RETURN 100;
END ztest_f1;
/

drop table if exists jdd.test_purge;
create table jdd.test_purge(a int default jdd.ztest_f1(), b int);
insert into jdd.test_purge(b) values(1),(2),(3);
commit;

PURGE RECYCLEBIN;
alter system set recyclebin = true;
drop table if exists jdd.test_purge;
SELECT count(*)from sys.SYS_RECYCLEBIN where ORG_NAME = upper('test_purge');

select * from jdd.test_purge;
drop FUNCTION jdd.ztest_f1;
flashback table jdd.test_purge to before drop; -- no error
select * from jdd.test_purge; -- error is normal
desc jdd.test_purge; -- error is normal
drop table jdd.test_purge; -- error is normal
CREATE OR REPLACE FUNCTION jdd.ztest_f1() RETURN INT AS
BEGIN
    RETURN 100;
END ztest_f1;
/
select * from jdd.test_purge; -- ok

drop FUNCTION jdd.ztest_f1;
drop table jdd.test_purge;
PURGE RECYCLEBIN;
drop user jdd;
