CONN / AS SYSDBA
DROP USER IF EXISTS EXEC_IMME_USER1 CASCADE;
CREATE USER EXEC_IMME_USER1 IDENTIFIED BY Cantian_234;
GRANT CREATE PROCEDURE TO EXEC_IMME_USER1;
GRANT CONNECT TO EXEC_IMME_USER1;
SET serveroutput ON
CREATE OR REPLACE PROCEDURE P1(V_NUM IN OUT INT) IS
  V_NUM_1 INT;
  V_NUM_2 INT;
BEGIN
  V_NUM_1 := V_NUM - 1;
  V_NUM_2 := V_NUM - 2;
  IF V_NUM < 3 THEN
    V_NUM := 1;
  ELSE
    P1(V_NUM_1);
    P1(V_NUM_2);
    V_NUM := V_NUM_1 + V_NUM_2;
  END IF;
END;
/
DECLARE
  V_NUM INT;
BEGIN
    V_NUM := 30;
    P1(V_NUM);
    DBE_OUTPUT.PRINT_LINE(V_NUM);
END;
/

CONN EXEC_IMME_USER1/Cantian_234@127.0.0.1:1611
CREATE OR REPLACE PROCEDURE P1(C1 INT) IS
BEGIN
 EXECUTE IMMEDIATE 'DROP PROCEDURE SYS.P1';
END;
/
CALL P1(1);
CREATE OR REPLACE PROCEDURE P2(C1 INT) IS
BEGIN
 EXECUTE IMMEDIATE 'DROP TABLE SYS.T1';
END;
/
CALL P2(1);

CONN / AS SYSDBA
DROP USER IF EXISTS EXEC_IMME_USER1 CASCADE;
DROP PROCEDURE P1;

CONN / AS SYSDBA
CREATE OR REPLACE PACKAGE DTS202104270I3BD5P1O00_PKG IS
 FUNCTION F1(V1 INT) RETURN INT;
 PROCEDURE P1(V1 INT);
END;
/
--DTS202104270I3BD5P1O00
DROP USER IF EXISTS DTS202104270I3BD5P1O00_USER1 CASCADE;
CREATE USER DTS202104270I3BD5P1O00_USER1 IDENTIFIED BY Cantian_234;
GRANT DBA TO DTS202104270I3BD5P1O00_USER1;
CONN DTS202104270I3BD5P1O00_USER1/Cantian_234@127.0.0.1:1611
SELECT USER,PACKAGE_NAME FROM DV_PL_MANAGER WHERE PACKAGE_NAME='DTS202104270I3BD5P1O00_PKG';

CONN / AS SYSDBA
DROP USER DTS202104270I3BD5P1O00_USER1 CASCADE;
DROP PACKAGE DTS202104270I3BD5P1O00_PKG;


--DTS202104300J274AP1100 START
CONN / AS SYSDBA
DROP USER IF EXISTS DTS202104300J274AP1100_U1 CASCADE;
CREATE USER DTS202104300J274AP1100_U1 IDENTIFIED BY Cantian_234;
GRANT CONNECT TO DTS202104300J274AP1100_U1;

CONN DTS202104300J274AP1100_U1/Cantian_234@127.0.0.1:1611
GRANT EXECUTE ON DTS202104300J274AP1100_U2.PROC1 TO DTS202104300J274AP1100_U1;
GRANT EXECUTE ON DTS202104300J274AP1100_U2.FUNC1 TO DTS202104300J274AP1100_U1;
GRANT REFERENCES ON DTS202104300J274AP1100_U2.T1 TO DTS202104300J274AP1100_U1;
GRANT INDEX ON DTS202104300J274AP1100_U2.T1 TO DTS202104300J274AP1100_U1;
GRANT UPDATE ON DTS202104300J274AP1100_U2.T1 TO DTS202104300J274AP1100_U1;
GRANT DELETE ON DTS202104300J274AP1100_U2.T1 TO DTS202104300J274AP1100_U1;
REVOKE EXECUTE ON DTS202104300J274AP1100_U2.PROC1 FROM DTS202104300J274AP1100_U1;
REVOKE EXECUTE ON DTS202104300J274AP1100_U2.FUNC1 FROM DTS202104300J274AP1100_U1;
REVOKE REFERENCES ON DTS202104300J274AP1100_U2.T1 FROM DTS202104300J274AP1100_U1;
REVOKE INDEX ON DTS202104300J274AP1100_U2.T1 FROM DTS202104300J274AP1100_U1;
REVOKE UPDATE ON DTS202104300J274AP1100_U2.T1 FROM DTS202104300J274AP1100_U1;
REVOKE DELETE ON DTS202104300J274AP1100_U2.T1 FROM DTS202104300J274AP1100_U1;
CREATE VIEW DTS202104300J274AP1100_U2.V1 AS SELECT * FROM DTS202104300J274AP1100_U2.T1;
CREATE OR REPLACE TRIGGER DTS202104300J274AP1100_U2.TRIGGER1 AFTER INSERT ON DTS202104300J274AP1100_U2.T1
BEGIN
 NULL;
END;
/
CREATE OR REPLACE SYNONYM DTS202104300J274AP1100_SYN1 FOR DTS202104300J274AP1100_U2.T1;

CONN / AS SYSDBA
DROP USER IF EXISTS DTS202104300J274AP1100_U1 CASCADE;
--DTS202104300J274AP1100 END

--DTS202105210G3G7PP1F00 START skip check priv dml in plsql
DROP TABLE IF EXISTS DTS202105210G3G7PP1F00_T1;
CREATE TABLE DTS202105210G3G7PP1F00_T1(C1 INT);
CREATE OR REPLACE TRIGGER DTS202105210G3G7PP1F00_TRIGGER1 AFTER INSERT ON DTS202105210G3G7PP1F00_T1
BEGIN
 NULL;
END;
/
CREATE OR REPLACE PROCEDURE DTS202105210G3G7PP1F00_PROC1(V1 INT) IS
BEGIN
 EXECUTE IMMEDIATE 'DROP TABLE IF EXISTS DTS202105210G3G7PP1F00_T1';
 EXECUTE IMMEDIATE 'CREATE TABLE DTS202105210G3G7PP1F00_T1(C1 INT)';
 INSERT INTO DTS202105210G3G7PP1F00_T1 VALUES(1);
 COMMIT;
END;
/
CALL DTS202105210G3G7PP1F00_PROC1(1);
SELECT * FROM DTS202105210G3G7PP1F00_T1;
DROP TABLE IF EXISTS DTS202105210G3G7PP1F00_T1;
DROP PROCEDURE IF EXISTS DTS202105210G3G7PP1F00_PROC1;
--DTS202105210G3G7PP1F00 END

--DTS2021052305VX31P1L00 START plsql objects cannot rely on gtt. but need add gtt into knl_list
CONN / AS SYSDBA
DROP TABLE IF EXISTS DTS2021052305VX31P1L00_GT1;
DROP TABLE IF EXISTS DTS2021052305VX31P1L00_T1;
CREATE GLOBAL TEMPORARY TABLE DTS2021052305VX31P1L00_GT1(c1 int);
CREATE TABLE DTS2021052305VX31P1L00_T1(c1 int);
DECLARE
  TYPE1 DTS2021052305VX31P1L00_GT1%ROWTYPE;
  TYPE2 DTS2021052305VX31P1L00_GT1.C1%TYPE;
BEGIN
 NULL;
END;
/
DECLARE
  TYPE1 DTS2021052305VX31P1L00_T1%ROWTYPE;
  TYPE2 DTS2021052305VX31P1L00_T1.C1%TYPE;
BEGIN
 NULL;
END;
/
SELECT SQL_TEXT FROM DV_ANONYMOUS WHERE SQL_TEXT LIKE '%DTS2021052305VX31P1L00%' ORDER BY SQL_TEXT;

CREATE OR REPLACE PROCEDURE DTS2021052305VX31P1L00_PROC1(V1 INT) IS
  TYPE1 DTS2021052305VX31P1L00_GT1%ROWTYPE;
  TYPE2 DTS2021052305VX31P1L00_GT1.C1%TYPE;
  TYPE3 DTS2021052305VX31P1L00_T1%ROWTYPE;
BEGIN
  NULL;
END;
/
SELECT NAME, REFERENCED_NAME FROM MY_DEPENDENCIES WHERE NAME='DTS2021052305VX31P1L00_PROC1';
CALL DTS2021052305VX31P1L00_PROC1(1);
SELECT SQL_TEXT FROM DV_ANONYMOUS WHERE SQL_TEXT LIKE '%DTS2021052305VX31P1L00%' ORDER BY SQL_TEXT;
DROP TABLE IF EXISTS DTS2021052305VX31P1L00_GT1;
DROP TABLE IF EXISTS DTS2021052305VX31P1L00_T1;
DROP PROCEDURE IF EXISTS DTS2021052305VX31P1L00_PROC1;
--DTS2021052305VX31P1L00 END

--DTS2021052506HJFDP1G00 START
DROP USER IF EXISTS DTS2021052506HJFDP1G00_U1 CASCADE;
DROP USER IF EXISTS DTS2021052506HJFDP1G00_U2 CASCADE;
CREATE USER DTS2021052506HJFDP1G00_U1 IDENTIFIED BY Cantian_234;
CREATE USER DTS2021052506HJFDP1G00_U2 IDENTIFIED BY Cantian_234;
GRANT CONNECT TO DTS2021052506HJFDP1G00_U1;
GRANT CREATE TABLE TO DTS2021052506HJFDP1G00_U1;
GRANT CREATE PROCEDURE TO DTS2021052506HJFDP1G00_U1;
GRANT CREATE TRIGGER TO DTS2021052506HJFDP1G00_U1;
GRANT INHERIT PRIVILEGES ON USER SYS TO PUBLIC;

CREATE TABLE DTS2021052506HJFDP1G00_U2.PT1(C1 INT);
CREATE TABLE DTS2021052506HJFDP1G00_U2.TT1(C1 INT);
CREATE OR REPLACE PROCEDURE DTS2021052506HJFDP1G00_U2.P1(V1 INT) IS
BEGIN
 NULL;
END;
/

CONN DTS2021052506HJFDP1G00_U1/Cantian_234@127.0.0.1:1611
CREATE TABLE PT1(C1 INT);
CREATE OR REPLACE PROCEDURE P1(V1 INT) IS
BEGIN
 NULL;
END;
/

CREATE OR REPLACE PROCEDURE TEST_P1(V1 INT) IS --Succeed
BEGIN
 INSERT INTO DTS2021052506HJFDP1G00_U1.PT1 VALUES(1);
END;
/

CREATE OR REPLACE PROCEDURE TEST_P2(V1 INT) IS --PLC-00843 The table or view DTS2021052506HJFDP1G00_U1.PT2 does not exist.
BEGIN
 INSERT INTO DTS2021052506HJFDP1G00_U1.PT2 VALUES(1);
END;
/

CREATE OR REPLACE PROCEDURE TEST_P3(V1 INT) IS --PLC-01001 Permissions were insufficient
BEGIN
 INSERT INTO DTS2021052506HJFDP1G00_U2.PT1 VALUES(1);
END;
/

CREATE OR REPLACE PROCEDURE TEST_P4(V1 INT) IS --PLC-01001 Permissions were insufficient
BEGIN
 INSERT INTO DTS2021052506HJFDP1G00_U2.PT2 VALUES(1);
END;
/

CREATE OR REPLACE PROCEDURE TEST_P5(V1 INT) IS --Succeed
BEGIN
 DTS2021052506HJFDP1G00_U1.P1(V1);
END;
/

CREATE OR REPLACE PROCEDURE TEST_P6(V1 INT) IS --PLC-00828 procedure DTS2021052506HJFDP1G00_U1.P2 does not exist
BEGIN
 DTS2021052506HJFDP1G00_U1.P2(V1);
END;
/

CREATE OR REPLACE PROCEDURE TEST_P7(V1 INT) IS --PLC-01001 Permissions were insufficient
BEGIN
 DTS2021052506HJFDP1G00_U2.P1(V1);
END;
/

CREATE OR REPLACE PROCEDURE TEST_P8(V1 INT) IS --PLC-01001 Permissions were insufficient
BEGIN
 DTS2021052506HJFDP1G00_U2.P2(V1);
END;
/

CALL TEST_P1(1); --successfully
CALL TEST_P2(2); --PLC-00843 The table or view DTS2021052506HJFDP1G00_U1.PT2 does not exist
CALL TEST_P3(3); --PLC-01001 Permissions were insufficient
CALL TEST_P4(4); --PLC-01001 Permissions were insufficient
CALL TEST_P5(5); --successfully
CALL TEST_P6(6); --PLC-00828 procedure DTS2021052506HJFDP1G00_U1.P2 does not exist
CALL TEST_P7(7); --PLC-01001 Permissions were insufficient
CALL TEST_P8(8); --PLC-01001 Permissions were insufficient

CREATE TABLE T1(C1 INT);
CREATE TABLE TT1(C1 INT);
CREATE TABLE T2(C1 INT);
CREATE TABLE T3(C1 INT);
CREATE TABLE T4(C1 INT);

CREATE OR REPLACE TRIGGER TEST_T1 AFTER INSERT ON T1 --Succeed.
BEGIN
 INSERT INTO DTS2021052506HJFDP1G00_U1.TT1 VALUES(0);
END; 
/

CREATE OR REPLACE TRIGGER TEST_T2 AFTER INSERT ON T2 --PLC-00843 The table or view DTS2021052506HJFDP1G00_U1.TT2 does not exist
BEGIN
 INSERT INTO DTS2021052506HJFDP1G00_U1.TT2 VALUES(1);
END; 
/

CREATE OR REPLACE TRIGGER TEST_T3 AFTER INSERT ON T3 --PLC-01001 Permissions were insufficient
BEGIN
 INSERT INTO DTS2021052506HJFDP1G00_U2.TT1 VALUES(0);
END; 
/

CREATE OR REPLACE TRIGGER TEST_T4 AFTER INSERT ON T4 --PLC-01001 Permissions were insufficient
BEGIN
 INSERT INTO DTS2021052506HJFDP1G00_U2.TT2 VALUES(1);
END; 
/

INSERT INTO T1 VALUES(1); --1 rows affected
INSERT INTO T2 VALUES(2); --PLC-00843 The table or view DTS2021052506HJFDP1G00_U1.TT2 does not exist
INSERT INTO T3 VALUES(3); --PLC-01001 Permissions were insufficient
INSERT INTO T4 VALUES(4); --PLC-01001 Permissions were insufficient
CONN / AS SYSDBA
CALL DTS2021052506HJFDP1G00_U1.TEST_P1(1); --Succeed.
CALL DTS2021052506HJFDP1G00_U1.TEST_P2(2); --PLC-00843 The table or view DTS2021052506HJFDP1G00_U1.PT2
CALL DTS2021052506HJFDP1G00_U1.TEST_P3(3); --PLC-01001 Permissions were insufficient
CALL DTS2021052506HJFDP1G00_U1.TEST_P4(4); --PLC-00843 The table or view DTS2021052506HJFDP1G00_U2.PT2 does not exist
CALL DTS2021052506HJFDP1G00_U1.TEST_P5(5); --Succeed.
CALL DTS2021052506HJFDP1G00_U1.TEST_P6(6); --PLC-00828 procedure DTS2021052506HJFDP1G00_U1.P2 does not exist
CALL DTS2021052506HJFDP1G00_U1.TEST_P7(7); --PLC-01001 Permissions were insufficient
CALL DTS2021052506HJFDP1G00_U1.TEST_P8(8); --PLC-01001 Permissions were insufficient
INSERT INTO DTS2021052506HJFDP1G00_U1.T1 VALUES(1); --Succeed.
INSERT INTO DTS2021052506HJFDP1G00_U1.T2 VALUES(2); --PLC-00843 The table or view DTS2021052506HJFDP1G00_U1.TT2 does not exist
INSERT INTO DTS2021052506HJFDP1G00_U1.T3 VALUES(3); --PLC-01001 Permissions were insufficient
INSERT INTO DTS2021052506HJFDP1G00_U1.T4 VALUES(4); --PLC-00843 The table or view DTS2021052506HJFDP1G00_U2.TT2 does not exist
DROP USER IF EXISTS DTS2021052506HJFDP1G00_U1 CASCADE;
DROP USER IF EXISTS DTS2021052506HJFDP1G00_U2 CASCADE;
--2
DROP USER IF EXISTS DTS2021052506HJFDP1G00_U3 CASCADE;
CREATE USER DTS2021052506HJFDP1G00_U3 IDENTIFIED BY Cantian_234;
GRANT CREATE SESSION TO DTS2021052506HJFDP1G00_U3;
GRANT CREATE TRIGGER TO DTS2021052506HJFDP1G00_U3;
GRANT CREATE TABLE TO DTS2021052506HJFDP1G00_U3;

CONN DTS2021052506HJFDP1G00_U3/Cantian_234@127.0.0.1:1611
CREATE TABLE TEST(A INT,B TEXT);
CREATE OR REPLACE TRIGGER TEST_TRIG AFTER INSERT ON TEST
BEGIN
 INSERT INTO SYS.DTS2021052506HJFDP1G00_T1 VALUES(1,2);
END; 
/

CONN / AS SYSDBA
DROP TABLE IF EXISTS DTS2021052506HJFDP1G00_T1;
CREATE TABLE DTS2021052506HJFDP1G00_T1(A INT,B TEXT);
INSERT INTO DTS2021052506HJFDP1G00_U3.TEST VALUES(1,2);
SELECT * FROM DTS2021052506HJFDP1G00_T1;
DROP USER IF EXISTS DTS2021052506HJFDP1G00_U3 CASCADE;
--DTS2021052506HJFDP1G00 END

--DTS202106030JHF9OP0F00 START
--1
CONN / AS SYSDBA
DROP USER IF EXISTS DTS202106030JHF9OP0F00_U1 CASCADE;
CREATE USER DTS202106030JHF9OP0F00_U1 IDENTIFIED BY Cantian_234;
GRANT DBA TO DTS202106030JHF9OP0F00_U1;
CONN DTS202106030JHF9OP0F00_U1/Cantian_234@127.0.0.1:1611
CREATE TABLE T1(C1 INT);
CREATE TABLE T2(C1 INT);
INSERT INTO T1 VALUES(1);
INSERT INTO T2 VALUES(1);
COMMIT;
CREATE OR REPLACE PROCEDURE D(V1 INT) IS
BEGIN
 NULL;
END;
/
SELECT 1,(SELECT D.C1 FROM T1) FROM T2 D;

--2
CREATE OR REPLACE FUNCTION DTS202106030JHF9OP0F00_F1(V1 INT) RETURN INT IS
BEGIN
 RETURN V1;
END;
/
SELECT DTS202106030JHF9OP0F00_F1(1) FROM SYS_DUMMY;
SELECT DTS202106030JHF9OP0F00_F1.DTS202106030JHF9OP0F00_F1(1) FROM SYS_DUMMY;

CREATE OR REPLACE PACKAGE "PUBLIC".DTS202106030JHF9OP0F00_F1 IS
 FUNCTION DTS202106030JHF9OP0F00_F1(V1 INT) RETURN INT;
END;
/

CREATE OR REPLACE PACKAGE BODY "PUBLIC".DTS202106030JHF9OP0F00_F1 IS
 FUNCTION DTS202106030JHF9OP0F00_F1(V1 INT) RETURN INT IS
 BEGIN
  RETURN V1 + 1;
 END;
END;
/
SELECT DTS202106030JHF9OP0F00_F1(1) FROM SYS_DUMMY;
SELECT DTS202106030JHF9OP0F00_F1.DTS202106030JHF9OP0F00_F1(1) FROM SYS_DUMMY;

--3
CREATE OR REPLACE SYNONYM DTS202106030JHF9OP0F00_LSYN FOR DTS202106030JHF9OP0F00_F1;
DROP USER IF EXISTS DTS202106030JHF9OP0F00_LSYN CASCADE;
CREATE USER DTS202106030JHF9OP0F00_LSYN IDENTIFIED BY Cantian_234;
CREATE OR REPLACE FUNCTION DTS202106030JHF9OP0F00_LSYN.F1(V1 INT) RETURN INT IS
BEGIN
 RETURN V1 * 10;
END;
/
SELECT DTS202106030JHF9OP0F00_LSYN(1) FROM SYS_DUMMY;
SELECT DTS202106030JHF9OP0F00_LSYN.F1(1) FROM SYS_DUMMY;
SELECT DTS202106030JHF9OP0F00_LSYN.F2(1) FROM SYS_DUMMY;
DROP FUNCTION DTS202106030JHF9OP0F00_F1;
SELECT DTS202106030JHF9OP0F00_LSYN(1) FROM SYS_DUMMY;
SELECT DTS202106030JHF9OP0F00_LSYN.F1(1) FROM SYS_DUMMY;
SELECT DTS202106030JHF9OP0F00_LSYN.F2(1) FROM SYS_DUMMY;

--end
CONN / AS SYSDBA
DROP USER IF EXISTS DTS202106030JHF9OP0F00_U1 CASCADE;
DROP USER IF EXISTS DTS202106030JHF9OP0F00_LSYN CASCADE;
DROP PACKAGE "PUBLIC".DTS202106030JHF9OP0F00_F1;
--DTS202106030JHF9OP0F00 END

--PLSQL_REVIEW START
DROP USER IF EXISTS PLSQL_REVIEW_U1 CASCADE;
CREATE USER PLSQL_REVIEW_U1 IDENTIFIED BY Cantian_234;
GRANT DBA TO PLSQL_REVIEW_U1;
CONN PLSQL_REVIEW_U1/Cantian_234@127.0.0.1:1611

CREATE TABLE PLSQL_REVIEW_T1(C1 INT);
CREATE OR REPLACE FUNCTION PLSQL_REVIEW_F1(C1 INT) RETURN INT IS
BEGIN
 INSERT INTO PLSQL_REVIEW_T1 VALUES(C1);
 RETURN C1;
END;
/
CREATE OR REPLACE PROCEDURE PLSQL_REVIEW_P1(C1 INT) IS
BEGIN
 INSERT INTO PLSQL_REVIEW_T1 VALUES(C1);
END;
/
CREATE OR REPLACE PUBLIC SYNONYM PLSQL_REVIEW_F1 FOR PLSQL_REVIEW_P1;

DECLARE
 A INT;
BEGIN
 A := PLSQL_REVIEW_F1(1);
 PLSQL_REVIEW_F1(2);
END;
/
DECLARE
 A INT;
BEGIN
 A := PLSQL_REVIEW_F1(3);
END;
/
BEGIN
 PLSQL_REVIEW_F1(4);
END;
/
SELECT * FROM PLSQL_REVIEW_T1;
CREATE OR REPLACE PACKAGE PKG1 IS
 PROCEDURE P1(C1 INT);
END;
/
CREATE OR REPLACE PACKAGE BODY PKG1 IS
 PROCEDURE P1(C1 INT) IS
 BEGIN
  NULL;
 END;
END;
/
BEGIN
 PLSQL_REVIEW_U1.PKG1.P1(1);
 PLSQL_REVIEW_U1.PKG1.P1(1);
END;
/

CREATE OR REPLACE TYPE ATTR_TYPE FORCE AS OBJECT(MONTH INT,DAY INT);
/
create or replace procedure p2(c1 int) is
 a ATTR_TYPE;
 b ATTR_TYPE;
begin
 NULL;
end;
/
call p2(1);

create or replace function f3(c1 int) return int is
begin
 if c1 > 1 then
  return f3(c1 - 1) + f3(c1 - 2);
 else
  return 1;
 end if;
end;
/
select f3(0) from sys_dummy;
select f3(1) from sys_dummy;
select f3(2) from sys_dummy;
select f3(4) from sys_dummy;

CONN / AS SYSDBA
DROP PUBLIC SYNONYM IF EXISTS PLSQL_REVIEW_F1;
DROP USER IF EXISTS PLSQL_REVIEW_U1 CASCADE;
--PLSQL_REVIEW END

--DTS2021062805RK0WP0G00 START
BEGIN
 EXECUTE IMMEDIATE '
 BEGIN
  :x := 1;
 END;
 ';
END;
/
--DTS2021062805RK0WP0G00 END

--pl_free_broken_entry START
CONN / AS SYSDBA
DROP USER IF EXISTS PL_FREE_ENTRY_U1 CASCADE;
CREATE USER PL_FREE_ENTRY_U1 IDENTIFIED BY Cantian_234;
GRANT DBA TO PL_FREE_ENTRY_U1;
CONN PL_FREE_ENTRY_U1/Cantian_234@127.0.0.1:1611
CREATE TABLE T1(C1 INT);
CREATE OR REPLACE TRIGGER TRIGGER1 AFTER INSERT ON T1 IS
BEGIN
 NULL;
END;
/
CREATE OR REPLACE TRIGGER TRIGGER2 AFTER INSERT ON T1 IS
BEGIN
 NULL;
END;
/
CREATE OR REPLACE TRIGGER TRIGGER3 AFTER INSERT ON T1 IS
BEGIN
 NULL;
END;
/
CREATE OR REPLACE TRIGGER TRIGGER4 AFTER INSERT ON T1 IS
BEGIN
 NULL;
END;
/
CREATE OR REPLACE TRIGGER TRIGGER5 AFTER INSERT ON T1 IS
BEGIN
 NULL;
END;
/
CREATE OR REPLACE TRIGGER TRIGGER6 AFTER INSERT ON T1 IS
BEGIN
 NULL;
END;
/
CREATE OR REPLACE TRIGGER TRIGGER7 AFTER INSERT ON T1 IS
BEGIN
 NULL;
END;
/
CREATE OR REPLACE TRIGGER TRIGGER8 AFTER INSERT ON T1 IS
BEGIN
 NULL;
END;
/
CREATE OR REPLACE TRIGGER TRIGGER9 AFTER INSERT ON T1 IS
BEGIN
 NULL;
END;
/
CONN / AS SYSDBA
DROP USER PL_FREE_ENTRY_U1 CASCADE;
--pl_free_broken_entry END

--pl_find_entry_with_public START
CONN / AS SYSDBA
DROP USER IF EXISTS PL_FIND_ENTRY_WITH_PUBLIC_U1 CASCADE;
DROP USER IF EXISTS PL_FIND_ENTRY_WITH_PUBLIC_U2 CASCADE;
CREATE USER PL_FIND_ENTRY_WITH_PUBLIC_U1 IDENTIFIED BY Cantian_234;
CREATE USER PL_FIND_ENTRY_WITH_PUBLIC_U2 IDENTIFIED BY Cantian_234;
CREATE OR REPLACE PROCEDURE PL_FIND_ENTRY_WITH_PUBLIC_U1.PROC1(V1 INT) IS
BEGIN
 NULL;
END;
/
CREATE OR REPLACE PUBLIC SYNONYM PL_FIND_ENTRY_WITH_PUBLIC_PROC1 FOR PL_FIND_ENTRY_WITH_PUBLIC_U1.PROC1;
GRANT EXECUTE ON PL_FIND_ENTRY_WITH_PUBLIC_PROC1 TO PL_FIND_ENTRY_WITH_PUBLIC_U2;
REVOKE EXECUTE ON PL_FIND_ENTRY_WITH_PUBLIC_PROC1 FROM PL_FIND_ENTRY_WITH_PUBLIC_U2;
DROP USER PL_FIND_ENTRY_WITH_PUBLIC_U1 CASCADE;
DROP USER PL_FIND_ENTRY_WITH_PUBLIC_U2 CASCADE;
DROP PUBLIC SYNONYM PL_FIND_ENTRY_WITH_PUBLIC_PROC1;
--pl_find_entry_with_public END

--plc keywords START
DECLARE
 I INT;
BEGIN
 I := 0;
 ELSIF I > 1 THEN
  I := 1;
 END IF;
END;
/

DECLARE
 I INT;
BEGIN
 FORALL I IN 0..100
  I := 1;
END;
/

DECLARE
 I INT;
BEGIN
 FORALL I IN 0..100
  I := 1;
END;
/

BEGIN
 WITH A AS SELECT * FROM SYS_DUMMY;
END;
/
--plc keywords END