--TEST SYSTEM VIEW

-- TEST OTHER USER CANNOT DROP THE VIEW CREATE BY SYS 
--DROP USER IF EXISTS VIEW_TEST_USER;
--CREATE USER VIEW_TEST_USER IDENTIFIED BY 'ABCD@123@2';
--grant create session to VIEW_TEST_USER;
--conn VIEW_TEST_USER/ABCD@123@2@127.0.0.1:1611
--DROP VIEW DBA_TAB_MODIFICATIONS;
--DROP VIEW USER_TAB_MODIFICATIONS;
--SELECT COUNT(*) FROM DBA_TAB_MODIFICATIONS;
--SELECT COUNT(*) FROM USER_TAB_MODIFICATIONS;

--conn sys/Huawei@123@127.0.0.1:1611
--DROP USER IF EXISTS VIEW_TEST_USER;

--DBA_TAB_PARTITIONS & USER_TAB_PARTITIONS
drop table if exists TEST_TAB_PART1;
CREATE TABLE TEST_TAB_PART1 (ID int, TIME date) PARTITION BY RANGE (TIME) 
  (PARTITION P1中 VALUES LESS THAN (TO_DATE('2004-07-01', 'YYYY-MM-DD')), 
  PARTITION P2过 VALUES LESS THAN (TO_DATE('2005-01-01', 'YYYY-MM-DD')), 
  PARTITION P3 VALUES LESS THAN (TO_DATE('2005-07-01', 'YYYY-MM-DD')),
  PARTITION P4 VALUES LESS THAN (MAXVALUE));
select * from DBA_TAB_PARTITIONS WHERE TABLE_OWNER='SYS' AND TABLE_NAME='TEST_TAB_PART1' ORDER BY PARTITION_NAME;
select * from USER_TAB_PARTITIONS WHERE TABLE_NAME='TEST_TAB_PART1' ORDER BY PARTITION_NAME;

--drop by to validate user_tab_modifications/dba_tab_modifications
SELECT COUNT(PARTITION_NAME) FROM DBA_TAB_MODIFICATIONS WHERE TABLE_NAME= 'TEST_TAB_PART1' AND TABLE_OWNER = 'SYS';
SELECT COUNT(PARTITION_NAME), COUNT(SUBPARTITION_NAME), COUNT(INSERTS), COUNT(UPDATES), COUNT(DELETES), COUNT(TIMESTAMP), COUNT(DROP_SEGMENTS)
FROM DBA_TAB_MODIFICATIONS WHERE TABLE_NAME= 'TEST_TAB_PART1' AND PARTITION_NAME = 'P3' AND TABLE_OWNER = 'SYS';
SELECT COUNT(PARTITION_NAME) FROM USER_TAB_MODIFICATIONS WHERE TABLE_NAME= 'TEST_TAB_PART1';
SELECT COUNT(PARTITION_NAME), COUNT(SUBPARTITION_NAME), COUNT(INSERTS), COUNT(UPDATES), COUNT(DELETES), COUNT(TIMESTAMP), COUNT(DROP_SEGMENTS)
FROM USER_TAB_MODIFICATIONS WHERE TABLE_NAME= 'TEST_TAB_PART1' AND PARTITION_NAME = 'P3';

drop table TEST_TAB_PART1;
select count(*) from DBA_TAB_PARTITIONS WHERE TABLE_OWNER='SYS' AND TABLE_NAME='TEST_TAB_PART1';
select count(*) from USER_TAB_PARTITIONS WHERE TABLE_NAME='TEST_TAB_PART1';


--USER_SOURCE & ALL_SOURCE
drop table if exists test_pro_t1;
drop table if exists test_pro_t2;
create table test_pro_t1(f1 int, f2 varchar2(20));
create table test_pro_t2(f1 int, f2 varchar2(20));

drop procedure if exists test_proc_src;
create or replace procedure test_proc_src(a int, b varchar2)
as
c int := 1;
d int := 2;
begin
  insert into test_pro_t1 values(a,b);
  commit;
end;
/

DROP TRIGGER IF EXISTS TRIG_BEFORE_SRC;
CREATE OR REPLACE TRIGGER TRIG_BEFORE_SRC
BEFORE INSERT OR UPDATE OF f1 OR DELETE ON test_pro_t1
BEGIN
  INSERT INTO test_pro_t2 VALUES(4, 'abc');
END;
/

SELECT * FROM USER_SOURCE WHERE NAME = 'TEST_PROC_SRC';
SELECT * FROM USER_SOURCE WHERE NAME = 'TRIG_BEFORE_SRC';
drop table if exists test_pro_t1;
drop table if exists test_pro_t2;
drop procedure if exists test_proc_src;
DROP TRIGGER IF EXISTS TRIG_BEFORE_SRC;
SELECT * FROM USER_SOURCE WHERE NAME = 'TEST_PROC_SRC';
SELECT * FROM USER_SOURCE WHERE NAME = 'TRIG_BEFORE_SRC';

--V$CONTROLFILE
SELECT STATUS, IS_RECOVERY_DEST_FILE, BLOCK_SIZE, FILE_SIZE_BLKS FROM V$CONTROLFILE WHERE NAME LIKE '%ctrl%';  --FILE_SIZE_BLKS always return zero for temporary
SELECT COUNT(*) FROM V$CONTROLFILE WHERE NAME LIKE '%ctrl%';

--statistic views
DROP TABLE IF EXISTS SV_FOOBAR;
CREATE TABLE SV_FOOBAR (col1 INTEGER NOT NULL, col2 VARCHAR(32));
CREATE INDEX IX_SVFOOBAR_01 ON SV_FOOBAR(col1);

INSERT INTO SV_FOOBAR VALUES (1, 'aaa');
INSERT INTO SV_FOOBAR VALUES (2, 'b');
INSERT INTO SV_FOOBAR VALUES (3, 'cc');
INSERT INTO SV_FOOBAR VALUES (4, 'ddd');
INSERT INTO SV_FOOBAR VALUES (5, 'eeee');
INSERT INTO SV_FOOBAR VALUES (6, 'aaa');
INSERT INTO SV_FOOBAR VALUES (7, 'bbb');
INSERT INTO SV_FOOBAR VALUES (8, 'b');
INSERT INTO SV_FOOBAR VALUES (9, 'cc');
INSERT INTO SV_FOOBAR VALUES (10, 'dddd');
INSERT INTO SV_FOOBAR VALUES (11, 'aaa');
INSERT INTO SV_FOOBAR VALUES (12, 'f'); 
INSERT INTO SV_FOOBAR VALUES (4, 'aaa');
INSERT INTO SV_FOOBAR VALUES (6, 'bb');
INSERT INTO SV_FOOBAR VALUES (7, 'ccc');
INSERT INTO SV_FOOBAR VALUES (9, 'ddd');
INSERT INTO SV_FOOBAR VALUES (12, 'ee');
INSERT INTO SV_FOOBAR VALUES (1, 'eeee');
INSERT INTO SV_FOOBAR VALUES (3, 'b');
INSERT INTO SV_FOOBAR VALUES (7, 'f');

COMMIT;

ANALYZE TABLE SV_FOOBAR COMPUTE STATISTICS;
SELECT SLEEP(3) FROM DUAL;    -- make ANALYZE write statistics data into disk

SELECT TABLE_NAME, NUM_ROWS, BLOCKS, EMPTY_BLOCKS, AVG_ROW_LEN FROM ALL_TAB_STATISTICS WHERE TABLE_NAME='SV_FOOBAR';
SELECT TABLE_NAME, NUM_ROWS, BLOCKS, EMPTY_BLOCKS, AVG_ROW_LEN FROM USER_TAB_STATISTICS WHERE TABLE_NAME='SV_FOOBAR';

SELECT INDEX_NAME, TABLE_NAME, BLEVEL, LEAF_BLOCKS, DISTINCT_KEYS, 
       ROUND(AVG_LEAF_BLOCKS_PER_KEY, 2), ROUND(AVG_DATA_BLOCKS_PER_KEY, 2), NUM_ROWS 
FROM ALL_INDEXES WHERE INDEX_NAME='IX_SVFOOBAR_01' AND TABLE_NAME='SV_FOOBAR';
SELECT INDEX_NAME, TABLE_NAME, BLEVEL, LEAF_BLOCKS, DISTINCT_KEYS, 
       ROUND(AVG_LEAF_BLOCKS_PER_KEY, 2), ROUND(AVG_DATA_BLOCKS_PER_KEY, 2), NUM_ROWS 
FROM USER_INDEXES WHERE INDEX_NAME='IX_SVFOOBAR_01' AND TABLE_NAME='SV_FOOBAR';

SELECT INDEX_NAME, TABLE_NAME, OBJECT_TYPE, BLEVEL, LEAF_BLOCKS, DISTINCT_KEYS, 
       ROUND(AVG_LEAF_BLOCKS_PER_KEY, 2), ROUND(AVG_DATA_BLOCKS_PER_KEY, 2), NUM_ROWS 
FROM ALL_IND_STATISTICS WHERE INDEX_NAME='IX_SVFOOBAR_01' AND TABLE_NAME='SV_FOOBAR';
SELECT INDEX_NAME, TABLE_NAME, OBJECT_TYPE, BLEVEL, LEAF_BLOCKS, DISTINCT_KEYS, 
       ROUND(AVG_LEAF_BLOCKS_PER_KEY, 2), ROUND(AVG_DATA_BLOCKS_PER_KEY, 2), NUM_ROWS 
FROM USER_IND_STATISTICS WHERE INDEX_NAME='IX_SVFOOBAR_01' AND TABLE_NAME='SV_FOOBAR';

SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH, NULLABLE, 
       NUM_DISTINCT, LOW_VALUE, HIGH_VALUE, NUM_NULLS, NUM_BUCKETS, CHAR_LENGTH, CHAR_USED, HISTOGRAM
FROM ALL_TAB_COLUMNS WHERE TABLE_NAME='SV_FOOBAR' ORDER BY COLUMN_NAME;
SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH, NULLABLE, 
       NUM_DISTINCT, LOW_VALUE, HIGH_VALUE, NUM_NULLS, NUM_BUCKETS, CHAR_LENGTH, CHAR_USED, HISTOGRAM
FROM USER_TAB_COLUMNS WHERE TABLE_NAME='SV_FOOBAR' ORDER BY COLUMN_NAME;

SELECT TABLE_NAME, COLUMN_NAME, NUM_DISTINCT, LOW_VALUE, HIGH_VALUE, ROUND(DENSITY, 2), NUM_NULLS, NUM_BUCKETS, HISTOGRAM
FROM ALL_TAB_COL_STATISTICS WHERE TABLE_NAME='SV_FOOBAR' ORDER BY COLUMN_NAME;
SELECT TABLE_NAME, COLUMN_NAME, NUM_DISTINCT, LOW_VALUE, HIGH_VALUE, ROUND(DENSITY, 2), NUM_NULLS, NUM_BUCKETS, HISTOGRAM
FROM USER_TAB_COL_STATISTICS WHERE TABLE_NAME='SV_FOOBAR' ORDER BY COLUMN_NAME;

SELECT TABLE_NAME, COLUMN_NAME, ENDPOINT_NUMBER, ENDPOINT_VALUE, ENDPOINT_ACTUAL_VALUE FROM ALL_HISTOGRAMS WHERE TABLE_NAME='SV_FOOBAR' ORDER BY COLUMN_NAME, ENDPOINT_NUMBER, ENDPOINT_VALUE;
SELECT * FROM USER_HISTOGRAMS WHERE TABLE_NAME='SV_FOOBAR' ORDER BY COLUMN_NAME, ENDPOINT_NUMBER, ENDPOINT_VALUE;

DROP INDEX IF EXISTS IX_SVFOOBAR_01 ON SV_FOOBAR;
DROP TABLE SV_FOOBAR;

DROP TABLE IF EXISTS SV_RANGE_TABLE;
CREATE TABLE SV_RANGE_TABLE(ID INT) PARTITION BY RANGE(ID)
(
 PARTITION P1 VALUES LESS THAN(10),
 PARTITION P2 VALUES LESS THAN(MAXVALUE)
);
CREATE INDEX IX_SV_RANGE_TABLE ON SV_RANGE_TABLE(ID);
INSERT INTO SV_RANGE_TABLE VALUES(1),(100);
COMMIT;
SELECT TABLE_NAME, INDEX_NAME, STATUS FROM USER_INDEXES WHERE TABLE_NAME='SV_RANGE_TABLE' AND INDEX_NAME='IX_SV_RANGE_TABLE';
SELECT TABLE_NAME, INDEX_NAME, STATUS FROM ALL_INDEXES WHERE TABLE_NAME='SV_RANGE_TABLE' AND INDEX_NAME='IX_SV_RANGE_TABLE';
SELECT TABLE_NAME, INDEX_NAME, STATUS FROM DBA_INDEXES WHERE TABLE_NAME='SV_RANGE_TABLE' AND INDEX_NAME='IX_SV_RANGE_TABLE';
ALTER TABLE SV_RANGE_TABLE TRUNCATE PARTITION P1;
SELECT TABLE_NAME, INDEX_NAME, STATUS FROM USER_INDEXES WHERE TABLE_NAME='SV_RANGE_TABLE' AND INDEX_NAME='IX_SV_RANGE_TABLE';
SELECT TABLE_NAME, INDEX_NAME, STATUS FROM ALL_INDEXES WHERE TABLE_NAME='SV_RANGE_TABLE' AND INDEX_NAME='IX_SV_RANGE_TABLE';
SELECT TABLE_NAME, INDEX_NAME, STATUS FROM DBA_INDEXES WHERE TABLE_NAME='SV_RANGE_TABLE' AND INDEX_NAME='IX_SV_RANGE_TABLE';
TRUNCATE TABLE SV_RANGE_TABLE;
SELECT TABLE_NAME, INDEX_NAME, STATUS FROM USER_INDEXES WHERE TABLE_NAME='SV_RANGE_TABLE' AND INDEX_NAME='IX_SV_RANGE_TABLE';
SELECT TABLE_NAME, INDEX_NAME, STATUS FROM ALL_INDEXES WHERE TABLE_NAME='SV_RANGE_TABLE' AND INDEX_NAME='IX_SV_RANGE_TABLE';
SELECT TABLE_NAME, INDEX_NAME, STATUS FROM DBA_INDEXES WHERE TABLE_NAME='SV_RANGE_TABLE' AND INDEX_NAME='IX_SV_RANGE_TABLE';
INSERT INTO SV_RANGE_TABLE VALUES(1),(100);
COMMIT;
ALTER TABLE SV_RANGE_TABLE DROP PARTITION P2;
SELECT TABLE_NAME, INDEX_NAME, STATUS FROM USER_INDEXES WHERE TABLE_NAME='SV_RANGE_TABLE' AND INDEX_NAME='IX_SV_RANGE_TABLE';
SELECT TABLE_NAME, INDEX_NAME, STATUS FROM ALL_INDEXES WHERE TABLE_NAME='SV_RANGE_TABLE' AND INDEX_NAME='IX_SV_RANGE_TABLE';
SELECT TABLE_NAME, INDEX_NAME, STATUS FROM DBA_INDEXES WHERE TABLE_NAME='SV_RANGE_TABLE' AND INDEX_NAME='IX_SV_RANGE_TABLE';
DROP TABLE SV_RANGE_TABLE;
DROP TABLE IF EXISTS SV_FOOBAR_PART;
CREATE TABLE SV_FOOBAR_PART(col1 INTEGER NOT NULL, col2 VARCHAR(32))
PARTITION BY RANGE(col1)
(
 PARTITION p1 values less than(10),
 PARTITION p2 values less than(MAXVALUE)
);

CREATE INDEX IX_SVFOOBAR_GBL on SV_FOOBAR_PART(col1);
CREATE INDEX IX_SVFOOBAR_LOC on SV_FOOBAR_PART(col2) LOCAL;

INSERT INTO SV_FOOBAR_PART VALUES (1, 'aaa');
INSERT INTO SV_FOOBAR_PART VALUES (2, 'b');
INSERT INTO SV_FOOBAR_PART VALUES (3, 'cc');
INSERT INTO SV_FOOBAR_PART VALUES (4, 'ddd');
INSERT INTO SV_FOOBAR_PART VALUES (5, 'eeee');
INSERT INTO SV_FOOBAR_PART VALUES (6, 'aaa');
INSERT INTO SV_FOOBAR_PART VALUES (7, 'bbb');
INSERT INTO SV_FOOBAR_PART VALUES (8, 'b');
INSERT INTO SV_FOOBAR_PART VALUES (9, 'cc');
INSERT INTO SV_FOOBAR_PART VALUES (10, 'dddd');
INSERT INTO SV_FOOBAR_PART VALUES (11, 'aaa');
INSERT INTO SV_FOOBAR_PART VALUES (12, 'f'); 
INSERT INTO SV_FOOBAR_PART VALUES (4, 'aaa');
INSERT INTO SV_FOOBAR_PART VALUES (6, 'bb');
INSERT INTO SV_FOOBAR_PART VALUES (7, 'ccc');
INSERT INTO SV_FOOBAR_PART VALUES (9, 'ddd');
INSERT INTO SV_FOOBAR_PART VALUES (12, 'ee');
INSERT INTO SV_FOOBAR_PART VALUES (1, 'eeee');
INSERT INTO SV_FOOBAR_PART VALUES (3, 'b');
INSERT INTO SV_FOOBAR_PART VALUES (7, 'f');

COMMIT;

--HOWEVER, ANALYZE does not support partition table, 
--all the statistics will not be collected and the related columns are NULL 
ANALYZE TABLE SV_FOOBAR_PART COMPUTE STATISTICS;
SELECT SLEEP(3) FROM DUAL;    -- make ANALYZE write statistics data into disk

SELECT TABLE_NAME, PARTITIONING_TYPE, PARTITION_COUNT, PARTITIONING_KEY_COUNT, STATUS 
FROM USER_PART_TABLES WHERE TABLE_NAME='SV_FOOBAR_PART';
SELECT OWNER, TABLE_NAME, PARTITIONING_TYPE, PARTITION_COUNT, PARTITIONING_KEY_COUNT, STATUS 
FROM ALL_PART_TABLES WHERE TABLE_NAME='SV_FOOBAR_PART';

SELECT INDEX_NAME, TABLE_NAME, BLEVEL, LEAF_BLOCKS, DISTINCT_KEYS, 
       ROUND(AVG_LEAF_BLOCKS_PER_KEY, 2), ROUND(AVG_DATA_BLOCKS_PER_KEY, 2), NUM_ROWS 
FROM USER_INDEXES WHERE TABLE_NAME='SV_FOOBAR_PART' ORDER BY INDEX_NAME;
SELECT INDEX_NAME, TABLE_NAME, BLEVEL, LEAF_BLOCKS, DISTINCT_KEYS, 
       ROUND(AVG_LEAF_BLOCKS_PER_KEY, 2), ROUND(AVG_DATA_BLOCKS_PER_KEY, 2), NUM_ROWS 
FROM ALL_INDEXES WHERE TABLE_NAME='SV_FOOBAR_PART' ORDER BY INDEX_NAME;

SELECT INDEX_NAME, COMPOSITE, PARTITION_NAME, PARTITION_POSITION, STATUS, 
BLEVEL, LEAF_BLOCKS, DISTINCT_KEYS, AVG_LEAF_BLOCKS_PER_KEY, AVG_DATA_BLOCKS_PER_KEY
FROM USER_IND_PARTITIONS WHERE INDEX_NAME='IX_SVFOOBAR_LOC' ORDER BY INDEX_NAME, PARTITION_POSITION;
SELECT COUNT(1) FROM USER_IND_PARTITIONS WHERE INDEX_NAME='IX_SVFOOBAR_GBL';  --GLOBAL index not in USER_IND_PARTITIONS
SELECT INDEX_NAME, COMPOSITE, PARTITION_NAME, PARTITION_POSITION, STATUS, 
BLEVEL, LEAF_BLOCKS, DISTINCT_KEYS, AVG_LEAF_BLOCKS_PER_KEY, AVG_DATA_BLOCKS_PER_KEY
FROM ALL_IND_PARTITIONS WHERE INDEX_NAME='IX_SVFOOBAR_LOC' ORDER BY INDEX_NAME, PARTITION_POSITION;
SELECT COUNT(1) FROM ALL_IND_PARTITIONS WHERE INDEX_NAME='IX_SVFOOBAR_GBL';  --GLOBAL index not in ALL_IND_PARTITIONS

SELECT TABLE_NAME, INDEX_NAME, PARTITION_NAME, PARTITION_POSITION, OBJECT_TYPE, 
BLEVEL, LEAF_BLOCKS, DISTINCT_KEYS, AVG_LEAF_BLOCKS_PER_KEY, AVG_DATA_BLOCKS_PER_KEY
FROM USER_IND_STATISTICS WHERE TABLE_NAME='SV_FOOBAR_PART' ORDER BY TABLE_NAME, INDEX_NAME, PARTITION_POSITION;
SELECT TABLE_NAME, TABLE_OWNER, INDEX_NAME, PARTITION_NAME, PARTITION_POSITION, OBJECT_TYPE, 
BLEVEL, LEAF_BLOCKS, DISTINCT_KEYS, AVG_LEAF_BLOCKS_PER_KEY, AVG_DATA_BLOCKS_PER_KEY
FROM ALL_IND_STATISTICS WHERE TABLE_NAME='SV_FOOBAR_PART' ORDER BY TABLE_NAME, INDEX_NAME, PARTITION_POSITION;

SELECT TABLE_NAME, PARTITION_NAME, PARTITION_POSITION, OBJECT_TYPE
FROM USER_TAB_STATISTICS WHERE TABLE_NAME='SV_FOOBAR_PART' ORDER BY PARTITION_NAME;
SELECT TABLE_NAME, PARTITION_NAME, PARTITION_POSITION, OBJECT_TYPE
FROM ALL_TAB_STATISTICS WHERE TABLE_NAME='SV_FOOBAR_PART' ORDER BY PARTITION_NAME;

DROP INDEX IF EXISTS IX_SVFOOBAR_LOC on SV_FOOBAR_PART;
DROP INDEX IF EXISTS IX_SVFOOBAR_GBL on SV_FOOBAR_PART;
DROP TABLE SV_FOOBAR_PART;

--DTS2018091300866
DROP TABLE IF EXISTS T_ALL_TAB_STATISTICS_001;
CREATE TABLE T_ALL_TAB_STATISTICS_001(ID INT,NAME VARCHAR(50),EMPNO INT,SALARY INT);
INSERT INTO T_ALL_TAB_STATISTICS_001 VALUES(1,'SMITH',100,5000);
INSERT INTO T_ALL_TAB_STATISTICS_001 VALUES(2,'ALLEN',200,3500);
INSERT INTO T_ALL_TAB_STATISTICS_001 VALUES(3,'JONES',100,5000);
INSERT INTO T_ALL_TAB_STATISTICS_001 VALUES(4,'MARTIN',300,4500);
INSERT INTO T_ALL_TAB_STATISTICS_001 VALUES(5,'SCOTT',300,8000);
INSERT INTO T_ALL_TAB_STATISTICS_001 VALUES(6,'KING',200,900);
INSERT INTO T_ALL_TAB_STATISTICS_001 VALUES(7,'TURNER',200,7000);
INSERT INTO T_ALL_TAB_STATISTICS_001 VALUES(8,'ADAMS',100,4000);
INSERT INTO T_ALL_TAB_STATISTICS_001 VALUES(9,'JAMES',200,6600);
INSERT INTO T_ALL_TAB_STATISTICS_001 VALUES(10,'FORD',200,5500);
COMMIT;
DROP TABLE IF EXISTS T_ALL_TAB_STATISTICS_001_PART;
CREATE TABLE T_ALL_TAB_STATISTICS_001_PART(ID INT,NAME VARCHAR(50),EMPNO INT,SALARY INT)
PARTITION BY LIST(EMPNO)(
PARTITION T_ALL_TAB_STATISTICS_PART_001 VALUES(100),
PARTITION T_ALL_TAB_STATISTICS_PART_002 VALUES(200),
PARTITION T_ALL_TAB_STATISTICS_PART_003 VALUES(300)
);
DROP TABLE IF EXISTS IND_ALL_IND_STATISTICS_001;
CREATE INDEX IND_ALL_IND_STATISTICS_001 ON T_ALL_TAB_STATISTICS_001_PART(EMPNO) LOCAL;
INSERT INTO T_ALL_TAB_STATISTICS_001_PART SELECT * FROM T_ALL_TAB_STATISTICS_001;
COMMIT;                       

SELECT TABLE_NAME,OWNER, PARTITION_NAME,PARTITION_POSITION,OBJECT_TYPE 
FROM ALL_TAB_STATISTICS WHERE TABLE_NAME='T_ALL_TAB_STATISTICS_001_PART' 
ORDER BY TABLE_NAME, OWNER ,PARTITION_NAME,PARTITION_POSITION,OBJECT_TYPE;

SELECT TABLE_NAME,PARTITION_NAME,PARTITION_POSITION,OBJECT_TYPE 
FROM USER_TAB_STATISTICS WHERE TABLE_NAME='T_ALL_TAB_STATISTICS_001_PART' 
ORDER BY TABLE_NAME,PARTITION_NAME,PARTITION_POSITION,OBJECT_TYPE;

SELECT INDEX_NAME,TABLE_OWNER,TABLE_NAME,PARTITION_NAME,PARTITION_POSITION,OBJECT_TYPE
FROM USER_IND_STATISTICS WHERE TABLE_NAME='T_ALL_TAB_STATISTICS_001_PART' 
ORDER BY INDEX_NAME,TABLE_OWNER,TABLE_NAME,PARTITION_NAME,PARTITION_POSITION,OBJECT_TYPE;

SELECT INDEX_NAME,TABLE_OWNER,TABLE_NAME,PARTITION_NAME,PARTITION_POSITION,OBJECT_TYPE
FROM ALL_IND_STATISTICS WHERE TABLE_NAME='T_ALL_TAB_STATISTICS_001_PART' 
ORDER BY INDEX_NAME,TABLE_OWNER,TABLE_NAME,PARTITION_NAME,PARTITION_POSITION,OBJECT_TYPE;

DROP TABLE T_ALL_TAB_STATISTICS_001_PART;
DROP TABLE T_ALL_TAB_STATISTICS_001;

SELECT OWNER FROM V$DB_OBJECT_CACHE WHERE NAME='SYS_TABLES';


--TEST PL DTS2018101801642
DROP TABLE IF EXISTS SYSVIEW_T1;
CREATE TABLE SYSVIEW_T1(A INT);
CREATE OR REPLACE PROCEDURE SYSVIEW_P1(A INT)
AS
C INT;
BEGIN
	SELECT COUNT(*) INTO C FROM DUAL;
END;
/

SELECT COUNT(*) FROM USER_PROCEDURES WHERE OBJECT_NAME='SYSVIEW_P1';
SELECT COUNT(*) FROM USER_SOURCE WHERE NAME='SYSVIEW_P1';

DROP TABLE SYSVIEW_T1;

SELECT COUNT(*) FROM USER_PROCEDURES WHERE OBJECT_NAME='SYSVIEW_P1';
SELECT COUNT(*) FROM USER_SOURCE WHERE NAME='SYSVIEW_P1';

DROP PROCEDURE SYSVIEW_P1;
SELECT COUNT(*) FROM USER_PROCEDURES WHERE OBJECT_NAME='SYSVIEW_P1';
SELECT COUNT(*) FROM USER_SOURCE WHERE NAME='SYSVIEW_P1';

select DESCRIPTION from v$temp_pool where name= 'free pages';

desc V$PL_REFSQLS
desc V$PL_MANAGER

desc V$HA_SYNC_INFO

select 1 from (select count(1) from (select * from v$sqlarea));
select 1 from (select count(1) from (select * from v$pl_manager));

select range from v$parameter where name='SESSIONS';

--DTS2019010909064  security test: ALL_IND_STATISTICS ALL_TAB_MODIFICATIONS not allow to normal user
drop user if exists anquantest_view;
create user anquantest_view identified by Cantian_123;
grant connect to anquantest_view;
conn anquantest_view/Cantian_123@127.0.0.1:1611
select * from      ALL_IND_STATISTICS;--error
select * from      ALL_TAB_MODIFICATIONS;--error

conn / as sysdba
DROP USER if exists test_dv_users1;
DROP USER if exists test_dv_users2;
CREATE TABLESPACE TEST_DV_USER_SPACE DATAFILE 'TEST_DV_USER_SPACE' SIZE 32M;
CREATE PROFILE TEST_DV_USER_PROFILE LIMIT PASSWORD_GRACE_TIME 10 PASSWORD_LOCK_TIME DEFAULT PASSWORD_LIFE_TIME UNLIMITED;
create user test_dv_users1 identified by cantian_234 DEFAULT TABLESPACE TEST_DV_USER_SPACE profile TEST_DV_USER_PROFILE;
create user test_dv_users2 identified by cantian_234 PASSWORD EXPIRE PERMANENT;
select USERNAME,ACCOUNT_STATUS,FAILED_LOGINS,PROFILE,DATA_TABLESPACE,TEMPORARY_TABLESPACE from dv_users where username like 'TEST_DV_USERS%' ORDER BY USERNAME;
ALTER USER test_dv_users1 PASSWORD EXPIRE;
ALTER USER test_dv_users2 ACCOUNT LOCK;
ALTER USER test_dv_users2 profile TEST_DV_USER_PROFILE;
ALTER USER test_dv_users2 DEFAULT TABLESPACE TEST_DV_USER_SPACE;
select USERNAME,ACCOUNT_STATUS,FAILED_LOGINS,PROFILE,DATA_TABLESPACE,TEMPORARY_TABLESPACE from dv_users where username like 'TEST_DV_USERS%' ORDER BY USERNAME;
DROP USER test_dv_users1 CASCADE;
DROP USER test_dv_users2 CASCADE;
DROP PROFILE TEST_DV_USER_PROFILE CASCADE;
DROP TABLESPACE TEST_DV_USER_SPACE INCLUDING CONTENTS AND DATAFILES;

drop user if exists TEST_EXP_USER;
create PROFILE profile_test_user LIMIT PASSWORD_GRACE_TIME 2 PASSWORD_LOCK_TIME 1 PASSWORD_LIFE_TIME 0.0001;
create user TEST_EXP_USER identified by cantian_234 profile profile_test_user;
GRANT DBA TO TEST_EXP_USER;
select USERNAME,ACCOUNT_STATUS,EXPIRE_TIME from dv_users where username='TEST_EXP_USER';
SELECT SLEEP(15) FROM SYS_DUMMY;
CONN  TEST_EXP_USER/cantian_234@127.0.0.1:1611
select USERNAME,ACCOUNT_STATUS,EXPIRE_TIME from dv_users where username='TEST_EXP_USER';
CONN / AS SYSDBA
SELECT NAME,ASTATUS,EXPTIME FROM SYS_USERS WHERE NAME ='TEST_EXP_USER';
drop user TEST_EXP_USER CASCADE;
DROP PROFILE profile_test_user CASCADE;



